<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FM.LiveSwitch</name>
    </assembly>
    <members>
        <member name="T:FM.LiveSwitch.BitrateMonitor">
            <summary>
            A bitrate monitor.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateMonitor.SystemClock">
            <summary>
            Gets the system clock.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateMonitor.Bitrate">
            <summary>
            Gets the bitrate, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateMonitor.SmoothedBitrate">
            <summary>
            Gets the smoothed bitrate, in kbps.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BitrateMonitor.#ctor(FM.LiveSwitch.ISystemClock)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BitrateMonitor"/> class.
            </summary>
            <param name="systemClock">The system clock.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitrateMonitor.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BitrateMonitor.Update(System.Int64)">
            <summary>
            Adds a sample. This sample should be the total
            bits sent (or received) over the lifetime of the
            owning class. A sample should be added every time
            a packet is sent (or received).
            </summary>
            <param name="bitCount">The new bit count.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitrateMonitor.TestBitrate(System.Int64)">
            <summary>
            Returns the new bitrate if a new sample is added.
            </summary>
            <param name="bitCount">The new bit count.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitrateMonitor.TestSmoothedBitrate(System.Int64)">
            <summary>
            Returns the new bitrate if a new sample is added.
            </summary>
            <param name="bitCount">The new bit count.</param>
        </member>
        <member name="T:FM.LiveSwitch.BitrateQueue">
            <summary>
            A bitrate queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateQueue.Bitrate">
            <summary>
            Gets or sets the bitrate, in kbps,
            allowed through the queue.
            A value of -1 indicates no limit.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateQueue.MaxBytes">
            <summary>
            Gets or sets the maximum number of bytes
            allowed in the queue before discarding.
            A value of -1 indicates no limit.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.BitrateQueue.OnDequeue">
            <summary>
            Raised when a buffer is ready to be processed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BitrateQueue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BitrateQueue"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BitrateQueue.#ctor(FM.LiveSwitch.ISystemClock)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BitrateQueue"/> class.
            </summary>
            <param name="systemClock">The system clock.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitrateQueue.Enqueue(FM.LiveSwitch.DataBuffer,System.String,System.Int32,System.Object)">
            <summary>
            Pushes a buffer to the queue.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
            <param name="state">The state.</param>
            <returns><c>true</c> if the buffer was queued; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateQueue.Destroy">
            <summary>
            Destroys this queue.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.BouncyCastle.EcdsaCrypto">
            <summary>
            Elliptic-curve-based cryptographic functions.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BouncyCastle.EcdsaCrypto.CreateKey(FM.LiveSwitch.EcdsaNamedCurve)">
            <summary>
            Creates an ECDSA key.
            </summary>
            <param name="namedCurve">The named curve.</param>
            <returns>An ECDSA key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BouncyCastle.EcdsaCrypto.Sign(System.Byte[],FM.LiveSwitch.EcdsaKey)">
            <summary>
            Signs data using a specified key.
            </summary>
            <param name="data">The data.</param>
            <param name="privateKey">The private key.</param>
            <returns>
            The output byte array.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.BouncyCastle.EcdsaCrypto.Verify(System.Byte[],System.Byte[],FM.LiveSwitch.EcdsaKey)">
            <summary>
            Verifies a signature using a specified key and data.
            </summary>
            <param name="data">The data.</param>
            <param name="signature">The input signature.</param>
            <param name="publicKey">The public key.</param>
            <returns>
              <c>true</c> if the signature is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.CryptoLibrary">
            <summary>
            A crypto library.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CryptoLibrary.BouncyCastle">
            <summary>
            Indicates that the BouncyCastle library should be used.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataBufferPoolTracer">
            <summary>
            A data buffer pool tracer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPoolTracer.Pool">
            <summary>
            Gets the underlying pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPoolTracer.Tag">
            <summary>
            Gets the tag that identifies requests to the underlying pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPoolTracer.Statistics">
            <summary>
            Gets the traced usage statistics.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPoolTracer.#ctor(System.String,FM.LiveSwitch.DataBufferPool)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBufferPoolTracer"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPoolTracer.Take(System.Int32)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPoolTracer.Take(System.Int32,System.Boolean)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
            <param name="littleEndian">Whether the data buffer should be little-endian.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPoolTracer.Take(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
            <param name="littleEndian">Whether the data buffer should be little-endian.</param>
            <param name="clearBytes">Whether to clear the data buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.IDataBufferPool">
            <summary>
            A data buffer pool interface.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IDataBufferPool.Take(System.Int32)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
        </member>
        <member name="M:FM.LiveSwitch.IDataBufferPool.Take(System.Int32,System.Boolean)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
            <param name="littleEndian">Whether the data buffer should be little-endian.</param>
        </member>
        <member name="M:FM.LiveSwitch.IDataBufferPool.Take(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
            <param name="littleEndian">Whether the data buffer should be little-endian.</param>
            <param name="clearBytes">Whether to clear the data buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.IDispatchQueue`1">
            <summary>
            A dispatch queue interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IDispatchQueue`1.QueueCount">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IDispatchQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item for processing.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FM.LiveSwitch.IDispatchQueue`1.Destroy">
            <summary>
            Destroys the queue.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ISystemClock">
            <summary>
            A system clock interface.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ISystemClock.GetTimestamp">
            <summary>
            Gets the current system timestamp in ticks.
            10,000 ticks is equal to 1 millisecond.
            </summary>
            <returns>The current system timestamp in ticks.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ManagedAutoReleasePool">
            <summary>
            Managed auto-release pool.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedAutoReleasePool.LoopBegin">
            <summary>
            Should be invoked when the loop begins before other code.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedAutoReleasePool.LoopEnd">
            <summary>
            Should be invoked when the loop ends after other code.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.PendingPromise">
            <summary>
            Pending promise and result.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.SystemClock">
            <summary>
            A system clock.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SystemClock.GetTimestamp">
            <summary>
            Gets the current system timestamp in ticks.
            10,000 ticks is equal to 1 millisecond.
            </summary>
            <returns>The current system timestamp in ticks.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ThreadDispatchQueue`1">
            <summary>
            A single-thread dispatch queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ThreadDispatchQueue`1.QueueCount">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ThreadDispatchQueue`1.#ctor(FM.LiveSwitch.Action1{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ThreadDispatchQueue`1"/> class.
            </summary>
            <param name="action">The processing action.</param>
        </member>
        <member name="M:FM.LiveSwitch.ThreadDispatchQueue`1.Destroy">
            <summary>
            Destroys the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ThreadDispatchQueue`1.WaitForCompletion">
            <summary>
            Blocks until the queue is empty.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ThreadDispatchQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item for processing.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:FM.LiveSwitch.EcdsaCrypto">
            <summary>
            Elliptic-curve-based cryptographic functions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EcdsaCrypto.DefaultNamedCurve">
            <summary>
            Gets or sets the default curve.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaCrypto.CreateKey">
            <summary>
            Creates an ECDSA key.
            </summary>
            <returns>An ECDSA key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaCrypto.CreateKey(FM.LiveSwitch.EcdsaNamedCurve)">
            <summary>
            Creates an ECDSA key.
            </summary>
            <param name="namedCurve">The named curve.</param>
            <returns>An ECDSA key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaCrypto.Sign(System.Byte[],FM.LiveSwitch.EcdsaKey)">
            <summary>
            Signs data using a specified key.
            </summary>
            <param name="data">The data.</param>
            <param name="privateKey">The private key.</param>
            <returns>
            The output byte array.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaCrypto.Verify(System.Byte[],System.Byte[],FM.LiveSwitch.EcdsaKey)">
            <summary>
            Verifies a signature using a specified key and data.
            </summary>
            <param name="data">The data.</param>
            <param name="signature">The input signature.</param>
            <param name="publicKey">The public key.</param>
            <returns>
              <c>true</c> if the signature is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.MD5Managed">
            <summary>
            MD5Managed: A HashAlgorithm implementation that acts as a thin wrapper
            around a C# translation of the MD5 reference implementation. The C code
            has been translated as closely as possible so that most of the original
            structure remains and comparisons between the two are straightforward.
            </summary>
            <remarks>
            Derived from the RSA Data Security, Inc. MD5 Message-Digest Algorithm.
            
            Specification:
            RFC1321 - The MD5 Message-Digest Algorithm
            http://www.faqs.org/rfcs/rfc1321.html
            
            Original license:
            Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
            rights reserved.
            
            License to copy and use this software is granted provided that it
            is identified as the "RSA Data Security, Inc. MD5 Message-Digest
            Algorithm" in all material mentioning or referencing this software
            or this function.
            
            License is also granted to make and use derivative works provided
            that such works are identified as "derived from the RSA Data
            Security, Inc. MD5 Message-Digest Algorithm" in all material
            mentioning or referencing the derived work.
            
            RSA Data Security, Inc. makes no representations concerning either
            the merchantability of this software or the suitability of this
            software for any particular purpose. It is provided "as is"
            without express or implied warranty of any kind.
            
            These notices must be retained in any copies of any part of this
            documentation and/or software.
            </remarks>
            
        </member>
        <member name="M:FM.LiveSwitch.MD5Managed.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MD5Managed.Initialize">
            <summary>
            Initializes internal state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MD5Managed.InitializeVariables">
            <summary>
            Initializes variables.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MD5Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the hash code with the data provided.
            </summary>
            <param name="array">Data to hash.</param>
            <param name="ibStart">Start position.</param>
            <param name="cbSize">Number of bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.MD5Managed.HashFinal">
            <summary>
            Finalizes the hash code and returns it.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.MD5Managed.Hash">
            <summary>
            Returns the hash as an array of bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MD5Managed.HashSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Native">
            <summary>
            Base class for native interop.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Native.AllocCallbackDelegate">
            <summary>
            An alloc callback delegate.
            </summary>
            <param name="size">The size.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Native.ReleaseCallbackDelegate">
            <summary>
            A release callback delegate.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.ErrorLogCallbackDelegate">
            <summary>
            An error log callback delegate.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.WarnLogCallbackDelegate">
            <summary>
            A warn log callback delegate.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.InfoLogCallbackDelegate">
            <summary>
            An info log callback delegate.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.DebugLogCallbackDelegate">
            <summary>
            A debug log callback delegate.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.ErrorLogWithScopeCallbackDelegate">
            <summary>
            An error log with scope callback delegate.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.WarnLogWithScopeCallbackDelegate">
            <summary>
            A warn log with scope callback delegate.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.InfoLogWithScopeCallbackDelegate">
            <summary>
            An info log with scope callback delegate.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.DebugLogWithScopeCallbackDelegate">
            <summary>
            A debug log with scope callback delegate.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="F:FM.LiveSwitch.Native.AllocCallback">
            <summary>
            A static alloc callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.Alloc64Callback">
            <summary>
            A static alloc callback (64-bit aligned).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.ReleaseCallback">
            <summary>
            A static release callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.ErrorLogCallback">
            <summary>
            A static error log callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.WarnLogCallback">
            <summary>
            A static warn log callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.InfoLogCallback">
            <summary>
            A static info log callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.DebugLogCallback">
            <summary>
            A static debug log callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.ErrorLogWithScopeCallback">
            <summary>
            A static error log with scope callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.WarnLogWithScopeCallback">
            <summary>
            A static warn log with scope callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.InfoLogWithScopeCallback">
            <summary>
            A static info log with scope callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.DebugLogWithScopeCallback">
            <summary>
            A static debug log with scope callback.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Native.Alloc64Align(System.Int32)">
            <summary>
            Allocates 64-bit aligned memory from the data buffer pool.
            </summary>
            <param name="size">The number of bytes to allocate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Native.Alloc(System.Int32)">
            <summary>
            Allocates memory from the data buffer pool.
            </summary>
            <param name="size">The number of bytes to allocate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Native.Release(System.IntPtr)">
            <summary>
            Releases memory to the data buffer pool.
            </summary>
            <param name="pointer">The native pointer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.PullBuffer(System.IntPtr)">
            <summary>
            Gets the data buffer associated with a pointer.
            This buffer MUST be freed later.
            </summary>
            <param name="pointer">The native pointer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Native.ErrorLog(System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.WarnLog(System.String)">
            <summary>
            Logs a warn message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.InfoLog(System.String)">
            <summary>
            Logs an info message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.DebugLog(System.String)">
            <summary>
            Logs a debug message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.ErrorLogWithScope(System.String,System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.WarnLogWithScope(System.String,System.String)">
            <summary>
            Logs a warn message.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.InfoLogWithScope(System.String,System.String)">
            <summary>
            Logs an info message.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.DebugLogWithScope(System.String,System.String)">
            <summary>
            Logs a debug message.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.ProxyCredentialsCache">
            <summary>
            Proxy credentials cache.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ProxyCredentialsCache.Cache">
            <summary>
            Gets the underlying cache.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ProxyCredentialsCache.DefaultCredentials">
            <summary>
            Gets or sets the default credentials.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentialsCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ProxyCredentialsCache"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentialsCache.GetCredentials(System.String)">
            <summary>
            Gets the proxy credentials for the given proxy IP address.
            </summary>
            <param name="proxyIPAddress">The proxy IP address.</param>
            <returns>The proxy credentials, if they exist, or <c>null</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentialsCache.SetCredentials(System.String,FM.LiveSwitch.ProxyCredentials)">
            <summary>
            Sets the proxy credentials for the given proxy IP address.
            </summary>
            <param name="proxyIPAddress">The proxy IP address.</param>
            <param name="proxyCredentials">The proxy credentials.</param>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentialsCache.SetCredentials(System.String[],FM.LiveSwitch.ProxyCredentials)">
            <summary>
            Sets the proxy credentials for the given proxy IP addresss.
            </summary>
            <param name="proxyIPAddresses">The proxy IP addresses.</param>
            <param name="proxyCredentials">The proxy credentials.</param>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentialsCache.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentialsCache.ToJson(FM.LiveSwitch.ProxyCredentialsCache)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentialsCache.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The serialized JSON.</param>
            <returns>The instance.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ProxyCredentials">
            <summary>
            Proxy credentials.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ProxyCredentials.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ProxyCredentials.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentials.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ProxyCredentials"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentials.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentials.ToJson(FM.LiveSwitch.ProxyCredentials)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentials.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The serialized JSON.</param>
            <returns>The instance.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ProxyAuthCheckResult">
            <summary>
            Proxy authentication check result.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ProxyAuthCheckResult.NeedsAuthentication">
            <summary>
            Gets or sets whether the proxy needs authentication.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ProxyAuthCheckResult.ProxyIPAddress">
            <summary>
            Gets or sets the first proxy IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ProxyAuthCheckResult.ProxyIPAddresses">
            <summary>
            Gets or sets the proxy IP addresses.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ProxyAuthCheckResult.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ProxyAuthCheckResult"/> class.
            </summary>
            <param name="needsAuthentication">Whether the proxy needs authentication.</param>
            <param name="proxyIPAddresses">The proxy IP addresses.</param>
        </member>
        <member name="T:FM.LiveSwitch.Proxy">
            <summary>
            Proxy utility methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Proxy.GetCredentials(System.String)">
            <summary>
            Gets the proxy credentials for the given proxy IP address.
            </summary>
            <param name="proxyIPAddress">The proxy IP address.</param>
            <returns>The proxy credentials, if they exist, or <c>null</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Proxy.SetCredentials(System.String,FM.LiveSwitch.ProxyCredentials)">
            <summary>
            Sets the proxy credentials for the given proxy IP address.
            </summary>
            <param name="proxyIPAddress">The proxy IP address.</param>
            <param name="proxyCredentials">The proxy credentials.</param>
        </member>
        <member name="M:FM.LiveSwitch.Proxy.SetCredentials(System.String[],FM.LiveSwitch.ProxyCredentials)">
            <summary>
            Sets the proxy credentials for the given proxy IP addresss.
            </summary>
            <param name="proxyIPAddresses">The proxy IP addresses.</param>
            <param name="proxyCredentials">The proxy credentials.</param>
        </member>
        <member name="M:FM.LiveSwitch.Proxy.ImportCredentials(System.String)">
            <summary>
            Imports credentials from JSON.
            </summary>
            <param name="credentialsJson">The credentials in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Proxy.ExportCredentials">
            <summary>
            Exports the credentials to JSON.
            </summary>
            <returns>The credentials in JSON format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Proxy.AuthCheck(System.String)">
            <summary>
            Checks if proxy authentication is required to access a given URL.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="T:FM.LiveSwitch.Action0">
            <summary>
            Generic method signature for callbacks with no parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action1`1">
            <summary>
            Generic method signature for callbacks with one parameter.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action10`10">
            <summary>
            Generic method signature for callbacks with ten parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action2`2">
            <summary>
            Generic method signature for callbacks with two parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action3`3">
            <summary>
            Generic method signature for callbacks with three parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action4`4">
            <summary>
            Generic method signature for callbacks with four parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action5`5">
            <summary>
            Generic method signature for callbacks with five parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action6`6">
            <summary>
            Generic method signature for callbacks with six parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action7`7">
            <summary>
            Generic method signature for callbacks with seven parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action8`8">
            <summary>
            Generic method signature for callbacks with eight parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action9`9">
            <summary>
            Generic method signature for callbacks with nice parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.AddressType">
            <summary>
            Address types.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.AddressType.IPv4">
            <summary>
            Indicates an IP version 4 address.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.AddressType.IPv6">
            <summary>
            Indicates an IP version 6 address.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.AddressType.Unknown">
            <summary>
            Indicates an unknown address type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ascii">
            <summary>
            ASCII encoding/decoding utility.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ascii.Encode(System.String)">
            <summary>
            Encodes a string to a UTF-8 byte array.
            </summary>
            <param name="input">The input string.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Ascii.GetByteCount(System.String)">
            <summary>
            Gets the number of bytes that would be returned by
            a call to encode.
            </summary>
            <param name="input">The input string.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Ascii.Decode(System.Byte[])">
            <summary>
            Decodes a UTF-8 byte array to a string.
            </summary>
            <param name="input">The input byte array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Ascii.Decode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes a UTF-8 byte array to a string.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="index">The index to start reading.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Any">
            <summary>
            An ASN.1 "any".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Any.SourceData">
            <summary>
            Gets the source data.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.GetBytes">
            <summary>
            Gets the bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.GetBuffer">
            <summary>
            Gets the buffer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.GetBytes(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Gets the bytes.
            </summary>
            <param name="any">Any.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.GetBuffer(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Gets the buffer.
            </summary>
            <param name="any">Any.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.ParseBytes(System.Byte[])">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.ParseBuffer(FM.LiveSwitch.DataBuffer)">
            <summary>
            Parses the buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.ParseBytes(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="byteCount">The byte count.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.ParseBuffer(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="byteCount">The byte count.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Pad(System.Byte[],System.Int32)">
            <summary>
            Pads the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Pad(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pads the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="length">The length.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Trim(System.Byte[])">
            <summary>
            Trims the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Trim(System.Byte[],System.Int32)">
            <summary>
            Trims the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="minLength">The minimum length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Trim(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Trims the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Encode128(System.Byte[])">
            <summary>
            Encodes a value (base 128).
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128(System.Byte[])">
            <summary>
            Decodes a value (base 128).
            </summary>
            <param name="encoded">The encoded data.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes a value (base 128).
            </summary>
            <param name="encoded">The encoded data.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.GetLength128(System.Byte[],System.Int32)">
            <summary>
            Gets the length (base 128).
            </summary>
            <param name="encoded">The encoded data.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Encode128Long(System.Int64)">
            <summary>
            Encodes a length (base 128).
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128Long(System.Byte[])">
            <summary>
            Decodes a length (base 128).
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128Long(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes a length (base 128).
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Encode128Integer(System.Int32)">
            <summary>
            Encodes an integer (base 128).
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128Integer(System.Byte[])">
            <summary>
            Decodes an integer (base 128).
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128Integer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes an integer (base 128).
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Encode128Short(System.Int16)">
            <summary>
            Encodes a short (base 128).
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128Short(System.Byte[])">
            <summary>
            Decodes a short (base 128).
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128Short(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes a short (base 128).
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.SerializeTimestamp(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Serializes a timestamp.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="yearLength">Length of the year.</param>
            <param name="monthLength">Length of the month.</param>
            <param name="dayLength">Length of the day.</param>
            <param name="hourLength">Length of the hour.</param>
            <param name="minuteLength">Length of the minute.</param>
            <param name="secondLength">Length of the second.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.DeserializeTimestamp(System.String)">
            <summary>
            Deserializes a timestamp.
            </summary>
            <param name="timestampString">The timestamp string.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Array">
            <summary>
            An ASN.1 array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Array.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.ArrayElement">
            <summary>
            An ASN.1 array element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.ArrayElement.Optional">
            <summary>
            Gets or sets a value indicating whether this element is optional.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.ArrayElement.Default">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.ArrayElement.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ArrayElement.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.ArrayElement"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ArrayElement.#ctor(System.Type,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.ArrayElement"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="defaultt">The default value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ArrayElement.#ctor(System.Type,System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.ArrayElement"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="defaultt">The default value.</param>
            <param name="optional">Whether this element is optional.</param>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.ArrayOf`1">
            <summary>
            An ASN.1 typed array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.ArrayOf`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.BitString">
            <summary>
            An ASN.1 bit string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.BitString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.BitString.ValueBytes">
            <summary>
            Gets or sets the value bytes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BitString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.BitString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BitString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.BitString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BitString.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.BitString"/> class.
            </summary>
            <param name="valueBytes">The value bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BitString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BitString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BitString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.BmpString">
            <summary>
            ASN.1 BMP (basic multilingual plane) string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.BmpString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BmpString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.BmpString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BmpString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.BmpString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BmpString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BmpString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BmpString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Boolean">
            <summary>
            An ASN.1 boolean.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Boolean.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Boolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Boolean"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Boolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Boolean"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Boolean.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Boolean.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Boolean.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Class">
            <summary>
            ASN.1 class constants.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.Class.Universal">
            <summary>
            Indicates a universal class.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.Class.Application">
            <summary>
            Indicates an application class.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.Class.ContextSpecific">
            <summary>
            Indicates a context-specific class.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.Class.Private">
            <summary>
            Indicates a private class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Explicit`1">
            <summary>
            An ASN.1 explicit value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Explicit`1.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Explicit`1.Klass">
            <summary>
            Gets or sets the class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Explicit`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Explicit`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Explicit`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Explicit`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Explicit`1"/> class.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Explicit`1.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Explicit`1.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Explicit`1.Wrap``1(System.Int32,``0)">
            <summary>
            Wraps an explicit value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.GeneralizedTime">
            <summary>
            An ASN.1 generalized time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.GeneralizedTime.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralizedTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.GeneralizedTime"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralizedTime.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.GeneralizedTime"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralizedTime.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralizedTime.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralizedTime.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.GeneralString">
            <summary>
            An ASN.1 general string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.GeneralString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.GeneralString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.GeneralString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.GraphicString">
            <summary>
            An ASN.1 graphic string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.GraphicString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GraphicString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.GraphicString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GraphicString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.GraphicString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GraphicString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GraphicString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GraphicString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Ia5String">
            <summary>
            An ASN.1 IA5 (ASCII) string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Ia5String.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Ia5String.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Ia5String"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Ia5String.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Ia5String"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Ia5String.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Ia5String.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Ia5String.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Implicit`1">
            <summary>
            An ASN.1 implicit value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Implicit`1.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Implicit`1.Klass">
            <summary>
            Gets or sets the class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Implicit`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Implicit`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Implicit`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Implicit`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Implicit`1"/> class.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The klass.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Implicit`1.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Implicit`1.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Implicit`1.Wrap``1(System.Int32,``0)">
            <summary>
            Wraps an implicit value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Integer">
            <summary>
            An ASN.1 integer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Integer.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Integer.LongValue">
            <summary>
            Gets or sets the long value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Integer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Integer"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Integer.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Integer"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Integer.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Integer"/> class.
            </summary>
            <param name="longValue">The long value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Integer.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Integer.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Integer.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Null">
            <summary>
            An ASN.1 null value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Null.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Null.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Null.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.NumericString">
            <summary>
            An ASN.1 numeric string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.NumericString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.NumericString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.NumericString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.NumericString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.NumericString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.NumericString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.NumericString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.NumericString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.ObjectIdentifier">
            <summary>
            An ASN.1 object identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.ObjectIdentifier.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ObjectIdentifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.ObjectIdentifier"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ObjectIdentifier.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.ObjectIdentifier"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ObjectIdentifier.AreEqual(System.Int64[],System.Int64[])">
            <summary>
            Checks if two long arrays are equal.
            </summary>
            <param name="values1">The first long array.</param>
            <param name="values2">The second long array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ObjectIdentifier.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ObjectIdentifier.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ObjectIdentifier.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ObjectIdentifier.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.OctetString">
            <summary>
            An ASN.1 octet string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.OctetString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.OctetString.ValueBytes">
            <summary>
            Gets or sets the value bytes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.OctetString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.OctetString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.OctetString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.OctetString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.OctetString.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.OctetString"/> class.
            </summary>
            <param name="valueBytes">The value bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.OctetString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.OctetString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.OctetString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.PrintableString">
            <summary>
            An ASN.1 printable string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.PrintableString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.PrintableString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.PrintableString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.PrintableString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.PrintableString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.PrintableString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.PrintableString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.PrintableString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Sequence">
            <summary>
            An ASN.1 sequence.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Sequence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Sequence"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Sequence.#ctor(FM.LiveSwitch.Asn1.Any[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Sequence"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Sequence.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Sequence.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Sequence.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.SequenceElement">
            <summary>
            An ASN.1 sequence element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.SequenceElement.Optional">
            <summary>
            Gets or sets a value indicating whether this element is optional.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.SequenceElement.Default">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.SequenceElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SequenceElement.#ctor(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SequenceElement"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SequenceElement.#ctor(FM.LiveSwitch.Asn1.Any,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SequenceElement"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultt">The default value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SequenceElement.#ctor(FM.LiveSwitch.Asn1.Any,System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SequenceElement"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultt">The default value.</param>
            <param name="optional">Whether this element is optional.</param>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.SequenceOf`1">
            <summary>
            An ASN.1 typed sequence.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SequenceOf`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SequenceOf`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SequenceOf`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SequenceOf`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SequenceOf`1.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SequenceOf`1.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Set">
            <summary>
            An ASN.1 set.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Set.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Set"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Set.#ctor(FM.LiveSwitch.Asn1.Any[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Set"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Set.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Set.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Set.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.SetElement">
            <summary>
            An ASN.1 set element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.SetElement.Optional">
            <summary>
            Gets or sets a value indicating whether this element is optional.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.SetElement.Default">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.SetElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SetElement.#ctor(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SetElement"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SetElement.#ctor(FM.LiveSwitch.Asn1.Any,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SetElement"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultt">The default value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SetElement.#ctor(FM.LiveSwitch.Asn1.Any,System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SetElement"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultt">The default value.</param>
            <param name="optional">Whether this element is optional.</param>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.SetOf`1">
            <summary>
            An ASN.1 typed set.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SetOf`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SetOf`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SetOf`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SetOf`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SetOf`1.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SetOf`1.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.UniversalString">
            <summary>
            An ASN.1 universal string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.UniversalString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UniversalString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.UniversalString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UniversalString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.UniversalString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UniversalString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UniversalString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UniversalString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.UniversalTag">
            <summary>
            ASN.1 universal tag constants.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.BooleanType">
            <summary>
            Indicates a boolean type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.IntegerType">
            <summary>
            Indicates an integer type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.BitStringType">
            <summary>
            Indicates a bit-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.OctetStringType">
            <summary>
            Indicates an octet-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.NullType">
            <summary>
            Indicates a null type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.ObjectIdentifierType">
            <summary>
            Indicates an object-identifier type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.ObjectDescriptorType">
            <summary>
            Indicates an object-descriptor type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.ExternalType">
            <summary>
            Indicates an external type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.RealType">
            <summary>
            Indicates a real type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.EnumeratedType">
            <summary>
            Indicates an enumerated type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.EmbeddedPdvType">
            <summary>
            Indicates an embedded-PDV type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.Utf8StringType">
            <summary>
            Indicates a UTF8-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.RelativeOidType">
            <summary>
            Indicates a relative-OID type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.SequenceType">
            <summary>
            Indicates a sequence or sequence-of type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.SetType">
            <summary>
            Indicates a set or set-of type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.NumericStringType">
            <summary>
            Indicates a numeric-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.PrintableStringType">
            <summary>
            Indicates a printable-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.TeletexStringType">
            <summary>
            Indicates a Teletex-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.VideotexStringType">
            <summary>
            Indicates a Videotex-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.Ia5StringType">
            <summary>
            Indicates an IA5-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.UtcTimeType">
            <summary>
            Indicates a UTC-time type type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.GeneralizedTimeType">
            <summary>
            Indicates a generalized-time type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.GraphicStringType">
            <summary>
            Indicates a graphic-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.VisibleStringType">
            <summary>
            Indicates a visible-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.GeneralStringType">
            <summary>
            Indicates a general-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.UniversalStringType">
            <summary>
            Indicates a universal-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.CharacterStringType">
            <summary>
            Indicates a character-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.BmpStringType">
            <summary>
            Indicates a BMP-string type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Unknown">
            <summary>
            An ASN.1 unknown value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Unknown.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Unknown.Klass">
            <summary>
            Gets or sets the class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Unknown.IsConstructed">
            <summary>
            Gets or sets a value indicating whether this is a constructed encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Unknown.IsIndefinite">
            <summary>
            Gets or sets a value indicating whether this is an indefinite-length encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Unknown.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Unknown.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Unknown"/> class.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The klass.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Unknown.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Unknown"/> class.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The klass.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Unknown.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Unknown.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Unknown.ParseContents(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The klass.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Unknown.Unwrap(FM.LiveSwitch.Asn1.Any,System.Int32@)">
            <summary>
            Unwraps an explicit or implicit value.
            </summary>
            <param name="any">The wrapped value.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.UtcTime">
            <summary>
            An ASN.1 UTC time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.UtcTime.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UtcTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.UtcTime" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UtcTime.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.UtcTime"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UtcTime.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UtcTime.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UtcTime.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Utf8String">
            <summary>
            An ASN.1 UTF-8 string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Utf8String.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Utf8String.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Utf8String"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Utf8String.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Utf8String"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Utf8String.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Utf8String.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Utf8String.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.VisibleString">
            <summary>
            An ASN.1 visible string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.VisibleString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.VisibleString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.VisibleString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.VisibleString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.VisibleString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.VisibleString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.VisibleString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.VisibleString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.AsymmetricKey">
            <summary>
            An asymmetric key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AsymmetricKey.HasPublic">
            <summary>
            Returns <c>true</c> if the key contains
            public information.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.AsymmetricKey.HasPrivate">
            <summary>
            Returns <c>true</c> if the key contains
            private information.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.AsymmetricKey.Type">
            <summary>
            Gets the key type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AsymmetricKey.CreateKey(FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Creates a key.
            </summary>
            <param name="keyType">The key type.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.AsymmetricKeyType">
            <summary>
            Asymmetric key types.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.AsymmetricKeyType.Rsa">
            <summary>
            Indicates an RSA key.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.AsymmetricKeyType.Ecdsa">
            <summary>
            Indicates an ECDSA key.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.AtomicMutex">
            <summary>
            A managed mutex.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AtomicMutex.IsLocked">
            <summary>
            Gets if the mutex is locked or not.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AtomicMutex.#ctor">
            <summary>
            Creates a new instance of an AtomicMutex.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AtomicMutex.TryLock">
            <summary>
            Tries to obtain a lock with this thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AtomicMutex.Release">
            <summary>
            Releases the lock.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.AtomicLong">
            <summary>
            A long that can be operatered on atomically.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AtomicLong.Value">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AtomicLong.#ctor(System.Int64)">
            <summary>
            Create a new AtomicLong with an initial value.
            </summary>
            <param name="initialValue"></param>
        </member>
        <member name="M:FM.LiveSwitch.AtomicLong.#ctor">
            <summary>
            Create a new AtomicLong with a initial value of 0.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AtomicLong.CompareAndSwap(System.Int64,System.Int64)">
            <summary>
            Compares two 64-bit signed integers for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="expected">The value to compare.</param>
            <param name="newValue">The value used to replace.</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AtomicLong.Add(System.Int64)">
            <summary>
            Atomically add a integer to the value.
            </summary>
            <param name="delta">The amount to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.AtomicLong.Subtract(System.Int64)">
            <summary>
            Atomically subtract a integer to the value.
            </summary>
            <param name="delta">The amount to subtract.</param>
        </member>
        <member name="M:FM.LiveSwitch.AtomicLong.Increment">
            <summary>
            Atomically increment the value by 1.
            </summary>
            <returns>The value incremented by 1.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AtomicLong.Decrement">
            <summary>
            Atomically decrement the value by 1.
            </summary>
            <returns>The value decremented by one.</returns>
        </member>
        <member name="T:FM.LiveSwitch.AtomicInteger">
            <summary>
            A integer that can be operatered on atomically.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AtomicInteger.Value">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AtomicInteger.#ctor(System.Int32)">
            <summary>
            Create a new AtomicInteger with an initial value.
            </summary>
            <param name="initialValue"></param>
        </member>
        <member name="M:FM.LiveSwitch.AtomicInteger.#ctor">
            <summary>
            Create a new AtomicInteger with a initial value of 0.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AtomicInteger.CompareAndSwap(System.Int32,System.Int32)">
            <summary>
            Compares two 32-bit signed integers for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="expected">The value to compare.</param>
            <param name="newValue">The value used to replace.</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AtomicInteger.Add(System.Int32)">
            <summary>
            Atomically add a integer to the value.
            </summary>
            <param name="delta">The amount to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.AtomicInteger.Subtract(System.Int32)">
            <summary>
            Atomically subtract a integer to the value.
            </summary>
            <param name="delta">The amount to subtract.</param>
        </member>
        <member name="M:FM.LiveSwitch.AtomicInteger.Increment">
            <summary>
            Atomically increment the value by 1.
            </summary>
            <returns>The value incremented by 1.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AtomicInteger.Decrement">
            <summary>
            Atomically decrement the value by 1.
            </summary>
            <returns>The value decremented by one.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Base64">
            <summary>
            Base64 utility.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Base64.Encode(System.Byte[])">
            <summary>
            Computes the base64 representation of a byte array.
            </summary>
            <param name="b">The input byte array.</param>
            <returns>The base64 string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Base64.EncodeBuffer(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the base64 representation of a buffer.
            </summary>
            <param name="buffer">The input buffer.</param>
            <returns>The base64 string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Base64.Decode(System.String)">
            <summary>
            Computes the byte representation of a base64 string.
            </summary>
            <param name="s">The input base64 string.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Base64.TryEncode(System.Byte[],System.String@)">
            <summary>
            Computes the base64 representation of a byte array.
            </summary>
            <param name="b">The input byte array.</param>
            <param name="encoded">The base64 string.</param>
            <returns><c>true</c> if the encode succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Base64.TryEncodeBuffer(FM.LiveSwitch.DataBuffer,System.String@)">
            <summary>
            Computes the base64 representation of a buffer.
            </summary>
            <param name="buffer">The input buffer.</param>
            <param name="encoded">The base64 string.</param>
            <returns><c>true</c> if the encode succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Base64.TryDecode(System.String,System.Byte[]@)">
            <summary>
            Computes the byte representation of a base64 string.
            </summary>
            <param name="s">The input base64 string.</param>
            <param name="decoded">The byte array.</param>
            <returns><c>true</c> if the decode succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="T:FM.LiveSwitch.Binary">
            <summary>
            Common binary methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes1(System.Boolean,System.Int32)">
            <summary>
            Converts a 1-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes1(System.Boolean,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 1-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 1-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes1(System.Byte[],System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Tries to read a 1-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes2(System.Int32,System.Int32)">
            <summary>
            Converts a 2-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes2(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 2-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes2(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 2-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes2(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 2-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes3(System.Int32,System.Int32)">
            <summary>
            Converts a 3-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes3(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 3-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes3(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 3-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes3(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 3-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes4(System.Int32,System.Int32)">
            <summary>
            Converts a 4-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes4(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 4-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes4(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 4-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes4(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 4-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes5(System.Int32,System.Int32)">
            <summary>
            Converts a 5-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes5(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 5-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes5(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 5-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes5(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 5-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes6(System.Int32,System.Int32)">
            <summary>
            Converts a 6-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes6(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 6-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes6(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 6-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes6(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 6-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes7(System.Int32,System.Int32)">
            <summary>
            Converts a 7-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes7(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 7-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes7(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 7-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes7(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 7-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes8(System.Int32)">
            <summary>
            Converts an 8-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes8(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes an 8-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes8(System.Byte[],System.Int32)">
            <summary>
            Reads an 8-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes8(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Tries to read an 8-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes9(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 9-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes9(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 9-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes9(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 9-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes9(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 9-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes10(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 10-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes10(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 10-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes10(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 10-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes10(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 10-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes11(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 11-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes11(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 11-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes11(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 11-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes11(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 11-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes12(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 12-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes12(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 12-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes12(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 12-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes12(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 12-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes13(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 13-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes13(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 13-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes13(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 13-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes13(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 13-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes14(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 14-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes14(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 14-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes14(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 14-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes14(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 14-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes15(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 15-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes15(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 15-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes15(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 15-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes15(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 15-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes16(System.Int32,System.Boolean)">
            <summary>
            Converts a 16-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes16(System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 16-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes16(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a 16-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes16(System.Byte[],System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Tries to read a 16-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes17(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 17-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes17(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 17-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes17(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an 17-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes17(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 17-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes18(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts an 18-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes18(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes an 18-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes18(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an 18-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes18(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 18-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes19(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 19-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes19(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 19-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes19(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an 19-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes19(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 19-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes20(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 20-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes20(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 20-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes20(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an 20-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes20(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 20-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes21(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 21-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes21(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 21-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes21(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an 21-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes21(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 21-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes22(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 22-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes22(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 22-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes22(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an 22-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes22(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 22-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes23(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 23-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes23(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 23-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes23(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an 23-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes23(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 23-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes24(System.Int32,System.Boolean)">
            <summary>
            Converts a 24-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes24(System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 24-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes24(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a 24-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes24(System.Byte[],System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Tries to read a 24-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes32(System.Int64,System.Boolean)">
            <summary>
            Converts a 32-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes32(System.Int64,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 32-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes32(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a 32-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes32(System.Byte[],System.Int32,System.Boolean,System.Int64@)">
            <summary>
            Tries to read a 32-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes40(System.Int64,System.Boolean)">
            <summary>
            Converts a 40-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes40(System.Int64,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 40-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes40(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a 40-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes40(System.Byte[],System.Int32,System.Boolean,System.Int64@)">
            <summary>
            Tries to read a 40-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes48(System.Int64,System.Boolean)">
            <summary>
            Converts a 48-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes48(System.Int64,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 48-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes48(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a 48-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes48(System.Byte[],System.Int32,System.Boolean,System.Int64@)">
            <summary>
            Tries to read a 48-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes56(System.Int64,System.Boolean)">
            <summary>
            Converts a 56-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes56(System.Int64,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 56-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes56(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a 56-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes56(System.Byte[],System.Int32,System.Boolean,System.Int64@)">
            <summary>
            Tries to read a 56-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes64(System.Int64,System.Boolean)">
            <summary>
            Converts a 64-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes64(System.Int64,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 64-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes64(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a 64-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes64(System.Byte[],System.Int32,System.Boolean,System.Int64@)">
            <summary>
            Tries to read a 64-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BitStringToBytes(System.String)">
            <summary>
            Converts a bit-string to bytes.
            </summary>
            <param name="bitString">The bit-string.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BitStringToBytes(System.String,System.Boolean)">
            <summary>
            Converts a bit-string to bytes.
            </summary>
            <param name="bitString">The bit-string.</param>
            <param name="padLeft">Whether to pad extra zero-bits to the left.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BitStringToBytes(System.String,System.Int32@)">
            <summary>
            Converts a bit-string to bytes.
            </summary>
            <param name="bitString">The bit-string.</param>
            <param name="numberOfUnusedBits">The number of unused bits.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BitStringToBytes(System.String,System.Boolean,System.Int32@)">
            <summary>
            Converts a bit-string to bytes.
            </summary>
            <param name="bitString">The bit-string.</param>
            <param name="padLeft">Whether to pad extra zero-bits to the left.</param>
            <param name="numberOfUnusedBits">The number of unused bits.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BytesToBitString(System.Byte[])">
            <summary>
            Converts bytes to a bit-string.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BytesToBitString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts bytes to a bit-string.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BytesToBitString(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts bytes to a bit-string.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="numberOfUnusedBits">The number of unused bits.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BytesToBitString(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts bytes to a bit-string.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="numberOfUnusedBits">The number of unused bits.</param>
            <param name="trimLeft">Whether to trim unused bits from the left.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Interleave(System.Byte[],System.Byte[])">
            <summary>
            Interleaves a byte array i.e.
            XXXXYYYY to XYXYXYXY
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Interleave(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Interleaves a byte array i.e.
            XXXXYYYY to XYXYXYXY
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Interleave(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Interleaves a byte array  i.e.
            XXXXYYYY to XYXYXYXY
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
            <param name="reversePlanes">XXXXYYYY to YXYXYXYX</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.InterleaveTransform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Interleave and transform (rotate) a byte array containing two planes
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="rotation">Values 0, 90, 180, 270.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.InterleaveTransform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Interleave and transform (rotate) a byte array containing two planes
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="rotation">Values 0, 90, 180, 270.</param>
            <param name="start">The start.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.InterleaveTransform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Interleave and transform (rotate) a byte array containing two planes
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="start">The start.</param>
            <param name="rotation">Values 0, 90, 180, 270.</param>
            <param name="reversePlanes">Reverse output plane order.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Deinterleave(System.Byte[],System.Byte[])">
            <summary>
            Deinterleaves a byte array i.e.
            XYXYXYXY to XXXXYYYY
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Deinterleave(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deinterleaves a byte array i.e.
            XYXYXYXY to XXXXYYYY
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Deinterleave(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deinterleaves a byte array 
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
            <param name="reversePlanes">The reversePlanes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.DeinterleaveTransform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Deinterleave and transform (rotate) a byte array containing two planes
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="rotation">Values 0, 90, 180, 270.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.DeinterleaveTransform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Deinterleave and transform (rotate) a byte array containing two planes
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="rotation">Values 0, 90, 180, 270.</param>
            <param name="start">The start.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.DeinterleaveTransform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deinterleave and transform (rotate) a byte array containing two planes
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="start">The start.</param>
            <param name="rotation">Values 0, 90, 180, 270.</param>
            <param name="reversePlanes">Reverse output plane order.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Transform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transforms a byte containing a 2D plane (rotates 90, 180, 270)
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="rotation">The rotation.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Transform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transforms a byte containing a 2D plane (rotates 90, 180, 270)
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="rotation">The rotation.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="start">Start position for both input and output frame</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Transform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transforms a byte containing a 2D plane (rotates 90, 180, 270)
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="rotation">The rotation.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="inputStart">The inputStart.</param>
            <param name="outputStart">The outputStart.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Transform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transforms a byte containing a 2D plane (rotates 90, 180, 270).
            When transforming interleaved planes. Set the chunkLength to 
            the number of planes.
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="rotation">The rotation.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="inputStart">The inputStart.</param>
            <param name="outputStart">The outputStart.</param>
            <param name="chunkLength">The chunkLength.</param>
        </member>
        <member name="T:FM.LiveSwitch.BitAssistant">
            <summary>
            Contains methods for cross-platform bit manipulation.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.CastByte(System.Int32)">
            <summary>
            Casts an integer to a byte.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.CastInteger(System.Byte)">
            <summary>
            Casts a byte to an integer.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.CastLong(System.Byte)">
            <summary>
            Casts a byte to a long.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.LeftShift(System.Byte,System.Int32)">
            <summary>
            Performs a bit-wise left shift on a byte value.
            </summary>
            <param name="value">The value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.LeftShiftShort(System.Int16,System.Int32)">
            <summary>
            Performs a bit-wise left shift on a short value.
            </summary>
            <param name="value">The value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.LeftShiftInteger(System.Int32,System.Int32)">
            <summary>
            Performs a bit-wise left shift on an integer value.
            </summary>
            <param name="value">The value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.LeftShiftLong(System.Int64,System.Int32)">
            <summary>
            Performs a bit-wise left shift on a long value.
            </summary>
            <param name="value">The value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.RightShift(System.Byte,System.Int32)">
            <summary>
            Performs an unsigned bit-wise right shift on a byte value.
            </summary>
            <param name="value">The value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.RightShiftShort(System.Int16,System.Int32)">
            <summary>
            Performs an unsigned bit-wise right shift on a short value.
            </summary>
            <param name="value">The short value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.RightShiftInteger(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bit-wise right shift on an integer value.
            </summary>
            <param name="value">The integer value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.RightShiftLong(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bit-wise right shift on a long value.
            </summary>
            <param name="value">The long value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.SequencesAreEqual(System.Byte[],System.Byte[])">
            <summary>
            Compares two sequences of bytes for equality.
            </summary>
            <param name="array1">The first byte array.</param>
            <param name="array2">The second byte array.</param>
            <returns><c>true</c> if the sequences are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.SequencesAreEqual(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compares two sequences of bytes for equality.
            </summary>
            <param name="array1">The first byte array.</param>
            <param name="offset1">The first byte array offset.</param>
            <param name="array2">The second byte array.</param>
            <param name="offset2">The second byte array offset.</param>
            <param name="length">The length.</param>
            <returns>
              <c>true</c> if the sequences are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.SequencesAreEqualConstantTime(System.Byte[],System.Byte[])">
            <summary>
            Compares two sequences of bytes for equality in constant time.
            </summary>
            <param name="array1">The first byte array.</param>
            <param name="array2">The second byte array.</param>
            <returns><c>true</c> if the sequences are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.SequencesAreEqualConstantTime(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compares two sequences of bytes for equality in constant time.
            </summary>
            <param name="array1">The first byte array.</param>
            <param name="offset1">The first byte array offset.</param>
            <param name="array2">The second byte array.</param>
            <param name="offset2">The second byte array offset.</param>
            <param name="length">The length.</param>
            <returns>
              <c>true</c> if the sequences are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.SubArray(System.Byte[],System.Int32)">
            <summary>
            Creates a subarray from an existing array.
            </summary>
            <param name="array">The source array.</param>
            <param name="offset">The offset into the source array.</param>
            <returns>The subarray.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.SubArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a subarray from an existing array.
            </summary>
            <param name="array">The source array.</param>
            <param name="offset">The offset into the source array.</param>
            <param name="count">The number of bytes to copy into the subarray.</param>
            <returns>The subarray.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.Reverse(System.Byte[])">
            <summary>
            Performs an in-place reversal of a byte array.
            </summary>
            <param name="array">The array to reverse.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.Copy(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from one array to another.
            </summary>
            <param name="source">The source bytes.</param>
            <param name="sourceIndex">The starting index for copying from the source.</param>
            <param name="destination">The destination bytes.</param>
            <param name="destinationIndex">The starting index for copying to the destination.</param>
            <param name="length">The number of bytes to copy.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.Set(System.Byte[],System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets a value across an array.
            </summary>
            <param name="array">The array bytes.</param>
            <param name="index">The starting index.</param>
            <param name="length">The number of bytes to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.GetHexString(System.Byte[])">
            <summary>
            Converts a byte array to a hexadecimal string.
            </summary>
            <param name="array">The byte array.</param>
            <returns>The hexadecimal string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.GetHexString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a byte array to a hexadecimal string.
            </summary>
            <param name="array">The byte array.</param>
            <param name="offset">The offset into the array.</param>
            <param name="length">The number of bytes to convert.</param>
            <returns>
            The hexadecimal string.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.GetHexBytes(System.String)">
            <summary>
            Converts a hexadecimal string to a byte array.
            </summary>
            <param name="s">The hexadecimal string.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.GetBinaryString(System.Byte[])">
            <summary>
            Converts a byte array to a binary string.
            </summary>
            <param name="array">The byte array.</param>
            <returns>
            The binary string.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.GetBinaryString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a byte array to a binary string.
            </summary>
            <param name="array">The byte array.</param>
            <param name="offset">The offset into the array.</param>
            <param name="length">The number of bytes to convert.</param>
            <returns>
            The binary string.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.GetBinaryBytes(System.String)">
            <summary>
            Converts a binary string to a byte array.
            </summary>
            <param name="s">The binary string.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.ConvertSingleToBytes(System.Single,System.Boolean)">
            <summary>
            Converts a single to a byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.ConvertBytesToSingle(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Converts a byte array into a single.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="index">The index.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.ConvertDoubleToBytes(System.Double,System.Boolean)">
            <summary>
            Convert a double to a byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.ConvertBytesToDouble(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Converts a byte array into a double.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="index">The index.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
        </member>
        <member name="T:FM.LiveSwitch.BooleanHolder">
            <summary>
            Class to hold a boolean value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BooleanHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BooleanHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BooleanHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BooleanHolder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BooleanHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Build">
            <summary>
            Details about the current build.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Build.VersionConstant">
            <summary>
            Gets the build version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.Version">
            <summary>
            Gets the full build version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.MajorVersion">
            <summary>
            Gets the build major version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.MinorVersion">
            <summary>
            Gets the build minor version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.PatchVersion">
            <summary>
            Gets the build patch version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.RevisionVersion">
            <summary>
            Gets the build revision version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.Year">
            <summary>
            Gets the build year.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.Month">
            <summary>
            Gets the build month.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.Day">
            <summary>
            Gets the build day.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.Date">
            <summary>
            Gets the build date.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ByteCollection">
            <summary>
            A collection of bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByteCollection.Count">
            <summary>
            Gets the number of bytes in the collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByteCollection"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByteCollection"/> class.
            </summary>
            <param name="buffer">The bytes to use as initial data.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.Add(System.Byte)">
            <summary>
            Adds a byte to the collection.
            </summary>
            <param name="b">The byte to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.AddRange(System.Byte[])">
            <summary>
            Adds a range of bytes to the collection.
            </summary>
            <param name="buffer">The range of bytes to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.AddRange(FM.LiveSwitch.ByteCollection)">
            <summary>
            Adds a byte collection to this collection.
            </summary>
            <param name="collection">The byte collection to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of bytes from the collection.
            </summary>
            <param name="index">The index to start removing.</param>
            <param name="count">The number of bytes to remove.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.InsertRange(System.Int32,System.Byte[])">
            <summary>
            Inserts a range of bytes into the collection.
            </summary>
            <param name="index">The index to start adding.</param>
            <param name="buffer">The range of bytes to insert.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.InsertRange(System.Int32,FM.LiveSwitch.ByteCollection)">
            <summary>
            Inserts a byte collection into this collection.
            </summary>
            <param name="index">The index to start adding.</param>
            <param name="collection">The byte collection to insert.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a range of bytes from the collection.
            </summary>
            <param name="index">The index to start getting.</param>
            <param name="count">The number of bytes to get.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.Get(System.Int32)">
            <summary>
            Gets a byte from the collection.
            </summary>
            <param name="index">The index to get.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.ToArray">
            <summary>
            Converts this collection to an array.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.ByteHolder">
            <summary>
            Class to hold a byte value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByteHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByteHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteHolder.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByteHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.ByteInputStream">
            <summary>
            An buffer of bytes that can be read sequentially.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteInputStream.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByteInputStream"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteInputStream.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByteInputStream"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:FM.LiveSwitch.ByteInputStream.Available">
            <summary>
            Gets the number of available bytes for reading.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteInputStream.Mark">
            <summary>
            Marks the current position for a later reset.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteInputStream.Read">
            <summary>
            Reads a value from the byte array.
            </summary>
            <returns>The byte, or -1 if no more bytes are available for reading.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ByteInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a segment from the byte array.
            </summary>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ByteInputStream.Reset">
            <summary>
            Resets the stream to the marked position.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteInputStream.Skip(System.Int32)">
            <summary>
            Advances the stream position by the amount specified.
            </summary>
            <param name="n">The number of bytes to skip.</param>
            <returns>The number of bytes skipped.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ByteOutputStream">
            <summary>
            An buffer of bytes that can be written sequentially.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteOutputStream.Reset">
            <summary>
            Empties this stream and resets it.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByteOutputStream.Size">
            <summary>
            Gets the number of bytes written to the stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteOutputStream.ToArray">
            <summary>
            Converts the stream to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.ByteOutputStream.WriteBuffer(System.Byte[])">
            <summary>
            Writes a buffer to the stream.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteOutputStream.WriteBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a buffer to the stream.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteOutputStream.Write(System.Byte)">
            <summary>
            Writes a value to the stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteOutputStream.WriteTo(FM.LiveSwitch.ByteOutputStream)">
            <summary>
            Writes the contents of this stream to another stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="F:FM.LiveSwitch.BZip2.DecompressionState.unzftab">
            Freq table collected to save a pass over the data during
            decompression.
        </member>
        <member name="M:FM.LiveSwitch.BZip2.DecompressionState.initTT(System.Int32)">
             Initializes the tt array.
            
             This method is called when the required length of the array is known.
             I don't initialize it at construction time to avoid unneccessary
             memory allocation when compressing small files.
        </member>
        <member name="T:FM.LiveSwitch.BZip2.Decompressor">
            <summary>
            A bzip2 decompressor.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BZip2.Decompressor.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BZip2.Decompressor"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.BZip2.Decompressor.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read data from the stream.
             </summary>
            
             <remarks>
               <para>
                 To decompress a BZip2 data stream, create a <c>BZip2InputStream</c>,
                 providing a stream that reads compressed data.  Then call Read() on
                 that <c>BZip2InputStream</c>, and the data read will be decompressed
                 as you read.
               </para>
            
               <para>
                 A <c>BZip2InputStream</c> can be used only for <c>Read()</c>, not for <c>Write()</c>.
               </para>
             </remarks>
            
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:FM.LiveSwitch.BZip2.Decompressor.ReadByte">
            <summary>
              Read a single byte from the stream.
            </summary>
            <returns>the byte read from the stream, or -1 if EOF</returns>
        </member>
        <member name="M:FM.LiveSwitch.BZip2.Decompressor.GetBits(System.Int32)">
            <summary>
              Read n bits from input, right justifying the result.
            </summary>
            <remarks>
              <para>
                For example, if you read 1 bit, the result is either 0
                or 1.
              </para>
            </remarks>
            <param name ="n">
              The number of bits to read, always between 1 and 32.
            </param>
        </member>
        <member name="M:FM.LiveSwitch.BZip2.Decompressor.hbCreateDecodeTables(System.Int32[],System.Int32[],System.Int32[],System.Char[],System.Int32,System.Int32,System.Int32)">
            Called by createHuffmanDecodingTables() exclusively.
        </member>
        <member name="M:FM.LiveSwitch.BZip2.Decompressor.createHuffmanDecodingTables(System.Int32,System.Int32)">
            Called by recvDecodingTables() exclusively.
        </member>
        <member name="M:FM.LiveSwitch.BZip2.Rand.Rnums(System.Int32)">
            <summary>
              Returns the "random" number at a specific index.
            </summary>
            <param name='i'>the index</param>
            <returns>the random number</returns>
        </member>
        <member name="T:FM.LiveSwitch.Certificate`2">
            <summary>
            A certificate to be used for secure communication.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.CalculateFingerprint(System.String)">
            <summary>
            Calculates a fingerprint for this certificate.
            </summary>
            <param name="algorithm">The algorithm.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.IsSealed">
            <summary>
            Gets a value indicating whether this certificate is
            sealed and can no longer be modified.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.IssuerName">
            <summary>
            Gets the name of the issuer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.SubjectName">
            <summary>
            Gets the name of the subject.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.EffectiveDate">
            <summary>
            Gets the effective date.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.ExpirationDate">
            <summary>
            Gets the expiration date.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.IssuerUniqueId">
            <summary>
            Gets the issuer unique ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.SubjectUniqueId">
            <summary>
            Gets the subject unique ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.Extensions">
            <summary>
            Gets the extensions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.SerialNumber">
            <summary>
            Gets the serial number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.SignatureAlgorithm">
            <summary>
            Gets the signature algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.Key">
            <summary>
            Gets or sets the asymmetric key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.IsExpired">
            <summary>
            Gets whether the certificate is expired.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.IsExpiring">
            <summary>
            Gets whether the certificate is expiring within 24 hours.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Certificate`2"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.CreateFingerprint(System.String,System.String)">
            <summary>
            Creates a fingerprint.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.CreateCertificate">
            <summary>
            Creates a certificate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.Clone">
            <summary>
            Clones this instance.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.AutoRegenerate">
            <summary>
            Gets or sets whether the certificate's cryptography
            data should be automatically regenerated when
            it is about to expire. Defaults to <code>true</code>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.Regenerate">
            <summary>
            Regenerates the certificate's cryptography data using an
            expiration date of 10 days from now.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.Regenerate(System.DateTime)">
            <summary>
            Regenerates the certificate's cryptography data using the
            given expiration date.
            </summary>
            <param name="expirationDate">The expiration date.</param>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.GetBytes">
            <summary>
            Serializes this certificate to binary.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.GetBuffer">
            <summary>
            Serializes this certificate to binary.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.ToX509Certificate2">
            <summary>
            Converts this instance into an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.CharacterHolder">
            <summary>
            Class to hold a character value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CharacterHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CharacterHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CharacterHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CharacterHolder.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CharacterHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.CircularBuffer">
            <summary>
            A circular buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularBuffer.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularBuffer.ReadOffset">
            <summary>
            Gets the read offset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularBuffer.WriteOffset">
            <summary>
            Gets the read offset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularBuffer.Available">
            <summary>
            Gets the number of bytes available for reading.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularBuffer.Latency">
            <summary>
            Gets the latency.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularBuffer.LittleEndian">
            <summary>
            Gets or sets whether the data is little-endian.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CircularBuffer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CircularBuffer"/> class.
            </summary>
            <param name="length">The length.</param>
            <param name="latency">The latency.</param>
        </member>
        <member name="M:FM.LiveSwitch.CircularBuffer.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CircularBuffer"/> class.
            </summary>
            <param name="length">The length.</param>
            <param name="latency">The latency.</param>
            <param name="littleEndian">Whether the data is little-endian.</param>
        </member>
        <member name="M:FM.LiveSwitch.CircularBuffer.Read(System.Int32)">
            <summary>
            Reads data from the buffer.
            </summary>
            <param name="length">The number of bytes to read.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.CircularBuffer.Write(FM.LiveSwitch.DataBuffer)">
            <summary>
            Writes data to the buffer.
            </summary>
            <param name="buffer">The data to write.</param>
        </member>
        <member name="T:FM.LiveSwitch.Collection`2">
            <summary>
            A collection of values.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TCollection"></typeparam>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Collection`2"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Collection`2.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Collection`2.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.ToArray">
            <summary>
            Clones the values into a new array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.ArrayFromList(System.Collections.Generic.List{`0})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.ForEach(FM.LiveSwitch.Action2{`0,System.Int32})">
            <summary>
            Executes a callback function once per value.
            </summary>
            <param name="callback">The callback to execute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Replace(`0[])">
            <summary>
            Replaces the collection with a new set of values.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="P:FM.LiveSwitch.Collection`2.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.AddSuccess(`0)">
            <summary>
            Invoked when an element is added to the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.AddSuccessNoLock(`0)">
            <summary>
            Invoked after an element is added to the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Add(`0)">
            <summary>
            Adds a value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.AddMany(`0[])">
            <summary>
            Adds some values.
            </summary>
            <param name="values">The values.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveSuccess(`0)">
            <summary>
            Invoked when an element is removed from the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveSuccessNoLock(`0)">
            <summary>
            Invoked after an element is removed from the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveFirst">
            <summary>
            Removes the first value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveLast">
            <summary>
            Removes the last value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveFirst(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Removes the first value that matches a given condition.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveLast(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Removes the last value that matches a given condition.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Remove(`0)">
            <summary>
            Removes a value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveMany(`0[])">
            <summary>
            Removes some values.
            </summary>
            <param name="values">The values.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveAll">
            <summary>
            Removes all values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Any">
            <summary>
            Determined whether the collection contains at least one value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Any(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Determined whether the collection contains at least one value
            that matches the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Contains(`0)">
            <summary>
            Determines whether the collection contains a value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.ValueAt(System.Int32)">
            <summary>
            Gets the value at the specified index.
            Throws an exception if a value does
            not exist at that index.
            </summary>
            <param name="index">The index.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.ValueAtOrDefault(System.Int32)">
            <summary>
            Gets the value at the specified index.
            Returns a default value if a value does
            not exist at that index.
            </summary>
            <param name="index">The index.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.First">
            <summary>
            Gets the first value.
            Throws an exception if there are
            no values in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.First(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Gets the first value that matches
            the specified predicate.
            Throws an exception if there are
            no such values in the collection.
            </summary>
            <param name="predicate">The predicate.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.FirstOrDefault">
            <summary>
            Gets the first value.
            Returns a default value if there are
            no values in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.FirstOrDefault(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Gets the first value that matches
            the specified predicate.
            Returns a default value if there are
            no such values in the collection.
            </summary>
            <param name="predicate">The predicate.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Last">
            <summary>
            Gets the last value.
            Throws an exception if there are
            no values in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Last(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Gets the last value that matches
            the specified predicate.
            Throws an exception if there are
            no such values in the collection.
            </summary>
            <param name="predicate">The predicate.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.LastOrDefault">
            <summary>
            Gets the last value.
            Returns a default value if there are
            no values in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.LastOrDefault(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Gets the last value that matches
            the specified predicate.
            Returns a default value if there are
            no such values in the collection.
            </summary>
            <param name="predicate">The predicate.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Single">
            <summary>
            Gets the only value.
            Throws an exception if there are
            no values or more than one value
            in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Single(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Gets the only value that matches
            the specified predicate.
            Throws an exception if there are
            no values or more than one value
            in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.SingleOrDefault">
            <summary>
            Gets the only value.
            Returns a default value if there are
            no values or more than one value
            in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.SingleOrDefault(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Gets the only value that matches
            the specified predicate.
            Returns a default value if there are
            no values or more than one value
            in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Where(FM.LiveSwitch.Function2{`0,System.Int32,System.Boolean})">
            <summary>
            Creates a new collection with values
            that match the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.FileLogProvider">
            <summary>
            Log provider that writes output to a file.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FileLogProvider.FilePath">
            <summary>
            Gets the file path.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FileLogProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FileLogProvider"/> class using <see cref="F:FM.LiveSwitch.LogLevel.Info"/>.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileLogProvider.#ctor(System.String,FM.LiveSwitch.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FileLogProvider"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.DataBufferFramer">
            <summary>
            A utility class that allows a continuous stream
            of data to be written to it with properly framed
            messages being read out of it. This class is
            not thread-safe for concurrent reads/writes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferFramer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBufferFramer"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferFramer.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferFramer.Footprint">
            <summary>
            Gets the size of the internal data buffer, in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferFramer.AvailableDataBuffer">
            <summary>
            Gets the available data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferFramer.AvailableLength">
            <summary>
            Gets the available length.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferFramer.GetHexString">
            <summary>
            Gets the hexadecimal string representing the current contents of the data buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferFramer.Write(FM.LiveSwitch.DataBuffer)">
            <summary>
            Writes a data buffer to the internal data buffer.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferFramer.Read(FM.LiveSwitch.Function1{FM.LiveSwitch.DataBuffer,System.Int32})">
            <summary>
            Reads a data buffer from the internal data buffer.
            </summary>
            <param name="getFrameLength">A callback that returns the next frame length.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.DiagnosticSampler">
            <summary>
            A record that calculates the min, max, and average from integer samples.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.Label">
            <summary>
            Gets the label for this sampler.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.Count">
            <summary>
            Gets how many samples this record has used.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.SamplesInAverage">
            <summary>
            Gets how many samples are included in the average.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.Min">
            <summary>
            Gets the minimum sample ever recorded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.Max">
            <summary>
            Gets the maximum sample ever recorded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.LastValue">
            <summary>
            Gets the value of the last sample recorded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.Sum">
            <summary>
            Gets the sum of all values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.Average">
            <summary>
            Gets the average of all samples.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DiagnosticSampler.#ctor">
            <summary>
            Creates a new instance of the DiagnosticRecord.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DiagnosticSampler.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the DiagnosticRecord.
            </summary>
            <param name="averageSampleCount">How many samples to include in the average.</param>
        </member>
        <member name="M:FM.LiveSwitch.DiagnosticSampler.#ctor(System.String)">
            <summary>
            Creates a new instance of the DiagnosticRecord.
            </summary>
            <param name="label">The label for this sampler.</param>
        </member>
        <member name="M:FM.LiveSwitch.DiagnosticSampler.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new instance of the DiagnosticRecord.
            </summary>
            <param name="averageSampleCount">How many samples to include in the average.</param>
            <param name="label">The label for this sampler.</param>
        </member>
        <member name="M:FM.LiveSwitch.DiagnosticSampler.AddSample(System.Int64)">
            <summary>
            Adds a new sample to the calculation.
            </summary>
            <param name="longSample">The sample to add.</param>
        </member>
        <member name="T:FM.LiveSwitch.DispatchQueue`1">
            <summary>
            A dispatch queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DispatchQueue`1.QueueCount">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DispatchQueue`1.#ctor(FM.LiveSwitch.Action1{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DispatchQueue`1"/> class.
            </summary>
            <param name="action">The processing action.</param>
        </member>
        <member name="M:FM.LiveSwitch.DispatchQueue`1.#ctor(FM.LiveSwitch.Function1{`0,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DispatchQueue`1"/> class.
            </summary>
            <param name="func">The processing function.</param>
        </member>
        <member name="M:FM.LiveSwitch.DispatchQueue`1.#ctor(FM.LiveSwitch.Function1{`0,FM.LiveSwitch.Future{System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DispatchQueue`1"/> class.
            </summary>
            <param name="func">The processing function.</param>
        </member>
        <member name="M:FM.LiveSwitch.DispatchQueue`1.WaitForDrain">
            <summary>
            Blocks until the queue is empty.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DispatchQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item for processing.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FM.LiveSwitch.DispatchQueue`1.Destroy">
            <summary>
            Destroys the queue.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DtlsCertificate">
            <summary>
            A certificate to be used for DTLS communication.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DtlsCertificate.DefaultKeyType">
            <summary>
            Gets or sets the default asymmetric key type (ECDSA).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.CreateFingerprint(System.String,System.String)">
            <summary>
            Creates a fingerprint.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.CreateCertificate">
            <summary>
            Creates the certificate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.ParseBytes(System.Byte[])">
            <summary>
            Deserializes a certificate from binary.
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificateFromOldCertificate(FM.LiveSwitch.DtlsCertificate)">
            <summary>
            Generates a certificate using the issuer/subject name from an
            old certificate and an expiration date of 10 days from now.
            </summary>
            <param name="oldCertificate">The old certificate.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificateFromOldCertificate(FM.LiveSwitch.DtlsCertificate,System.DateTime)">
            <summary>
            Generates a certificate using the issuer/subject name from an
            old certificate and the given expiration date.
            </summary>
            <param name="oldCertificate">The old certificate.</param>
            <param name="expirationDate">The expiration date.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate">
            <summary>
            Generates a certificate with a default issuer/subject name and
            an expiration date of 10 days from now.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with a default issuer/subject name and
            an expiration date of 10 days from now.
            </summary>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with a default issuer/subject name and
            an expiration date of 10 days from now.
            </summary>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String)">
            <summary>
            Generates a certificate with the given issuer/subject name and an
            expiration date of 10 days from now.
            </summary>
            <param name="name">The name of the issuer/subject.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with the given issuer/subject name and an
            expiration date of 10 days from now.
            </summary>
            <param name="name">The name of the issuer/subject.</param>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with the given issuer/subject name and an
            expiration date of 10 days from now.
            </summary>
            <param name="name">The name of the issuer/subject.</param>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,System.String)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and
            an expiration date of 10 days from now.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,System.String,FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and
            an expiration date of 10 days from now.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,System.String,FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and
            an expiration date of 10 days from now.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,System.String,System.DateTime)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and expiration date.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="expirationDate">The expiration date.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,System.String,System.DateTime,FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="expirationDate">The expiration date.</param>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,System.String,System.DateTime,FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="expirationDate">The expiration date.</param>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.FromX509Certificate2(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Converts an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> into a <see cref="T:FM.LiveSwitch.DtlsCertificate"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.DtlsFingerprint">
            <summary>
            A DTLS fingerprint.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DtlsFingerprint.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DtlsFingerprint"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.EcdsaNamedCurve">
            <summary>
            A named elliptic curve.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EcdsaNamedCurve.P256">
            <summary>
            The P256 named curve.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EcdsaNamedCurve.P384">
            <summary>
            The P384 named curve.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EcdsaNamedCurve.P521">
            <summary>
            The P521 named curve.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Fingerprint">
            <summary>
            A fingerprint.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Md2Algorithm">
            <summary>
            Gets the MD2 algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Md5Algorithm">
            <summary>
            Gets the MD5 algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Sha1Algorithm">
            <summary>
            Gets the SHA-1 algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Sha224Algorithm">
            <summary>
            Gets the SHA-224 algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Sha256Algorithm">
            <summary>
            Gets the SHA-256 algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Sha384Algorithm">
            <summary>
            Gets the SHA-384 algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Sha512Algorithm">
            <summary>
            Gets the SHA-512 algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Algorithm">
            <summary>
            Gets the algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Fingerprint.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Fingerprint"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.HttpClientTransfer">
            <summary>
            Defines methods for transferring content over HTTP using the HttpClient.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpClientTransfer.SendBinary(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends binary content synchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <returns>The response arguments from the server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpClientTransfer.SendText(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends text content synchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <returns>The response arguments from the server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpClientTransfer.SendBinaryAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends binary content asynchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <param name="callback">The callback to execute on success or failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpClientTransfer.SendTextAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends text content asynchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <param name="callback">The callback to execute on success or failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpClientTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IEquivalent`1">
            <summary>
            An interface for detecting equivalency.
            </summary>
            <typeparam name="T">The concrete type.</typeparam>
        </member>
        <member name="M:FM.LiveSwitch.IEquivalent`1.IsEquivalent(`0)">
            <summary>
            Checks if an instance is equivalent to this one.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.IFileStream">
            <summary>
            A file stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IFileStream.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IFileStream.Length">
            <summary>
            Gets the file stream length (must be opened first).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IFileStream.Position">
            <summary>
            Gets or sets the position in the file stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IFileStream.Exists">
            <summary>
            Returns a boolean value indicating whether the file exists.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.IFileStream.Open(FM.LiveSwitch.FileStreamAccess)">
            <summary>
            Opens the file stream.
            </summary>
            <param name="access">The access requirement.</param>
        </member>
        <member name="M:FM.LiveSwitch.IFileStream.Close">
            <summary>
            Closes the file stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IFileStream.Flush">
            <summary>
            Flushes the file stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the file stream.
            </summary>
            <param name="data">The data to write.</param>
            <param name="index">The index at which to start reading.</param>
            <param name="length">The number of bytes to write.</param>
            <returns><c>true</c> if the data was written; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.IFileStream.WriteTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the file stream.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="data">The data to write to the file.</param>
            <param name="index">The index at which to start reading.</param>
            <param name="length">The number of bytes to write.</param>
            <returns><c>true</c> if the data was written; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.IFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the file stream.
            </summary>
            <param name="data">The buffer to fill with data from the file.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="length">The maximum number of bytes to read.</param>
            <returns>The number of bytes read from the file.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Iso8601Timestamp">
            <summary>
            Utility class to assist with ISO-8601 timestamp conversions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Iso8601Timestamp.UtcNow">
            <summary>
            Gets the current UTC time in ISO-8601 format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Iso8601Timestamp.DateTimeToIso8601(System.DateTime)">
            <summary>
            Converts a date to a ISO-8601 timestamp.
            </summary>
            <param name="dateTime">The date to convert.</param>
            <returns>The equivalent ISO-8601 timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Iso8601Timestamp.Iso8601ToDateTime(System.String)">
            <summary>
            Converts a ISO-8601 timestamp to a date.
            </summary>
            <param name="iso8601">The ISO-8601 timestamp to convert.</param>
            <returns>The equivalent date.</returns>
        </member>
        <member name="T:FM.LiveSwitch.JsonConsoleLogProvider">
            <summary>
            A log provider that sends json logs to the console.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JsonConsoleLogProvider.#ctor">
            <summary>
            Creates a new instance of a JsonConsole log provider.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JsonConsoleLogProvider.#ctor(FM.LiveSwitch.LogLevel)">
            <summary>
            Creates a new instance of a JsonConsole log provider.
            </summary>
            <param name="level">The initial log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.JsonConsoleLogProvider.GenerateLogLine(FM.LiveSwitch.LogEvent)">
            <summary>
            Builds the json string for the console logger to log.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.NetworkType">
            <summary>
            A network type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.NetworkType.Unknown">
            <summary>
            Indicates an unknown network type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.NetworkType.Wired">
            <summary>
            Indicates a wired network type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.NetworkType.Wireless">
            <summary>
            Indicates a wireless network type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.NetworkType.Cellular">
            <summary>
            Indicates a cellular network type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.NetworkType.Vpn">
            <summary>
            Indicates a VPN network type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.LogStashLogProvider">
            <summary>
            A log provider that sends logs to LogStash.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogStashLogProvider.Address">
            <summary>
            Gets the LogStash server address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogStashLogProvider.Port">
            <summary>
            Gets the LogStash server port.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogStashLogProvider.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of a LogStash log provider.
            </summary>
            <param name="address">The LogStash server address.</param>
            <param name="port">The LogStash server port.</param>
            <param name="useSSL">Whether to use SSL/TLS when connecting to the LogStash server.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogStashLogProvider.#ctor(System.String,System.Int32,System.Boolean,FM.LiveSwitch.LogLevel)">
            <summary>
            Creates a new instance of a LogStash log provider.
            </summary>
            <param name="address">The address of LogStash.</param>
            <param name="port">The port of LogStash.</param>
            <param name="useSSL">Whether to use SSL/TLS when connecting to the LogStash server.</param>
            <param name="level">The initial log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogStashLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.ManagedCountdownLatch">
            <summary>
            A countdown latch that will signal when the counter reaches zero.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedCountdownLatch.Count">
            <summary>
            Gets the current count on the latch.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the latch with a count.
            </summary>
            <param name="initialCount">The initial counter value.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.#ctor">
            <summary>
            Creates a new instance of the latch with an unknown count.
            This will cause the latch to count into the negatives until SetCount is called.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.Reset(System.Int32)">
            <summary>
            Resets the latch with a count.
            </summary>
            <param name="initialCount">The initial counter value.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.Reset">
            <summary>
            Resets the latch with an unknown count.
            This will cause the latch to count into the negatives until SetCount is called.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.SetCount(System.Int32)">
            <summary>
            Sets the counter for the latch.
            This brings the count back up into positive numbers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.Decrement">
            <summary>
            Decrements the counter by one and signals if it reaches zero.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.WaitSync">
            <summary>
            Blocks until the counter reaches zero.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.WaitAsync">
            <summary>
            Returns a promise that resolves once the counter reaches zero.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.ToString">
            <summary>
            Generates a string description of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.OperatingSystem">
            <summary>
            An operating system.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.Unknown">
            <summary>
            Indicates an unknown or default OS.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.Windows">
            <summary>
            Indicates a Windows operating system.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.Android">
            <summary>
            Indicates a Android operating system.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.MacOS">
            <summary>
            Indicates a macOS operating system.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.IOS">
            <summary>
            Indicates a iOS operating system.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.Linux">
            <summary>
            Indicates a Linux operating system.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.TvOS">
            <summary>
            Indicates a tvOS operating system.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.WatchOS">
            <summary>
            Indicates a watchOS operating system.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Architecture">
            <summary>
            A CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.Unknown">
            <summary>
            Indicates an unknown or default CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.X86">
            <summary>
            Indicates an Intel-based 32-bit CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.X64">
            <summary>
            Indicates an Intel-based 64-bit CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.Armv7">
            <summary>
            Indicates an ARMv7-based 32-bit CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.Armv8">
            <summary>
            Indicates an ARMv8-based 32-bit CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.Arm64">
            <summary>
            Indicates an ARM-based 64-bit CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.Mips">
            <summary>
            Indicates a MIPS-based 32-bit CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.Mips64">
            <summary>
            Indicates a MIPS-based 64-bit CPU architecture.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IPlatform">
            <summary>
            Platform-specific methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.IsMobile">
            <summary>
            Gets or sets a value indicating whether this is a mobile platform.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.IsLittleEndian">
            <summary>
            Gets a value indicating whether this is little-endian platform.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.OperatingSystem">
            <summary>
            Gets the current operating system.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.OperatingSystemVersion">
            <summary>
            Gets the current operating system version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.SourceLanguage">
            <summary>
            Gets the current programming language for the source code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.Architecture">
            <summary>
            Gets the current CPU architecture.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.CoreCount">
            <summary>
            Gets the current CPU core count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.PhysicalMemory">
            <summary>
            Gets the current physical memory in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.MachineName">
            <summary>
            Gets the current machine name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.DirectorySeparator">
            <summary>
            Gets the character used to separate directories.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.ProcessId">
            <summary>
            Gets the id of the current process.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.UseFipsAlgorithms">
            <summary>
            Gets or sets a value that indicates whether FIPS algorithms should be used.
            Note that not all platforms or third-party libraries are FIPS-compliant, so
            this should not be used as a guarantee of FIPS compliance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.CryptoLibrary">
            <summary>
            Gets or sets the cryptography library to use.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Pool`1">
            <summary>
            A pool of objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:FM.LiveSwitch.Pool`1.MinSize">
            <summary>
            Gets the minimum size. Value must be >= 0.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pool`1.MaxSize">
            <summary>
            Gets the maximum size. Value must be >= 0.
            A value of 0 indicates no maximum.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pool`1.Size">
            <summary>
            Gets the current size of the pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pool`1.Available">
            <summary>
            Gets the number of available objects.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pool`1.#ctor(FM.LiveSwitch.Function0{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pool`1"/> class
            with a minimum size of 0 and a maximum size of 2,147,483,647.
            </summary>
            <param name="createObject">A function that creates an object.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pool`1.#ctor(FM.LiveSwitch.Function0{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pool`1"/> class
            with a specified minimum size and a maximum size of 2,147,483,647.
            </summary>
            <param name="createObject">A function that creates an object.</param>
            <param name="minSize">The minimum size.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pool`1.#ctor(FM.LiveSwitch.Function0{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pool`1"/> class.
            with a specified minimum size and a specified maximum size.
            </summary>
            <param name="createObject">A function that creates an object.</param>
            <param name="minSize">The minimum size.</param>
            <param name="maxSize">The maximum size.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pool`1.Get">
            <summary>
            Gets an object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Pool`1.Put(`0)">
            <summary>
            Put an object back.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:FM.LiveSwitch.Pool`1.Destroy(FM.LiveSwitch.Action1{`0})">
            <summary>
            Removes all items from the pool and calls a callback for each one.
            </summary>
            <param name="destroyCallback"></param>
        </member>
        <member name="T:FM.LiveSwitch.ProtocolType">
            <summary>
            A protocol type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ProtocolType.Udp">
            <summary>
            Indicates the UDP protocol.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ProtocolType.Tcp">
            <summary>
            Indicates the TCP protocol.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ProtocolType.Tls">
            <summary>
            Indicates the TLS protocol.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ProtocolType.Unknown">
            <summary>
            Indicates an unknown protocol.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.QueuedStream._stream">
            QueuedStream, borrowed from
            https://github.com/statianzo/Fleck/
            (MIT license).
        </member>
        <member name="T:FM.LiveSwitch.EcdsaKey">
            <summary>
            An elliptic-curve key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EcdsaKey.Size">
            <summary>
            Gets the size of the key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EcdsaKey.PublicKey">
            <summary>
            Gets or sets the public key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EcdsaKey.NamedCurve">
            <summary>
            Gets or sets the named curve.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EcdsaKey.PrivateKey">
            <summary>
            Gets or sets the private key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.HasPublic">
            <summary>
            Returns <c>true</c> if the key contains
            public information.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.HasPrivate">
            <summary>
            Returns <c>true</c> if the key contains
            private information.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.EcdsaKey.Type">
            <summary>
            Gets the key type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.ToPublic">
            <summary>
            Creates a copy of this key without the private key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.GetString">
            <summary>
            Serializes this key to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.ParseString(System.String)">
            <summary>
            Deserializes a key from a string.
            </summary>
            <param name="str">The string.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.GetBytes">
            <summary>
            Serializes this key to binary.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.ParseBytes(System.Byte[],System.Boolean)">
            <summary>
            Deserializes a key from binary.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="isPrivate">Whether this is a public key.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.ParseBuffer(FM.LiveSwitch.DataBuffer,System.Boolean)">
            <summary>
            Deserializes a key from binary.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="isPrivate">Whether this is a public key.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.ParseSignature(System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            Parses a signature.
            </summary>
            <param name="signature">The signature.</param>
            <param name="r">The R value.</param>
            <param name="s">The S value.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.SourceLanguage">
            <summary>
            A source language.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SourceLanguage.CSharp">
            <summary>
            Indicates that the source language is C#.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SourceLanguage.Java">
            <summary>
            Indicates that the source language is Java.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SourceLanguage.ObjectiveC">
            <summary>
            Indicates that the source language is Objective-C.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SourceLanguage.TypeScript">
            <summary>
            Indicates that the source language is TypeScript.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Serializer">
            <summary>
            Provides methods for serializing/deserializing .NET value types to/from JSON
            as well as facilities for converting objects and arrays if appropriate callbacks
            are supplied to assist with the conversion.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.StateMachine`1">
            <summary>
            A simple state machine.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StateMachine`1.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StateMachine`1.StateValue">
            <summary>
            Gets the state value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StateMachine`1.SystemTimestamp">
            <summary>
            Gets the system timestamp of the last
            state transition.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StateMachine`1.LastStateTicks">
            <summary>
            Gets the length of time spent in the last state,
            in ticks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StateMachine`1.LastStateMillis">
            <summary>
            Gets the length of time spent in the last state,
            in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.StateMachine`1"/> class.
            </summary>
            <param name="initialState">The initial state.</param>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.StateToValue(`0)">
            <summary>
            Converts a state to an integer value.
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.ValueToState(System.Int32)">
            <summary>
            Converts an integer value to a state.
            </summary>
            <param name="value">The integer value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.AddTransition(`0,`0)">
            <summary>
            Adds an allowed transition.
            </summary>
            <param name="fromState">The "from" state.</param>
            <param name="toState">The "to" state.</param>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.CanTransition(`0)">
            <summary>
            Determines whether a transition to the specified state is allowed.
            </summary>
            <param name="toState">The "to" state.</param>
            <returns>
              <c>true</c> if a transition to the specified state is allowed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.IsReachable(`0)">
            <summary>
            Determines whether a transition to a specified state is possible (even via intermediate hops).
            </summary>
            <param name="state">The "to" state.</param>
            <returns>
              <c>true</c> if a transition to the specified state is possible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.Transition(`0)">
            <summary>
            Transitions to the specified state.
            </summary>
            <param name="toState">The "to" state.</param>
            <returns>
              <c>true</c> if a transition to the specified state is allowed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.GetPromise``1(`0,``0)">
            <summary>
            Gets a promise, which may be resolved or rejected depending on the current state of this machine.
            </summary>
            <param name="state">State, in which promise must be resolved.</param>
            <param name="returnValue">Return type of this promise.</param>
            <returns>Promise, which may be resolved or rejected depending on the current state of this machine</returns>
        </member>
        <member name="T:FM.LiveSwitch.LinkedListNode`1">
            <summary>
            A linked list node.
            </summary>    
        </member>
        <member name="P:FM.LiveSwitch.LinkedListNode`1.Value">
            <summary>
            Gets the item in the linked list.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LinkedListNode`1.Previous">
            <summary>
            Gets the previous node. Null if first.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LinkedListNode`1.Next">
            <summary>
            Gets the next node. Will be <c>null</c> if last.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LinkedListNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LinkedListNode`1"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:FM.LiveSwitch.LinkedListEnumerator`1">
            <summary>
            A linked list enumerator.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FM.LiveSwitch.LinkedListEnumerator`1.#ctor(FM.LiveSwitch.LinkedListNode{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LinkedListEnumerator`1" /> class.
            </summary>
            <param name="root">The root node.</param>
        </member>
        <member name="P:FM.LiveSwitch.LinkedListEnumerator`1.Current">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LinkedListEnumerator`1.CurrentNode">
            <summary>
            Gets the current node.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LinkedListEnumerator`1.MoveNext">
            <summary>
            Moves to the next node.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.LinkedListEnumerator`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ManagedConcurrentDictionary`2">
            <summary>
            A ConcurrentDictonary that maps to the appropriate platform version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentDictionary`2.Count">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentDictionary`2.IsEmpty">
            <summary>
            Gets true if dictionary is empty.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentDictionary`2.Keys">
            <summary>
            Gets an array of keys.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentDictionary`2.Values">
            <summary>
            Gets an array of Values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.#ctor(FM.LiveSwitch.Function1{`0,System.String})">
            <summary>
            Creates a new ManagedConcurrentDictionary.
            </summary>
            <param name="hashCallback">The hash function to use when the backing dictionary requires the key to be a string.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.Clear">
            <summary>
            Clears the dictionary of all items.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.ContainsKey(`0)">
            <summary>
            True if the dictionary contains the key.
            </summary>
            <param name="key">The key to check.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.GetOrAdd(`0,FM.LiveSwitch.Function1{`0,`1})">
            <summary>
            Gets the value from the dictionary or adds a new one if it does not exist.
            </summary>
            <param name="key">The key to use when adding to the dictionary.</param>
            <param name="valueFactory">The Func that will create a value if needed.</param>
            <returns>The dictionary value if exist, the value returned by the Func if not.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.TryAdd(`0,`1)">
            <summary>
            Tries to add a new value to the dictionary.
            </summary>
            <param name="key">The key to use when adding.</param>
            <param name="value">The value to be added to the dictionary.</param>
            <returns>True if added, false if key already exists.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.AddOrUpdate(`0,`1,FM.LiveSwitch.Function2{`0,`1,`1})">
            <summary>
            Updates a value in the dictionary or adds it if it does not exist.
            </summary>
            <param name="key">The key to use for updating for adding.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">The function to use for generating a value based on an existing key.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.AddOrUpdate(`0,`1)">
            <summary>
            Updates a value in the dictionary or adds it if it does not exist.
            </summary>
            <param name="key">The key to use for updating for adding.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get a value from the dictionary.
            </summary>
            <param name="key">They key of the item to get form the dictionary.</param>
            <param name="value">The value that was just received or null if failed.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.TryRemove(`0,`1@)">
            <summary>
            Tries and removes a value from the dictionary.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <param name="value">The value that was just removed.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.TryRemove(`0)">
            <summary>
            Tries and removes a value from the dictionary.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.TryUpdate(`0,`1,`1)">
            <summary>
            Tries to update the value in the dictionary.
            </summary>
            <param name="key">The key to use when updating.</param>
            <param name="newValue">The new value.</param>
            <param name="comparisonValue">The value to compare with the current value in the dictionary.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ManagedConcurrentQueue`1">
            <summary>
            A thread-safe queue.
            </summary>
            <typeparam name="T">The type that the queue holds.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentQueue`1.Count">
            <summary>
            Gets the amount of items in this queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentQueue`1.IsEmpty">
            <summary>
            Gets true if the queue is empty.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentQueue`1.#ctor">
            <summary>
            Creates a new ConcurrentQueue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentQueue`1.Enqueue(`0)">
            <summary>
            Add the item to the end of the queue.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentQueue`1.TryDequeue(`0@)">
            <summary>
            Removes and returns the item at the front of the queue.
            </summary>
            <param name="item">The dequeued item.</param>
            <returns>True if item received, false if no item.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentQueue`1.TryPeek(`0@)">
            <summary>
            Peeks at the first item in the queue.
            </summary>
            <param name="item">The item at the front of the queue.</param>
            <returns>False if queue is empty. True if first item peeked at.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ManagedConcurrentStack`1">
            <summary>
            A ConcurrentStack that maps to the appropriate platform version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentStack`1.Count">
            <summary>
            Gets the amount of items in the stack.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentStack`1.IsEmpty">
            <summary>
            Gets true if the stack is empty.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentStack`1.#ctor">
            <summary>
            Creates a new instance of a ConcurrentStack.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentStack`1.Push(`0)">
            <summary>
            Pushes a new item on top of the stack.
            </summary>
            <param name="item">The item to push.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentStack`1.Clear">
            <summary>
            Clears the stack of all items.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentStack`1.TryPeek(`0@)">
            <summary>
            Tries to peek at the top value in stack.
            </summary>
            <param name="result">The value from the stack if possible, null otherwise.</param>
            <returns>True if peek succeeded, false if not.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentStack`1.TryPop(`0@)">
            <summary>
            Tries to pop the top value off of the stack.
            </summary>
            <param name="result">The value from the top of the stack if possible, null otherwise.</param>
            <returns>True if pop suceeded, false if not.</returns>
        </member>
        <member name="T:FM.LiveSwitch.LinkedList`1">
            <summary>
            A linked list.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:FM.LiveSwitch.LinkedList`1.First">
            <summary>
            Gets the first node in the linked list.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LinkedList`1.Last">
            <summary>
            Gets the last node in the linked list.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LinkedList`1.Count">
            <summary>
            Gets the number of items in this linked list.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.AddFirst(`0)">
            <summary>
            Adds an item to the beginning of the linked list.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.AddLast(`0)">
            <summary>
            Adds an item to the end of the linked list.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.RemoveFirst">
            <summary>
            Removes the first item in the linked list.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.RemoveLast">
            <summary>
            Removes the last item in the linked list.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.AddBeforeNode(FM.LiveSwitch.LinkedListNode{`0},`0)">
            <summary>
            Adds an item before a node.
            </summary>
            <param name="node">The node before which to add the value.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.AddAfterNode(FM.LiveSwitch.LinkedListNode{`0},`0)">
            <summary>
            Adds an item after a node.
            </summary>
            <param name="node">The node after which to add the value.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.Remove(`0)">
            <summary>
            Removes an item from the linked list.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.RemoveNode(FM.LiveSwitch.LinkedListNode{`0})">
            <summary>
            Removes a specific node from the linked list.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.ToList">
            <summary>
            Returns the linked list as a regular list.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.Clear">
            <summary>
            Clears all nodes from the linked list.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.GetEnumerator">
            <summary>
            Gets the enumerator for this linked list.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MutablePair`2">
            <summary>
            A mutable 2-tuple.
            </summary>
            <typeparam name="T1">First type the tuple holds.</typeparam>
            <typeparam name="T2">Second type the tuple holds.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.MutablePair`2.Item1">
            <summary>
            Gets or sets the first item in the tuple.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MutablePair`2.Item2">
            <summary>
            Gets or sets the second item in the tuple.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MutablePair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MutablePair`2"/> class.
            </summary>
            <param name="item1">First item the tuple holds.</param>
            <param name="item2">Second item the tuple holds.</param>
        </member>
        <member name="T:FM.LiveSwitch.MutableUnit`1">
            <summary>
            A mutable 1-tuple.
            </summary>
            <typeparam name="T">Type the tuple holds.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.MutableUnit`1.Item">
            <summary>
            Gets or sets the first item in the tuple.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MutableUnit`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MutableUnit`1"/> class.
            </summary>
            <param name="item">The item to hold.</param>
        </member>
        <member name="T:FM.LiveSwitch.Pair`2">
            <summary>
            A 2-tuple.
            </summary>
            <typeparam name="T1">First type the tuple holds.</typeparam>
            <typeparam name="T2">Second type the tuple holds.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.Pair`2.Item1">
            <summary>
            Gets the first item in the tuple.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pair`2.Item2">
            <summary>
            Gets the second item in the tuple.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pair`2"/> class.
            </summary>
            <param name="item1">First item the tuple holds.</param>
            <param name="item2">Second item the tuple holds.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pair`2.GetHashCode">
            <summary>
            Calculates the hashcode for this pair.
            </summary>        
        </member>
        <member name="M:FM.LiveSwitch.Pair`2.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified System.Object is equal to the current System.Object; otherwise, false.</returns>
        </member>
        <member name="T:FM.LiveSwitch.PriorityQueue`1">
            <summary>
            A priority queue.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FM.LiveSwitch.PriorityQueue`1.#ctor(FM.LiveSwitch.Function2{`0,`0,FM.LiveSwitch.CompareResult})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.PriorityQueue`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:FM.LiveSwitch.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FM.LiveSwitch.PriorityQueue`1.Exists(`0)">
            <summary>
            Checks if an item exists in the queue.
            </summary>
            <param name="item">The item.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.PriorityQueue`1.Dequeue">
            <summary>
            Dequeues an item.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.PriorityQueue`1.Peek">
            <summary>
            
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.PriorityQueue`1.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PriorityQueue`1.IsConsistent">
            <summary>
            Determines whether the queue is consistent.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.ITimeoutTimer">
            <summary>
            A thread-safe class for running timeouts on asynchronous methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ITimeoutTimer.Start(System.Int32)">
            <summary>
            Starts the timer.
            </summary>
            <param name="timeout">The timeout length, in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.ITimeoutTimer.Stop">
            <summary>
            Stops the timer, notifying the calling code if the timeout has already elapsed.
            </summary>
            <returns><c>true</c> if the timer was successfully stopped in time; <c>false</c>
            if the timeout elapsed and the timeout callback has been invoked.</returns>
        </member>
        <member name="T:FM.LiveSwitch.LogEventLogProvider">
            <summary>
            Simple log provider that writes log events to a local array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEventLogProvider.Events">
            <summary>
            Gets the logged events.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogEventLogProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LogEventLogProvider"/> class using <see cref="F:FM.LiveSwitch.LogLevel.Info"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogEventLogProvider.#ctor(FM.LiveSwitch.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LogEventLogProvider"/> class.
            </summary>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogEventLogProvider.Clear">
            <summary>
            Clears all text from the log
            and returns the former contents.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogEventLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.TlsCertificate">
            <summary>
            A certificate to be used for TLS communication.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TlsCertificate.DefaultKeyType">
            <summary>
            Gets or sets the default asymmetric key type (RSA).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.CreateFingerprint(System.String,System.String)">
            <summary>
            Creates a fingerprint.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.CreateCertificate">
            <summary>
            Creates the certificate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.ParseBytes(System.Byte[])">
            <summary>
            Deserializes a certificate from binary.
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificateFromOldCertificate(FM.LiveSwitch.TlsCertificate)">
            <summary>
            Generates a certificate using the issuer/subject name from an
            old certificate and an expiration date of 10 days from now.
            </summary>
            <param name="oldCertificate">The old certificate.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificateFromOldCertificate(FM.LiveSwitch.TlsCertificate,System.DateTime)">
            <summary>
            Generates a certificate using the issuer/subject name from an
            old certificate and the given expiration date.
            </summary>
            <param name="oldCertificate">The old certificate.</param>
            <param name="expirationDate">The expiration date.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate">
            <summary>
            Generates a certificate with a default issuer/subject name and
            an expiration date of 10 days from now.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with a default issuer/subject name and
            an expiration date of 10 days from now.
            </summary>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with a default issuer/subject name and
            an expiration date of 10 days from now.
            </summary>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String)">
            <summary>
            Generates a certificate with the given issuer/subject name and an
            expiration date of 10 days from now.
            </summary>
            <param name="name">The name of the issuer/subject.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with the given issuer/subject name and an
            expiration date of 10 days from now.
            </summary>
            <param name="name">The name of the issuer/subject.</param>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with the given issuer/subject name and an
            expiration date of 10 days from now.
            </summary>
            <param name="name">The name of the issuer/subject.</param>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,System.String)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and
            an expiration date of 10 days from now.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,System.String,FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and
            an expiration date of 10 days from now.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,System.String,FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and
            an expiration date of 10 days from now.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,System.String,System.DateTime)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and expiration date.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="expirationDate">The expiration date.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,System.String,System.DateTime,FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="expirationDate">The expiration date.</param>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,System.String,System.DateTime,FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="expirationDate">The expiration date.</param>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.FromX509Certificate2(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Converts an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> into a <see cref="T:FM.LiveSwitch.TlsCertificate"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.TlsFingerprint">
            <summary>
            A TLS fingerprint.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TlsFingerprint.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TlsFingerprint"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Triple`3">
            <summary>
            A 3-tuple.
            </summary>
            <typeparam name="T1">First type the tuple holds.</typeparam>
            <typeparam name="T2">Second type the tuple holds.</typeparam>
            <typeparam name="T3">Third type the tuple holds.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.Triple`3.Item1">
            <summary>
            Gets the first item in the tuple.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Triple`3.Item2">
            <summary>
            Gets the second item in the tuple.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Triple`3.Item3">
            <summary>
            Gets the third item in the tuple.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Triple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Triple`3"/> class.
            </summary>
            <param name="item1">First item the tuple holds.</param>
            <param name="item2">Second item the tuple holds.</param>
            <param name="item3">Third item the tuple holds.</param>
        </member>
        <member name="T:FM.LiveSwitch.Unit`1">
            <summary>
            A 1-tuple.
            </summary>
            <typeparam name="T">Type the tuple holds.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.Unit`1.Item">
            <summary>
            Gets the item in the tuple.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Unit`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Unit`1"/> class.
            </summary>
            <param name="item">The item to hold.</param>
        </member>
        <member name="T:FM.LiveSwitch.CompareResult">
            <summary>
            The compare result in a sort operation.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CompareResult.Equal">
            <summary>
            Indicates that the two elements are equal.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CompareResult.Negative">
            <summary>
            Indicates that the first element belongs before the second.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CompareResult.Positive">
            <summary>
            Indicates that ths second element belongs before the first.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ConsoleLogProvider">
            <summary>
            Log provider that writes output to the console/terminal.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConsoleLogProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ConsoleLogProvider"/> class using <see cref="F:FM.LiveSwitch.LogLevel.Info"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConsoleLogProvider.#ctor(FM.LiveSwitch.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ConsoleLogProvider"/> class.
            </summary>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConsoleLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="P:FM.LiveSwitch.ConsoleLogProvider.Colorize">
            <summary>
            Gets or sets whether the output should be colorized.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Constants">
            <summary>
            A collection of platform-independent constant values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.NanosecondsPerTick">
            <summary>
            Gets the number of nanoseconds in one tick.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.TicksPerMillisecond">
            <summary>
            Gets the number of ticks in one millisecond.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.MillisecondsPerSecond">
            <summary>
            Gets the number of milliseconds in one second.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.SecondsPerMinute">
            <summary>
            Gets the number of seconds in one minute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.MinutesPerHour">
            <summary>
            Gets the number of minutes in one hour.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.HoursPerDay">
            <summary>
            Gets the number of hours in one day.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.TicksPerSecond">
            <summary>
            Gets the number of ticks in one second.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.TicksPerMinute">
            <summary>
            Gets the number of ticks in one minute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.TicksPerHour">
            <summary>
            Gets the number of ticks in one hour.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.TicksPerDay">
            <summary>
            Gets the number of ticks in one day.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.MillisecondsPerMinute">
            <summary>
            Gets the number of milliseconds in one minute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.MillisecondsPerHour">
            <summary>
            Gets the number of milliseconds in one hour.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.MillisecondsPerDay">
            <summary>
            Gets the number of milliseconds in one hour.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.SecondsPerHour">
            <summary>
            Gets the number of seconds in one hour.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.SecondsPerDay">
            <summary>
            Gets the number of seconds in one day.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.MinutesPerDay">
            <summary>
            Gets the number of minutes in one day.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Crc32">
            <summary>
            Calculates CRC32 checksums.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Crc32.Crc32Polynomial">
            <summary>
            Gets the CRC32 polynomial.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Crc32.Crc32cPolynomial">
            <summary>
            Gets the CRC32c polynomial.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Crc32.Crc32dPolynomial">
            <summary>
            Gets the CRC32d polynomial.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Crc32.Polynomial">
            <summary>
            Gets the polynomial.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Crc32.ReverseBits">
            <summary>
            Gets a value indicating whether to reverse the bits.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Crc32.InitialValue">
            <summary>
            Gets or sets the initial value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Crc32.FinalXorValue">
            <summary>
            Gets or sets the value used to XOR the final result.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Crc32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Crc32"/> class
            using the CRC32 polynomial.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Crc32.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Crc32"/> class
            using the specified polynomial.
            </summary>
            <param name="polynomial">The polynomial.</param>
        </member>
        <member name="M:FM.LiveSwitch.Crc32.#ctor(System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Crc32"/> class
            using the specified polynomial.
            </summary>
            <param name="polynomial">The polynomial.</param>
            <param name="reverseBits">Whether to reverse the bits.</param>
        </member>
        <member name="M:FM.LiveSwitch.Crc32.ComputeHex(System.Byte[])">
            <summary>
            Computes the 32-bit CRC hex string for an array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Crc32.ComputeHex(System.Byte[],System.Int32)">
            <summary>
            Computes the 32-bit CRC hex string for an array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Crc32.ComputeHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the 32-bit CRC hex string for an array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Crc32.Compute(System.Byte[])">
            <summary>
            Computes the 32-bit CRC for an array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Crc32.Compute(System.Byte[],System.Int32)">
            <summary>
            Computes the 32-bit CRC for an array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Crc32.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the 32-bit CRC for an array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.DataBufferStream">
            <summary>
            A data buffer stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferStream.Position">
            <summary>
            Gets or sets the position within the stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferStream.BitPosition">
            <summary>
            Gets or sets the bit position within a byte.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferStream.Length">
            <summary>
            Gets the buffer length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferStream.Available">
            <summary>
            Gets the available bytes to be read from the DataBuffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferStream.Buffer">
            <summary>
            Gets the buffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBufferStream"/> class.
            </summary>
            <param name="dataBufferSize">Size of the data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBufferStream"/> class.
            </summary>
            <param name="dataBufferSize">Size of the data buffer.</param>
            <param name="littleEndian">Whether the data is little-endian.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBufferStream"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.WriteBytes(System.Byte[])">
            <summary>
            Writes the specified data to the DataBuffer and advances the Position by the length of the data.
            </summary>
            <param name="data">The data.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified data to the DataBuffer and advances the Position by the length.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Write(FM.LiveSwitch.DataBuffer)">
            <summary>
            Writes the specified buffer to the DataBuffer and advances the Position by the length of the buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Write8(System.Int32)">
            <summary>
            Writes an 8-bit value to the DataBuffer and advances the Position by 1.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Write16(System.Int32)">
            <summary>
            Writes an 16-bit value to the DataBuffer and advances the Position by 2.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Write32(System.Int64)">
            <summary>
            Writes an 32-bit value to the DataBuffer and advances the Position by 4.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Write64(System.Int64)">
            <summary>
            Writes an 64-bit value to the DataBuffer and advances the Position by 8.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Peek">
            <summary>
            Reads an 8-bit value from the DataBuffer without advancing the Position.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read(System.Int32)">
            <summary>
            Reads the specified length from the DataBuffer and advances the position by the length.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.ReadBytes(System.Int32)">
            <summary>
            Read a specified number of bytes from the DataBuffer and advance the Position by that number.
            </summary>
            <param name="length">The number of bytes to read.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.ReadByte">
            <summary>
            Reads a single byte from the stream and advances the Position by 1.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.NextByte">
            <summary>
            Resets the bit count to 0 and advances to the next byte.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read1">
            <summary>
            Read a single bit and advance the bit position by 1.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read2">
            <summary>
            Read a 2-bit value and advance the BitPosition by 2.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read3">
            <summary>
            Read a 3-bit value and advance the BitPosition by 3.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read4">
            <summary>
            Read a 4-bit value and advance the BitPosition by 4.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read7">
            <summary>
            Reads an 7-bit value from the DataBuffer and advances the BitPosition by 7.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read8">
            <summary>
            Reads an 8-bit value from the DataBuffer and advances the Position by 1.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read15">
            <summary>
            Reads an 15-bit value from the DataBuffer and advances the Position by 1 and the BitPosition by 7.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read16">
            <summary>
            Reads an 16-bit value from the DataBuffer and advances the Position by 2.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read24">
            <summary>
            Reads an 24-bit value from the DataBuffer and advances the Position by 3.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read32">
            <summary>
            Reads an 32-bit value from the DataBuffer and advances the Position by 4.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read40">
            <summary>
            Reads an 40-bit value from the DataBuffer and advances the Position by 5.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read48">
            <summary>
            Reads an 48-bit value from the DataBuffer and advances the Position by 6.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read56">
            <summary>
            Reads an 56-bit value from the DataBuffer and advances the Position by 7.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read64">
            <summary>
            Reads an 64-bit value from the DataBuffer and advances the Position by 8.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.CircularDataBuffer">
            <summary>
            A DataBuffer that uses a circular buffer to manage data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularDataBuffer.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularDataBuffer.Capacity">
            <summary>
            Gets the capacity of this CircularDataBuffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CircularDataBuffer.AppendDataBuffer(FM.LiveSwitch.DataBuffer)">
            <summary>
            Appends a data buffer to the correct place in this circular data buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
        </member>
        <member name="M:FM.LiveSwitch.CircularDataBuffer.BeginWrite(System.Int32)">
            <summary>
            Tells the CircularDataBuffer to expect more data of up to maxWriteSize. Will reshuffle data around or resize if necessary.
            </summary>
            <param name="maxWriteSize">The amount of bytes to make available for writing.</param>
        </member>
        <member name="M:FM.LiveSwitch.CircularDataBuffer.EndWrite(System.Int32)">
            <summary>
            Tells the CircularDataBuffer how much data was actually written so that the Length can be set appropriately.
            </summary>
            <param name="actuallyWrittenSize">The amount of data actually written to the data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.CircularDataBuffer.Discard(System.Int32)">
            <summary>
            Advances the Index by amount so the space used by the data can be reused.
            </summary>
            <param name="amount">The amount to advance the Index by.</param>
        </member>
        <member name="M:FM.LiveSwitch.CircularDataBuffer.Free">
            <summary>
            Frees the internal pooled DataBuffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CircularDataBuffer.Create(System.Int32)">
            <summary>
            Creates a new instance of the CircularDataBuffer that can hold a initial amount of data.
            </summary>
            <param name="initialSize">The initial size of the inner buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.DataBuffer">
            <summary>
            Binary data buffer implementation
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.InnerData">
            <summary>
            Gets or sets backing data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.LittleEndian">
            <summary>
            Gets or sets whether <see cref="P:FM.LiveSwitch.DataBuffer.Data"/> is little-endian.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.IsSubset">
            <summary>
            Gets whether this DataBuffer is a subset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.IsPooled">
            <summary>
            Gets whether this DataBuffer is from a pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.Length">
            <summary>
            Gets or sets the length.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Allocate(System.Int32)">
            <summary>
            Allocates a new data buffer with a given size (in bytes)
            in big-endian format.
            </summary>
            <param name="count">Pre-allocated data buffer size  (in bytes).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Allocate(System.Int32,System.Boolean)">
            <summary>
            Allocates a new data buffer with a given size (in bytes).
            </summary>
            <param name="count">Pre-allocated data buffer size  (in bytes).</param>
            <param name="littleEndian">Whether the data is little-endian.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Wrap(System.Byte[])">
            <summary>
            Produces a new data buffer containing supplied data
            in big-endian format.
            </summary>
            <param name="data">The data.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Wrap(System.Byte[],System.Boolean)">
            <summary>
            Produces a new data buffer containing supplied data.
            </summary>
            <param name="data">The data.</param>
            <param name="littleEndian">Whether the data is little-endian.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Wrap(System.Byte[],System.Int32)">
            <summary>
            Produces a new data buffer containing supplied data
            in big-endian format.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Wrap(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Produces a new data buffer containing supplied data.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            <param name="littleEndian">Whether the data is little-endian.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Wrap(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Produces a new data buffer containing supplied data
            in big-endian format.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Wrap(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Produces a new data buffer containing supplied data.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            <param name="length">The length.</param>
            <param name="littleEndian">Whether the data is little-endian.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBuffer" /> class.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            <param name="length">The length.</param>
            <param name="littleEndian">Whether the data is little-endian.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Keep">
            <summary>
            Increment the retain count by one.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryKeep">
            <summary>
            Attempts to increment the retain count by one.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Free">
            <summary>
            Decrements the retain count by one and returns the Buffer to the pool if zero.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.AreEqual(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            Tests if the two buffers have equal contents.
            </summary>
            <param name="buffer1">First buffer to test.</param>
            <param name="buffer2">Second buffer to test.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.Empty">
            <summary>
            Gets an empty data buffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Resize(System.Int32)">
            <summary>
            Resizes this buffer to a new length with new data being inserted at the end.
            </summary>
            <param name="newLength">The new length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes this buffer to a new length with new data being inserted at a given offset.
            </summary>
            <param name="newLength">The new length.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.CanResize(System.Int32,System.Int32)">
            <summary>
            Gets whether this buffer can be resized to the new length.
            </summary>
            <param name="newLength">The new length.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Resize(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes this buffer to a new length with new data being inserted at a given offset.
            </summary>
            <param name="newLength">The new length.</param>
            <param name="offset">The offset.</param>
            <param name="setZero">Sets empty space to zero.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write(FM.LiveSwitch.DataBuffer)">
            <summary>
            Writes a data buffer to this instance.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes a data buffer to this instance.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32@)">
            <summary>
            Writes a data buffer to this instance.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the buffer length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.WriteBytes(System.Byte[])">
            <summary>
            Writes a byte array to this instance.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.WriteBytes(System.Byte[],System.Int32)">
            <summary>
            Writes a byte array to this instance.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a byte array to this instance.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="bytesIndex">The bytes index.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.WriteBytes(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a byte array to this instance.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="bytesIndex">The bytes index.</param>
            <param name="bytesLength">The bytes length.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.WriteBytes(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Writes a byte array to this instance.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="bytesIndex">The bytes index.</param>
            <param name="bytesLength">The bytes length.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the buffer length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Copy">
            <summary>
            Copies this instance into new memory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Copy(System.Boolean)">
            <summary>
            Copies this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Clone">
            <summary>
            Clones this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Clone(System.Boolean)">
            <summary>
            Clones this instance.
            </summary>
            <param name="littleEndian">Whether to clone into a little endian buffer.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Subset(System.Int32)">
            <summary>
            Gets a subset of this instance.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Subset(System.Int32,System.Int32)">
            <summary>
            Gets a subset of this instance.
            </summary>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Set(System.Byte)">
            <summary>
            Sets the data buffer to the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Set(System.Byte,System.Int32)">
            <summary>
            Sets a subset of the data buffer to the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Set(System.Byte,System.Int32,System.Int32)">
            <summary>
            Sets a subset of the data buffer to the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Append(FM.LiveSwitch.DataBuffer)">
            <summary>
            Appends a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Append(FM.LiveSwitch.DataBuffer[])">
            <summary>
            Appends some buffers.
            </summary>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Prepend(FM.LiveSwitch.DataBuffer)">
            <summary>
            Prepends a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Prepend(FM.LiveSwitch.DataBuffer[])">
            <summary>
            Prepends some buffers.
            </summary>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ToArray">
            <summary>
            Converts this instance to an array of bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ToBytes">
            <summary>
            Converts this instance to an array of bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.FromBytes(System.Byte[])">
            <summary>
            Creates an instance from an array of bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.FromBytes(System.Byte[],System.Boolean)">
            <summary>
            Creates an instance from an array of bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ToHexString">
            <summary>
            Converts this instance to a hexadecimal string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.FromHexString(System.String)">
            <summary>
            Creates an instance from a hexadecimal string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.FromHexString(System.String,System.Boolean)">
            <summary>
            Creates an instance from a hexadecimal string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.SequenceEquals(FM.LiveSwitch.DataBuffer)">
            <summary>
            Compares a data buffer for equality.
            </summary>
            <param name="buffer">The data buffer.</param>
            <returns>
              <c>true</c> if the sequences are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.SequenceEqualsConstantTime(FM.LiveSwitch.DataBuffer)">
            <summary>
            Compares a data buffer for equality in constant time.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
              <c>true</c> if the sequences are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write1(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Writes a 1-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write2(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 2-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write3(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 3-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write4(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 4-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write5(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 5-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write6(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 6-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write7(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 7-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write8(System.Int32,System.Int32)">
            <summary>
            Writes an 8-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write8(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Writes an 8-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write9(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 9-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write10(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 10-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write11(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an 11-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write12(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 12-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write13(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 13-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write14(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 14-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write15(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 15-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write16(System.Int32,System.Int32)">
            <summary>
            Writes a 16-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write16(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Writes a 16-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write17(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 17-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write18(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an 18-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write19(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 19-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write20(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 20-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write21(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 21-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write22(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 22-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write23(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 23-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write24(System.Int32,System.Int32)">
            <summary>
            Writes a 24-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write24(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Writes a 24-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write32(System.Int64,System.Int32)">
            <summary>
            Writes a 32-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write32(System.Int64,System.Int32,System.Int32@)">
            <summary>
            Writes a 32-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write40(System.Int64,System.Int32)">
            <summary>
            Writes a 40-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write40(System.Int64,System.Int32,System.Int32@)">
            <summary>
            Writes a 40-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write48(System.Int64,System.Int32)">
            <summary>
            Writes a 48-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write48(System.Int64,System.Int32,System.Int32@)">
            <summary>
            Writes a 48-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write56(System.Int64,System.Int32)">
            <summary>
            Writes a 56-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write56(System.Int64,System.Int32,System.Int32@)">
            <summary>
            Writes a 56-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write64(System.Int64,System.Int32)">
            <summary>
            Writes a 64-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write64(System.Int64,System.Int32,System.Int32@)">
            <summary>
            Writes a 64-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read1(System.Int32,System.Int32)">
            <summary>
            Reads a 1-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read2(System.Int32,System.Int32)">
            <summary>
            Reads a 2-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read2Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 2-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read3(System.Int32,System.Int32)">
            <summary>
            Reads a 3-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read3Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 3-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read4(System.Int32,System.Int32)">
            <summary>
            Reads a 4-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read4Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 4-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read5(System.Int32,System.Int32)">
            <summary>
            Reads a 5-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read5Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 5-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read6(System.Int32,System.Int32)">
            <summary>
            Reads a 6-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read6Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 6-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read7(System.Int32,System.Int32)">
            <summary>
            Reads a 7-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read7Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 7-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read8(System.Int32)">
            <summary>
            Reads an 8-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read8Signed(System.Int32)">
            <summary>
            Reads an 8-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read8(System.Int32,System.Int32@)">
            <summary>
            Reads an 8-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read8Signed(System.Int32,System.Int32@)">
            <summary>
            Reads an 8-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read9(System.Int32,System.Int32)">
            <summary>
            Reads a 9-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bitoffset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read9Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 9-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read10(System.Int32,System.Int32)">
            <summary>
            Reads a 10-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bitoffset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read10Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 10-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read11(System.Int32,System.Int32)">
            <summary>
            Reads a 11-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bitoffset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read11Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 11-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read12(System.Int32,System.Int32)">
            <summary>
            Reads a 12-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bitoffset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read12Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 12-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read13(System.Int32,System.Int32)">
            <summary>
            Reads a 13-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bitoffset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read13Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 13-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read14(System.Int32,System.Int32)">
            <summary>
            Reads a 14-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read14Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 14-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read15(System.Int32,System.Int32)">
            <summary>
            Reads a 15-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read15Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 15-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read16(System.Int32)">
            <summary>
            Reads a 16-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read16Signed(System.Int32)">
            <summary>
            Reads a 16-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read16(System.Int32,System.Int32@)">
            <summary>
            Reads a 16-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read16Signed(System.Int32,System.Int32@)">
            <summary>
            Reads a 16-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read17(System.Int32,System.Int32)">
            <summary>
            Reads a 17-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read17Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 17-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read18(System.Int32,System.Int32)">
            <summary>
            Reads an 18-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read18Signed(System.Int32,System.Int32)">
            <summary>
            Reads an 18-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read19(System.Int32,System.Int32)">
            <summary>
            Reads a 19-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read19Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 19-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read20(System.Int32,System.Int32)">
            <summary>
            Reads a 20-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read20Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 20-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read21(System.Int32,System.Int32)">
            <summary>
            Reads a 21-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read21Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 21-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read22(System.Int32,System.Int32)">
            <summary>
            Reads a 22-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read22Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 22-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read23(System.Int32,System.Int32)">
            <summary>
            Reads a 23-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read23Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 23-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read24(System.Int32)">
            <summary>
            Reads a 24-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read24Signed(System.Int32)">
            <summary>
            Reads a 24-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read24(System.Int32,System.Int32@)">
            <summary>
            Reads a 24-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read24Signed(System.Int32,System.Int32@)">
            <summary>
            Reads a 24-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read32(System.Int32)">
            <summary>
            Reads a 32-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read32Signed(System.Int32)">
            <summary>
            Reads a 32-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read32(System.Int32,System.Int32@)">
            <summary>
            Reads a 32-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read32Signed(System.Int32,System.Int32@)">
            <summary>
            Reads a 32-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read40(System.Int32)">
            <summary>
            Reads a 40-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read40Signed(System.Int32)">
            <summary>
            Reads a 40-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read40(System.Int32,System.Int32@)">
            <summary>
            Reads a 40-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read40Signed(System.Int32,System.Int32@)">
            <summary>
            Reads a 40-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read48(System.Int32)">
            <summary>
            Reads a 48-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read48Signed(System.Int32)">
            <summary>
            Reads a 48-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read48(System.Int32,System.Int32@)">
            <summary>
            Reads a 48-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read48Signed(System.Int32,System.Int32@)">
            <summary>
            Reads a 48-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read56(System.Int32)">
            <summary>
            Reads a 56-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read56Signed(System.Int32)">
            <summary>
            Reads a 56-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read56(System.Int32,System.Int32@)">
            <summary>
            Reads a 56-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read56Signed(System.Int32,System.Int32@)">
            <summary>
            Reads a 56-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read64(System.Int32)">
            <summary>
            Reads a 64-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read64Signed(System.Int32)">
            <summary>
            Reads a 64-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read64(System.Int32,System.Int32@)">
            <summary>
            Reads a 64-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read64Signed(System.Int32,System.Int32@)">
            <summary>
            Reads a 64-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ReadUtf8String(System.Int32)">
            <summary>
            Read a UTF-8 string.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ReadUtf8String(System.Int32,System.Int32)">
            <summary>
            Reads a UTF-8 string.
            </summary>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead1(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Tries to read a 1-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead2(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 2-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead3(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 3-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead4(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 4-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead5(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 5-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead6(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 6-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead7(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 7-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead8(System.Int32,System.Int32@)">
            <summary>
            Tries to read an 8-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead9(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 9-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead10(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 10-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead11(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read an 11-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead12(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 12-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead13(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 13-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead14(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 14-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead15(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 15-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead16(System.Int32,System.Int32@)">
            <summary>
            Tries to read a 16-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead17(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 17-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead18(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read an 18-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead19(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 19-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead20(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 20-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead21(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 21-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead22(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 22-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead23(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 23-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead24(System.Int32,System.Int32@)">
            <summary>
            Tries to read a 24-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead32(System.Int32,System.Int64@)">
            <summary>
            Tries to read a 32-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead40(System.Int32,System.Int64@)">
            <summary>
            Tries to read a 40-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead48(System.Int32,System.Int64@)">
            <summary>
            Tries to read a 48-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead56(System.Int32,System.Int64@)">
            <summary>
            Tries to read a 56-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead64(System.Int32,System.Int64@)">
            <summary>
            Tries to read a 64-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.And(System.Int32,System.Int32)">
            <summary>
            Performs a bitwise "and" operation on a value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Or(System.Int32,System.Int32)">
            <summary>
            Performs a bitwise "or" operation on a value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Xor(System.Int32,System.Int32)">
            <summary>
            Performs a bitwise "xor" operation on a value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ToJson(FM.LiveSwitch.DataBuffer)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="dataBufferJson">The data buffer JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ToJsonArray(FM.LiveSwitch.DataBuffer[])">
            <summary>
            Serializes an array of instances to JSON.
            </summary>
            <param name="dataBuffers">The data buffers.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.FromJsonArray(System.String)">
            <summary>
            Deserializes an array of instances from JSON.
            </summary>
            <param name="dataBuffersJson">The data buffers JSON.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPooled.RetainCount">
            <summary>
            Gets the amount of times this DataBuffer has been retained. When the count goes to zero, it may be reclaimed by the DataBuffer Pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPooled.IsPooled">
            <summary>
            Gets whether this DataBuffer is from a pool.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataBufferSubset">
            <summary>
            A subset of a DataBuffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferSubset.Parent">
            <summary>
            Gets the Subset parent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferSubset.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferSubset.IsSubset">
            <summary>
            Gets whether this DataBuffer is a subset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferSubset.IsPooled">
            <summary>
            Gets whether this DataBuffer is from a pool.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Append(FM.LiveSwitch.DataBuffer)">
            <summary>
            Appends a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Keep">
            <summary>
            Increment the retain count by one.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Free">
            <summary>
            Decrements the retain count by one and returns the Buffer to the pool if zero.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Subset(System.Int32)">
            <summary>
            Gets a subset of this instance.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Subset(System.Int32,System.Int32)">
            <summary>
            Gets a subset of this instance.
            </summary>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Append(FM.LiveSwitch.DataBuffer[])">
            <summary>
            Appends some buffers.
            </summary>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Prepend(FM.LiveSwitch.DataBuffer)">
            <summary>
            Prepends a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Prepend(FM.LiveSwitch.DataBuffer[])">
            <summary>
            Prepends some buffers.
            </summary>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="T:FM.LiveSwitch.DataContractJsonProvider">
            <summary>
            JSON provider that can serialize/deserialize DataContract types.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataContractJsonProvider.Serialize``1(``0)">
            <summary>
            Serializes a value to a JSON string.
            </summary>
            <typeparam name="T">The type the value to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>
            The serialized JSON string.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.DataContractJsonProvider.Deserialize``1(System.String)">
            <summary>
            Deserializes a value from a JSON string.
            </summary>
            <typeparam name="T">The type the value to deserialize.</typeparam>
            <param name="valueJson">The JSON string to deserialize.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.DatagramSocket">
            <summary>
            A datagram socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DatagramSocket.SendBufferSize">
            <summary>
            Gets the current send buffer size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DatagramSocket.ReceiveBufferSize">
            <summary>
            Gets the current receive buffer size.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DatagramSocket.Send(FM.LiveSwitch.DataBuffer,System.String,System.Int32)">
            <summary>
            Sends data synchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="ipAddress">The remote IP address.</param>
            <param name="port">The remote port.</param>
        </member>
        <member name="M:FM.LiveSwitch.DatagramSocket.ReceiveAsync(FM.LiveSwitch.Action3{FM.LiveSwitch.DataBuffer,System.String,System.Int32},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Receives data asynchronously.
            </summary>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="P:FM.LiveSwitch.DatagramSocket.MaxQueuedPackets">
            <summary>
            Gets or sets the maximum number of packets
            that can be queued at any given point in time.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DatagramSocket.RaiseReceiveSuccess(FM.LiveSwitch.Action3{FM.LiveSwitch.DataBuffer,System.String,System.Int32},FM.LiveSwitch.DataBuffer,System.String,System.Int32)">
            <summary>
            Invokes the receive success callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="buffer">The buffer.</param>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:FM.LiveSwitch.DatagramSocket.RaiseReceiveFailure(FM.LiveSwitch.Action1{System.Exception},System.Exception)">
            <summary>
            Invokes the receive failure callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:FM.LiveSwitch.DatagramSocketCreateArgs">
            <summary>
            Arguments for a datagram socket create event.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DatagramSocketCreateArgs.IPv6">
            <summary>
            Gets or sets a value indicating whether the socket should support IPv6.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DatagramSocketCreateArgs.StreamIndex">
            <summary>
            Gets or sets the stream index.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DatagramSocketCreateArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DatagramSocketCreateArgs" /> class.
            </summary>
            <param name="ipv6">Whether the socket should support IPv6.</param>
        </member>
        <member name="T:FM.LiveSwitch.DebugLogProvider">
            <summary>
            Log provider that uses System.Diagnostics.Debug.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DebugLogProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DebugLogProvider"/> class using <see cref="F:FM.LiveSwitch.LogLevel.Info"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DebugLogProvider.#ctor(FM.LiveSwitch.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DebugLogProvider"/> class.
            </summary>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.DebugLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.FutureExtensions">
            <summary>
            Windows only Future extensions
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FutureExtensions.AsTask``1(FM.LiveSwitch.Future{``0})">
            <summary>
            Converts a future to a .NET Task.
            </summary>
            <param name="future">The future.</param>
        </member>
        <member name="M:FM.LiveSwitch.FutureExtensions.AsTaskAsync``1(FM.LiveSwitch.Future{``0})">
            <summary>
            Converts a future to a .NET Task with TaskCreationOptions.RunContinuationsAsynchronously,
             which forces continuations added to the task to be executed asynchronously.
            </summary>
            <param name="future">The future.</param>
        </member>
        <member name="M:FM.LiveSwitch.FutureExtensions.AsTask``1(FM.LiveSwitch.Future{``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Converts a future to a .NET Task with specific task creation options.
            </summary>
            <param name="future">The future.</param>
            <param name="creationOptions">The task creation options.</param>
        </member>
        <member name="M:FM.LiveSwitch.FutureExtensions.GetAwaiter``1(FM.LiveSwitch.Future{``0})">
            <summary>
            Enables await support for promises. Should not be called directly.
            </summary>
            <param name="future">The future.</param>
        </member>
        <member name="M:FM.LiveSwitch.FutureExtensions.AsPromise``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Converts a .NET Task to a promise.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:FM.LiveSwitch.FutureExtensions.AsPromisePrimitive``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Converts a .NET Task to a promise.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:FM.LiveSwitch.FutureExtensions.AsPromise(System.Threading.Tasks.Task)">
            <summary>
            Converts a .NET Task to a promise.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="T:FM.LiveSwitch.HashContextBase">
            <summary>
            A hash context.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HashContextBase.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.#ctor(FM.LiveSwitch.HashType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.HashContextBase" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.Compute(System.String)">
            <summary>
            Computes the hash.
            </summary>
            <param name="inputString">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.Compute(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the hash.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.DoCompute(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the hash.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.Compute(FM.LiveSwitch.HashType,System.String)">
            <summary>
            Computes the hash for a given type.
            </summary>
            <param name="type">The type.</param>
            <param name="inputString">The input string.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.Compute(FM.LiveSwitch.HashType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the hash for a given type.
            </summary>
            <param name="type">The type.</param>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.HashContext">
            <summary>
            A hash context.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HashContext.#ctor(FM.LiveSwitch.HashType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.HashContext" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.HashContext.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HashContext.DoCompute(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the hash.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.LocalAddress.IPAddress">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalAddress.Mask">
            <summary>
            Gets or sets the subnet mask.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalAddress.AdapterSpeed">
            <summary>
            Gets or sets the adapter speed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalAddress.NetworkType">
            <summary>
            Gets or sets the network type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LocalAddress.#ctor(System.String,System.String,System.Int64,FM.LiveSwitch.NetworkType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LocalAddress"/> class.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <param name="mask">The subnet mask.</param>
            <param name="adapterSpeed">The adapter speed.</param>
            <param name="networkType">The network type.</param>
        </member>
        <member name="M:FM.LiveSwitch.LocalAddress.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalAddress.IsLocalAddress(System.String)">
            <summary>
            Checks if an IP address is locally accessible
            by a source address.
            </summary>
            <param name="address">The address.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.LocalNetwork">
            <summary>
            Local network utility methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LocalNetwork.GetIPAddresses(FM.LiveSwitch.AddressType[])">
            <summary>
            Gets a list of local IP addresses (excluding loopback).
            </summary>
            <param name="addressTypes">The address types.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LocalNetwork.GetIPAddresses(FM.LiveSwitch.AddressType[],System.Boolean)">
            <summary>
            Gets a list of local IP addresses (excluding loopback).
            </summary>
            <param name="addressTypes">The address types.</param>
            <param name="allowPrivate">Whether to include private addresses.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LocalNetwork.GetLocalAddresses(FM.LiveSwitch.AddressType[])">
            <summary>
            Gets the local addresses.
            </summary>
            <param name="addressTypes">The address types.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LocalNetwork.GetAddressType(System.String)">
            <summary>
            Gets the type of the address.
            </summary>
            <param name="ipAddress">The IP address.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.MacContextBase">
            <summary>
            A message authentication code (MAC) context.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MacContextBase.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MacContextBase.#ctor(FM.LiveSwitch.MacType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MacContextBase" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.MacContextBase.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MacContextBase.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MacContextBase.Compute(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the message authentication code (MAC).
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MacContextBase.DoCompute(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the message authentication code (MAC).
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MacContextBase.Compute(FM.LiveSwitch.MacType,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the message authentication code (MAC) for a given type.
            </summary>
            <param name="type">The type.</param>
            <param name="key">The key.</param>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.JsonSerializer">
            <summary>
            Provides methods for serializing/deserializing .NET value types to/from JSON
            as well as facilities for converting objects and arrays if appropriate callbacks
            are supplied to assist with the conversion.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeDictionary``1(System.Collections.Generic.Dictionary{System.String,``0},FM.LiveSwitch.Function1{``0,System.String})">
            <summary>
            Serializes a dictionary into a JSON string.
            </summary>
            <typeparam name="T">The type of value stored in the dictionary.</typeparam>
            <param name="dictionary">The dictionary being serialized.</param>
            <param name="serializeValueCallback">The callback that serializes a value.</param>
            <returns>The dictionary as a JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeDictionary``1(System.String,FM.LiveSwitch.Function0{System.Collections.Generic.Dictionary{System.String,``0}},FM.LiveSwitch.Function1{System.String,``0})">
            <summary>
            Deserializes a JSON string into a dictionary.
            </summary>
            <typeparam name="T">The type of value stored in the dictionary.</typeparam>
            <param name="dictionaryJson">The JSON-encoded dictionary.</param>
            <param name="createDictionaryCallback">The callback that creates a blank dictionary.</param>
            <param name="deserializeValueCallback">The callback that deserializes a value.</param>
            <returns>
            The deserialized dictionary.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeObjectFast``1(``0,FM.LiveSwitch.Action2{``0,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Serializes a <see cref="T:FM.LiveSwitch.Serializable"/> object into a JSON string.
            </summary>
            <typeparam name="T">The type of the object to serialize.</typeparam>
            <param name="source">The object being serialized.</param>
            <param name="callback">The method used for serializing properties.</param>
            <returns>The object as a JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeObject``1(``0,FM.LiveSwitch.Action2{``0,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Serializes an object into a JSON string.
            </summary>
            <typeparam name="T">The type of the object to serialize.</typeparam>
            <param name="source">The object being serialized.</param>
            <param name="callback">The method used for serializing properties.</param>
            <returns>The object as a JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeObjectFast``1(System.String,FM.LiveSwitch.Function0{``0},FM.LiveSwitch.Action3{``0,System.String,System.String})">
            <summary>
            Deserializes a JSON string into a <see cref="T:FM.LiveSwitch.Serializable"/> target object type.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="json">The JSON-encoded string.</param>
            <param name="creator">The method used for creating a new object.</param>
            <param name="callback">The method used for deserializing a property.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeObject``1(System.String,FM.LiveSwitch.Function0{``0},FM.LiveSwitch.Action3{``0,System.String,System.String})">
            <summary>
            Deserializes a JSON string into a target object type.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="json">The JSON-encoded string.</param>
            <param name="creator">The method used for creating a new object.</param>
            <param name="callback">The method used for deserializing a property.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeObjectArray``1(``0[],FM.LiveSwitch.Function1{``0,System.String})">
            <summary>
            Serializes an object array into a JSON string.
            </summary>
            <typeparam name="T">The type of the object to serialize.</typeparam>
            <param name="objects">The object array being serialized.</param>
            <param name="serializer">The callback used to serialize each item in the array.</param>
            <returns>The object array as a JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeObjectArray``1(System.String,FM.LiveSwitch.Function1{System.String,``0})">
            <summary>
            Deserializes a JSON string into an array of target object types.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="json">The JSON-encoded string.</param>
            <param name="deserializer">The callback used to deserialize each item in the array.</param>
            <returns>An array of deserialized objects.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeRawArray(System.String[])">
            <summary>
            Serializes a raw array to JSON.
            </summary>
            <param name="jsons">An array of raw values.</param>
            <returns>A JSON-serialized raw array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeRawArray(System.String)">
            <summary>
            Deserializes a raw array from JSON.
            </summary>
            <param name="json">A JSON-serialized raw array.</param>
            <returns>An array of raw values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeStringArray(System.String[])">
            <summary>
            Serializes a string array to JSON.
            </summary>
            <param name="array">An array of string values.</param>
            <returns>A JSON-serialized string array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeStringArray(System.String)">
            <summary>
            Deserializes a simple string array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized string array.</param>
            <returns>An array of string values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeRaw(System.String)">
            <summary>
            Serializes a piece of raw JSON.
            </summary>
            <param name="dataJson">The raw data.</param>
            <returns>The serialized data.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeRaw(System.String)">
            <summary>
            Deserializes a piece of raw JSON.
            </summary>
            <param name="dataJson">The raw data.</param>
            <returns>The deserialized data.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeString(System.String)">
            <summary>
            Serializes a string.
            </summary>
            <param name="value">The string to serialize.</param>
            <returns>The serialized string value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeString(System.String)">
            <summary>
            Deserializes a string.
            </summary>
            <param name="valueJson">The string to deserialize.</param>
            <returns>The deserialized string value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeBooleanArray(System.Boolean[])">
            <summary>
            Serializes a boolean array to JSON.
            </summary>
            <param name="array">An array of boolean values.</param>
            <returns>A JSON-serialized boolean array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeBooleanArray(System.String)">
            <summary>
            Deserializes a boolean array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized boolean array.</param>
            <returns>An array of boolean values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeBoolean(System.Nullable{System.Boolean})">
            <summary>
            Serializes a boolean value.
            </summary>
            <param name="value">The boolean to serialize.</param>
            <returns>The serialized boolean value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeBoolean(System.String)">
            <summary>
            Deserializes a boolean value.
            </summary>
            <param name="valueJson">The boolean JSON to deserialize.</param>
            <returns>The deserialized boolean value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeIntegerArray(System.Int32[])">
            <summary>
            Serializes a integer array to JSON.
            </summary>
            <param name="array">An array of integer values.</param>
            <returns>A JSON-serialized integer array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeIntegerArray(System.String)">
            <summary>
            Deserializes a integer array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized integer array.</param>
            <returns>An array of integer values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeInteger(System.Nullable{System.Int32})">
            <summary>
            Serializes an integer value.
            </summary>
            <param name="value">The integer to serialize.</param>
            <returns>The serialized integer value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeInteger(System.String)">
            <summary>
            Deserializes an integer value.
            </summary>
            <param name="valueJson">The integer JSON to deserialize.</param>
            <returns>The deserialized integer value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeLongArray(System.Int64[])">
            <summary>
            Serializes a long array to JSON.
            </summary>
            <param name="array">An array of long values.</param>
            <returns>A JSON-serialized long array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeLongArray(System.String)">
            <summary>
            Deserializes a long array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized long array.</param>
            <returns>An array of long values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeLong(System.Nullable{System.Int64})">
            <summary>
            Serializes a long value.
            </summary>
            <param name="value">The long to serialize.</param>
            <returns>The serialized long value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeLong(System.String)">
            <summary>
            Deserializes a long value.
            </summary>
            <param name="valueJson">The long JSON to deserialize.</param>
            <returns>The deserialized long value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeDecimalArray(System.Decimal[])">
            <summary>
            Serializes a decimal array to JSON.
            </summary>
            <param name="array">An array of decimal values.</param>
            <returns>A JSON-serialized decimal array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeDecimalArray(System.String)">
            <summary>
            Deserializes a decimal array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized decimal array.</param>
            <returns>An array of decimal values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeDecimal(System.Nullable{System.Decimal})">
            <summary>
            Serializes a decimal value.
            </summary>
            <param name="value">The decimal to serialize.</param>
            <returns>The serialized decimal value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeDecimal(System.String)">
            <summary>
            Deserializes a decimal value.
            </summary>
            <param name="valueJson">The decimal JSON to deserialize.</param>
            <returns>The deserialized decimal value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeDoubleArray(System.Double[])">
            <summary>
            Serializes a double array to JSON.
            </summary>
            <param name="array">An array of double values.</param>
            <returns>A JSON-serialized double array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeDoubleArray(System.String)">
            <summary>
            Deserializes a double array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized double array.</param>
            <returns>An array of double values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeDouble(System.Nullable{System.Double})">
            <summary>
            Serializes a double value.
            </summary>
            <param name="value">The double to serialize.</param>
            <returns>The serialized double value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeDouble(System.String)">
            <summary>
            Deserializes a double value.
            </summary>
            <param name="valueJson">The double JSON to deserialize.</param>
            <returns>The deserialized double value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeFloatArray(System.Single[])">
            <summary>
            Serializes a float array to JSON.
            </summary>
            <param name="array">An array of float values.</param>
            <returns>A JSON-serialized float array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeFloatArray(System.String)">
            <summary>
            Deserializes a float array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized float array.</param>
            <returns>An array of float values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeFloat(System.Nullable{System.Single})">
            <summary>
            Serializes a float value.
            </summary>
            <param name="value">The float to serialize.</param>
            <returns>The serialized float value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeFloat(System.String)">
            <summary>
            Deserializes a float value.
            </summary>
            <param name="valueJson">The float JSON to deserialize.</param>
            <returns>The deserialized float value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeGuidArray(System.Guid[])">
            <summary>
            Serializes a GUID array to JSON.
            </summary>
            <param name="array">An array of GUID values.</param>
            <returns>A JSON-serialized GUID array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeGuidArray(System.String)">
            <summary>
            Deserializes a GUID array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized GUID array.</param>
            <returns>An array of GUID values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeGuid(System.Nullable{System.Guid})">
            <summary>
            Serializes a globally unique identifier.
            </summary>
            <param name="value">The GUID to serialize.</param>
            <returns>The serialized GUID.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeGuid(System.String)">
            <summary>
            Deserializes a globally unique identifier.
            </summary>
            <param name="valueJson">The GUID JSON to deserialize.</param>
            <returns>The deserialized GUID.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.TrimQuotes(System.String)">
            <summary>
            Trims the quotes from a JavaScript string value.
            </summary>
            <param name="value">The JavaScript string value.</param>
            <returns>The string without quotes.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.EscapeString(System.String)">
            <summary>
            Escapes any special characters in a string.
            </summary>
            <param name="text">The string without escaped characters.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.UnescapeString(System.String)">
            <summary>
            Unescapes any special characters from a string.
            </summary>
            <param name="text">The string with escaped characters.</param>
            <returns>The unescaped string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.IsValidJson(System.String)">
            <summary>
            Determines whether the specified JSON string is valid.
            </summary>
            <param name="json">The JSON string to validate.</param>
            <returns>True if the JSON string is valid; false otherwise.</returns>
        </member>
        <member name="T:FM.LiveSwitch.LogEvent">
            <summary>
            Details about a specific log event.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.Timestamp">
            <summary>
            Gets or sets the event timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.Tag">
            <summary>
            Gets or sets the event tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.LogLevel">
            <summary>
            Gets the level of this log event.
            Alias for <see cref="P:FM.LiveSwitch.LogEvent.Level"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.Scope">
            <summary>
            Gets or sets the event scope.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.Level">
            <summary>
            Gets or sets the event level.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.Message">
            <summary>
            Gets or sets the event message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.Exception">
            <summary>
            Gets or sets the event exception, if one exists.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.ThreadId">
            <summary>
            Gets or sets the ID of the thread generating the event.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogEvent.#ctor(System.DateTime,System.String,System.String,FM.LiveSwitch.LogLevel,System.String,System.Exception,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LogEvent"/> class.
            </summary>
            <param name="timestamp">The event timestamp.</param>
            <param name="tag">The event tag.</param>
            <param name="scope">The event scope.</param>
            <param name="level">The event level.</param>
            <param name="message">The event message.</param>
            <param name="exception">The event exception, if one exists.</param>
            <param name="threadId">The ID of the thread generating the event.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogEvent.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LogEvent.ToJson(FM.LiveSwitch.LogEvent)">
            <summary>
            Serializes a log event to JSON.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LogEvent.FromJson(System.String)">
            <summary>
            Deserializes a log event from JSON.
            </summary>
            <param name="logEventJson">The log event JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LogEvent.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.MacContext">
            <summary>
            A message authentication code (MAC) context.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MacContext.#ctor(FM.LiveSwitch.MacType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MacContext" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:FM.LiveSwitch.MacContext.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MacContext.DoCompute(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the message authentication code (MAC).
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.HashType">
            <summary>
            A hash algorithm.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HashType.Md5">
            <summary>
            Indciates MD5.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HashType.Sha1">
            <summary>
            Indicates SHA1.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HashType.Sha256">
            <summary>
            Indicates SHA256.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MacType">
            <summary>
            A message authentication code (MAC) algorithm.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MacType.HmacMd5">
            <summary>
            Indicates HMAC-MD5.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MacType.HmacSha1">
            <summary>
            Indicates HMAC-SHA1
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MacType.HmacSha256">
            <summary>
            Indicates HMAC-SHA256
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ManagedAutoResetEvent">
            <summary>
            Managed AutoResetEvent.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedAutoResetEvent.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedAutoResetEvent.WaitOne">
            <summary>
            Blocks until signalled.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedAutoResetEvent.WaitOne(System.Int32)">
            <summary>
            Blocks until signalled or until timeout.
            </summary>
            <param name="millisecondsTimeout">Length of time to block for (in ms).</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedAutoResetEvent.Set">
            <summary>
            Signal to release all threads.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ManagedTimer">
            <summary>
            A managed timer that will tick on intervals. Might catchup if callback takes too long.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedTimer.Running">
            <summary>
            Gets whether the timer is running.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedTimer.InTick">
            <summary>
            Gets whether the callback is currently being called.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedTimer.Interval">
            <summary>
            Gets the interval that the timer will tick on.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedTimer.#ctor(System.Int32,FM.LiveSwitch.Action0)">
            <summary>
            Creates a new instance of the managed timer.
            </summary>
            <param name="interval">The millisecond interval to tick on.</param>
            <param name="callback">The callback to use when a tick occurs.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedTimer.Start">
            <summary>
            Starts the timer.
            </summary>
            <returns><c>false</c> if the timer was already started; otherwise, <c>true</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
            <returns><c>false</c> if the timer was already stopped; otherwise, <c>true</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedTimer.Stop(System.Boolean)">
            <summary>
            Stops the timer.
            </summary>
            <param name="waitForStop">True if method should block until timer is stopped.</param>
            <returns><c>false</c> if the timer was already stopped; otherwise, <c>true</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedTimer.StopAsync">
            <summary>
            Stops the timer.
            </summary>
            <returns><c>false</c> if the timer was already stopped; otherwise, <c>true</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedTimer.ChangeInterval(System.Int32)">
            <summary>
            Changes the interval of the timer.
            </summary>
            <param name="newInterval"></param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedTimer.PerSecondInterval(System.Double)">
            <summary>
            Calculates a interval based on how many times you want the timer to tick per second.
            </summary>
            <param name="timesPerSecond">The amount of times to tick per second.</param>
        </member>
        <member name="T:FM.LiveSwitch.Md5Sha1HashContext">
            <summary>
            An MD5-SHA1 hash context.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Md5Sha1HashContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Md5Sha1HashContext"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Md5Sha1HashContext.Compute(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Md5Sha1HashContext.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.RotatingFileLogProvider">
            <summary>
            A Log provider that writes logs to daily log files.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RotatingFileLogProvider.LogDirectory">
            <summary>
            Gets where to store the log files.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RotatingFileLogProvider.DaysToKeep">
            <summary>
            Gets how many days of files to keep.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RotatingFileLogProvider.#ctor(FM.LiveSwitch.LogLevel,System.String,System.Int32)">
            <summary>
            Creates a new instance of the RotatingFileLogProvider.
            </summary>
            <param name="level">The level at which to log at.</param>
            <param name="logDirectory">The directory where the logs will be stored.</param>
            <param name="daysToKeep">How many days to keep logs.</param>
        </member>
        <member name="M:FM.LiveSwitch.RotatingFileLogProvider.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the RotatingFileLogProvider. Defaults to LogLevel.Info.
            </summary>
            <param name="logDirectory">The directory where the logs will be stored.</param>
            <param name="daysToKeep">How many days to keep logs.</param>
        </member>
        <member name="M:FM.LiveSwitch.RotatingFileLogProvider.#ctor(System.String)">
            <summary>
            Creates a new instance of the RotatingFileLogProvider. Defaults to LogLevel.Info, and 7 days.
            </summary>
            <param name="logDirectory">The directory where the logs will be stored.</param>
        </member>
        <member name="M:FM.LiveSwitch.RotatingFileLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.SyslogLogProvider">
            <summary>
            A log provider that sends messages to a syslog server.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SyslogLogProvider.#ctor(System.String)">
            <summary>
            Creates a new instance of the syslog provider.
            </summary>
            <param name="host">The host address of the syslog server.</param>
        </member>
        <member name="M:FM.LiveSwitch.SyslogLogProvider.#ctor(System.String,FM.LiveSwitch.LogLevel)">
            <summary>
            Creates a new instance of the syslog provider.
            </summary>
            <param name="host">The host address of the syslog server.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.SyslogLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.Unity.MonoPInvokeCallbackAttribute">
            <summary>
            IL2CPP requires the MonoPInvokeCallback attribute on Marshal callbacks.
            The attribute class does nothing, it just needs to exist.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Unity.MonoPInvokeCallbackAttribute.#ctor(System.Type)">
            <summary>
            Type constructor.
            </summary>
            <param name="type">Target type.</param>
        </member>
        <member name="T:FM.LiveSwitch.UnixTimestamp">
            <summary>
            Utility class to assist with Unix timestamp conversions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UnixTimestamp.UtcNow">
            <summary>
            Gets the current UTC time in Unix format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.DateTimeToUnix(System.DateTime)">
            <summary>
            Converts a date to a Unix timestamp.
            </summary>
            <param name="dateTime">The date to convert.</param>
            <returns>The equivalent Unix timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.UnixToDateTime(System.Int64)">
            <summary>
            Converts a Unix timestamp to a date.
            </summary>
            <param name="unix">The Unix timestamp to convert.</param>
            <returns>The equivalent date.</returns>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.TicksToUnix(System.Int64)">
            <summary>
            Converts ticks to a Unix timestamp.
            </summary>
            <param name="ticks">The ticks to convert.</param>
            <returns>The equivalent Unix timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.UnixToTicks(System.Int64)">
            <summary>
            Converts a Unix timestamp to ticks.
            </summary>
            <param name="unix">The Unix timestamp to convert.</param>
            <returns>The equivalent ticks.</returns>
        </member>
        <member name="P:FM.LiveSwitch.UnixTimestamp.UtcNowMillis">
            <summary>
            Gets the current UTC time in Unix format with millisecond precision.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.DateTimeToUnixMillis(System.DateTime)">
            <summary>
            Converts a date to a Unix timestamp with millisecond precision.
            </summary>
            <param name="dateTime">The date to convert.</param>
            <returns>The equivalent Unix timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.UnixMillisToDateTime(System.Int64)">
            <summary>
            Converts a Unix timestamp with millisecond precision to a date.
            </summary>
            <param name="unix">The Unix timestamp to convert.</param>
            <returns>The equivalent date.</returns>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.TicksToUnixMillis(System.Int64)">
            <summary>
            Converts ticks to a Unix timestamp with millisecond precision.
            </summary>
            <param name="ticks">The ticks to convert.</param>
            <returns>The equivalent Unix timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.UnixMillisToTicks(System.Int64)">
            <summary>
            Converts a Unix timestamp with millisecond precision to ticks.
            </summary>
            <param name="unix">The Unix timestamp to convert.</param>
            <returns>The equivalent ticks.</returns>
        </member>
        <member name="T:FM.LiveSwitch.TraceLogProvider">
            <summary>
            Log provider that uses System.Diagnostics.Trace.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TraceLogProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TraceLogProvider"/> class using <see cref="F:FM.LiveSwitch.LogLevel.Info"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TraceLogProvider.#ctor(FM.LiveSwitch.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TraceLogProvider"/> class.
            </summary>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.TraceLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.Dns">
            <summary>
            DNS utility methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dns.Resolve(System.String,FM.LiveSwitch.Action2{System.String[],System.Object},System.Object)">
            <summary>
            Resolves a host name to an IP address.
            </summary>
            <param name="name">The name to resolve.</param>
            <param name="callback">The callback to invoke when resolution is complete.</param>
            <param name="state">A custom state object to pass into the callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dns.Resolve(System.String)">
            <summary>
            Resolves a host name to an IP address.
            </summary>
            <param name="hostname">The host name to resolve.</param>
        </member>
        <member name="T:FM.LiveSwitch.DnsRequest">
            <summary>
            A DNS request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DnsRequest.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DnsRequest.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DnsRequest.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DnsRequest.#ctor(System.String,FM.LiveSwitch.Action2{System.String[],System.Object},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DnsRequest" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:FM.LiveSwitch.DnsRequest.Resolve">
            <summary>
            Resolves <see cref="P:FM.LiveSwitch.DnsRequest.Name"/>, executing <see cref="P:FM.LiveSwitch.DnsRequest.Callback"/> when complete.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DoubleHolder">
            <summary>
            Class to hold a double value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DoubleHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DoubleHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DoubleHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DoubleHolder.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DoubleHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Dynamic">
            <summary>
            Supplies class instances with a key-value
            mapping to support dynamic property storage.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dynamic.DynamicProperties">
            <summary>
            Gets or sets the dynamic properties on this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dynamic.GetDynamicValue(System.String)">
            <summary>
            Gets a property value from the local cache.
            </summary>
            <param name="key">The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.</param>
            <returns>The stored value, if found; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Dynamic.SetDynamicValue(System.String,System.Object)">
            <summary>
            Sets a property value in the local cache.
            </summary>
            <param name="key">The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.</param>
            <param name="value">The property value. This can be any object that needs to be stored for future use.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dynamic.UnsetDynamicValue(System.String)">
            <summary>
            Unsets a property value in the local cache.
            </summary>
            <param name="key">The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.</param>
            <returns><c>true</c> if the value was removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Error">
            <summary>
            An error.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Error.ErrorCode">
            <summary>
            Gets or sets the code.
            Obsolete. Alias for <see cref="P:FM.LiveSwitch.Error.Code"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Error.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Error.CodeValue">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Error.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Error.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Error.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Error.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Error" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Error.#ctor(FM.LiveSwitch.ErrorCode,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Error" /> class.
            </summary>
            <param name="code">The code.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.Error.#ctor(FM.LiveSwitch.ErrorCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Error" /> class.
            </summary>
            <param name="code">The code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Error.ToString">
            <summary>
            Returns the string representation of this error.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Error.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Error.ToJson(FM.LiveSwitch.Error)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="error">The error.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Error.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="errorJson">The JSON to deserialize.</param>
            <returns>The deserialized error.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ErrorCode">
            <summary>
            Error codes are six digit values, where the first three digits indicate component, while the remaining three digits particular problem with the component.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SocketSendError">
            <summary>
            Indicates that the socket encountered an error while sending.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SocketReceiveError">
            <summary>
            Indicates that the socket encountered an error while receiving.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SocketClosed">
            <summary>
            Indicates that the socket is closed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SocketSendBufferFull">
            <summary>
            Indicates that the socket's send buffer is full.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IPProtocolMismatch">
            <summary>
            Indicates the IP Protocol mismatch has occurred.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.PacketTooLarge">
            <summary>
            Indicates the supplied Turn relay server is invalid or not resolved.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTryAlternate">
            <summary>
            300 Try Alternate. RFC5389. Indicates that a server using this extension redirects a client to another server by
            replying to a request message with an error response message with an error code of 300 (Try Alternate).
            The server MUST include an ALTERNATE-SERVER attribute in the error response.  The error response
            message MAY be authenticated; however, there are uses cases for
            ALTERNATE-SERVER where authentication of the response is not possible
            or practical.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunBadRequest">
            <summary>
            400 Bad Request. RFC5389. Idicates that the original request was malformed.  The client SHOULD NOT retry the 
            request without modification from the previous attempt.  The server may not be able 
            to generate a valid MESSAGE-INTEGRITY for this error, so the client MUST NOT expect
            a valid MESSAGE-INTEGRITY attribute on this response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunUnauthorized">
            <summary>
            401  Unauthorized. RFC5389. Indicates that the request did not contain the correct
            credentials to proceed.  The client should retry the request with proper credentials.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnForbidden">
            <summary>
            403 Forbidden. RFC 5766. Indicates that the request is valid, but the server is refusing
            to perform it, likely due to administrative restrictions. The client considers the current
            transaction as having failed. The client MAY notify the user or operator and SHOULD NOT retry the
            same request with this server until it believes the problem has been fixed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnMobilityForbidden">
            <summary>
            405 Mobility Forbidden. RFC 8016. Indicates that the request is valid, but the server is refusing to perform it, 
            likely due to administrative restrictions. The client considers the current transaction as having failed.
            The client can notify the user or operator.  The client SHOULD NOT retry sending the Allocate request 
            containing the MOBILITY-TICKET with this server until it believes the problem has been fixed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunUnknownAttribute">
            <summary>
            420  Unknown Attribute. RFC5389. Indicates that the server received a STUN packet containing a comprehension-required 
            attribute that it did not understand. The server MUST put this unknown attribute in the UNKNOWN-ATTRIBUTE 
            attribute of its error response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunStaleCredentials">
            <summary>
            430 Stale credentials; the shared secret sent in the request is expired; the client should obtain a new shared secret.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunIntegrityCheckFailure">
            <summary>
            431 Integrity Check Failure.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunMissingUsername">
            <summary>
            432 Missing Username; the username attribute is not present in the request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnAllocationMismatch">
            <summary>
            437 Allocation Mismatch. RFC 5766. This indicates that the client has picked a 5-tuple that the server sees as already in use.  
            One way this could happen is if an intervening NAT assigned a mapped transport address that was used by another client that recently
            crashed.  The client considers the current transaction as having failed. The client SHOULD pick another client transport address 
            and retry the Allocate request (using a different transaction id).
            The client SHOULD try three different client transport addresses before giving up on this server.Once the client gives up on the
            server, it SHOULD NOT try to create another allocation on the server for 2 minutes.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunStaleNonce">
            <summary>
            438 Stale Nonce. RFC5389. Indicates that the NONCE used by the client was no longer valid. The client should retry, using the
            NONCE provided in the response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunAddressFamilyNotSupported">
            <summary>
            440 Address Family Not Supported. RFC 6156. Indicates that the server does not support the address family requested by the client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnWrongCredentials">
            <summary>
            441 Wrong Credentials. RFC 5766. Indicates that wrong credential were used by the client. The client should not receive this error
            in response to an Allocate request.  The client MAY notify the user or operator and SHOULD NOT retry the same request with this server
            until it believes the problem has been fixed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnUnsupportedTransportProtocol">
            <summary>
            442 Unsupported Transport Protocol. The client should not receive this error in response to a request for a UDP allocation. The
            client MAY notify the user or operator and SHOULD NOT reattempt the request with this server until it believes the problem has
            been fixed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnPeerAddressFamilyMismatch">
            <summary>
            443 Peer Address Family Mismatch. A peer address was of a different address family than that of the relayed transport address of the allocation.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnConnectionAlreadyExists">
            <summary>
            446 Connection Already exists. This indicates that either 1) the server is currently processing a Connect request for this allocation with 
            the same XOR-PEER-ADDRESS; OR 2) the server has already successfully processed a Connect request for this allocation with the same XOR-PEER-ADDRESS,
            and the resulting client and peer data connections are either pending or active
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnConnectionTimeoutOrFailure">
            <summary>
            447 Connection Timeout or Failure. This indicates that the TURN server was unable to connect to the peer. The client MAY retry with the same
            XOR-PEER-ADDRESS attribute, but MUST wait at least 10 seconds.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnAllocationQuotaReached">
            <summary>
            486 Allocation Quota Reached. The server is currently unable to create any more allocations with this username.  The client considers the current
            transaction as having failed. The client SHOULD wait at least 1 minute before trying to create any more allocations on the server. 
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunIceRoleConflict">
            <summary>
            487 Role Conflict. The Binding request contained either the ICE-CONTROLLING or ICE-CONTROLLED attribute, indicating a role that conflicted with the server. 
            The server ran a tie-breaker based on the tie-breaker value in the request and determined that the client needs to switch roles.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunServerError">
            <summary>
             500 Server Error. RFC5389. Indicates that the server has suffered a temporary error. The client should try again.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnInsufficientCapacity">
            <summary>
            508 Insufficient Capacity. The server has no more relayed transport addresses available, or has none with the requested properties, or the one that was 
            reserved is no longer available. The client considers the current operation as having failed. If the client is using either the EVEN-PORT or the 
            RESERVATION-TOKEN attribute, then the client MAY choose to remove or modify this attribute and try again immediately.  Otherwise, the client SHOULD 
            wait at least 1 minute before trying to create any more allocations on this server.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunInvalidResponseType">
            <summary>
            Indicates Invalid Response Type, where message type obtained in reponse to a request is of unexpected type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunInvalidErrorCode">
            <summary>
            Indicates that a failed response does not contain an error code or when the error code is inconsistent with
            the contents of the response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunInvalidTransactionId">
            <summary>
            Indicates Invalid Stun Transaction Id
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunUnknownStunErrorCode">
            <summary>
            Indicates Unknown Stun Error Code
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunInvalidMessageIntegrity">
            <summary>
            Indicates Invalid Stun Message Integrity
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SocketIPError">
            <summary>
            Indicates that the stream socket ip is invalid, remote server ip is invalid or there is a mimatch in the the ip of the socket and the remote server ip version 
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceLocalRelayedDatagramCandidateError">
            <summary>
            Indicates the local relayed candidate could not be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceLocalServerReflexiveCandidateError">
            <summary>
            Indicates the local server reflexive could not be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SocketManagerInvalidState">
            <summary>
            Indicates that an operation was attempted in an invalid state.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceStartError">
            <summary>
            Indicates that the ICE gatherer could not be started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceUnsuitableSocketAssignment">
            <summary>
            Indicates that RTCP datagram sockets were assigned incorrectly after the gatherer was started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceAllPortsInUse">
            <summary>
            Indicates that all ports are in use.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceLocalAddressUnavailable">
            <summary>
            Indicates that no local addresses were found.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceGenericGathererError">
            <summary>
            Indicates that an Ice Gatherer error occurred.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceRefreshTimeout">
            <summary>
            Indicates that the relayed candidate refresh request timed out.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceRefreshError">
            <summary>
            Indicates that the relayed candidate refresh request failed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceCreatePermissionTimeout">
            <summary>
            Indicates that the candidate pair create-permission request timed out.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceCreatePermissionError">
            <summary>
            Indicates that the candidate pair create-permission request failed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceConnectivityCheckFailed">
            <summary>
            Indicates that connectivity checks failed on the candidate pair.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceSendError">
            <summary>
            Indicates that the ICE transport encountered an error while sending.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IcePeerReflexiveError">
            <summary>
            Indicates that the ICE transport encountered a problem creating a peer reflexive candidate.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IncompatibleIceSetup">
            <summary>
            Indicates that the IcePolicy requirements are not supported by the remote client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.DtlsInternalError">
            <summary>
            Indicates that an internal DTLS error occurred.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.DtlsKeyExchangeFailed">
            <summary>
            Indicates that the DTLS key exchange failed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.DtlsNotReady">
            <summary>
            Indicates that a DTLS message was received before the DTLS endpoint was ready.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SctpNoPayloadData">
            <summary>
            Indicates that an SCTP message had no payload data.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SctpUnsupportedStream">
            <summary>
            Indicates that an attempt was made to send data on an unsupported stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SctpInvalidState">
            <summary>
            Indicates that an operation was attempted while in a state that doesn't allow it.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SctpInternalError">
            <summary>
            Indicates that an internal SCTP error occurred.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.MediaTransportFailed">
            <summary>
            Indicates the media transport failed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ReliableDataChannelOpenError">
            <summary>
            Indicates that the reliable data channel encountered an error while opening.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ReliableDataChannelSendError">
            <summary>
            Indicates that the reliable data channel encountered an error while sending.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionInvalidArchitecture">
            <summary>
            Indicates that the connection architecture is invalid.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionInternalError">
            <summary>
            Indicates that an internal connection error occurred.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionTransportStartError">
            <summary>
            Indicates that the connection's inner transport could not be started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionTransportClosed">
            <summary>
            Indicates that the connection's inner transport is closed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionDeadStream">
            <summary>
            Indicates that a connection has failed connectivity checks for an extended period.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionNotEstablished">
            <summary>
            Indicates that a connection has not been established within allocated timeframe.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionRemoteFailure">
            <summary>
            Indicates that the remote end of the connection signalled failure.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionSimulcastNotSupported">
            <summary>
            Indicates that simulcast is not supported.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StreamDisabled">
            <summary>
            Indicates that the stream was disabled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StreamEncryptionMismatch">
            <summary>
            Indicates that the local and remote stream encryption modes are not compatible.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StreamDirectionMismatch">
            <summary>
            Indicates that the local and remote stream directions are not compatible.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.DataStreamDirectionCannotBeChanged">
            <summary>
            Indicates that an attempt was made to modify Data Stream direction; however, this is not allowed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.InvalidStreamDirectionChange">
            <summary>
            Indicates that a Media Stream direction change attempt was made; however, new direction setting is not supported by the existing stream capabilities (inputs or outpus are missing).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.LocalDescriptionError">
            <summary>
            Indicates that an error was encountered while processing the local description.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.RemoteDescriptionError">
            <summary>
            Indicates that an error was encountered while processing the remote description.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceLocalRelayedStreamCandidateError">
            <summary>
            Indicates the local relayed candidate could not be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceInvalidServerAssignmentError">
            <summary>
            Indicates the supplied Turn relay server is invalid or not resolved
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.FileAssistant">
            <summary>
            A utility class for reading/writing from/to a <see cref="P:FM.LiveSwitch.FileAssistant.File"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FileAssistant.File">
            <summary>
            Gets the file.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.ReadAllBytes(System.String)">
            <summary>
            Reads all the bytes of a file into a byte array.
            </summary>
            <param name="path">The filepath to the file to read.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.FileAssistant.LittleEndian">
            <summary>
            Gets or sets whether to read/write using little-endian ordering.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.#ctor(FM.LiveSwitch.FileStream)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FileAssistant"/> class.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write(System.Byte[])">
            <summary>
            Adds a value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds a value to a File.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write8(System.Int32)">
            <summary>
            Adds an 8-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write16(System.Int32)">
            <summary>
            Adds a 16-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write24(System.Int32)">
            <summary>
            Adds a 24-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write32(System.Int64)">
            <summary>
            Adds a 32-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write40(System.Int64)">
            <summary>
            Adds a 40-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write48(System.Int64)">
            <summary>
            Adds a 48-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write56(System.Int64)">
            <summary>
            Adds a 56-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write64(System.Int64)">
            <summary>
            Adds a 64-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque8(System.Byte[])">
            <summary>
            Adds an 8-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque16(System.Byte[])">
            <summary>
            Adds a 16-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque24(System.Byte[])">
            <summary>
            Adds a 24-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque32(System.Byte[])">
            <summary>
            Adds a 32-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque40(System.Byte[])">
            <summary>
            Adds a 40-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque48(System.Byte[])">
            <summary>
            Adds a 48-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque56(System.Byte[])">
            <summary>
            Adds a 56-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque64(System.Byte[])">
            <summary>
            Adds a 64-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read(System.Int32)">
            <summary>
            Reads a value from a File.
            </summary>
            <param name="length">The number of bytes to read.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read8">
            <summary>
            Converts an 8-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read16">
            <summary>
            Converts a 16-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read24">
            <summary>
            Converts a 24-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read32">
            <summary>
            Converts a 32-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read40">
            <summary>
            Converts a 40-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read48">
            <summary>
            Converts a 48-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read56">
            <summary>
            Converts a 56-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read64">
            <summary>
            Converts a 64-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.ReadOpaque8">
            <summary>
            Reads an 8-bit-length opaque value from a File.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.ReadOpaque16">
            <summary>
            Reads a 16-bit-length opaque value from a File.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.ReadOpaque24">
            <summary>
            Reads a 24-bit-length opaque value from a File.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.ReadOpaque32">
            <summary>
            Reads a 32-bit-length opaque value from a File.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteTo(System.Int32,System.Byte[])">
            <summary>
            Adds a value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write8To(System.Int32,System.Int32)">
            <summary>
            Adds an 8-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write16To(System.Int32,System.Int32)">
            <summary>
            Adds a 16-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write24To(System.Int32,System.Int32)">
            <summary>
            Adds a 24-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write32To(System.Int32,System.Int64)">
            <summary>
            Adds a 32-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write40To(System.Int32,System.Int64)">
            <summary>
            Adds a 40-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write48To(System.Int32,System.Int64)">
            <summary>
            Adds a 48-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write56To(System.Int32,System.Int64)">
            <summary>
            Adds a 56-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write64To(System.Int32,System.Int64)">
            <summary>
            Adds a 64-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque8To(System.Int32,System.Byte[])">
            <summary>
            Adds an 8-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque16To(System.Int32,System.Byte[])">
            <summary>
            Adds a 16-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque24To(System.Int32,System.Byte[])">
            <summary>
            Adds a 24-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque32To(System.Int32,System.Byte[])">
            <summary>
            Adds a 32-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque40To(System.Int32,System.Byte[])">
            <summary>
            Adds a 40-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque48To(System.Int32,System.Byte[])">
            <summary>
            Adds a 48-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque56To(System.Int32,System.Byte[])">
            <summary>
            Adds a 56-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque64To(System.Int32,System.Byte[])">
            <summary>
            Adds a 64-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.FileStream">
            <summary>
            A file stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FileStream.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FileStream"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:FM.LiveSwitch.FileStream.Length">
            <summary>
            Gets the file length (must be opened first).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FileStream.Position">
            <summary>
            Gets or sets the position in the file.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.Exists">
            <summary>
            Returns a boolean value indicating whether the file exists.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileStream.Open(FM.LiveSwitch.FileStreamAccess)">
            <summary>
            Opens the file.
            </summary>
            <param name="access">The access requirement.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.Close">
            <summary>
            Closes the file.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.Flush">
            <summary>
            Flushes the file contents.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the file.
            </summary>
            <param name="data">The data to write to the file.</param>
            <param name="index">The index at which to start reading.</param>
            <param name="length">The number of bytes to write.</param>
            <returns><c>true</c> if the data was written; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.WriteTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the file.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="data">The data to write to the file.</param>
            <param name="index">The index at which to start reading.</param>
            <param name="length">The number of bytes to write.</param>
            <returns><c>true</c> if the data was written; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the file.
            </summary>
            <param name="data">The buffer to fill with data from the file.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="length">The maximum number of bytes to read.</param>
            <returns>The number of bytes read from the file.</returns>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>True if file is deleted, false if exception occured.</returns>
        </member>
        <member name="T:FM.LiveSwitch.FileStreamAccess">
            <summary>
            A file stream access type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.FileStreamAccess.Read">
            <summary>
            Indicates read access.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.FileStreamAccess.Write">
            <summary>
            Indicates write access.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.PathUtility">
            <summary>
            Collection of utility methods for working with the file system.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PathUtility.GetTempPath">
            <summary>
            Returns the temporary directory location from the system.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PathUtility.GetAbsolutePath(System.String)">
            <summary>
            Get the absolute file path of the given directory or file.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PathUtility.CombinePaths(System.String,System.String)">
            <summary>
            Combines two strings into a filesystem path.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PathUtility.CombinePaths(System.String[])">
            <summary>
            Combines the array of strings into a filesystem path.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PathUtility.Delete(System.String)">
            <summary>
            Delete a file.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PathUtility.CreateSymlink(System.String,System.String)">
            <summary>
            Create a symlink.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.FloatHolder">
            <summary>
            Class to hold a float value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FloatHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FloatHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FloatHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FloatHolder.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FloatHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Function0`1">
            <summary>
            Generic method signature for callbacks with no parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function1`2">
            <summary>
            Generic method signature for callbacks with one parameter and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function10`11">
            <summary>
            Generic method signature for callbacks with ten parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function2`3">
            <summary>
            Generic method signature for callbacks with two parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function3`4">
            <summary>
            Generic method signature for callbacks with three parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function4`5">
            <summary>
            Generic method signature for callbacks with four parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function5`6">
            <summary>
            Generic method signature for callbacks with five parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function6`7">
            <summary>
            Generic method signature for callbacks with six parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function7`8">
            <summary>
            Generic method signature for callbacks with seven parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function8`9">
            <summary>
            Generic method signature for callbacks with eight parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function9`10">
            <summary>
            Generic method signature for callbacks with nine parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Future`1">
            <summary>
            A future.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.Then(FM.LiveSwitch.Action1{`0})">
            <summary>
            Appends a handler to be executed when the promise is resolved.
            </summary>
            <param name="resolveAction">The resolve action.</param>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.Then``1(FM.LiveSwitch.Function1{`0,FM.LiveSwitch.Future{``0}})">
            <summary>
            Appends a handler to be executed when the promise is resolved.
            </summary>
            <param name="resolveFunction">The resolve function.</param>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.Then(FM.LiveSwitch.Action1{`0},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Appends handlers to be executed when the promise is resolved or rejected.
            </summary>
            <param name="resolveAction">The resolve action.</param>
            <param name="rejectAction">The reject action.</param>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.Then``1(FM.LiveSwitch.Function1{`0,FM.LiveSwitch.Future{``0}},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Appends handlers to be executed when the promise is resolved or rejected.
            </summary>
            <param name="resolveFunction">The resolve function.</param>
            <param name="rejectAction">The reject action.</param>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.Fail(FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Appends a handler to be executed when the promise is rejected.
            </summary>
            <param name="rejectAction">The reject action.</param>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.Fail(FM.LiveSwitch.Function1{System.Exception,FM.LiveSwitch.Future{`0}})">
            <summary>
            Appends a handler to be executed when the promise is rejected.
            </summary>
            <param name="rejectFunction">The reject function.</param>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.WaitForResult">
            <summary>
            Blocks the current thread from proceeding
            until the future has a result. Throws an
            exception if the promise is rejected.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.WaitForResult(System.Int32)">
            <summary>
            Blocks the current thread from proceeding
            until the future has a result. Throws an
            exception if the promise is rejected or
            if the timeout period elapses.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait before timing out.</param>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.WaitForPromise">
            <summary>
            Blocks the current thread from proceeding
            until the future state has been resolved
            or rejected.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.WaitForPromise(System.Int32)">
            <summary>
            Blocks the current thread from proceeding
            until the future state has been resolved
            or rejected or if the timeout period elapses.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait before timing out.</param>
        </member>
        <member name="T:FM.LiveSwitch.FutureBase`1">
            <summary>
            Future base properties/methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FutureBase`1.State">
            <summary>
            Gets or sets the current state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FutureBase`1.Result">
            <summary>
            Gets or sets the result if resolved.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FutureBase`1.Exception">
            <summary>
            Gets or sets the exception if rejected.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpFileTransfer">
            <summary>
            Helper methods for downloading binary files.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpFileTransfer.DownloadFile(System.String,System.String)">
            <summary>
            Downloads a file from the url. Decompresses using BZip2 if needed. Then saves to the file system at filePath.
            </summary>
            <param name="url">The URL.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpFileTransfer.DownloadFile(System.String)">
            <summary>
            Downloads a file from the url. Decompresses using BZip2 if needed.
            </summary>
            <param name="url">The URL.</param>        
        </member>
        <member name="T:FM.LiveSwitch.HttpMethod">
            <summary>
            The method used by an HTTP request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HttpMethod.Get">
            <summary>
            Indicates a GET request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HttpMethod.Head">
            <summary>
            Indicates a HEAD request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HttpMethod.Post">
            <summary>
            Indicates a POST request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HttpMethod.Put">
            <summary>
            Indicates a PUT request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HttpMethod.Patch">
            <summary>
            Indicates a PATCH request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HttpMethod.Delete">
            <summary>
            Indicates a DELETE request.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpRequestArgs">
            <summary>
            Arguments for sending an HTTP request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.Sender">
            <summary>
            Gets or sets the sender of the content, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.Method">
            <summary>
            Gets or sets the HTTP method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.BinaryContent">
            <summary>
            Gets or sets the binary content to transfer over HTTP.
            Overrides <see cref="P:FM.LiveSwitch.HttpRequestArgs.TextContent"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.TextContent">
            <summary>
            Gets or sets the text content to transfer over HTTP.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.Url">
            <summary>
            Gets or sets the target URL for the HTTP request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.Headers">
            <summary>
            Gets or sets the headers to transfer over HTTP.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.Timeout">
            <summary>
            Gets or sets the number of milliseconds to wait before timing out the HTTP transfer.
            Defaults to 15000 ms (15 seconds).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.MaxRetries">
            <summary>
            Gets or sets the maximum number of retries allowed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.OnRequestCreated">
            <summary>
            Gets or sets the callback to invoke once the outgoing HTTP request is created.
            See <see cref="T:FM.LiveSwitch.HttpRequestCreatedArgs" /> for callback argument details.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.OnResponseReceived">
            <summary>
            Gets or sets the callback to invoke once the incoming HTTP response has been
            received. See <see cref="T:FM.LiveSwitch.HttpResponseReceivedArgs" /> for callback argument details.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpRequestArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.HttpRequestArgs"/> class
            with default values.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpRequestCreatedArgs">
            <summary>
            Arguments passed into callbacks when an HTTP request is created.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestCreatedArgs.RequestArgs">
            <summary>
            Gets or sets the original request arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestCreatedArgs.Sender">
            <summary>
            Gets or sets the sender of the request, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestCreatedArgs.Request">
            <summary>
            Gets or sets the outgoing HTTP request about to be sent to the server.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpResponseArgs">
            <summary>
            Arguments for receiving an HTTP response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseArgs.BinaryContent">
            <summary>
            Gets or sets the binary content read from the HTTP response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseArgs.TextContent">
            <summary>
            Gets or sets the text content read from the HTTP response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseArgs.StatusCode">
            <summary>
            Gets or sets the status code read from the HTTP response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseArgs.Headers">
            <summary>
            Gets or sets the headers read from the HTTP response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseArgs.Exception">
            <summary>
            Gets or sets the exception generated while completing the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseArgs.Retries">
            <summary>
            Gets or sets the number of retries that were required.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseArgs.RequestArgs">
            <summary>
            Gets or sets the original <see cref="T:FM.LiveSwitch.HttpRequestArgs" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpResponseArgs.#ctor(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.HttpResponseArgs"/> class.
            </summary>
            <param name="requestArgs">The request arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.HttpResponseReceivedArgs">
            <summary>
            Arguments passed into callbacks when an HTTP response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseReceivedArgs.RequestArgs">
            <summary>
            Gets or sets the original request arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseReceivedArgs.Sender">
            <summary>
            Gets or sets the sender of the request, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseReceivedArgs.Response">
            <summary>
            Gets or sets the incoming HTTP response received from the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseReceivedArgs.Content">
            <summary>
            Gets or sets the binary content received from the server.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpSendFinishArgs">
            <summary>
            Arguments for <see cref="E:FM.LiveSwitch.HttpTransfer.OnSendStart" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendFinishArgs.Sender">
            <summary>
            Gets or sets the sender of the request, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendFinishArgs.RequestBinaryContent">
            <summary>
            Gets or sets the binary content of the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendFinishArgs.RequestTextContent">
            <summary>
            Gets or sets the text content of the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendFinishArgs.ResponseBinaryContent">
            <summary>
            Gets or sets the binary content of the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendFinishArgs.ResponseTextContent">
            <summary>
            Gets or sets the binary content of the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendFinishArgs.ResponseHeaders">
            <summary>
            Gets or sets the headers of the response.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpSendStartArgs">
            <summary>
            Arguments for <see cref="E:FM.LiveSwitch.HttpTransfer.OnSendStart" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendStartArgs.Sender">
            <summary>
            Gets or sets the sender of the request, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendStartArgs.RequestBinaryContent">
            <summary>
            Gets or sets the binary content of the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendStartArgs.RequestTextContent">
            <summary>
            Gets or sets the text content of the request.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpTransfer">
            <summary>
            Base class that defines methods for transferring content over HTTP.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.SendBinary(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends binary content synchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <returns>The response arguments from the server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.SendText(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends text content synchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <returns>The response arguments from the server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.SendBinaryAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends binary content asynchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <param name="callback">The callback to execute on success or failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.SendTextAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends text content asynchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <param name="callback">The callback to execute on success or failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.HttpTransfer.OnSendStart">
            <summary>
            Raised before an HTTP request is sent.
            </summary>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.HttpSendStartArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.HttpTransfer.OnSendFinish">
            <summary>
            Raised before an HTTP request is sent.
            </summary>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.HttpSendFinishArgs"/> associated with the event.</parameter>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.Send(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends a request synchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <returns>The resulting response.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.SendAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <param name="callback">The callback to execute with the resulting response.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.AddQueryToUrl(System.String,System.String)">
            <summary>
            Escapes and adds a query parameter as a key/empty-value pair to a URL.
            </summary>
            <param name="url">The URL with the query to which the key/value should be added.</param>
            <param name="key">The key of the query parameter to add.</param>
            <returns>The original URL with the query parameter added.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.AddQueryToUrl(System.String,System.String,System.String)">
            <summary>
            Escapes and adds a query parameter as a key/value pair to a URL.
            </summary>
            <param name="url">The URL with the query to which the key/value should be added.</param>
            <param name="key">The key of the query parameter to add.</param>
            <param name="value">The value of the query parameter to add.</param>
            <returns>The original URL with the query parameter added.</returns>
        </member>
        <member name="P:FM.LiveSwitch.HttpTransfer.WildcardCharacters">
            <summary>
            Gets or sets the wildcard characters used
            to replace asterisks in ReplaceWildcards.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.GetRandomWildcardCharacter">
            <summary>
            Gets a random wildcard character.
            </summary>
            <returns>A random wildcard character.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.ReplaceWildcards(System.String)">
            <summary>
            Replaces asterisks in URLs with characters from
            WildcardCharacters.
            </summary>
            <param name="url">The URL with asterisks.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.HttpTransferFactory">
            <summary>
            Creates implementations of <see cref="T:FM.LiveSwitch.HttpTransfer"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpTransferFactory.CreateHttpTransfer">
            <summary>
            Gets or sets the callback that creates an HTTP-based transfer class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransferFactory.GetHttpTransfer">
            <summary>
            Gets an instance of the HTTP-based transfer class.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.HttpWebRequestSender">
            <summary>
            An HTTP web request sender.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpWebRequestTransfer">
            <summary>
            Defines methods for transferring content over HTTP using the HttpWebRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpWebRequestTransfer.GetPlatformCode">
            <summary>
            Gets the short code indicating the current platform.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.HttpWebRequestTransfer.SendBinary(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends binary content synchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <returns>The response arguments from the server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpWebRequestTransfer.SendText(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends text content synchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <returns>The response arguments from the server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpWebRequestTransfer.SendBinaryAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends binary content asynchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <param name="callback">The callback to execute on success or failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpWebRequestTransfer.SendTextAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends text content asynchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <param name="callback">The callback to execute on success or failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpWebRequestTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpWebRequestTransfer.UseProxy">
            <summary>
            Gets or sets whether to use the system
            proxy when creating an HttpWebRequest.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ILog">
            <summary>
            ILog interface for loggers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILog.Tag">
            <summary>
            Gets the tag of the logger.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Flush">
            <summary>
            Ensures that all logs are written out.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Verbose(System.String)">
            <summary>
            Writes a verbose message to the log.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Verbose(System.String,System.String)">
            <summary>
            Writes a verbose message to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Verbose(System.String,System.Exception)">
            <summary>
            Writes a verbose message with exception to the log.
            </summary>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Verbose(System.String,System.String,System.Exception)">
            <summary>
            Writes a verbose message with exception to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Debug(System.String)">
            <summary>
            Writes a debug message to the log.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Debug(System.String,System.String)">
            <summary>
            Writes a debug message to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Debug(System.String,System.Exception)">
            <summary>
            Writes a debug message with exception to the log.
            </summary>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Debug(System.String,System.String,System.Exception)">
            <summary>
            Writes a debug message with exception to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Info(System.String)">
            <summary>
            Writes a info message to the log.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Info(System.String,System.String)">
            <summary>
            Writes a info message to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Info(System.String,System.Exception)">
            <summary>
            Writes an info message with exception to the log.
            </summary>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Info(System.String,System.String,System.Exception)">
            <summary>
            Writes an info message with exception to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Warn(System.String)">
            <summary>
            Writes a warn message to the log.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Warn(System.String,System.String)">
            <summary>
            Writes a warn message to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Warn(System.String,System.Exception)">
            <summary>
            Writes a warn message with exception to the log.
            </summary>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Warn(System.String,System.String,System.Exception)">
            <summary>
            Writes a warn message with exception to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Error(System.String)">
            <summary>
            Writes a error message to the log.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Error(System.String,System.String)">
            <summary>
            Writes a error message to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Error(System.String,System.Exception)">
            <summary>
            Writes a error message with exception to the log.
            </summary>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Error(System.String,System.String,System.Exception)">
            <summary>
            Writes a error message with exception to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Fatal(System.String)">
            <summary>
            Writes a fatal message to the log.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Fatal(System.String,System.String)">
            <summary>
            Writes a fatal message to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Fatal(System.String,System.Exception)">
            <summary>
            Writes a fatal message with exception to the log.
            </summary>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Fatal(System.String,System.String,System.Exception)">
            <summary>
            Writes a fatal message with exception to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Log(FM.LiveSwitch.LogEvent)">
            <summary>
            Writes a log event to the log.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Log(System.String)">
            <summary>
            Writes a generic message to the log.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Log(System.String,System.String)">
            <summary>
            Writes a generic message to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.IsLogEnabled(FM.LiveSwitch.LogLevel)">
            <summary>
            Returns true if the passed log level is enabled on this logger.
            </summary>
            <param name="level">Log level to check.</param>
        </member>
        <member name="P:FM.LiveSwitch.ILog.IsVerboseEnabled">
            <summary>
            Gets if the verbose log level is enabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILog.IsDebugEnabled">
            <summary>
            Gets if the debug log level is enabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILog.IsInfoEnabled">
            <summary>
            Gets if the info log level is enabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILog.IsWarnEnabled">
            <summary>
            Gets if the warn log level is enabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILog.IsErrorEnabled">
            <summary>
            Gets if the error log level is enabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILog.IsFatalEnabled">
            <summary>
            Gets if the fatal log level is enabled.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IntegerHolder">
            <summary>
            Class to hold an integer value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IntegerHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IntegerHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IntegerHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IntegerHolder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IntegerHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.IPromise">
            <summary>
            Interface for a promise that can be rejected.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IPromise.Reject(System.Exception)">
            <summary>
            Rejects the promise.
            </summary>
            <param name="exception">The exception.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.IPromise.CastAndResolve(System.Object)">
            <summary>
            Casts the result and resolves the promise.
            Will throw an exception if the cast fails.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Json">
            <summary>
            JSON utility class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Json.Provider">
            <summary>
            Gets or sets the JSON provider to use.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Json.Serialize``1(``0)">
            <summary>
            Serializes a value to a JSON string.
            </summary>
            <typeparam name="T">The type the value to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>The serialized JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Json.Deserialize``1(System.String)">
            <summary>
            Deserializes a value from a JSON string.
            </summary>
            <typeparam name="T">The type the value to deserialize.</typeparam>
            <param name="valueJson">The JSON string to deserialize.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:FM.LiveSwitch.JsonChecker">
            <summary>
            A pushdown automaton that very quickly determines if a JSON text is
            syntactically correct.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JsonChecker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.JsonChecker"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JsonChecker.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.JsonChecker"/> class.
            </summary>
            <param name="depth">The maximum depth to recurse.</param>
        </member>
        <member name="M:FM.LiveSwitch.JsonChecker.CheckString(System.String)">
            <summary>
            Checks if the specified string is valid JSON.
            </summary>
            <param name="str">The string to check.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.JsonProvider">
            <summary>
            Base class for all JSON provider implementations.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JsonProvider.Serialize``1(``0)">
            <summary>
            Serializes a value to a JSON string.
            </summary>
            <typeparam name="T">The type the value to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>The serialized JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonProvider.Deserialize``1(System.String)">
            <summary>
            Deserializes a value from a JSON string.
            </summary>
            <typeparam name="T">The type the value to deserialize.</typeparam>
            <param name="valueJson">The JSON string to deserialize.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:FM.LiveSwitch.License">
            <summary>
            A license.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.Current">
            <summary>
            Gets the current license.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.License.SetKey(System.String)">
            <summary>
            Sets the license key.
            </summary>
            <param name="key">The license key.</param>
        </member>
        <member name="M:FM.LiveSwitch.License.CheckKey">
            <summary>
            Gets a value indicating whether a valid key has been set.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.License.Check(System.String@)">
            <summary>
            Checks if the license is valid for this product.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.License.Id">
            <summary>
            Gets the license identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.AccountId">
            <summary>
            Gets the account identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.ProductCode">
            <summary>
            Gets the product code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.SiteName">
            <summary>
            Gets the site name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.SiteAddress">
            <summary>
            Gets the site address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.ContactName">
            <summary>
            Gets the contact name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.ContactPhoneNumber">
            <summary>
            Gets the contact phone number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.ContactEmailAddress">
            <summary>
            Gets the contact email address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.CoreCount">
            <summary>
            Gets the core count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.ValidFrom">
            <summary>
            Gets the "valid from" date.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.ValidTo">
            <summary>
            Gets the "valid to" date.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.IsTrial">
            <summary>
            Gets a value indicating whether this is a trial license.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.IsValid">
            <summary>
            Gets a value indicating whether this is a valid license.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.License.ParseKey(System.String)">
            <summary>
            Parses a license key.
            </summary>
            <param name="key">The key.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.LockedRandomizer">
            <summary>
            Thread-safe class providing access to a single <see cref="F:FM.LiveSwitch.LockedRandomizer.Randomizer"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LockedRandomizer.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.LockedRandomizer.NextLong">
            <summary>
            Returns a nonnegative random number.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.LockedRandomizer.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The maximum value (exclusive).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LockedRandomizer.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The minimum value (inclusive).</param>
            <param name="maxValue">The maximum value (exclusive).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LockedRandomizer.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">The array of bytes to fill.</param>
        </member>
        <member name="M:FM.LiveSwitch.LockedRandomizer.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.LockedRandomizer.RandomString(System.Int32)">
            <summary>
            Generates a random string of a specified size.
            </summary>
            <param name="size">The size of the output string.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Log">
            <summary>
            Log utility class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Log.LogLevel">
            <summary>
            Gets or sets the default log level.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Log.Provider">
            <summary>
            Gets or sets the first log provider.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Log.Providers">
            <summary>
            Gets the log providers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Log.AddProvider(FM.LiveSwitch.LogProvider)">
            <summary>
            Registers a log provider as a logging target.
            Alias for RegisterProvider.
            </summary>
            <param name="provider">The new provider.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.RegisterProvider(FM.LiveSwitch.LogProvider)">
            <summary>
            Registers a log provider as a logging target.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.AddProvider(FM.LiveSwitch.LogProvider,FM.LiveSwitch.LogLevel)">
            <summary>
            Registers a log provider as a logging target,
            setting its log level in the process.
            Alias for RegisterProvider.
            </summary>
            <param name="provider">The new provider.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.RegisterProvider(FM.LiveSwitch.LogProvider,FM.LiveSwitch.LogLevel)">
            <summary>
            Registers a log provider as a logging target,
            setting its log level in the process.
            </summary>
            <param name="provider">The provider.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.RemoveProvider(FM.LiveSwitch.LogProvider)">
            <summary>
            Unregisters a log provider as a logging target.
            Alias for UnregisterProvider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.UnregisterProvider(FM.LiveSwitch.LogProvider)">
            <summary>
            Unregisters a log provider as a logging target.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.RemoveProviders">
            <summary>
            Unregisters all log providers as logging targets.
            Alias for UnregisterProviders.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Log.UnregisterProviders">
            <summary>
            Unregisters all log providers as logging targets.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Log.SetTagOverride(System.String,FM.LiveSwitch.LogLevel)">
            <summary>
            Override the default log level for a specific tag.
            </summary>
            <param name="tag">The Tag to set the log level to.</param>
            <param name="level">The new loglevel to use.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Flush">
            <summary>
            Blocks until all logs are written out.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Log.GetLogger(System.String)">
            <summary>
            Get a logger for a specific Tag.
            </summary>
            <param name="tag">The tag to log to.</param>
            <returns>A ILog that will log to the specified tag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Log.GetLogger(System.Type)">
            <summary>
            Get a logger for a specific Tag. The tag is taken from the class namespace and name.
            </summary>
            <param name="type">The type to use as the tag.</param>
            <returns>A ILog that will log to the specified tag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Log.GetLogger(System.String,FM.LiveSwitch.LogLevel)">
            <summary>
            Get a logger for a specific Tag.
            </summary>
            <param name="tag">The tag to log to.</param>
            <param name="level">Logger's default log level.</param>
            <returns>A ILog that will log to the specified tag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Log.GetLogger(System.Type,FM.LiveSwitch.LogLevel)">
            <summary>
            Get a logger for a specific Tag.  The tag is taken from the class namespace and name.
            </summary>
            <param name="type">The type to use as the tag.</param>
            <param name="level">Logger's default log level.</param>
            <returns>A ILog that will log to the specified tag.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Log.IsVerboseEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for verbose-level messages.
            </summary>
            <value>
              <c>true</c> if logging is enabled for verbose-level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Log.IsDebugEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for debug-level messages.
            </summary>
            <value>
              <c>true</c> if logging is enabled for debug-level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Log.IsInfoEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for info-level messages.
            </summary>
            <value>
              <c>true</c> if logging is enabled for info-level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Log.IsWarnEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for warn-level messages.
            </summary>
            <value>
              <c>true</c> if logging is enabled for warn-level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Log.IsErrorEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for error-level messages.
            </summary>
            <value>
              <c>true</c> if logging is enabled for error-level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Log.IsFatalEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for fatal-level messages.
            </summary>
            <value>
              <c>true</c> if logging is enabled for fatal-level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Log.Verbose(System.String)">
            <summary>
            Logs a verbose-level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Debug(System.String)">
            <summary>
            Logs a debug-level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Info(System.String)">
            <summary>
            Logs an info-level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Warn(System.String)">
            <summary>
            Logs a warn-level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Error(System.String)">
            <summary>
            Logs an error-level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Fatal(System.String)">
            <summary>
            Logs a fatal-level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Verbose(System.String,System.Exception)">
            <summary>
            Logs a verbose-level message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Debug(System.String,System.Exception)">
            <summary>
            Logs a debug-level message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Info(System.String,System.Exception)">
            <summary>
            Logs an info-level message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Warn(System.String,System.Exception)">
            <summary>
            Logs a warn-level message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Error(System.String,System.Exception)">
            <summary>
            Logs an error-level message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Fatal(System.String,System.Exception)">
            <summary>
            Logs a fatal-level message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.WriteLine(System.String)">
            <summary>
            Writes a line of text to the log.
            </summary>
            <param name="text">The text to write to the log.</param>
        </member>
        <member name="T:FM.LiveSwitch.LogLevel">
            <summary>
            The level at which to log.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LogLevel.Verbose">
            <summary>
            Logs extensive messages detailing the program's state for troubleshooting.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LogLevel.Debug">
            <summary>
            Logs messages relevant to development and troubleshooting.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LogLevel.Info">
            <summary>
            Logs messages relevant to expected use.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LogLevel.Warn">
            <summary>
            Logs messages relevant to potential pit-falls.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LogLevel.Error">
            <summary>
            Logs messages relevant to errors that allow program execution to continue.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LogLevel.Fatal">
            <summary>
            Logs messages relevant to errors that require the program to terminate.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LogLevel.None">
            <summary>
            Logs nothing.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.LogProvider">
            <summary>
            Base class for all logging provider implementations.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogProvider.ProcessId">
            <summary>
            Gets the current process id.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogProvider.Level">
            <summary>
            Gets or sets the log level.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogProvider.Filter">
            <summary>
            Gets or sets a filter on the log provider.
            Returning <c>true</c> will log the event,
            while returning <c>false</c> will skip it.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LogProvider"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.Log(FM.LiveSwitch.LogEvent)">
            <summary>
            Log a message.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.GetPrefix(FM.LiveSwitch.LogLevel,System.Boolean)">
            <summary>
            Converts a log-level to a 5-character string for
            consistently-spaced character sequences.
            </summary>
            <param name="level">The log level.</param>
            <param name="includeTimestamp">Whether to include a timestamp in the prefix.</param>
            <returns>The log level as an upper-case string
            with right-side whitespace padding to ensure
            a 5-character sequence.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.GenerateLogLine(FM.LiveSwitch.LogEvent)">
            <summary>
            Generates a default log line.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.GetProduct">
            <summary>
            Returns the name of the current product.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.GetLogLevelString(FM.LiveSwitch.LogLevel)">
            <summary>
            Converts a log-level to a 5-character string for
            consistently-spaced character sequences.
            </summary>
            <param name="level">The log level.</param>
            <returns>The log level as an upper-case string
            with right-side whitespace padding to ensure
            a 5-character sequence.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.GetPrefixTimestamp(System.DateTime)">
            <summary>
            Converts a timestamp to an ISO-8601-formatted string
            for rendering in a log message (YYYY-MM-DDThh:mm:ss.sssZ).
            </summary>
            <param name="timestamp">The timestamp.</param>
            <returns>The timestamp as a formatted string.</returns>
        </member>
        <member name="T:FM.LiveSwitch.LongHolder">
            <summary>
            Class to hold a long value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LongHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LongHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LongHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LongHolder.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LongHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.ManagedCondition">
            <summary>
            A managed condition.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCondition.Halt">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires the lock.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCondition.Halt(System.Int32)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires the lock.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait before the thread enters the ready queue.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCondition.Pulse">
            <summary>
            Notifies a thread in the waiting queue of a change in the locked object's state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCondition.PulseAll">
            <summary>
            Notifies all waiting threads of a change in the object's state.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ManagedLock">
            <summary>
            A managed lock.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedLock.Lock">
            <summary>
            Acquires an exclusive lock.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedLock.Unlock">
            <summary>
            Releases an exclusive lock.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ManagedSocket">
            <summary>
            A socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedSocket.PublicIPAddress">
            <summary>
            Gets or sets the public IP address, if known.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedSocket.AdapterSpeed">
            <summary>
            Gets or sets the adapter speed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedSocket.IPv6">
            <summary>
            Gets a value indicating whether the socket supports IPv6.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedSocket.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedSocket.LocalPort">
            <summary>
            Gets the local port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedSocket.LocalIPAddress">
            <summary>
            Gets the local IP address.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedSocket.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedSocket.Bind(System.String,System.Int32,System.Boolean@)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="ipAddress">The local IP address.</param>
            <param name="port">The local port.</param>
            <param name="addressInUse">Indicates that access to the address is forbidden or in use.</param>
        </member>
        <member name="T:FM.LiveSwitch.ManagedStopwatch">
            <summary>
            Managed stopwatch.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedStopwatch.ElapsedTicks">
            <summary>
            Gets the total time measured by the stopwatch in ticks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedStopwatch.ElapsedMilliseconds">
            <summary>
            Gets the total time measured by the stopwatch in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedStopwatch.GetTimestamp">
            <summary>
            Gets the current system timestamp in ticks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedStopwatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ManagedStopwatch"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedStopwatch.Start">
            <summary>
            Starts the stopwatch.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedStopwatch.Stop">
            <summary>
            Stops the stopwatch.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedStopwatch.Restart">
            <summary>
            Restarts the stopwatch.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ManagedThread">
            <summary>
            Managed thread.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedThread.CurrentThreadId">
            <summary>
            Gets the id for the current thread.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedThread.#ctor(FM.LiveSwitch.Action1{FM.LiveSwitch.ManagedThread})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ManagedThread"/> class.
            </summary>
            <param name="loop">The loop to run on the thread.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedThread.Dispatch(FM.LiveSwitch.Action0)">
            <summary>
            Dispatches an action to a background thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedThread.Dispatch(FM.LiveSwitch.Function0{System.Threading.Tasks.Task})">
            <summary>
            Dispatches an action to a background thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedThread.Start">
            <summary>
            Starts the thread.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedThread.LoopBegin">
            <summary>
            Should be invoked when the loop begins before other code.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedThread.LoopEnd">
            <summary>
            Should be invoked when the loop ends after other code.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedThread.Sleep(System.Int32)">
            <summary>
            Sleeps the current thread for a specified period of time.
            </summary>
            <param name="millisecondsTimeout">The length of time to sleep in milliseconds.</param>
        </member>
        <member name="T:FM.LiveSwitch.MathAssistant">
            <summary>
            Contains methods for cross-platform math operations.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MathAssistant.Pi">
            <summary>
            Gets the value of pi.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MathAssistant.E">
            <summary>
            Gets the value of e.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Abs(System.Int32)">
            <summary>
            Returns the absolute value of the specified value.
            </summary>
            <param name="intValue">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Abs(System.Int64)">
            <summary>
            Returns the absolute value of the specified value.
            </summary>
            <param name="longValue">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Abs(System.Single)">
            <summary>
            Returns the absolute value of the specified value.
            </summary>
            <param name="floatValue">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Abs(System.Double)">
            <summary>
            Returns the absolute value of the specified value.
            </summary>
            <param name="doubleValue">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Acos(System.Double)">
            <summary>
            Returns the arc cosine of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Asin(System.Double)">
            <summary>
            Returns the arc sine of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Atan(System.Double)">
            <summary>
            Returns the arc tangent of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Atan2(System.Double,System.Double)">
            <summary>
            Returns the arc arc tangent of the specified values.
            </summary>
            <param name="y">The y value.</param>
            <param name="x">The x value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Ceil(System.Double)">
            <summary>
            Returns the ceiling of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Cos(System.Double)">
            <summary>
            Returns the cosine of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Cosh(System.Double)">
            <summary>
            Returns the hyperbolic cosine of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Exp(System.Double)">
            <summary>
            Returns e raised to the power of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Floor(System.Double)">
            <summary>
            Returns the floor of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Log(System.Double)">
            <summary>
            Returns the natural logarithm of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Log10(System.Double)">
            <summary>
            Returns the base-10 logarithm of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Max(System.Int32,System.Int32)">
            <summary>
            Returns the larger of two values.
            </summary>
            <param name="intValue1">The first value.</param>
            <param name="intValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Max(System.Int64,System.Int64)">
            <summary>
            Returns the larger of two values.
            </summary>
            <param name="longValue1">The first value.</param>
            <param name="longValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Max(System.Single,System.Single)">
            <summary>
            Returns the larger of two values.
            </summary>
            <param name="floatValue1">The first value.</param>
            <param name="floatValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Max(System.Double,System.Double)">
            <summary>
            Returns the larger of two values.
            </summary>
            <param name="doubleValue1">The first value.</param>
            <param name="doubleValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Min(System.Int32,System.Int32)">
            <summary>
            Returns the smaller of two values.
            </summary>
            <param name="intValue1">The first value.</param>
            <param name="intValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Min(System.Int64,System.Int64)">
            <summary>
            Returns the smaller of two values.
            </summary>
            <param name="longValue1">The first value.</param>
            <param name="longValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Min(System.Single,System.Single)">
            <summary>
            Returns the smaller of two values.
            </summary>
            <param name="floatValue1">The first value.</param>
            <param name="floatValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Min(System.Double,System.Double)">
            <summary>
            Returns the smaller of two values.
            </summary>
            <param name="doubleValue1">The first value.</param>
            <param name="doubleValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Pow(System.Double,System.Double)">
            <summary>
            Returns the result of raising x to the power of y.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Round(System.Double)">
            <summary>
            Returns to the nearest integer.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Sin(System.Double)">
            <summary>
            Returns the sine of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Sinh(System.Double)">
            <summary>
            Returns the hyperbolic sine of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Sqrt(System.Double)">
            <summary>
            Returns the square root of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Tan(System.Double)">
            <summary>
            Returns the tangent of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Tanh(System.Double)">
            <summary>
            Returns the hyperbolic tangent of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.NetworkTimeProtocol">
            <summary>
            Utility class to assist with Network Time Protocol (NTP) conversions.
            NTP timestamps are 64-bit values that can span just over 136 years,
            from 1900-01-01 to 2036-02-08. Compact NTP timestamps are 32-bit
            values that can span span just over 18 hours.
            These utility methods guarantee precision to the millisecond.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkTimeProtocol.UtcNow">
            <summary>
            Gets the current UTC time in NTP format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.DateTimeToNtpSeconds(System.DateTime)">
            <summary>
            Converts a date to an NTP timestamp (double).
            </summary>
            <param name="dateTime">The date to convert.</param>
            <returns>The equivalent NTP timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.NtpSecondsToDateTime(System.Double)">
            <summary>
            Converts an NTP timestamp (double) to a date.
            </summary>
            <param name="ntpSeconds">The NTP timestamp to convert.</param>
            <returns>The equivalent date.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.TicksToNtpSeconds(System.Int64)">
            <summary>
            Converts ticks to an NTP timestamp (double).
            </summary>
            <param name="ticks">The ticks to convert.</param>
            <returns>The equivalent NTP timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.NtpSecondsToTicks(System.Double)">
            <summary>
            Converts an NTP timestamp (double) to ticks.
            </summary>
            <param name="ntpSeconds">The NTP timestamp to convert.</param>
            <returns>The equivalent ticks.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.DateTimeToNtp(System.DateTime)">
            <summary>
            Converts a date to an NTP timestamp (64 bits).
            </summary>
            <param name="dateTime">The date to convert.</param>
            <returns>The equivalent NTP timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.NtpToDateTime(System.Int64)">
            <summary>
            Converts an NTP timestamp (64 bits) to a date.
            </summary>
            <param name="ntp">The NTP timestamp to convert.</param>
            <returns>The equivalent date.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.TicksToNtp(System.Int64)">
            <summary>
            Converts ticks to an NTP timestamp (64 bits).
            </summary>
            <param name="ticks">The ticks to convert.</param>
            <returns>The equivalent NTP timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.NtpToTicks(System.Int64)">
            <summary>
            Converts an NTP timestamp (64 bits) to ticks.
            </summary>
            <param name="ntp">The NTP timestamp to convert.</param>
            <returns>The equivalent ticks.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.DateTimeToCompactNtp(System.DateTime)">
            <summary>
            Converts a date to a compact NTP timestamp (32 bits).
            </summary>
            <param name="dateTime">The date to convert.</param>
            <returns>The equivalent NTP timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.CompactNtpToDateTime(System.Int64)">
            <summary>
            Converts a compact NTP timestamp (32 bits) to a date.
            </summary>
            <param name="ntp">The NTP timestamp to convert.</param>
            <returns>The equivalent date.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.TicksToCompactNtp(System.Int64)">
            <summary>
            Converts ticks to a compact NTP timestamp (32 bits).
            </summary>
            <param name="ticks">The ticks to convert.</param>
            <returns>The equivalent NTP timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.CompactNtpToTicks(System.Int64)">
            <summary>
            Converts a compact NTP timestamp (32 bits) to ticks.
            </summary>
            <param name="ntp">The NTP timestamp to convert.</param>
            <returns>The equivalent ticks.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.NetworkTimeProtocol"/> class
            with base set to 1900-01-01.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.NetworkTimeProtocol"/> class.
            </summary>
            <param name="baseTicks">The base ticks.</param>
        </member>
        <member name="P:FM.LiveSwitch.NetworkTimeProtocol.Absolute">
            <summary>
            Gets an instance of <see cref="T:FM.LiveSwitch.NetworkTimeProtocol"/> that uses
            1900-01-01 as the reference date, for use cases where the absolute
            wall-clock time represented is important.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkTimeProtocol.Relative">
            <summary>
            Gets an instance of <see cref="T:FM.LiveSwitch.NetworkTimeProtocol"/> that uses
            zero as the reference date, for use cases where the time is relative
            to other times, and the reference time is not significant.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.NullJsonProvider">
            <summary>
            An implementation of a JSON provider that does nothing.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullJsonProvider.Serialize``1(``0)">
            <summary>
            Serializes a value to a JSON string.
            </summary>
            <typeparam name="T">The type the value to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>
            The serialized JSON string.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.NullJsonProvider.Deserialize``1(System.String)">
            <summary>
            Deserializes a value from a JSON string.
            </summary>
            <typeparam name="T">The type the value to deserialize.</typeparam>
            <param name="valueJson">The JSON string to deserialize.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.NullLogProvider">
            <summary>
            An implementation of a logging provider that does nothing.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.ParseAssistant">
            <summary>
            Contains methods for cross-platform primitive parsing from strings.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseByteValue(System.String)">
            <summary>
            Parses a byte value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed byte value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseShortValue(System.String)">
            <summary>
            Parses a short value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed short value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseIntegerValue(System.String)">
            <summary>
            Parses an integer value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed integer value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseLongValue(System.String)">
            <summary>
            Parses a long value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed long value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseFloatValue(System.String)">
            <summary>
            Parses a float value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed float value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseDoubleValue(System.String)">
            <summary>
            Parses a double value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed double value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseDecimalValue(System.String)">
            <summary>
            Parses a decimal value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed decimal value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseBooleanValue(System.String)">
            <summary>
            Parses a boolean value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed boolean value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseGuidValue(System.String)">
            <summary>
            Parses a GUID value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed GUID value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseByteValue(System.String,System.Byte@)">
            <summary>
            Attempts to parse a byte value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="byteResult">The parsed byte value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseShortValue(System.String,System.Int16@)">
            <summary>
            Attempts to parse a short value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="shortResult">The parsed short value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseIntegerValue(System.String,System.Int32@)">
            <summary>
            Attempts to parse an integer value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="intResult">The parsed integer value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseLongValue(System.String,System.Int64@)">
            <summary>
            Attempts to parse a long value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="longResult">The parsed long value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseFloatValue(System.String,System.Single@)">
            <summary>
            Attempts to parse a float value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="floatResult">The parsed float value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseDoubleValue(System.String,System.Double@)">
            <summary>
            Attempts to parse a double value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="doubleResult">The parsed double value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseDecimalValue(System.String,System.Decimal@)">
            <summary>
            Attempts to parse a decimal value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="decimalResult">The parsed decimal value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseBooleanValue(System.String,System.Boolean@)">
            <summary>
            Attempts to parse a boolean value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="boolResult">The parsed boolean value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseGuidValue(System.String,System.Guid@)">
            <summary>
            Attempts to parse a GUID value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="guidResult">The parsed GUID value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Platform">
            <summary>
            Platform-specific methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Platform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Platform"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.IsMobile">
            <summary>
            Gets or sets a value indicating whether this is a mobile platform.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.IsLittleEndian">
            <summary>
            Gets a value indicating whether this is little-endian platform.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.OperatingSystem">
            <summary>
            Gets the current operating system.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.OperatingSystemVersion">
            <summary>
            Gets the current operating system version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.SourceLanguage">
            <summary>
            Gets the current programming language for the source code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.Architecture">
            <summary>
            Gets the current CPU architecture.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.CoreCount">
            <summary>
            Gets the current CPU core count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.PhysicalMemory">
            <summary>
            Gets the current physical memory in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.MachineName">
            <summary>
            Gets the current machine name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.DirectorySeparator">
            <summary>
            Gets the character used to separate directories.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.ProcessId">
            <summary>
            Gets the id of the current process.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.UseFipsAlgorithms">
            <summary>
            Gets or sets a value that indicates whether FIPS algorithms should be used.
            Note that not all platforms or third-party libraries are FIPS-compliant, so
            this should not be used as a guarantee of FIPS compliance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.CryptoLibrary">
            <summary>
            Gets or sets the cryptography library to use.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataBufferPool">
            <summary>
            A data buffer pool.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.GetTracer(System.Type)">
            <summary>
            Get a data buffer pool tracer for a specific tag using the default pool. The tag is taken from the class namespace and name.
            </summary>
            <param name="type">The type to use as the tag.</param>
            <returns>A tracer that will associate stats with the tag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.GetTracer(System.String)">
            <summary>
            Get a data buffer pool tracer for a specific tag using the default pool.
            </summary>
            <param name="tag">The tag to log to.</param>
            <returns>A tracer that will associate stats with the type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.GetTracer(System.Type,FM.LiveSwitch.DataBufferPool)">
            <summary>
            Get a data buffer pool tracer for a specific tag and pool. The tag is taken from the class namespace and name.
            </summary>
            <param name="type">The type to use as the tag.</param>
            <param name="pool">The underlying pool.</param>
            <returns>A tracer that will associate stats with the tag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.GetTracer(System.String,FM.LiveSwitch.DataBufferPool)">
            <summary>
            Get a data buffer pool tracer for a specific tag and pool.
            </summary>
            <param name="tag">The tag to log to.</param>
            <param name="pool">The underlying pool.</param>
            <returns>A tracer that will associate stats with the type.</returns>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPool.BlockSize">
            <summary>
            Gets or sets the block size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPool.EnableStatistics">
            <summary>
            Gets or sets whether to enable statistics.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPool.Disabled">
            <summary>
            Gets or sets whether the pool is disabled.
            If disabled, each call to take a buffer
            will result in a new allocation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPool.Statistics">
            <summary>
            Gets the pool usage statistics.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPool.TraceStatistics">
            <summary>
            Gets all tagged pool usage statistics.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.GetTraceStatistics(System.Type)">
            <summary>
            Gets pool usage statistics for a specific tag.
            </summary>
            <param name="type">The type to use as the tag.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.GetTraceStatistics(System.String)">
            <summary>
            Gets pool usage statistics for a specific tag.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPool.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPool.IsSupported">
            <summary>
            Gets a value indicating whether DataBuffer pooling is supported on this platform.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBufferPool"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBufferPool"/> class.
            </summary>
            <param name="tag">The tag for stats output.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.Take(System.Int32)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.Take(System.Int32,System.Boolean)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
            <param name="littleEndian">Whether the data buffer should be little-endian.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.Take(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
            <param name="littleEndian">Whether the data buffer should be little-endian.</param>
            <param name="clearBytes">Whether to clear the data buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.PoolStatistics">
            <summary>
            Pool statistics.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.Tag">
            <summary>
            Gets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.TotalPoolSize">
            <summary>
            Gets the total size of all buffers allocated in the pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.PendingPoolSize">
            <summary>
            Gets the total size of all buffers currently in the pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.PaddingWasted">
            <summary>
            Gets the amount of buffer padding that is unused for caller's requested buffers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.ActivePools">
            <summary>
            Gets the number of pools in use.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.HitPercentage">
            <summary>
            Gets the percentage of cache hits.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.MissPercentage">
            <summary>
            Gets the percentage of cache misses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.ReturnPercentage">
            <summary>
            Gets the percentage of items returned to the pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.TotalPools">
            <summary>
            Gets the total pools created.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.TotalCalls">
            <summary>
            Gets the total calls to obtain a DataBuffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PoolStatistics.ToString">
            <summary>
            Overriden ToString
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Promise`1">
            <summary>
            A promise.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.#ctor">
            <summary>
            Creates a new promise.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.#ctor(FM.LiveSwitch.Action2{FM.LiveSwitch.Action1{`0},FM.LiveSwitch.Action1{System.Exception}})">
            <summary>
            Creates a promise with a resolve callback and a reject callback.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Then(FM.LiveSwitch.Action1{`0})">
            <summary>
            Appends a handler to be executed when the promise is resolved.
            </summary>
            <param name="resolveAction">The resolve action.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Then(FM.LiveSwitch.Action1{`0},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Appends handlers to be executed when the promise is resolved or rejected.
            </summary>
            <param name="resolveAction">The resolve action.</param>
            <param name="rejectAction">The reject action.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Then``1(FM.LiveSwitch.Function1{`0,FM.LiveSwitch.Future{``0}})">
            <summary>
            Appends a handler to be executed when the promise is resolved.
            </summary>
            <param name="resolveFunction">The resolve function.</param>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Then``1(FM.LiveSwitch.Function1{`0,FM.LiveSwitch.Future{``0}},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Appends handlers to be executed when the promise is resolved or rejected.
            </summary>
            <param name="resolveFunction">The resolve function.</param>
            <param name="rejectAction">The reject action.</param>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Fail(FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Appends a handler to be executed when the promise is rejected.
            </summary>
            <param name="rejectAction">The reject action.</param>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Fail(FM.LiveSwitch.Function1{System.Exception,FM.LiveSwitch.Future{`0}})">
            <summary>
            Appends a handler to be executed when the promise is rejected.
            </summary>
            <param name="rejectFunction">The reject function.</param>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Wrap``1(FM.LiveSwitch.Function0{``0})">
            <summary>
            Creates a promise and resolves it using the result from a
            callback function, or rejects it if an exception is thrown.
            </summary>
            <param name="callbackFunction">The callback function.</param>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Wrap(FM.LiveSwitch.Action0)">
            <summary>
            Creates a promise and resolves it after invoking a callback
            action, or rejects it if an exception is thrown.
            </summary>
            <param name="callbackAction">The callback action.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.WrapAsync``1(FM.LiveSwitch.Function0{``0})">
            <summary>
            Creates a promise and resolves it using the result from a
            callback function, or rejects it if an exception is thrown.
            The callback is always dispatched to the background.
            </summary>
            <param name="callbackFunction">The callback function.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.WrapAsync(FM.LiveSwitch.Action0)">
            <summary>
            Creates a promise and resolves it after invoking a callback
            action, or rejects it if an exception is thrown.
            The callback is always dispatched to the background.
            </summary>
            <param name="callbackAction">The callback action.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.PromiseBase`1">
            <summary>
            Promise base properties/methods.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.PromiseBase`1.Id">
            <summary>
            Gets the identifier of this promise.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.PromiseBase`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.CastAndResolve(System.Object)">
            <summary>
            Casts the result and resolves the promise.
            Will throw an exception if the cast fails.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.Resolve(`0)">
            <summary>
            Resolves the promise.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.Reject(System.Exception)">
            <summary>
            Rejects the promise.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.ResolveNow``1(``0)">
            <summary>
            Creates a promise and resolves it immediately
            using the given result value.
            </summary>
            <param name="result">The result.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.RejectNow``1(System.Exception)">
            <summary>
            Creates a promise and rejects it immediately.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.ResolveAsync(`0)">
            <summary>
            Resolves the promise asynchronously.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.RejectAsync(System.Exception)">
            <summary>
            Rejects the promise asynchronously.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.All``1(FM.LiveSwitch.Future{``0}[])">
            <summary>
            Returns a promise that resolves when all passed in promises resolve.
            </summary>
            <param name="promises">The promises to check.</param>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.DoAll``1(FM.LiveSwitch.Future{``0}[],FM.LiveSwitch.AtomicInteger)">
            <summary>
            Internal DoAll.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.ResolveNow">
            <summary>
            Creates a promise and resolves it immediately
            using a null result value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.RejectNow(System.Exception)">
            <summary>
            Creates a promise and rejects it immediately.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.WrapPromise``1(FM.LiveSwitch.Function0{FM.LiveSwitch.Future{``0}})">
            <summary>
            Creates a promise and resolves it using the result from a
            callback function, or rejects it if an exception is thrown.
            </summary>
            <param name="callback">The callback function.</param>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.Process(FM.LiveSwitch.IPromise,FM.LiveSwitch.Action1{`0},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Processes the specified promise.
            </summary>
            <param name="promise">The promise.</param>
            <param name="resolve">The resolve.</param>
            <param name="reject">The reject.</param>
        </member>
        <member name="T:FM.LiveSwitch.FutureState">
            <summary>
            The state of a future.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.FutureState.Pending">
            <summary>
            Indicates that the promise has not been resolved or rejected.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.FutureState.Resolved">
            <summary>
            Indicates that the promise has been resolved.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.FutureState.Rejected">
            <summary>
            Indicates that the promise has been rejected.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Randomizer">
            <summary>
            Utility class for random values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Randomizer.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Randomizer.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The maximum value (exclusive).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Randomizer.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The minimum value (inclusive).</param>
            <param name="maxValue">The maximum value (exclusive).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Randomizer.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">The array of bytes to fill.</param>
        </member>
        <member name="M:FM.LiveSwitch.Randomizer.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Randomizer.RandomString(System.Int32)">
            <summary>
            Generates a random string of a specified size.
            </summary>
            <param name="size">The size of the output string.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.RsaCrypto">
            <summary>
            RSA-based cryptographic functions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaCrypto.DefaultKeySize">
            <summary>
            Gets or sets the default key length.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.CreateKey">
            <summary>
            Creates an RSA key.
            </summary>
            <returns>An RSA key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.CreateKey(System.Int32)">
            <summary>
            Creates an RSA key.
            </summary>
            <param name="keySize">The key size.</param>
            <returns>An RSA key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.SignMd5Sha1(System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Signs an MD5/SHA-1 hash using a specified key.
            </summary>
            <param name="md5Sha1">The MD5/SHA-1 hash.</param>
            <param name="privateKey">The private key.</param>
            <returns>
            The output byte array.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.VerifyMd5Sha1(System.Byte[],System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Verifies an MD5/SHA-1 hash using a specified key and signature.
            </summary>
            <param name="md5Sha1">The MD5/SHA-1 hash.</param>
            <param name="signature">The input signature.</param>
            <param name="publicKey">The public key.</param>
            <returns>
              <c>true</c> if the signature is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.SignSha1(System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Signs a SHA-1 hash using a specified key.
            </summary>
            <param name="sha1">The SHA-1 hash.</param>
            <param name="privateKey">The private key.</param>
            <returns>
            The output byte array.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.VerifySha1(System.Byte[],System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Verifies a signature using a specified key and SHA-1 hash.
            </summary>
            <param name="sha1">The SHA-1 hash.</param>
            <param name="signature">The input signature.</param>
            <param name="publicKey">The public key.</param>
            <returns>
              <c>true</c> if the signature is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.SignSha256(System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Signs a SHA-256 hash using a specified key.
            </summary>
            <param name="sha256">The SHA-256 hash.</param>
            <param name="privateKey">The private key.</param>
            <returns>
            The output byte array.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.VerifySha256(System.Byte[],System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Verifies a signature using a specified key and SHA-256 hash.
            </summary>
            <param name="sha256">The SHA-256 hash.</param>
            <param name="signature">The input signature.</param>
            <param name="publicKey">The public key.</param>
            <returns>
              <c>true</c> if the signature is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.Encrypt(System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Encrypts a value using a specified public key.
            </summary>
            <param name="data">The input byte array.</param>
            <param name="publicKey">The public key.</param>
            <returns>
            The output byte array.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.Decrypt(System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Decrypts a value using a specified private key.
            </summary>
            <param name="data">The input byte array.</param>
            <param name="privateKey">The private key.</param>
            <returns>
            The output byte array.
            </returns>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.length">
            <summary>
            The Length of this BigInteger
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.data">
            <summary>
            The data for this BigInteger
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.DEFAULT_LEN">
            <summary>
            Default length of a BigInteger in bytes
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.smallPrimes">
            <summary>
            	Table of primes below 2000.
            </summary>
            <remarks>
            	<para>
            	This table was generated using Mathematica 4.1 using the following function:
            	</para>
            	<para>
            		<code>
            		PrimeTable [x_] := Prime [Range [1, PrimePi [x]]]
            		PrimeTable [6000]
            		</code>
            	</para>
            </remarks>
        </member>
        <member name="T:FM.LiveSwitch.BigInteger.RandomGenerator">
            <summary>
            Platform-specific random number generator.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.RandomGenerator.#ctor">
            <summary>
            Creates a new random generator.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.RandomGenerator.GetBytes(System.Byte[])">
            <summary>
            Generates random number data into a byte array.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.GenerateRandom(System.Int32,FM.LiveSwitch.BigInteger.RandomGenerator)">
            <summary>
            Generates a new, random BigInteger of the specified length.
            </summary>
            <param name="bits">The number of bits for the new number.</param>
            <param name="rng">A random number generator to use to obtain the bits.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.GenerateRandom(System.Int32)">
            <summary>
            Generates a new, random BigInteger of the specified length using the default RNG crypto service provider.
            </summary>
            <param name="bits">The number of bits for the new number.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Randomize(FM.LiveSwitch.BigInteger.RandomGenerator)">
            <summary>
            Randomizes the bits in "this" from the specified RNG.
            </summary>
            <param name="rng">A RNG.</param>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Randomize">
            <summary>
            Randomizes the bits in "this" from the default RNG.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.TestBit(System.UInt32)">
            <summary>
            Tests if the specified bit is 1.
            </summary>
            <param name="bitNum">The bit to test. The least significant bit is 0.</param>
            <returns>True if bitNum is set to 1, else false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Normalize">
            <summary>
                Normalizes this by setting the length to the actual number of
                uints used in data and by setting the sign to Sign.Zero if the
                value of this is 0.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Incr2">
            <summary>
            Increments this by two
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.ConfidenceFactor.ExtraLow">
            <summary>
            Only suitable for development use, probability of failure may be greater than 1/2^20.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.ConfidenceFactor.Low">
            <summary>
            Suitable only for transactions which do not require forward secrecy.  Probability of failure about 1/2^40
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.ConfidenceFactor.Medium">
            <summary>
            Designed for production use. Probability of failure about 1/2^80.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.ConfidenceFactor.High">
            <summary>
            Suitable for sensitive data. Probability of failure about 1/2^160.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.ConfidenceFactor.ExtraHigh">
            <summary>
            Use only if you have lots of time! Probability of failure about 1/2^320.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.ConfidenceFactor.Provable">
            <summary>
            Only use methods which generate provable primes. Not yet implemented.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.PrimalityTests.RabinMillerTest(FM.LiveSwitch.BigInteger,FM.LiveSwitch.BigInteger.ConfidenceFactor)">
            <summary>
                Probabilistic prime test based on Rabin-Miller's test
            </summary>
            <param name="bi" type="BigInteger.BigInteger">
                <para>
                    The number to test.
                </para>
            </param>
            <param name="confidence" type="int">
                <para>
            The number of chosen bases. The test has at least a
            1/4^confidence chance of falsely returning True.
                </para>
            </param>
            <returns>
            <para>
            	True if "this" is a strong pseudoprime to randomly chosen bases.
            </para>
            <para>
            	False if "this" is definitely NOT prime.
            </para>
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.PrimeGeneratorBase.PostTrialDivisionTests(FM.LiveSwitch.BigInteger)">
            <summary>
            Performs primality tests on bi, assumes trial division has been done.
            </summary>
            <param name="bi">A BigInteger that has been subjected to and passed trial division</param>
            <returns>False if bi is composite, true if it may be prime.</returns>
            <remarks>The speed of this method is dependent on Confidence</remarks>
        </member>
        <member name="T:FM.LiveSwitch.BigInteger.Kernel">
            <summary>
            Low level functions for the BigInteger
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Kernel.AddSameSign(FM.LiveSwitch.BigInteger,FM.LiveSwitch.BigInteger)">
            <summary>
            Adds two numbers with the same sign.
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>bi1 + bi2</returns>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Kernel.Compare(FM.LiveSwitch.BigInteger,FM.LiveSwitch.BigInteger)">
            <summary>
            Compares two BigInteger
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>The sign of bi1 - bi2</returns>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Kernel.SingleByteDivideInPlace(FM.LiveSwitch.BigInteger,System.UInt32)">
            <summary>
            Performs n / d and n % d in one operation.
            </summary>
            <param name="n">A BigInteger, upon exit this will hold n / d</param>
            <param name="d">The divisor</param>
            <returns>n % d</returns>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Kernel.Multiply(System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts it into
            d [dOffset:dOffset+xLen+yLen].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+xLen+yLen].
            </remarks>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Kernel.MultiplyMod2p32pmod(System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts the low mod words into
            d [dOffset:dOffset+mod].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+mod].
            </remarks>
        </member>
        <member name="T:FM.LiveSwitch.RsaKey">
            <summary>
            An RSA key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Size">
            <summary>
            Gets the size of the key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Modulus">
            <summary>
            Gets or sets the public value N.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.PublicExponent">
            <summary>
            Gets or sets the public value E.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.PrivateExponent">
            <summary>
            Gets or sets the private value D.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Prime1">
            <summary>
            Gets or sets the private value P.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Prime2">
            <summary>
            Gets or sets the private value Q.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Exponent1">
            <summary>
            Gets or sets the private value DP.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Exponent2">
            <summary>
            Gets or sets the private value DQ.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Coefficient">
            <summary>
            Gets or sets the private value inverse-Q.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RsaKey.HasPublic">
            <summary>
            Returns <c>true</c> if the key contains
            public information.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RsaKey.HasPrivate">
            <summary>
            Returns <c>true</c> if the key contains
            private information.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Type">
            <summary>
            Gets the key type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RsaKey.GetBytes">
            <summary>
            Serializes this key to binary.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RsaKey.ParseBytes(System.Byte[])">
            <summary>
            Deserializes a key from binary.
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RsaKey.ParseBuffer(FM.LiveSwitch.DataBuffer)">
            <summary>
            Deserializes a key from binary.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Serializable">
            <summary>
            Base definition for classes that allow serialization to/from JSON.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Serializable.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Serializable.IsSerialized">
            <summary>
            Gets or sets a value indicating whether this instance is serialized.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Serializable.Serialized">
            <summary>
            Gets or sets the serialized value of this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Serializable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Serializable"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ShortHolder">
            <summary>
            Class to hold a short value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ShortHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ShortHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ShortHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ShortHolder.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ShortHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sort">
            <summary>
            Encapsulates useful sorting utilities.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sort.QuickSort``1(System.Collections.Generic.List{``0},FM.LiveSwitch.Function2{``0,``0,FM.LiveSwitch.CompareResult})">
            <summary>
            Sorts an array using the in-place quick-sort algorithm.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array of elements.</param>
            <param name="comparer">The function used to compare elements in the array -
            should return less than 0 if item 1 is less than item 2 (item 1 should appear
            before item 2), 0 if the items are equal, or more than 0 is item 1 is greater
            than item 2 (item 1 should appear after item 2).</param>
        </member>
        <member name="T:FM.LiveSwitch.Splitter">
            <summary>
            Utility class for splitting strings.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Splitter.Split(System.String,System.String)">
            <summary>
            Splits a string using a given delimiter.
            </summary>
            <param name="str">The string.</param>
            <param name="delimiter">The delimiter.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.StreamSocket">
            <summary>
            A stream socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocket.Secure">
            <summary>
            Gets a value indicating whether the socket is secure.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocket.Server">
            <summary>
            Gets a value indicating whether the socket can accept incoming connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocket.RemotePort">
            <summary>
            Gets or sets the remote port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocket.RemoteIPAddress">
            <summary>
            Gets or sets the remote IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocket.RemoteHostname">
            <summary>
            Gets or sets the remote hostname.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocket.OnReceiveSuccess">
            <summary>
            Gets or sets a callback invoked on successful read from TCP stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocket.OnReceiveFailure">
            <summary>
            Gets or sets a callback invoked on failed read from TCP stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.ConnectAsync(System.String,System.String,System.Int32,System.Int32,FM.LiveSwitch.Action0,FM.LiveSwitch.Action2{System.Exception,System.Boolean})">
            <summary>
            Connects the socket asynchronously.
            </summary>
            <param name="hostname">The remote hostname.</param>
            <param name="ipAddress">The remote IP address.</param>
            <param name="port">The remote port.</param>
            <param name="timeout">The timeout (in ms).</param>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.Send(FM.LiveSwitch.DataBuffer)">
            <summary>
            Sends data synchronously.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.SendAsync(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.Action0,FM.LiveSwitch.Action2{System.Exception,System.Boolean})">
            <summary>
            Sends data asynchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="timeout">The timeout (in ms).</param>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.ReceiveAsync(System.Int32)">
            <summary>
            Receives data asynchronously.
            </summary>
            <param name="timeout">The timeout (in ms).</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.AcceptAsync(FM.LiveSwitch.Action0,FM.LiveSwitch.Action1{System.Exception},FM.LiveSwitch.Action1{FM.LiveSwitch.StreamSocket})">
            <summary>
            Accepts a new socket asynchronously.
            </summary>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
            <param name="onSocket">The callback to invoke when a socket is ready.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseAcceptSuccess(FM.LiveSwitch.Action0)">
            <summary>
            Invokes the accept success callback.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseAcceptFailure(FM.LiveSwitch.Action1{System.Exception},System.Exception)">
            <summary>
            Invokes the accept failure callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseAcceptSocket(FM.LiveSwitch.Action1{FM.LiveSwitch.StreamSocket},FM.LiveSwitch.StreamSocket)">
            <summary>
            Invokes the accept success callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="socket">The socket.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseConnectSuccess(FM.LiveSwitch.Action0)">
            <summary>
            Invokes the connect success callback.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseConnectFailure(FM.LiveSwitch.Action2{System.Exception,System.Boolean},System.Exception,System.Boolean)">
            <summary>
            Invokes the connect failure callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="exception">The exception.</param>
            <param name="timedOut">if set to <c>true</c> [timed out].</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseSendSuccess(FM.LiveSwitch.Action0)">
            <summary>
            Invokes the send success callback.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseSendFailure(FM.LiveSwitch.Action2{System.Exception,System.Boolean},System.Exception,System.Boolean)">
            <summary>
            Invokes the send failure callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="exception">The exception.</param>
            <param name="timedOut">if set to <c>true</c> [timed out].</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseReceiveSuccess(FM.LiveSwitch.Action1{FM.LiveSwitch.DataBuffer},FM.LiveSwitch.DataBuffer)">
            <summary>
            Invokes the receive success callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseReceiveFailure(FM.LiveSwitch.Action2{System.Exception,System.Boolean},System.Exception,System.Boolean)">
            <summary>
            Invokes the receive failure callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="exception">The exception.</param>
            <param name="timedOut">if set to <c>true</c> [timed out].</param>
        </member>
        <member name="T:FM.LiveSwitch.StreamSocketCreateArgs">
            <summary>
            Arguments for a stream socket create event.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocketCreateArgs.Server">
            <summary>
            Gets or sets a value indicating whether the socket should accept incoming connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocketCreateArgs.IPv6">
            <summary>
            Gets or sets a value indicating whether the socket should support IPv6.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocketCreateArgs.Secure">
            <summary>
            Gets or sets a value indicating whether the socket should be secured.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocketCreateArgs.StreamIndex">
            <summary>
            Gets or sets the stream index.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocketCreateArgs.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.StreamSocketCreateArgs" /> class.
            </summary>
            <param name="server">Whether the socket should accept incoming connections.</param>
            <param name="ipv6">Whether the socket should support IPv6.</param>
            <param name="secure">Whether the socket should be secured.</param>
        </member>
        <member name="T:FM.LiveSwitch.StringAssistant">
            <summary>
            Contains methods for string manipulation.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StringAssistant.IsNullOrWhiteSpace(System.String)">
            <summary>
            
            </summary>
            <param name="s">The s.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.StringAssistant.SubArray(System.String[],System.Int32)">
            <summary>
            Creates a subarray from an existing array.
            </summary>
            <param name="array">The source array.</param>
            <param name="offset">The offset into the source array.</param>
            <returns>The subarray.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StringAssistant.SubArray(System.String[],System.Int32,System.Int32)">
            <summary>
            Creates a subarray from an existing array.
            </summary>
            <param name="array">The source array.</param>
            <param name="offset">The offset into the source array.</param>
            <param name="count">The number of elements to copy into the subarray.</param>
            <returns>The subarray.</returns>
        </member>
        <member name="T:FM.LiveSwitch.TcpSocket">
            <summary>
            A TCP socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.Socket">
            <summary>
            Gets the underlying socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.Stream">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.Server">
            <summary>
            Gets a value indicating whether the socket can accept incoming connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.Secure">
            <summary>
            Gets a value indicating whether the socket is secure.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.IPv6">
            <summary>
            Gets a value indicating whether the socket supports IPv6.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.LocalPort">
            <summary>
            Gets the local port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.LocalIPAddress">
            <summary>
            Gets the local IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.RemotePort">
            <summary>
            Gets the remote port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.RemoteIPAddress">
            <summary>
            Gets the remote IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.RemoteHostname">
            <summary>
            Gets the remote hostname.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TcpSocket" /> class.
            </summary>
            <param name="server">Whether the socket is going to accept new incoming connections.</param>
            <param name="ipv6">Whether an IPv6 socket should be created.</param>
            <param name="secure">Whether to send data securely using SSL.</param>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.#ctor(System.Net.Sockets.Socket,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TcpSocket"/> class.
            </summary>
            <param name="socket">The existing socket.</param>
            <param name="server">Whether the socket is server-side.</param>
            <param name="secure">Whether the socket is secure.</param>
        </member>
        <member name="E:FM.LiveSwitch.TcpSocket.OnSocketCreated">
            <summary>
            Raised when a socket has been created and initialized.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.AttemptNoDelay">
            <summary>
            Attempt to set the Socket `NoDelay` property to disable Nagling. Default is false. You must "opt-in".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.AttemptIPv4Dscp">
            <summary>
            Attempt to use DSCP for IPv4 when possible. Default is false. You must "opt-in".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.AttemptIPv6Dscp">
            <summary>
            Attempt to use DSCP for IPv6 when possible. Default is false. You must "opt-in".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.Bind(System.String,System.Int32,System.Boolean@)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="ipAddress">The local IP address.</param>
            <param name="port">The local port.</param>
            <param name="addressInUse">Indicates that access to the address is forbidden or in use.</param>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ListenBacklog">
            <summary>
            Gets or sets the maximum length of the pending connections queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.AcceptAsync(FM.LiveSwitch.Action0,FM.LiveSwitch.Action1{System.Exception},FM.LiveSwitch.Action1{FM.LiveSwitch.StreamSocket})">
            <summary>
            Accepts a new socket asynchronously.
            </summary>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
            <param name="onSocket">The callback to invoke when a socket is ready.</param>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.DisableProxy">
            <summary>
            Gets or sets whether the system proxy should be disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ManualProxyHostname">
            <summary>
            Gets or sets the manual proxy hostname, which overrides system settings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ManualProxyPort">
            <summary>
            Gets or sets the manual proxy proxy, which overrides system settings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ProxyUsername">
            <summary>
            Gets or sets the proxy username, if the proxy requires a username.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ProxyPassword">
            <summary>
            Gets or sets the proxy password, if the proxy requires a username.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ProxyIPAddress">
            <summary>
            Gets or sets the proxy IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ProxyPort">
            <summary>
            Gets or sets the proxy port.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.ConnectAsync(System.String,System.String,System.Int32,System.Int32,FM.LiveSwitch.Action0,FM.LiveSwitch.Action2{System.Exception,System.Boolean})">
            <summary>
            Connects the socket asynchronously.
            </summary>
            <param name="hostname">The remote hostname.</param>
            <param name="ipAddress">The remote IP address.</param>
            <param name="port">The remote port.</param>
            <param name="timeout">The timeout (in ms).</param>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.Certificate">
            <summary>
            Gets or sets the certificate to use to secure the socket.
            This is required for secure server sockets.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ServerEnabledSslProtocols">
            <summary>
            Gets or sets the server-side enabled SSL protocols.
            If <c>null</c>, the server socket will default to TLS 1.2.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ClientEnabledSslProtocols">
            <summary>
            Gets or sets the client-side enabled SSL protocols.
            If <c>null</c>, the client socket will default to TLS 1.0, 1.1, and 1.2.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.TcpSocket.ServerSslAuthenticateDelegate">
            <summary>
            Authenticates an SSL stream as a server.
            </summary>
            <param name="sslStream">The SSL stream.</param>
            <param name="serverCertificate">The server certificate.</param>
            <param name="enabledSslProtocols">The enabled SSL protocols.</param>
        </member>
        <member name="T:FM.LiveSwitch.TcpSocket.ClientSslAuthenticateDelegate">
            <summary>
            Authenticates an SSL stream as a client.
            </summary>
            <param name="sslStream">The SSL stream.</param>
            <param name="targetHost">The target host.</param>
            <param name="enabledSslProtocols">The enabled SSL protocols.</param>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ServerSslAuthenticate">
            <summary>
            Gets or sets the function to authenticate the stream as a server.
            Defaults to using SslStream.AuthenticateAsServer without requiring a client certificate or checking certificate revocation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ClientSslAuthenticate">
            <summary>
            Gets or sets the function to authenticate the stream as a client.
            Defaults to using SslStream.AuthenticateAsClient without client certificates or checking certificate revocation.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.Send(FM.LiveSwitch.DataBuffer)">
            <summary>
            Sends data synchronously.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.SendAsync(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.Action0,FM.LiveSwitch.Action2{System.Exception,System.Boolean})">
            <summary>
            Sends data asynchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="timeout">The timeout (in ms).</param>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.ReceiveAsync(System.Int32)">
            <summary>
            Receives data asynchronously.
            </summary>
            <param name="timeout">The timeout (in ms).</param>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.TextLogProvider">
            <summary>
            Simple log provider that writes to a local string builder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TextLogProvider.Text">
            <summary>
            Gets the logged text.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TextLogProvider.Callback">
            <summary>
            Gets or sets a callback to invoke
            whenever text is written to the log.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TextLogProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TextLogProvider"/> class using <see cref="F:FM.LiveSwitch.LogLevel.Info"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TextLogProvider.#ctor(FM.LiveSwitch.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TextLogProvider"/> class.
            </summary>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.TextLogProvider.Clear">
            <summary>
            Clears all text from the log
            and returns the former contents.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TextLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.TimeoutTimer">
            <summary>
            A thread-safe class for running timeouts on asynchronous methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TimeoutTimer.#ctor(FM.LiveSwitch.Action1{System.Object},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TimeoutTimer"/> class.
            </summary>
            <param name="callback">The callback to invoke if the timeout occurs.</param>
            <param name="state">The state to pass into the callback if the timeout occurs.</param>
        </member>
        <member name="M:FM.LiveSwitch.TimeoutTimer.Start(System.Int32)">
            <summary>
            Starts the timer.
            </summary>
            <param name="timeout">The timeout length, in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.TimeoutTimer.Stop">
            <summary>
            Stops the timer, notifying the calling code if the timeout has already elapsed.
            </summary>
            <returns><c>true</c> if the timer was successfully stopped in time; <c>false</c>
            if the timeout elapsed and the timeout callback has been invoked.</returns>
        </member>
        <member name="T:FM.LiveSwitch.TransportAddress">
            <summary>
            An IP address and port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportAddress.IPAddress">
            <summary>
            Gets or sets the IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportAddress.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportAddress.AddressType">
            <summary>
            Gets the address type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TransportAddress"/> class.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsIPAddress(System.String)">
            <summary>
            Determines whether a string is a valid IPv4 or IPv6 address
            </summary>
            <param name="address">The address.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.SanitizeIPAddress(System.String)">
            <summary>
            Sanitizes the IP address, removing any local information.
            </summary>
            <param name="ipAddress">The IP address to sanitize.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.CheckMask(System.String,System.String,System.String)">
            <summary>
            Compares two addresses to see if they are on
            the same subnet.
            </summary>
            <param name="address1">The first address.</param>
            <param name="address2">The second address.</param>
            <param name="mask">The subnet mask.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.MaskFromPrefixLength(System.Int32)">
            <summary>
            Gets a subnet mask from a prefix length (0-32).
            </summary>
            <param name="prefixLength">The prefix length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsIPv4(System.String)">
            <summary>
            Determines whether the specified IP address is IPv4.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <returns>
              <c>true</c> if the specified IP address is IPv4; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsIPv6(System.String)">
            <summary>
            Determines whether the specified IP address is IPv6.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <returns>
              <c>true</c> if the specified IP address is IPv6; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsPrivate(System.String)">
            <summary>
            Determines whether the specified IP address is private.
            </summary>
            <param name="ipAddress">The IP address.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsReserved(System.String)">
            <summary>
            Determines whether the specified IP address is reserved.
            </summary>
            <param name="ipAddress">The IP address.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsLinkLocal(System.String)">
            <summary>
            Determines whether the specified IP address is link-local.
            </summary>
            <param name="ipAddress">The IP address.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsLoopback(System.String)">
            <summary>
            Determines whether the specified IP address is loopback.
            </summary>
            <param name="ipAddress">The IP address.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsAny(System.String)">
            <summary>
            Determines whether the specified IP address is all zeros
            and represents "any" IP address.
            </summary>
            <param name="ipAddress">The IP address.</param>
        </member>
        <member name="T:FM.LiveSwitch.UdpSocket">
            <summary>
            A UDP socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.DefaultReceiveBufferSize">
            <summary>
            Gets or sets the default socket receive buffer size.
            Defaults to 65536. A negative value indicates that
            the receive buffer size will not be set.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.DefaultSendBufferSize">
            <summary>
            Gets or sets the default socket receive buffer size.
            Defaults to 65536. A negative value indicates that
            the receive buffer size will not be set.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.ReceiveBufferSize">
            <summary>
            Gets the current receive buffer size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.SendBufferSize">
            <summary>
            Gets the current send buffer size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.MaxQueuedPackets">
            <summary>
            Gets or sets the maximum number of packets
            that can be queued at any given point in time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.Socket">
            <summary>
            Gets the underlying socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.IPv6">
            <summary>
            Gets a value indicating whether the socket supports IPv6.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.LocalPort">
            <summary>
            Gets the local port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.LocalIPAddress">
            <summary>
            Gets the local IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.DisableSocketIOControl">
            <summary>
            Gets or sets whether Socket.IOControl should be disabled.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.UdpSocket.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.UdpSocket"/> class.
            </summary>
            <param name="ipv6">Whether an IPv6 socket should be created.</param>
        </member>
        <member name="M:FM.LiveSwitch.UdpSocket.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.UdpSocket"/> class.
            </summary>
            <param name="ipv6">Whether an IPv6 socket should be created.</param>
            <param name="sendBufferSize">The desired send buffer size.</param>
            <param name="receiveBufferSize">The desired receive buffer size.</param>
        </member>
        <member name="E:FM.LiveSwitch.UdpSocket.OnSocketCreated">
            <summary>
            Raised when a socket has been created and initialized.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.AttemptIPv4Dscp">
            <summary>
            Attempt to use DSCP for IPv4 when possible. Default is false. You must "opt-in".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.AttemptIPv6Dscp">
            <summary>
            Attempt to use DSCP for IPv6 when possible. Default is false. You must "opt-in".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.UdpSocket.Bind(System.String,System.Int32,System.Boolean@)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="ipAddress">The local IP address.</param>
            <param name="port">The local port.</param>
            <param name="addressInUse">Indicates that access to the address is forbidden or in use.</param>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.SendQueue">
            <summary>
            Gets the send queue. For testing purposes only.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.ReceiveQueue">
            <summary>
            Gets the receive queue. For testing purposes only.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.UdpSocket.Send(FM.LiveSwitch.DataBuffer,System.String,System.Int32)">
            <summary>
            Sends data synchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="ipAddress">The remote IP address.</param>
            <param name="port">The remote port.</param>
        </member>
        <member name="M:FM.LiveSwitch.UdpSocket.RaiseReceiveSuccess(FM.LiveSwitch.Action3{FM.LiveSwitch.DataBuffer,System.String,System.Int32},FM.LiveSwitch.DataBuffer,System.String,System.Int32)">
            <summary>
            Invokes the receive success callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="buffer">The buffer.</param>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:FM.LiveSwitch.UdpSocket.ReceiveAsync(FM.LiveSwitch.Action3{FM.LiveSwitch.DataBuffer,System.String,System.Int32},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Receives data asynchronously.
            </summary>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.UdpSocket.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Unhandled">
            <summary>
            Throws exceptions on a separate thread.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Unhandled.LogException(System.Exception,System.String)">
            <summary>
            Logs an unhandled exception.
            </summary>
            <param name="ex">The exception to throw.</param>
            <param name="source">The source of the exception.</param>
        </member>
        <member name="T:FM.LiveSwitch.UnhandledExceptionArgs">
            <summary>
            Arguments for an unhandled exception.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UnhandledExceptionArgs.Handled">
            <summary>
            Gets or sets whether the exception has been
            appropriately handled. If set to <c>true</c>,
            then the exception will not be thrown.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UnhandledExceptionArgs.Exception">
            <summary>
            Gets the unhandled exception.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.UnhandledExceptionArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.UnhandledExceptionArgs" /> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:FM.LiveSwitch.Utf8">
            <summary>
            UTF-8 encoding/decoding utility.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Utf8.Encode(System.String)">
            <summary>
            Encodes a string to a UTF-8 byte array.
            </summary>
            <param name="input">The input string.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utf8.GetByteCount(System.String)">
            <summary>
            Gets the number of bytes that would be returned by
            a call to encode.
            </summary>
            <param name="input">The input string.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utf8.Decode(System.Byte[])">
            <summary>
            Decodes a UTF-8 byte array to a string.
            </summary>
            <param name="input">The input byte array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utf8.Decode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes a UTF-8 byte array to a string.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="index">The index to start reading.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utf8.Decode(FM.LiveSwitch.DataBuffer)">
            <summary>
            Decodes a UTF-8 data buffer to a string.
            </summary>
            <param name="buffer">The input byte array.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.WebSocketBase">
            <summary>
            WebSocket base properties/methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketBase.RaiseOpenSuccess(FM.LiveSwitch.WebSocketOpenArgs)">
            <summary>
            Raises the open success callback.
            </summary>
            <param name="openArgs">The open arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketBase.RaiseOpenFailure(FM.LiveSwitch.WebSocketOpenArgs,FM.LiveSwitch.WebSocketStatusCode,System.Exception)">
            <summary>
            Raises the open failure callback.
            </summary>
            <param name="openArgs">The open arguments.</param>
            <param name="statusCode">The status code.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketBase.RaiseStreamFailure(FM.LiveSwitch.WebSocketOpenArgs,FM.LiveSwitch.WebSocketStatusCode,System.Exception)">
            <summary>
            Raises the stream failure callback.
            </summary>
            <param name="openArgs">The open arguments.</param>
            <param name="statusCode">The status code.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketBase.RaiseReceive(FM.LiveSwitch.WebSocketOpenArgs,System.String,System.Byte[])">
            <summary>
            Raises the receive callback.
            </summary>
            <param name="openArgs">The open arguments.</param>
            <param name="textMessage">The text message.</param>
            <param name="binaryMessage">The binary message.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketBase.RaiseCloseComplete(FM.LiveSwitch.WebSocketCloseArgs,FM.LiveSwitch.WebSocketStatusCode,System.String)">
            <summary>
            Raises the close complete callback.
            </summary>
            <param name="closeArgs">The close arguments.</param>
            <param name="statusCode">The status code.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketSendState">
            <summary>
            A wrapper for a WebSocket send request to support queueing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketSendState.SendArgs">
            <summary>
            Gets or sets the arguments passed to the Send method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketSendState.RequestBytes">
            <summary>
            Gets or sets request frame, in bytes.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IWebSocket">
            <summary>
            Contract for an implementation of the WebSocket protocol v8.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IWebSocket.BufferedAmount">
            <summary>
            Gets the number of bytes buffered in the send queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IWebSocket.IsOpen">
            <summary>
            Gets a value indicating whether the WebSocket is connected.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IWebSocket.Secure">
            <summary>
            Gets a value indicating whether the WebSocket is secure.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IWebSocket.Open(FM.LiveSwitch.WebSocketOpenArgs)">
            <summary>
            Opens the WebSocket connection.
            </summary>
            <param name="openArgs">The open arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.IWebSocket.Send(FM.LiveSwitch.WebSocketSendArgs)">
            <summary>
            Sends a message to the WebSocket server.
            </summary>
            <param name="sendArgs">The send arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.IWebSocket.Close">
            <summary>
            Closes the WebSocket connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IWebSocket.Close(FM.LiveSwitch.WebSocketCloseArgs)">
            <summary>
            Closes the WebSocket connection.
            </summary>
            <param name="closeArgs">The close arguments</param>
        </member>
        <member name="T:FM.LiveSwitch.WebSocket">
            <summary>
            Implementation of the WebSocket protocol v8.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocket.Exists">
            <summary>
            Gets a value indicating whether WebSocket support exists on this platform.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocket.Protocol">
            <summary>
            Gets the WebSocket protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocket.BufferedAmount">
            <summary>
            Gets the number of bytes buffered in the send queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocket.IsOpen">
            <summary>
            Gets a value indicating whether the WebSocket is connected.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocket.Secure">
            <summary>
            Gets a value indicating whether the WebSocket is secure.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocket.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:FM.LiveSwitch.WebSocket"/>.
            </summary>
            <param name="requestUrl">The target URL for the WebSocket connection.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocket.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:FM.LiveSwitch.WebSocket"/>.
            </summary>
            <param name="requestUrl">The target URL for the WebSocket connection.</param>
            <param name="protocol">The WebSocket protocol.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocket.Open(FM.LiveSwitch.WebSocketOpenArgs)">
            <summary>
            Opens the WebSocket connection.
            </summary>
            <param name="openArgs">The open arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocket.Send(FM.LiveSwitch.WebSocketSendArgs)">
            <summary>
            Sends a message to the WebSocket server.
            </summary>
            <param name="sendArgs">The send arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocket.Close">
            <summary>
            Closes the WebSocket connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocket.Close(FM.LiveSwitch.WebSocketCloseArgs)">
            <summary>
            Closes the WebSocket connection.
            </summary>
            <param name="closeArgs">The close arguments</param>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketCloseArgs">
            <summary>
            Close arguments for the <see cref="T:FM.LiveSwitch.WebSocket"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketCloseArgs.OnComplete">
            <summary>
            Gets or sets the callback to execute when the connection is closed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketCloseArgs.StatusCode">
            <summary>
            Gets or sets the status code to send with the close frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketCloseArgs.Reason">
            <summary>
            Gets or sets the reason to send with the close frame.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketCloseArgs.#ctor">
            <summary>
            Creates a new instance of <see cref="T:FM.LiveSwitch.WebSocketCloseArgs" />
            with default values.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketCloseCompleteArgs">
            <summary>
            Arguments for <see cref="P:FM.LiveSwitch.WebSocketCloseArgs.OnComplete"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketCloseCompleteArgs.CloseArgs">
            <summary>
            Gets or sets the original arguments passed to the close method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketCloseCompleteArgs.StatusCode">
            <summary>
            Gets or sets the status code associated with the close operation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketCloseCompleteArgs.Reason">
            <summary>
            Gets or sets the reason given for closing the connection.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketMockRequest">
            <summary>
            A mock response object for the WebSocket protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockRequest.RequestUri">
            <summary>
            When overridden in a descendant class, gets the URI of the Internet resource associated with the request.
            </summary>
            <returns>
            A <see cref="T:System.Uri"/> representing the resource associated with the request
              </returns>
              
            <exception cref="T:System.NotImplementedException">
            Any attempt is made to get or set the property, when the property is not overridden in a descendant class.
              </exception>
              
            <PermissionSet>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
              </PermissionSet>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockRequest.Headers">
            <summary>
            When overridden in a descendant class, gets or sets the collection of header name/value pairs associated with the request.
            </summary>
            <returns>A <see cref="T:System.Net.WebHeaderCollection"/> containing the header name/value pairs associated with this request.</returns>
              
            <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
              
            <PermissionSet>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
              </PermissionSet>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockRequest.ContentType">
            <summary>
            When overridden in a descendant class, gets or sets the content type of the request data being sent.
            </summary>
            <returns>The content type of the request data.</returns>
              
            <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockRequest.Method">
            <summary>
            When overridden in a descendant class, gets or sets the protocol method to use in this request.
            </summary>
            <returns>The protocol method to use in this request.</returns>
              
            <exception cref="T:System.NotImplementedException">If the property is not overridden in a descendant class, any attempt is made to get or set the property. </exception>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketMockRequest.Abort">
            <summary>
            Aborts the Request.
            </summary>
            <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketMockRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
            <summary>
            When overridden in a descendant class, provides an asynchronous method to request a stream.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that references the asynchronous request.
            </returns>
            <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketMockRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
            When overridden in a descendant class, begins an asynchronous request for an Internet resource.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that references the asynchronous request.
            </returns>
            <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketMockRequest.EndGetRequestStream(System.IAsyncResult)">
            <summary>
            When overridden in a descendant class, returns a <see cref="T:System.IO.Stream"/> for writing data to the Internet resource.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that references a pending request for a stream.</param>
            <returns>
            A <see cref="T:System.IO.Stream"/> to write data to.
            </returns>
            <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketMockRequest.EndGetResponse(System.IAsyncResult)">
            <summary>
            When overridden in a descendant class, returns a <see cref="T:System.Net.WebResponse"/>.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that references a pending request for a response.</param>
            <returns>
            A <see cref="T:System.Net.WebResponse"/> that contains a response to the Internet request.
            </returns>
            <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketMockResponse">
            <summary>
            A mock response object for the WebSocket protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockResponse.Headers">
            <summary>
            When overridden in a derived class, gets a collection of header name-value pairs associated with this request.
            </summary>
            <returns>An instance of the <see cref="T:System.Net.WebHeaderCollection"/> class that contains header values associated with this response.</returns>
              
            <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
              
            <PermissionSet>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
              </PermissionSet>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockResponse.ContentType">
            <summary>
            When overridden in a derived class, gets or sets the content type of the data being received.
            </summary>
            <returns>A string that contains the content type of the response.</returns>
              
            <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockResponse.ContentLength">
            <summary>
            When overridden in a descendant class, gets or sets the content length of data being received.
            </summary>
            <returns>The number of bytes returned from the Internet resource.</returns>
              
            <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockResponse.StatusCode">
            <summary>
            Gets or set the status code of the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockResponse.ResponseUri">
            <summary>
            When overridden in a derived class, gets the URI of the Internet resource that actually responded to the request.
            </summary>
            <returns>An instance of the <see cref="T:System.Uri"/> class that contains the URI of the Internet resource that actually responded to the request.</returns>
              
            <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketMockResponse.GetResponseStream">
            <summary>
            When overridden in a descendant class, returns the data stream from the Internet resource.
            </summary>
            <returns>
            An instance of the <see cref="T:System.IO.Stream"/> class for reading data from the Internet resource.
            </returns>
            <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketMockResponse.Close">
            <summary>
            When overridden by a descendant class, closes the response stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketOpenArgs">
            <summary>
            Open arguments for the <see cref="T:FM.LiveSwitch.WebSocket"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.Headers">
            <summary>
            Gets or sets headers to send with the handshake request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke when a successful connection has been established.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke when a connection could not be established.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.OnStreamFailure">
            <summary>
            Gets or sets the callback to invoke when a successful connection breaks down.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.OnRequestCreated">
            <summary>
            Gets or sets the callback to invoke before the handshake request is sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.OnResponseReceived">
            <summary>
            Gets or sets the callback to invoke after the handshake response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.OnReceive">
            <summary>
            Gets or sets the callback to invoke when a message is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.HandshakeTimeout">
            <summary>
            Gets or sets the timeout for the handshake (in ms).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.StreamTimeout">
            <summary>
            Gets or sets the timeout for the stream (in ms).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.Sender">
            <summary>
            Gets or sets the sender of the request.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketOpenArgs.#ctor">
            <summary>
            Creates a new instance of 
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketOpenFailureArgs">
            <summary>
            Arguments for <see cref="P:FM.LiveSwitch.WebSocketOpenArgs.OnFailure"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenFailureArgs.OpenArgs">
            <summary>
            Gets or sets the original arguments passed to the open method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenFailureArgs.Exception">
            <summary>
            Gets or sets the exception generated while connecting.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenFailureArgs.StatusCode">
            <summary>
            Gets or sets the status code associated with the failure to connect.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketOpenSuccessArgs">
            <summary>
            Arguments for <see cref="P:FM.LiveSwitch.WebSocketOpenArgs.OnSuccess"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenSuccessArgs.OpenArgs">
            <summary>
            Gets or sets the original arguments passed to the open method.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketReceiveArgs">
            <summary>
            Arguments for <see cref="P:FM.LiveSwitch.WebSocketOpenArgs.OnReceive"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketReceiveArgs.OpenArgs">
            <summary>
            Gets or sets the original arguments passed to the open method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketReceiveArgs.TextMessage">
            <summary>
            Gets or sets the message received from the server as text data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketReceiveArgs.BinaryMessage">
            <summary>
            Gets or sets the message received from the server as binary data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketReceiveArgs.IsText">
            <summary>
            Gets whether or not the received message is text.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketRequest">
            <summary>
            Defines a transfer request for <see cref="T:FM.LiveSwitch.WebSocketWebRequestTransfer"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketRequest.Args">
            <summary>
            Gets or sets the request arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketRequest.Callback">
            <summary>
            Gets or sets the callback to execute when the request completes.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketSendArgs">
            <summary>
            Send arguments for the <see cref="T:FM.LiveSwitch.WebSocket"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketSendArgs.TextMessage">
            <summary>
            Gets or sets the message to send as text data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketSendArgs.BinaryMessage">
            <summary>
            Gets or sets the message to send as binary data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketSendArgs.Timeout">
            <summary>
            Gets or sets the timeout for the request (in ms).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketSendArgs.IsText">
            <summary>
            Gets whether or not the message should be sent as text.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketSendArgs.#ctor">
            <summary>
            Creates a new <see cref="T:FM.LiveSwitch.WebSocketSendArgs"/> instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketStatusCode">
            <summary>
            An enumeration of potential WebSocket status codes.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.Normal">
            <summary>
            Indicates normal closure, meaning that the purpose for which
            the connection was established has been fulfilled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.GoingAway">
            <summary>
            Indicates that an endpoint is "going away", such as a server
            going down or a browser having navigated away from a page.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.ProtocolError">
            <summary>
            Indicates that an endpoint is terminating the connection
            due to a protocol error.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.InvalidType">
            <summary>
            Indicates that an endpoint is terminating the connection
            because it has received a type of data that it cannot accept.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.NoStatus">
            <summary>
            Indicates that no status code was present in the Close frame.
            Reserved for use outside Close frames.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.Abnormal">
            <summary>
            Indicates that the connection was closed abnormally, without
            sending a Close frame. Reserved for use outside Close frames.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.InvalidData">
            <summary>
            Indicates that an endpoint is terminating the connection
            because it has received data within a message that was not
            consistent with the type of message.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.PolicyViolation">
            <summary>
            Indicates that an endpoint is terminating the connection
            because it has received a message that violates its policy.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.MessageTooLarge">
            <summary>
            Indicates that an endpoint is terminating the connection
            because it has received a message that is too big for it
            to process.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.UnsupportedExtension">
            <summary>
            Indicates that the client is terminating the connection
            because it has expected the server to negotiate one or
            more extensions, but the server didn't return them in the
            response message of the WebSocket handshake.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.UnexpectedCondition">
            <summary>
            Indicates that the server is terminating the connection
            because it encountered an unexpected condition that
            prevented it from fulfilling the request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.SecureHandshakeFailure">
            <summary>
            Indicates that the connection was closed due to a failure
            to perform a TLS handshake. Reserved for use outside Close
            frames.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketStreamFailureArgs">
            <summary>
            Arguments for <see cref="P:FM.LiveSwitch.WebSocketOpenArgs.OnStreamFailure"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketStreamFailureArgs.OpenArgs">
            <summary>
            Gets or sets the original arguments passed to the open method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketStreamFailureArgs.Exception">
            <summary>
            Gets or sets the exception generated by the active connection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketStreamFailureArgs.StatusCode">
            <summary>
            Gets or sets the status code associated with the stream failure.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketTransfer">
            <summary>
            Base class that defines methods for transferring content over the WebSocket protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.HandshakeTimeout">
            <summary>
            Gets or sets the timeout for the initial handshake (in ms).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.StreamTimeout">
            <summary>
            Gets or sets the timeout for the stream (in ms).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.Sender">
            <summary>
            Gets or sets the sender of the messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.OnRequestCreated">
            <summary>
            Gets or sets the callback to invoke when the handshake request is created.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.OnResponseReceived">
            <summary>
            Gets or sets the callback to invoke when the handshake response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.OnOpenSuccess">
            <summary>
            Gets or sets the callback to invoke if the handshake succeeds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.OnOpenFailure">
            <summary>
            Gets or sets the callback to invoke if the handshake fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.OnStreamFailure">
            <summary>
            Gets or sets the callback to invoke if the stream errors out.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketTransfer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.WebSocketTransfer"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketTransfer.Open(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Opens the socket.
            </summary>
            <param name="headers">The headers to pass in with the initial handshake.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketTransfer.Send(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends a request synchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <returns>The response parameters.</returns>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketTransfer.SendAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <param name="callback">The callback to execute with the resulting response.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketTransferFactory">
            <summary>
            Creates implementations of <see cref="T:FM.LiveSwitch.WebSocketWebRequestTransfer"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransferFactory.CreateWebSocketTransfer">
            <summary>
            Gets or sets the callback that creates a WebSocket-based transfer class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketTransferFactory.GetWebSocketTransfer(System.String)">
            <summary>
            Gets an instance of the WebSocket-based transfer class.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.WebSocketWebRequestTransfer">
            <summary>
            Defines methods for transferring messages using the WebSocket protocol.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketWebRequestTransfer.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:FM.LiveSwitch.WebSocketWebRequestTransfer"/>.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketWebRequestTransfer.Open(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Opens the WebSocket connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketWebRequestTransfer.Send(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends a request synchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <returns>The response parameters.</returns>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketWebRequestTransfer.SendAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <param name="callback">The callback to execute with the resulting response.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketWebRequestTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.X501.Attribute">
            <summary>
            An X.501 attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.Attribute.AttributeType">
            <summary>
            Gets or sets the type of the attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.Attribute.AttributeValue">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.Attribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.Attribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.Attribute.#ctor(System.Int64[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.Attribute"/> class.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.X501.Attribute.AttributeValueAsDirectoryString">
            <summary>
            Gets the attribute value as a directory string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.Attribute.AttributeValueAsString">
            <summary>
            Gets the attribute value as a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.Attribute.ToAsn1">
            <summary>
            Converts this attribute to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.Attribute.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an attribute from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X501.AttributeType">
            <summary>
            X.501 attribute types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.ObjectClass">
            <summary>
            Gets the object class attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.AliasedObjectName">
            <summary>
            Gets the aliased object name attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.KnowledgeInformation">
            <summary>
            Gets the knowledge information attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.CommonName">
            <summary>
            Gets the common name attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.Surname">
            <summary>
            Gets the surname attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.SerialNumber">
            <summary>
            Gets the serial number attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.CountryName">
            <summary>
            Gets the country name attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.LocalityName">
            <summary>
            Gets the locality name attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.StateOrProvinceName">
            <summary>
            Gets the state or province name attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.StreetAddress">
            <summary>
            Gets the street address attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.OrganizationName">
            <summary>
            Gets the organization name attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.OrganizationUnitName">
            <summary>
            Gets the organization unit name attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.Title">
            <summary>
            Gets the title attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.Description">
            <summary>
            Gets the description attribute type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.AttributeType.AreEqual(System.Int64[],System.Int64[])">
            <summary>
            Checks if two types are equal.
            </summary>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
        </member>
        <member name="T:FM.LiveSwitch.X501.DirectoryString">
            <summary>
            An X.501 directory string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.DirectoryString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.DirectoryString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.DirectoryString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.DirectoryString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.DirectoryString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.X501.DirectoryString.ToAsn1Utf8">
            <summary>
            Converts this directory string to an ASN.1 UTF-8 string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.DirectoryString.ToAsn1Printable">
            <summary>
            Converts this directory string to an ASN.1 printable string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.DirectoryString.ToAsn1Bmp">
            <summary>
            Converts this directory string to an ASN.1 BMP string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.DirectoryString.ToAsn1Universal">
            <summary>
            Converts this directory string to an ASN.1 universal string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.DirectoryString.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a directory string from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X501.Name">
            <summary>
            An X.501 name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.Name.RdnSequence">
            <summary>
            Gets or sets the relative distinguished name sequence.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.Name.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.Name"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.Name.#ctor(FM.LiveSwitch.X501.RelativeDistinguishedName[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.Name"/> class.
            </summary>
            <param name="rdnSequence">The relative distinguished name sequence.</param>
        </member>
        <member name="M:FM.LiveSwitch.X501.Name.GetAttribute(System.Int64[])">
            <summary>
            Gets an attribute from the relative distinguished name sequence by type.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.Name.ToAsn1">
            <summary>
            Converts this name to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.Name.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a name from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X501.RelativeDistinguishedName">
            <summary>
            An X.501 relative distinguished name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.RelativeDistinguishedName.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.RelativeDistinguishedName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.RelativeDistinguishedName"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.RelativeDistinguishedName.#ctor(FM.LiveSwitch.X501.Attribute[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.RelativeDistinguishedName"/> class.
            </summary>
            <param name="attributeTypeAndValues">The attribute type and values.</param>
        </member>
        <member name="M:FM.LiveSwitch.X501.RelativeDistinguishedName.GetAttribute(System.Int64[])">
            <summary>
            Gets an attribute by type.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.RelativeDistinguishedName.ToAsn1">
            <summary>
            Converts this relative distinguished name to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.RelativeDistinguishedName.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a relative distinguished name from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.ECFieldId">
            <summary>
            X.509 EC field ID.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.X509.ECCurve">
            <summary>
            X.509 EC curve.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.X509.ECNamedCurve">
            <summary>
            X.509 EC named curve identifiers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecP192R1">
            <summary>
            Gets the SecP192R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT163K1">
            <summary>
            Gets the SecT163K1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT163R2">
            <summary>
            Gets the SecT163R2 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecP224R1">
            <summary>
            Gets the SecP224R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT233K1">
            <summary>
            Gets the SecT233K1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT233R1">
            <summary>
            Gets the SecT233R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecP256R1">
            <summary>
            Gets the SecP256R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT283K1">
            <summary>
            Gets the SecT283K1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT283R1">
            <summary>
            Gets the SecT283R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecP384R1">
            <summary>
            Gets the SecP384R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT409K1">
            <summary>
            Gets the SecT409K1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT409R1">
            <summary>
            Gets the SecT409R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecP521R1">
            <summary>
            Gets the SecP521R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT571K1">
            <summary>
            Gets the SecT571K1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT571R1">
            <summary>
            Gets the SecT571R1 identifier.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.X509.AlgorithmIdentifier">
            <summary>
            An X.509 signature algorithm.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.GetRsa">
            <summary>
            Gets the RSA encryption identifier.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.GetEcdsa(FM.LiveSwitch.X509.ECParameters)">
            <summary>
            Gets the ECDSA identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Md2WithRsaEncryption">
            <summary>
            Gets the MD2 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Md5WithRsaEncryption">
            <summary>
            Gets the MD5 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Sha1WithRsaEncryption">
            <summary>
            Gets the SHA-1 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Sha256WithRsaEncryption">
            <summary>
            Gets the SHA-256 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Sha384WithRsaEncryption">
            <summary>
            Gets the SHA-384 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Sha512WithRsaEncryption">
            <summary>
            Gets the SHA-512 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.DsaWithSha1">
            <summary>
            Gets the DSA with SHA-1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.DsaWithSha224">
            <summary>
            Gets the DSA with SHA-224 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.DsaWithSha256">
            <summary>
            Gets the DSA with SHA-256 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.EcdsaWithSha224">
            <summary>
            Gets the ECDSA with SHA-224 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.EcdsaWithSha256">
            <summary>
            Gets the ECDSA with SHA-256 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.EcdsaWithSha384">
            <summary>
            Gets the ECDSA with SHA-384 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.EcdsaWithSha512">
            <summary>
            Gets the ECDSA with SHA-512 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Algorithm">
            <summary>
            Gets or sets the algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.AlgorithmIdentifier"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.AlgorithmIdentifier"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.#ctor(System.Int64[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.AlgorithmIdentifier"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.AlgorithmsAreEqual(FM.LiveSwitch.X509.AlgorithmIdentifier,FM.LiveSwitch.X509.AlgorithmIdentifier)">
            <summary>
            Checks whether two algorithm identifiers have the same algorithm.
            </summary>
            <param name="ai1">The first algorithm identifier.</param>
            <param name="ai2">The second algorithm identifier.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.ParametersAreEqual(FM.LiveSwitch.X509.AlgorithmIdentifier,FM.LiveSwitch.X509.AlgorithmIdentifier)">
            <summary>
            Checks whether two algorithm identifiers have the same parameters.
            </summary>
            <param name="ai1">The first algorithm identifier.</param>
            <param name="ai2">The second algorithm identifier.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.AreEqual(FM.LiveSwitch.X509.AlgorithmIdentifier,FM.LiveSwitch.X509.AlgorithmIdentifier)">
            <summary>
            Checks whether two algorithm identifiers have the same algorithm and parameters.
            </summary>
            <param name="ai1">The first algorithm identifier.</param>
            <param name="ai2">The second algorithm identifier.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.ToAsn1">
            <summary>
            Converts this algorithm identifier to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an algorithm identifier from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.Certificate">
            <summary>
            An X.509 certificate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Certificate.TbsCertificate">
            <summary>
            Gets or sets the to-be-signed certificate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Certificate.SignatureAlgorithm">
            <summary>
            Gets or sets the signature algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Certificate.Signature">
            <summary>
            Gets or sets the signature.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Certificate.ToAsn1">
            <summary>
            Converts this certificate to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.Certificate.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a certificate from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.ECParameters">
            <summary>
            An X.509 EC parameter set.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECParameters.NamedCurve">
            <summary>
            Gets or sets the named curve identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECParameters.FieldId">
            <summary>
            Gets or sets the field identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECParameters.Curve">
            <summary>
            Gets or sets the curve.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECParameters.BasePoint">
            <summary>
            Gets or sets the base point on the curve.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECParameters.Order">
            <summary>
            Gets or sets the order N of the base point.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECParameters.Cofactor">
            <summary>
            Gets or sets the cofactor.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.ECParameters"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECParameters.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.ECParameters"/> class.
            </summary>
            <param name="namedCurve">The named curve.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECParameters.#ctor(FM.LiveSwitch.X509.ECFieldId,FM.LiveSwitch.X509.ECCurve,FM.LiveSwitch.X509.ECPoint,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.ECParameters"/> class.
            </summary>
            <param name="fieldId">The field ID.</param>
            <param name="curve">The curve.</param>
            <param name="basePoint">The base point on the curve.</param>
            <param name="order">The order N of the base point.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECParameters.ToAsn1">
            <summary>
            Converts this RSA private key to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.ECParameters.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an RSA private key from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.ECPoint">
            <summary>
            An X.509 EC public key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECPoint.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.ECPoint"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPoint.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.ECPoint"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPoint.ToAsn1">
            <summary>
            Converts this EC point to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPoint.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an EC point from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.DsaSignature">
            <summary>
            An X.509 ECDSA/DSA signature.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.DsaSignature.R">
            <summary>
            Gets or sets the R value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.DsaSignature.S">
            <summary>
            Gets or sets the S value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.DsaSignature.ToAsn1">
            <summary>
            Converts this EC private key to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.DsaSignature.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an EC private key from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.Extension">
            <summary>
            An X.509 extension.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Extension.ExtensionId">
            <summary>
            Gets or sets the extension identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Extension.Critical">
            <summary>
            Gets or sets a value indicating whether this extension is critical.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Extension.ExtensionValue">
            <summary>
            Gets or sets the extension value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Extension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Extension"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Extension.#ctor(System.Int64[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Extension"/> class.
            </summary>
            <param name="extensionId">The extension identifier.</param>
            <param name="extensionValue">The extension value.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.Extension.#ctor(System.Int64[],System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Extension"/> class.
            </summary>
            <param name="extensionId">The extension identifier.</param>
            <param name="extensionValue">The extension value.</param>
            <param name="critical">if set to <c>true</c> [critical].</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.Extension.ToAsn1">
            <summary>
            Converts this extension to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.Extension.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an extension from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.Extensions">
            <summary>
            An X.509 extensions array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Extensions.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Extensions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Extensions" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Extensions.#ctor(FM.LiveSwitch.X509.Extension[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Extensions"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.Extensions.ToAsn1">
            <summary>
            Converts this extensions array to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.Extensions.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an extensions array from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.ECPrivateKey">
            <summary>
            An X.509 EC private key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECPrivateKey.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECPrivateKey.PrivateKey">
            <summary>
            Gets or sets the private key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECPrivateKey.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECPrivateKey.PublicKey">
            <summary>
            Gets or sets the public key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPrivateKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.ECPrivateKey"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPrivateKey.#ctor(System.Byte[],FM.LiveSwitch.X509.ECParameters,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.ECPrivateKey"/> class.
            </summary>
            <param name="privateKey">The private key.</param>
            <param name="parameters">The parameters.</param>
            <param name="publicKey">The public key.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPrivateKey.ToAsn1">
            <summary>
            Converts this EC private key to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPrivateKey.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an EC private key from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.PrivateKeyInfo">
            <summary>
            An X.509 private key info.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.PrivateKeyInfo.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.PrivateKeyInfo.PrivateKeyAlgorithm">
            <summary>
            Gets or sets the private key algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.PrivateKeyInfo.PrivateKey">
            <summary>
            Gets or sets the private key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.PrivateKeyInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.PrivateKeyInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.PrivateKeyInfo.ToAsn1">
            <summary>
            Converts this private key info to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.PrivateKeyInfo.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a private key info from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.PublicKeyInfo">
            <summary>
            An X.509 public key info.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.PublicKeyInfo.Algorithm">
            <summary>
            Gets or sets the public key algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.PublicKeyInfo.PublicKey">
            <summary>
            Gets or sets the public key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.PublicKeyInfo.ToAsn1">
            <summary>
            Converts this private key info to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.PublicKeyInfo.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a private key info from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.PublicKeyAlgorithm">
            <summary>
            X.509 public key algorithm identifiers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.PublicKeyAlgorithm.RsaEncryption">
            <summary>
            Gets the RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.PublicKeyAlgorithm.EcPublicKey">
            <summary>
            Gets the EC public key identifier.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.X509.RsaPrivateKey">
            <summary>
            An X.509 RSA private key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.Modulus">
            <summary>
            Gets or sets the modulus (n).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.PublicExponent">
            <summary>
            Gets or sets the public exponent (e).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.PrivateExponent">
            <summary>
            Gets or sets the private exponent (d).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.Prime1">
            <summary>
            Gets or sets the first prime value (p).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.Prime2">
            <summary>
            Gets or sets the second prime value (q).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.Exponent1">
            <summary>
            Gets or sets the first exponent value (dp).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.Exponent2">
            <summary>
            Gets or sets the second exponent value (dq).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.Coefficient">
            <summary>
            Gets or sets the coefficient (inverse-q).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPrivateKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.RsaPrivateKey"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPrivateKey.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.RsaPrivateKey"/> class.
            </summary>
            <param name="modulus">The modulus (n).</param>
            <param name="publicExponent">The public exponent (e).</param>
            <param name="privateExponent">The private exponent (d).</param>
            <param name="prime1">The first prime value (p).</param>
            <param name="prime2">The second prime value (q).</param>
            <param name="exponent1">The first exponent value (dp).</param>
            <param name="exponent2">The second exponent value (dq).</param>
            <param name="coefficient">The coefficient (inverse-q).</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPrivateKey.ToAsn1">
            <summary>
            Converts this RSA private key to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPrivateKey.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an RSA private key from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.RsaPublicKey">
            <summary>
            An X.509 RSA public key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPublicKey.Modulus">
            <summary>
            Gets or sets the modulus (n).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPublicKey.Exponent">
            <summary>
            Gets or sets the public exponent (e).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPublicKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.RsaPublicKey"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPublicKey.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.RsaPublicKey"/> class.
            </summary>
            <param name="modulus">The modulus (n).</param>
            <param name="exponent">The exponent (e).</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPublicKey.ToAsn1">
            <summary>
            Converts this RSA public key to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPublicKey.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an RSA public key from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.SignatureAlgorithm">
            <summary>
            X.509 signature algorithm identifiers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.Md2WithRsaEncryption">
            <summary>
            Gets the MD2 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.Md5WithRsaEncryption">
            <summary>
            Gets the MD5 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.Sha1WithRsaEncryption">
            <summary>
            Gets the SHA-1 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.Sha256WithRsaEncryption">
            <summary>
            Gets the SHA-256 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.Sha384WithRsaEncryption">
            <summary>
            Gets the SHA-384 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.Sha512WithRsaEncryption">
            <summary>
            Gets the SHA-512 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.DsaWithSha1">
            <summary>
            Gets the DSA with SHA-1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.DsaWithSha224">
            <summary>
            Gets the DSA with SHA-224 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.DsaWithSha256">
            <summary>
            Gets the DSA with SHA-256 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.EcdsaWithSha1">
            <summary>
            Gets the ECDSA with SHA-1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.EcdsaWithSha224">
            <summary>
            Gets the ECDSA with SHA-224 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.EcdsaWithSha256">
            <summary>
            Gets the ECDSA with SHA-256 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.EcdsaWithSha384">
            <summary>
            Gets the ECDSA with SHA-384 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.EcdsaWithSha512">
            <summary>
            Gets the ECDSA with SHA-512 identifier.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.X509.SubjectPublicKeyInfo">
            <summary>
            An X.509 subject public key info.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SubjectPublicKeyInfo.Algorithm">
            <summary>
            Gets or sets the algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SubjectPublicKeyInfo.SubjectPublicKey">
            <summary>
            Gets or sets the subject public key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.SubjectPublicKeyInfo.ToAsn1">
            <summary>
            Converts this subject public key info to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.SubjectPublicKeyInfo.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a subject public key info from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.TbsCertificate">
            <summary>
            An X.509 to-be-signed certificate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Version1">
            <summary>
            Gets the value indicating version 1.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Version2">
            <summary>
            Gets the value indicating version 2.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Version3">
            <summary>
            Gets the value indicating version 3.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.MissingVersion">
            <summary>
            Gets a value indicating whether the version field was missing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.SerialNumber">
            <summary>
            Gets or sets the serial number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.SignatureAlgorithm">
            <summary>
            Gets or sets the signature algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Issuer">
            <summary>
            Gets or sets the issuer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Validity">
            <summary>
            Gets or sets the validity.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.SubjectPublicKeyInfo">
            <summary>
            Gets or sets the subject public key information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.IssuerUniqueId">
            <summary>
            Gets or sets the issuer unique identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.SubjectUniqueId">
            <summary>
            Gets or sets the subject unique identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Extensions">
            <summary>
            Gets or sets the extensions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.SourceAsn">
            <summary>
            Gets the source ASN.1 element.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.TbsCertificate.ToAsn1">
            <summary>
            Converts this to-be-signed certificate to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.TbsCertificate.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a to-be-signed certificate from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.Time">
            <summary>
            An X.509 time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Time.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Time.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Time.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Time"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Time.#ctor(System.DateTime,FM.LiveSwitch.X509.TimeType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Time"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.Time.ToAsn1">
            <summary>
            Converts this time to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.Time.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a time from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.TimeType">
            <summary>
            An X.509 time type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.X509.TimeType.Utc">
            <summary>
            Indicates UTC time.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.X509.TimeType.Generalized">
            <summary>
            Indicates generalized time.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.X509.Validity">
            <summary>
            An X.509 validity.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Validity.NotBefore">
            <summary>
            Gets or sets the not-before time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Validity.NotAfter">
            <summary>
            Gets or sets the not-after time.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Validity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Validity" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Validity.#ctor(FM.LiveSwitch.X509.Time,FM.LiveSwitch.X509.Time)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Validity"/> class.
            </summary>
            <param name="notBefore">The not-before time.</param>
            <param name="notAfter">The not-after time.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.Validity.ToAsn1">
            <summary>
            Converts this validity to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.Validity.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a validity from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.AudioConfig">
            <summary>
            An audio configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioConfig.ChannelCount">
            <summary>
            Gets the channel count.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioConfig.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioConfig" /> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioConfig.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioConfig.IsEquivalent(FM.LiveSwitch.AudioConfig)">
            <summary>
            Determines whether the specified configuration is equivalent.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="T:FM.LiveSwitch.BandwidthAdaptationPolicy">
            <summary>
            RTP packet header Extension support policies.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BandwidthAdaptationPolicy.Disabled">
            <summary>
            Indicates a policy where stream bandwidth adaptation of encoder bitrates is disabled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BandwidthAdaptationPolicy.Enabled">
            <summary>
            Indicates a policy where stream bandwidth adaptation of encoder bitrates is enabled.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.BaseStats">
            <summary>
            Base stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BaseStats.Id">
            <summary>
            Gets the identifier of
            the object generating these stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BaseStats.Timestamp">
            <summary>
            Gets the timestamp when
            these stats were generated.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BaseStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.BaseStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.BitrateNotification">
            <summary>
            A bitrate notification.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateNotification.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateNotification.MediaDescriptionId">
            <summary>
            Gets or sets the media description ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateNotification.RtpStreamId">
            <summary>
            Gets or sets the RTP stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateNotification.Bitrate">
            <summary>
            Gets or sets the bitrate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BitrateNotification"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes properties to JSON.
            </summary>
            <param name="jsonObject">The JSON target.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.DeserializeProperty(System.String,System.String)">
            <summary>
            Deserializes a property from JSON.
            </summary>
            <param name="key">The property key.</param>
            <param name="valueJson">The property value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.ToJson(FM.LiveSwitch.BitrateNotification)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="bitrateNotification">The instance.</param>
            <returns>The instance in JSON format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="bitrateNotificationJson">The instance in JSON format.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.ToJsonArray(FM.LiveSwitch.BitrateNotification[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="bitrateNotifications">The array.</param>
            <returns>The array in JSON format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="bitrateNotificationsJson">The array in JSON format.</param>
            <returns>The array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.BitrateRequest">
            <summary>
            A bitrate request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateRequest.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateRequest.MediaDescriptionId">
            <summary>
            Gets or sets the media description ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateRequest.RtpStreamId">
            <summary>
            Gets or sets the RTP stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateRequest.Bitrate">
            <summary>
            Gets or sets the bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateRequest.SenderSynchronizationSource">
            <summary>
            Gets or sets the sender synchronization source.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BitrateRequest"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes properties to JSON.
            </summary>
            <param name="jsonObject">The JSON target.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.DeserializeProperty(System.String,System.String)">
            <summary>
            Deserializes a property from JSON.
            </summary>
            <param name="key">The property key.</param>
            <param name="valueJson">The property value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.ToJson(FM.LiveSwitch.BitrateRequest)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="bitrateRequest">The instance.</param>
            <returns>The instance in JSON format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="bitrateRequestJson">The instance in JSON format.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.ToJsonArray(FM.LiveSwitch.BitrateRequest[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="bitrateRequests">The array.</param>
            <returns>The array in JSON format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="bitrateRequestsJson">The array in JSON format.</param>
            <returns>The array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.CandidateInfo">
            <summary>
            Candidate information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.IPAddress">
            <summary>
            Gets or sets the candidate IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.Port">
            <summary>
            Gets or sets the candidate port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.RelatedIPAddress">
            <summary>
            Gets or sets the candidate related IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.RelatedPort">
            <summary>
            Gets or sets the candidate related port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.Protocol">
            <summary>
            Gets or sets the candidate protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.RelayProtocol">
            <summary>
            Gets or sets the candidate relay protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.Type">
            <summary>
            Gets or sets the candidate type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.Priority">
            <summary>
            Gets or sets the candidate priority.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CandidateInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.ToJson(FM.LiveSwitch.CandidateInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="candidateReport">The instance.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="candidateReportJson">The JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.ToJsonArray(FM.LiveSwitch.CandidateInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="candidateReports">The array.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="candidateReportsJson">The JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.CandidatePairInfo">
            <summary>
            Candidate pair information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairInfo.LocalCandidateId">
            <summary>
            Gets or sets the candidate pair's local candidate identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairInfo.RemoteCandidateId">
            <summary>
            Gets or sets the candidate pair's remote candidate identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairInfo.State">
            <summary>
            Gets or sets the candidate pair state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairInfo.Priority">
            <summary>
            Gets or sets the candidate pair priority.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairInfo.Nominated">
            <summary>
            Gets or sets whether the candidate pair is nominated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairInfo.Report">
            <summary>
            Gets or sets whether the candidate pair report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CandidatePairInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.ToJson(FM.LiveSwitch.CandidatePairInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The serialized instance JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The instance JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.ToJsonArray(FM.LiveSwitch.CandidatePairInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="array">The array.</param>
            <returns>The serialized array JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.FromJsonArray(System.String)">
            <summary>
            Derializes an array from JSON.
            </summary>
            <param name="arrayJson">The array JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.CandidatePairState">
            <summary>
            The state of a candidate pair.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidatePairState.New">
            <summary>
            Indicates that the candidate pair has been formed,
            but connectivity checks have not yet started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidatePairState.Waiting">
            <summary>
            Indicates that the connectivity check is ready for
            connectivity checks, but checks have not yet started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidatePairState.InProgress">
            <summary>
            Indicates that connectivity checks are in progress.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidatePairState.Succeeded">
            <summary>
            Indicates that a connectivity check was successful.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidatePairState.Failed">
            <summary>
            Indicates that all connectivity checks have timed
            out or produced a failure response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidatePairState.Closed">
            <summary>
            Indicates that connectivity checks have been stopped
            intentionally due to transport closure.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidatePairState.ConnectivityLost">
            <summary>
            Indicates that connectivity checks have succeeded in
            the past, but are currently not responding.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.CandidatePairStats">
            <summary>
            Candidate pair stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.TransportId">
            <summary>
            Gets the transport identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.LocalCandidateId">
            <summary>
            Gets the local candidate identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.RemoteCandidateId">
            <summary>
            Gets the remote candidate identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.Priority">
            <summary>
            Gets the priority.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.Nominated">
            <summary>
            Gets whether the candidate pair is nominated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.BytesSent">
            <summary>
            Gets the number of bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.BytesReceived">
            <summary>
            Gets the number of bytes received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.RequestsSent">
            <summary>
            Gets the number of requests sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.RequestsReceived">
            <summary>
            Gets the number of requests received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.ResponsesSent">
            <summary>
            Gets the number of responses sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.ResponsesReceived">
            <summary>
            Gets the number of responses received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.ConsentRequestsSent">
            <summary>
            Gets the number of consent requests sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.ConsentRequestsReceived">
            <summary>
            Gets the number of consent requests received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.ConsentResponsesSent">
            <summary>
            Gets the number of consent responses sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.ConsentResponsesReceived">
            <summary>
            Gets the number of consent responses received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.TotalRoundTripTime">
            <summary>
            Gets the total round trip time in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.CurrentRoundTripTime">
            <summary>
            Gets the current round trip time in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CandidatePairStats"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.ToJson(FM.LiveSwitch.CandidatePairStats)">
            <summary>
            Serializes candidate pair stats to JSON.
            </summary>
            <param name="candidatePair">The candidate pair's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.FromJson(System.String)">
            <summary>
            Derializes candidate pair stats from JSON.
            </summary>
            <param name="candidatePairJson">The candidate pair's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.ToJsonArray(FM.LiveSwitch.CandidatePairStats[])">
            <summary>
            Serializes an array of candidate pair stats to JSON.
            </summary>
            <param name="candidatePairs">The candidate pairs' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.FromJsonArray(System.String)">
            <summary>
            Derializes an array of candidate pair stats from JSON.
            </summary>
            <param name="candidatePairsJson">The candidate pairs' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.IsEquivalent(FM.LiveSwitch.CandidatePairStats)">
            <summary>
            Checks if a candidate pair is equivalent to this one.
            </summary>
            <param name="instance">The candidate pair.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.CandidateStats">
            <summary>
            Candidate stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.IPAddress">
            <summary>
            Gets the IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.Port">
            <summary>
            Gets the port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.RelatedIPAddress">
            <summary>
            Gets the related IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.RelatedPort">
            <summary>
            Gets the related port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.Protocol">
            <summary>
            Gets the protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.TurnProtocol">
            <summary>
            Gets the relay protocol.
            Obsolete. Alias for <see cref="P:FM.LiveSwitch.CandidateStats.RelayProtocol"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.RelayProtocol">
            <summary>
            Gets the relay protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.Priority">
            <summary>
            Gets the priority.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.IsRelayed">
            <summary>
            Gets whether the candidate is relayed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.IsReflexive">
            <summary>
            Gets whether the candidate is reflexive.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.IsHost">
            <summary>
            Gets whether the candidate is host/local.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CandidateStats"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.ToJson(FM.LiveSwitch.CandidateStats)">
            <summary>
            Serializes candidate stats to JSON.
            </summary>
            <param name="candidate">The candidate's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.FromJson(System.String)">
            <summary>
            Derializes candidate stats from JSON.
            </summary>
            <param name="candidateJson">The candidate's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.ToJsonArray(FM.LiveSwitch.CandidateStats[])">
            <summary>
            Serializes an array of candidate stats to JSON.
            </summary>
            <param name="candidates">The candidates' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.FromJsonArray(System.String)">
            <summary>
            Derializes an array of candidate stats from JSON.
            </summary>
            <param name="candidatesJson">The candidates' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.IsEquivalent(FM.LiveSwitch.CandidateStats)">
            <summary>
            Checks if a candidate is equivalent to this one.
            </summary>
            <param name="instance">The candidate.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.CandidateType">
            <summary>
            The type of a candidate.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidateType.Host">
            <summary>
            Indicates a 'host' candidate, discovered by
            querying a local network interface adapter.
            The candidate should contain a private IP
            address of this client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidateType.ServerReflexive">
            <summary>
            Indicates a 'srflx' candidate, discovered by
            using a STUN server to echo back the source
            IP address it sees in a UDP binding request.
            When the STUN server is properly configured,
            the candidate should contain a public IP
            address of this client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidateType.Relayed">
            <summary>
            Indicates a 'relay' candidate, discovered by
            using a TURN server to set up a public port
            in response to a UDP or TCP allocate request.
            When the TURN server is properly configured,
            the candidate should contain a public IP
            address of the TURN server.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidateType.PeerReflexive">
            <summary>
            Indicates a 'prflx' candidate, discovered by
            sending STUN connectivity checks between peers
            residing behind more restrictive firewalls.
            The candidate should contain a public IP
            address of this client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidateType.Unknown">
            <summary>
            Indicates an unknown candidate type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.CandidateUtility">
            <summary>
            Utility functions for candidate and candidate pair.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidateUtility.ProtocolTypeToString(FM.LiveSwitch.ProtocolType)">
            <summary>
            Convert ProtocolType to string.
            </summary>
            <param name="protocolType"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateUtility.ProtocolTypeFromString(System.String)">
            <summary>
            Convert string to ProtocolType.
            </summary>
            <param name="protocolTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateUtility.CandidatePairStateFromString(System.String)">
            <summary>
            Convert string to CandidatePairState.
            </summary>
            <param name="stateString"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateUtility.CandidatePairStateToString(FM.LiveSwitch.CandidatePairState)">
            <summary>
            Convert CandidatePairState to string.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateUtility.TypeToString(FM.LiveSwitch.CandidateType)">
            <summary>
            Convert CandidateType to string.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateUtility.TypeFromString(System.String)">
            <summary>
            Convert string to CandidateType.
            </summary>
            <param name="typeString"></param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.CertificateInfo">
            <summary>
            Certificate information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CertificateInfo.Fingerprint">
            <summary>
            Gets or sets the certificate fingerprint.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CertificateInfo.FingerprintAlgorithm">
            <summary>
            Gets or sets the certificate fingerprint algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CertificateInfo.Base64">
            <summary>
            Gets or sets the certificate in Base64 format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CertificateInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.ToJson(FM.LiveSwitch.CertificateInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The serialized instance JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The instance JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.ToJsonArray(FM.LiveSwitch.CertificateInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="array">The array.</param>
            <returns>The serialized array JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.FromJsonArray(System.String)">
            <summary>
            Derializes an array from JSON.
            </summary>
            <param name="arrayJson">The array JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.CertificateStats">
            <summary>
            Certificate stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CertificateStats.Fingerprint">
            <summary>
            Gets the fingerprint.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CertificateStats.FingerprintAlgorithm">
            <summary>
            Gets the fingerprint algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CertificateStats.CertificateBase64">
            <summary>
            Gets the certificate in Base64 format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.ToJson(FM.LiveSwitch.CertificateStats)">
            <summary>
            Serializes certificate stats to JSON.
            </summary>
            <param name="certificate">The certificate's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.FromJson(System.String)">
            <summary>
            Derializes certificate stats from JSON.
            </summary>
            <param name="certificateJson">The certificate's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.ToJsonArray(FM.LiveSwitch.CertificateStats[])">
            <summary>
            Serializes an array of certificate stats to JSON.
            </summary>
            <param name="certificates">The certificates' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.FromJsonArray(System.String)">
            <summary>
            Derializes an array of certificate stats from JSON.
            </summary>
            <param name="certificatesJson">The certificates' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.IsEquivalent(FM.LiveSwitch.CertificateStats)">
            <summary>
            Checks if a certificate is equivalent to this one.
            </summary>
            <param name="instance">The certificate.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.CodecInfo">
            <summary>
            Codec information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecInfo.Name">
            <summary>
            Gets or sets the codec name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecInfo.ClockRate">
            <summary>
            Gets or sets the codec clock rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecInfo.ChannelCount">
            <summary>
            Gets or sets the codec channel count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecInfo.Parameters">
            <summary>
            Gets or sets the codec parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecInfo.PayloadType">
            <summary>
            Gets or sets the codec payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CodecInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecInfo.ToJson(FM.LiveSwitch.CodecInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="codecInfo">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="codecInfoJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecInfo.ToJsonArray(FM.LiveSwitch.CodecInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="codecInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="codecInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CodecInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.CodecStats">
            <summary>
            Codec stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecStats.CodecType">
            <summary>
            Gets the codec type, "encode" or "decode", depending on whether this object represents a media format that the implementation is prepared to encode or decode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecStats.PayloadType">
            <summary>
            Gets the payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecStats.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecStats.ClockRate">
            <summary>
            Gets the clock rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecStats.ChannelCount">
            <summary>
            Gets the channel count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecStats.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CodecStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecStats.ToJson(FM.LiveSwitch.CodecStats)">
            <summary>
            Serializes codec stats to JSON.
            </summary>
            <param name="codec">The codec's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecStats.FromJson(System.String)">
            <summary>
            Derializes codec stats from JSON.
            </summary>
            <param name="codecJson">The codec's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CodecStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.CodecStats.IsEquivalent(FM.LiveSwitch.CodecStats)">
            <summary>
            Checks if a codec is equivalent to this one.
            </summary>
            <param name="instance">The codec.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.CodecType">
            <summary>
            A value used to indicate whether this codec is used to encode or decode.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CodecType.Encode">
            <summary>
            The attached RTCCodecStats represents a media format that is being encoded, or that the implementation is prepared to encode.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CodecType.Decode">
            <summary>
            The attached RTCCodecStats represents a media format that the implementation is prepared to decode.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ConnectionState">
            <summary>
            The state of a connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.New">
            <summary>
            Indicates that the connection is new and has not been started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.Initializing">
            <summary>
            Indicates that the connection is being initialized but no connecting attempts have been made.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.Connecting">
            <summary>
            Indicates that the connection is currently connecting.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.Connected">
            <summary>
            Indicates that the connection is currently connected.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.Failing">
            <summary>
            Indicates that the connection has encountered an error and is cleaning up.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.Failed">
            <summary>
            Indicates that the connection has encountered an error and has cleaned up.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.Closing">
            <summary>
            Indicates that the connection has been instructed to close and is cleaning up.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.Closed">
            <summary>
            Indicates that the connection has been instructed to close and has cleaned up.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ConnectionStats">
            <summary>
            Connection stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.ExternalId">
            <summary>
            Gets or sets the external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.MediaStream">
            <summary>
            Gets the first media stream's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.MediaStreams">
            <summary>
            Gets the media streams' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.AudioStream">
            <summary>
            Gets the first audio stream's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.AudioStreams">
            <summary>
            Gets the audio streams' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.VideoStream">
            <summary>
            Gets the first video stream's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.VideoStreams">
            <summary>
            Gets the video streams' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.DataStream">
            <summary>
            Gets the data stream's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.Streams">
            <summary>
            Gets the streams' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.IsRelayed">
            <summary>
            Gets whether any of the streams are using a transport
            whose active candidate pair has a relayed candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.IsReflexive">
            <summary>
            Gets whether any of the streams are using a transport
            whose active candidate pair has a reflexive candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.IsHost">
            <summary>
            Gets whether any of the streams are using a transport
            whose active candidate pair has a host candidate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStats.GetMediaStream(System.String)">
            <summary>
            Gets a media stream by its identifier.
            </summary>
            <param name="mediaStreamId">The media stream identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStats.ToJson(FM.LiveSwitch.ConnectionStats)">
            <summary>
            Serializes connection stats to JSON.
            </summary>
            <param name="connection">The connection's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStats.FromJson(System.String)">
            <summary>
            Derializes connection stats from JSON.
            </summary>
            <param name="connectionJson">The connection's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.DataChannelInfo">
            <summary>
            Data channel information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelInfo.Label">
            <summary>
            Gets or sets the data channel label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelInfo.Ordered">
            <summary>
            Gets or sets whether the data channel is ordered.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelInfo.Subprotocol">
            <summary>
            Gets or sets the data channel subprotocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelInfo.State">
            <summary>
            Gets or sets the data channel state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelInfo.Report">
            <summary>
            Gets or sets the data channel report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelInfo.ToJson(FM.LiveSwitch.DataChannelInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="dataChannelInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a DataChannelInfo.
            </summary>
            <param name="dataChannelInfoJson">The serialized Json.</param>
            <returns>The deserialized DataChannelInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelInfo.ToJsonArray(FM.LiveSwitch.DataChannelInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="dataChannelInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes JSON to an array.
            </summary>
            <param name="dataChannelInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.DataChannelState">
            <summary>
            A data channel state.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DataChannelState.New">
            <summary>
            Indicates the data channel has been created and has not started negotiating yet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DataChannelState.Connecting">
            <summary>
            Indicates the data channel is in the process of negotiating a secure connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DataChannelState.Connected">
            <summary>
            Indicates the data channel has completed negotiation of a secure connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DataChannelState.Closing">
            <summary>
            Indicates the data channel is in the process of closing due to an intentional request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DataChannelState.Closed">
            <summary>
            Indicates the data channel has been closed due to an intentional request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DataChannelState.Failed">
            <summary>
            Indicates the data channel has been closed as the result of an error.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataChannelStats">
            <summary>
            Data channel stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.Label">
            <summary>
            Gets the label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.Ordered">
            <summary>
            Gets whether the channel is ordered.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.Protocol">
            <summary>
            Gets the protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.MessagesSent">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.BytesSent">
            <summary>
            Gets the number of bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.MessagesReceived">
            <summary>
            Gets the number of messages received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.BytesReceived">
            <summary>
            Gets the number of bytes received.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:FM.LiveSwitch.DataChannelStats"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.ToJson(FM.LiveSwitch.DataChannelStats)">
            <summary>
            Serializes data channel stats to JSON.
            </summary>
            <param name="dataChannel">The data channel's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.FromJson(System.String)">
            <summary>
            Derializes data channel stats from JSON.
            </summary>
            <param name="dataChannelJson">The data channel's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.ToJsonArray(FM.LiveSwitch.DataChannelStats[])">
            <summary>
            Serializes an array of data channel stats to JSON.
            </summary>
            <param name="dataChannels">The data channels' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.FromJsonArray(System.String)">
            <summary>
            Derializes an array of data channel stats from JSON.
            </summary>
            <param name="dataChannelsJson">The data channels' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.DataStreamInfo">
            <summary>
            Data stream information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamInfo.Channels">
            <summary>
            Gets or sets the data stream channels.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamInfo.Report">
            <summary>
            Gets or sets the data stream report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamInfo.ToJson(FM.LiveSwitch.DataStreamInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="dataStreamInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a DataStreamInfo.
            </summary>
            <param name="dataStreamInfoJson">The serialized Json.</param>
            <returns>The deserialized DataStreamInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamInfo.ToJsonArray(FM.LiveSwitch.DataStreamInfo[])">
            <summary>
            Serializes an instance array to JSON.
            </summary>
            <param name="dataStreamInfos">The instance array to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes JSON to a DataStreamInfo array.
            </summary>
            <param name="dataStreamInfosJson">The serialized JSON.</param>
            <returns>The deserialized DataStreamInfo array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.DataStreamStats">
            <summary>
            Data stream stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.MessagesSent">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.BytesSent">
            <summary>
            Gets the number of bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.MessagesReceived">
            <summary>
            Gets the number of messages received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.BytesReceived">
            <summary>
            Gets the number of bytes received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.DataChannel">
            <summary>
            Gets the first channel's stats.
            Obsolete. Alias for <see cref="P:FM.LiveSwitch.DataStreamStats.Channel"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.DataChannels">
            <summary>
            Gets the channels' stats.
            Obsolete. Alias for <see cref="P:FM.LiveSwitch.DataStreamStats.Channels"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.GetDataChannel(System.String)">
            <summary>
            Gets a channel by its identifier.
            Obsolete. Alias for GetChannel.
            </summary>
            <param name="dataChannelId">The channel identifier.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.Channel">
            <summary>
            Gets the first channel's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.Channels">
            <summary>
            Gets the channels' stats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.GetChannel(System.String)">
            <summary>
            Gets a channel by its identifier.
            </summary>
            <param name="channelId">The channel identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.ToJson(FM.LiveSwitch.DataStreamStats)">
            <summary>
            Serializes data stream stats to JSON.
            </summary>
            <param name="dataStream">The data stream's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.FromJson(System.String)">
            <summary>
            Derializes data stream stats from JSON.
            </summary>
            <param name="dataStreamJson">The data stream's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.ToJsonArray(FM.LiveSwitch.DataStreamStats[])">
            <summary>
            Serializes an array of data stream stats to JSON.
            </summary>
            <param name="dataStreams">The data streams' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.FromJsonArray(System.String)">
            <summary>
            Derializes an array of data stream stats from JSON.
            </summary>
            <param name="dataStreamsJson">The data streams' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.AudioEncodingConfig">
            <summary>
            Audio encoding configuration.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioEncodingConfig"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.#ctor(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioEncodingConfig"/> class.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.ToJson(FM.LiveSwitch.AudioEncodingConfig)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="encodingConfig">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="encodingConfigJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.ToJsonArray(FM.LiveSwitch.AudioEncodingConfig[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="encodingConfigs">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="encodingConfigsJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Dtmf.Packet">
            <summary>
            A DTMF (telephone-event) packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Packet.EventCode">
            <summary>
            Gets or sets the event code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Packet.End">
            <summary>
            Gets or sets the end-bit.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Packet.Volume">
            <summary>
            Gets or sets the volume in dBm0 with the sign removed. Power levels range from 0 to -63 dBm0,
            so the value of this field ranges from 0-63, with higher values indicating lower volume.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Packet.Duration">
            <summary>
            Gets or sets the duration in timestamp units (based on the negotiated clock rate).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Packet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Dtmf.Packet" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Packet.ReadFrom(FM.LiveSwitch.DataBuffer)">
            <summary>
            Reads from a data buffer.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Packet.GetLength">
            <summary>
            Gets the length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Packet.WriteTo(FM.LiveSwitch.DataBuffer)">
            <summary>
            Writes to a data buffer.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.Dtmf.Tone">
            <summary>
            A DTMF (telephone-event) tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Duration">
            <summary>
            Gets or sets the duration in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.End">
            <summary>
            Gets or sets whether this is the final
            tone raised for the current value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Dtmf.Tone"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Dtmf.Tone"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.Clone(System.Int32)">
            <summary>
            Clones this instance.
            </summary>
            <param name="duration">The new duration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.ToJson">
            <summary>
            Serializes to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.ToJson(FM.LiveSwitch.Dtmf.Tone)">
            <summary>
            Serializes to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.FromJson(System.String)">
            <summary>
            Deserializes from JSON.
            </summary>
            <param name="toneJson">The JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.ToJsonArray(FM.LiveSwitch.Dtmf.Tone[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="tones">The array.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="tonesJson">The JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.ToPacket(System.Int32)">
            <summary>
            Serializes to a packet.
            </summary>
            <param name="clockRate">The clock rate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.FromPacket(FM.LiveSwitch.Dtmf.Packet,System.Int32)">
            <summary>
            Deserializes from a packet.
            </summary>
            <param name="packet">The packet.</param>
            <param name="clockRate">The clock rate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.ToString">
            <summary>
            Serializes to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.EmptyValue">
            <summary>
            Gets the empty value ("").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.PauseValue">
            <summary>
            Gets the pause value (",").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.ZeroValue">
            <summary>
            Gets the zero value ("0").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.OneValue">
            <summary>
            Gets the one value ("1").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.TwoValue">
            <summary>
            Gets the two value ("2").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.ThreeValue">
            <summary>
            Gets the three value ("3").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.FourValue">
            <summary>
            Gets the four value ("4").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.FiveValue">
            <summary>
            Gets the five value ("5").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.SixValue">
            <summary>
            Gets the six value ("6").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.SevenValue">
            <summary>
            Gets the seven value ("7").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.EightValue">
            <summary>
            Gets the eight value ("8").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.NineValue">
            <summary>
            Gets the nine value ("9").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.StarValue">
            <summary>
            Gets the star value ("*").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.HashValue">
            <summary>
            Gets the hash value ("#").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.AValue">
            <summary>
            Gets the A value ("A").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.BValue">
            <summary>
            Gets the B value ("B").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.CValue">
            <summary>
            Gets the C value ("C").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.DValue">
            <summary>
            Gets the D value ("D").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.PauseDuration">
            <summary>
            Gets the pause duration in milliseconds (2000).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Empty">
            <summary>
            Gets the empty tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Pause">
            <summary>
            Gets the pause tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Zero">
            <summary>
            Gets the zero tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.One">
            <summary>
            Gets the one tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Two">
            <summary>
            Gets the two tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Three">
            <summary>
            Gets the three tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Four">
            <summary>
            Gets the four tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Five">
            <summary>
            Gets the five tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Six">
            <summary>
            Gets the six tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Seven">
            <summary>
            Gets the seven tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Eight">
            <summary>
            Gets the eight tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Nine">
            <summary>
            Gets the nine tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Star">
            <summary>
            Gets the star tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Hash">
            <summary>
            Gets the hash tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.A">
            <summary>
            Gets A tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.B">
            <summary>
            Gets the B tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.C">
            <summary>
            Gets the C tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.D">
            <summary>
            Gets the D tone.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.FromToneString(System.String)">
            <summary>
            Converts a DTMF tone string into an array of tones.
            Each tone will have a duration of 100ms and an inter-tone gap of 100ms.
            </summary>
            <param name="toneString">The tone string.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.FromToneString(System.String,System.Int32)">
            <summary>
            Converts a DTMF tone string into an array of tones.
            Each tone will have an inter-tone gap of 100ms.
            </summary>
            <param name="toneString">The tone string.</param>
            <param name="duration">The duration, in milliseconds (minimum of 40, maximum of 2,000).</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.FromToneString(System.String,System.Int32,System.Int32)">
            <summary>
            Converts a DTMF tone string into an array of tones.
            </summary>
            <param name="toneString">The tone string.</param>
            <param name="duration">The duration, in milliseconds (minimum of 40, maximum of 2,000).</param>
            <param name="interToneGap">The time between tones, in milliseconds (minimum of 40).</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.ToToneString(FM.LiveSwitch.Dtmf.Tone[])">
            <summary>
            Converts an array of DTMF tones into a tone string.
            This discards duration and inter-tone gap data.
            </summary>
            <param name="tones">The tones.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Dtmf.Mode">
            <summary>
            The DTMF mode.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Dtmf.Mode.Augment">
            <summary>
            Indicates that DTMF packets will be sent along
            with the audio packets that trigger them.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Dtmf.Mode.Replace">
            <summary>
            Indicates that DTMF packets will be sent instead
            of the audio packets that trigger them.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Dtmf.Sender">
            <summary>
            A DTMF (telephone-event) sender.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Sender.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Sender.Tone">
            <summary>
            Gets the current tone.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Dtmf.Sender.OnTone">
            <summary>
            Raised when a tone is sent.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Dtmf.Sender.OnToneChange">
            <summary>
            Raised when the tone changes. An empty string indicates
            the end of a tone.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Sender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Dtmf.Sender" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Sender.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Dtmf.Sender" /> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Sender.InsertTones(FM.LiveSwitch.Dtmf.Tone[])">
            <summary>
            Inserts tones into the DTMF stream.
            </summary>
            <param name="tones">The tones.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Sender.HasTone">
            <summary>
            Determines whether any tones are queued for delivery.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Sender.RaiseTone(System.Int32,System.Int64,System.Int64)">
            <summary>
            Adds the next tone to the frame.
            </summary>
            <param name="duration">The duration.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="synchronizationSource">The synchronization source.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Sender.RaiseTone(System.Int32,System.Int64,System.Int64,System.Int64)">
            <summary>
            Adds the next tone to the frame.
            </summary>
            <param name="duration">The duration.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="sequenceNumber">The sequence number.</param>
            <returns>The number of frames raised.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Sender.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Sender.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Dtmf.Receiver">
            <summary>
            A DTMF (telephone-event) receiver.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Receiver.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Receiver.Disabled">
            <summary>
            Gets a value indicating whether this <see cref="T:FM.LiveSwitch.Dtmf.Receiver"/> is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Receiver.Tone">
            <summary>
            Gets the current tone.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Dtmf.Receiver.OnTone">
            <summary>
            Raised when a tone is received.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Dtmf.Receiver.OnToneChange">
            <summary>
            Raised when the tone changes. An empty string indicates
            the end of a tone.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Receiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Dtmf.Receiver" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Receiver.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Dtmf.Receiver" /> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Receiver.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Receiver.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Dtmf.Format">
            <summary>
            A DTMF (telephone-event) format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Format.DefaultClockRate">
            <summary>
            Gets the default clock rate (8000).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Format.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Dtmf.Format" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Format.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Dtmf.Format"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="T:FM.LiveSwitch.StreamDescription">
            <summary>
            A stream description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamDescription.MediaDescription">
            <summary>
            Gets or sets the media description associated with this stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamDescription.StreamType">
            <summary>
            Gets the stream type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamDescription.MediaDescriptionIdentifier">
            <summary>
            Gets the mid associated with this stream, if present. Null if not.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamDescription.#ctor(FM.LiveSwitch.Sdp.MediaDescription)">
            <summary>
            Creates a new StreamDescription object.
            </summary>
            <param name="description">SDP MediaDescription of the stream.</param>
        </member>
        <member name="T:FM.LiveSwitch.VideoEncodingConfig">
            <summary>
            Video encoding configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncodingConfig.FrameRate">
            <summary>
            Gets or sets the frame-rate, in fps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncodingConfig.Scale">
            <summary>
            Gets or sets the target scale.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoEncodingConfig"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.#ctor(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoEncodingConfig"/> class.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.ToJson(FM.LiveSwitch.VideoEncodingConfig)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="encodingConfig">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="encodingConfigJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.ToJsonArray(FM.LiveSwitch.VideoEncodingConfig[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="encodingConfigs">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="encodingConfigsJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.EncodingConfig">
            <summary>
            Encoding configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingConfig.RtpStreamId">
            <summary>
            Gets the RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingConfig.SynchronizationSource">
            <summary>
            Gets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingConfig.Deactivated">
            <summary>
            Gets or sets whether this encoding is deactivated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingConfig.Bitrate">
            <summary>
            Gets or sets the bitrate, in kbps.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EncodingConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.EncodingConfig"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EncodingConfig.#ctor(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.EncodingConfig"/> class.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.EncodingConfig.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.EncodingConfig.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.EncryptionMode">
            <summary>
            The encryption mode for the stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EncryptionMode.Null">
            <summary>
            No encryption and no integrity checking.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EncryptionMode.Aes128Strong">
            <summary>
            AES 128-bit encryption with strong HMAC-SHA1 integrity checking (80-bit).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EncryptionMode.Aes128Weak">
            <summary>
            AES 128-bit encryption with weak HMAC-SHA1 integrity checking (32-bit).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EncryptionMode.NullStrong">
            <summary>
            Null encryption with strong HMAC-SHA1 integrity checking (80-bit).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EncryptionMode.NullWeak">
            <summary>
            Null encryption with weak HMAC-SHA1 integrity checking (32-bit).
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.FormatInfo">
            <summary>
            Format information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FormatInfo.CodecName">
            <summary>
            Gets or sets the name.
            Obsolete. Alias for <see cref="P:FM.LiveSwitch.FormatInfo.Name"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FormatInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FormatInfo.ClockRate">
            <summary>
            Gets or sets the clock rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FormatInfo.ChannelCount">
            <summary>
            Gets or sets the channel count if available. Unused for video codecs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.#ctor">
            <summary>
            Creates a new instance of a FormatInfo.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of a FormatInfo.
            </summary>
            <param name="codecName">The codec name.</param>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of a FormatInfo.
            </summary>
            <param name="name">The name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Creates an instance of a FormatInfo from a VideoFormat.
            </summary>
            <param name="videoFormat">The video format.</param>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Creates an instance of a FormatInfo from an AudioFormat.
            </summary>
            <param name="audioFormat">The audio format.</param>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.ToJson(FM.LiveSwitch.FormatInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="formatInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a FormatInfo.
            </summary>
            <param name="formatInfoJson">The serialized Json.</param>
            <returns>The deserialized FormatInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.ToJsonArray(FM.LiveSwitch.FormatInfo[])">
            <summary>
            Serializes an array of format infos to JSON.
            </summary>
            <param name="formatInfos">The format infos.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.FromJsonArray(System.String)">
            <summary>
            Derializes an array of format infos from JSON.
            </summary>
            <param name="formatInfosJson">The format infos in JSON format.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.FromSdpMediaDescription(FM.LiveSwitch.Sdp.MediaDescription)">
            <summary>
            Converts the RTP map attributes in an SDP media description
            to an array of FormatInfo objects.
            </summary>
            <param name="sdpMediaDescription">The SDP media description.</param>
            <returns>An array of FormatInfo objects.</returns>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.IsEquivalent(System.String,System.Int32,System.Int32)">
            <summary>
            Tests for equivalency.
            </summary>
            <param name="channelCount">The channel count.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="name">The format name.</param>
            <returns>
              <c>true</c> if equivalent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.IsEquivalent(FM.LiveSwitch.FormatInfo)">
            <summary>
            Checks if an instance is equivalent to this one.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Info">
            <summary>
            Information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Info.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Info.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.Info.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessBoolean(System.Boolean,System.Boolean)">
            <summary>
            Processes a boolean for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessShort(System.Int16,System.Int16)">
            <summary>
            Processes a short for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessInteger(System.Int32,System.Int32)">
            <summary>
            Processes an integer for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessLong(System.Int64,System.Int64)">
            <summary>
            Processes a long for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessFloat(System.Single,System.Single)">
            <summary>
            Processes a float for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessDouble(System.Double,System.Double)">
            <summary>
            Processes a double for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessString(System.String,System.String)">
            <summary>
            Processes a string for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessBooleanArray(System.Boolean[],System.Boolean[])">
            <summary>
            Processes a boolean array for an info.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessShortArray(System.Int16[],System.Int16[])">
            <summary>
            Processes a short array for an info.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessIntegerArray(System.Int32[],System.Int32[])">
            <summary>
            Processes a integer array for an info.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessLongArray(System.Int64[],System.Int64[])">
            <summary>
            Processes a long array for an info.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessFloatArray(System.Single[],System.Single[])">
            <summary>
            Processes a float array for an info.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessFloatArray(System.Double[],System.Double[])">
            <summary>
            Processes a double array for an info.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessObject``1(``0,``0)">
            <summary>
            Processes an object for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessArray``1(``0[],``0[])">
            <summary>
            Processes an array for an info.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values are not equivalent to the old values; otherwise null.</returns>
        </member>
        <member name="T:FM.LiveSwitch.LayoutFrame">
            <summary>
            A layout frame definition, including X/Y coordinates and width/height values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.X">
            <summary>
            Gets or sets the X coordinate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.Y">
            <summary>
            Gets or sets the Y coordinate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.Width">
            <summary>
            Gets or sets the width value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.Height">
            <summary>
            Gets or sets the height value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.DeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.ViewId">
            <summary>
            Gets or sets the view ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.Orientation">
            <summary>
            Gets or sets the orientation in degrees.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutFrame.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LayoutFrame"/> class.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="width">The width value.</param>
            <param name="height">The height value.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutFrame.IsEquivalent(FM.LiveSwitch.LayoutFrame)">
            <summary>
            Determines whether the specified layout frame is equivalent.
            </summary>
            <param name="layoutFrame">The layout frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutFrame.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutFrame.ToJson(FM.LiveSwitch.LayoutFrame)">
            <summary>
            Serializes a layout frame to JSON.
            </summary>
            <param name="layoutFrame">The layout frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutFrame.FromJson(System.String)">
            <summary>
            Deserializes a layout frame from JSON.
            </summary>
            <param name="layoutFrameJson">The layout frame JSON.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutFrame.GetScaledFrame(FM.LiveSwitch.LayoutScale,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a scaled frame.
            </summary>
            <param name="scale">The scaling algorithm to use.</param>
            <param name="outerWidth">The width of the outer container.</param>
            <param name="outerHeight">The height of the outer container.</param>
            <param name="innerWidth">The width of the inner element.</param>
            <param name="innerHeight">The height of the inner element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.LayoutScale">
            <summary>
            Specifies how an element should be scaled within a layout.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutScale.Contain">
            <summary>
            Indicates that the element should be uniformly scaled
            (maintaining aspect ratio) to the largest size such
            that both its width and its height can fit inside its
            bounding box.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutScale.Cover">
            <summary>
            Indicates that the element should be uniformly scaled
            (maintaining aspect ratio) to be as large as possible
            so that the bounding box is completely covered. Some
            parts of the element may not be in view (cropped).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutScale.Stretch">
            <summary>
            Indicates that the element should be non-uniformly
            scaled (not maintaining aspect ratio) so that the
            bounding box is completely covered, but all parts
            of the element are in view (no cropping).
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaComponentInfo">
            <summary>
            Media component information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentInfo.Track">
            <summary>
            Gets or sets track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentInfo.Codec">
            <summary>
            Gets or sets codec.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentInfo.SynchronizationSource">
            <summary>
            Gets or sets synchronization source of media track.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaComponentInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentInfo.#ctor(FM.LiveSwitch.MediaComponentStats,FM.LiveSwitch.MediaComponentStats)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaComponentInfo"/> class.
            </summary>
            <param name="stats"></param>
            <param name="lastStats"></param>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaComponentStats">
            <summary>
            Media component stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.RtpStreamId">
            <summary>
            Gets or sets the RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.RepairedRtpStreamId">
            <summary>
            Gets or sets the repaired RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.Track">
            <summary>
            Gets or sets the track's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.Codec">
            <summary>
            Gets or sets the codec stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.NackCount">
            <summary>
            Gets or sets the NACK count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.SliCount">
            <summary>
            Gets or sets the SLI count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.PliCount">
            <summary>
            Gets or sets the PLI count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.FirCount">
            <summary>
            Gets or sets the FIR count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.LrrCount">
            <summary>
            Gets or sets the LRR count.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaConfig`1">
            <summary>
            A media configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaConfig`1.ClockRate">
            <summary>
            Gets the clock rate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaConfig`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaConfig`1"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaConfig`1.IsEquivalent(`0)">
            <summary>
            Determines whether the specified configuration is equivalent.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaReceiverInfo">
            <summary>
            Media receiver information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverInfo.Sink">
            <summary>
            Gets or sets sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverInfo.Report">
            <summary>
            Gets or sets report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaReceiverInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.ToJson(FM.LiveSwitch.MediaReceiverInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaReceiver">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaReceiverJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.ToJsonArray(FM.LiveSwitch.MediaReceiverInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaReceivers">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaReceiversJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaReceiverStats">
            <summary>
            Media receiver stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.PacketsReceived">
            <summary>
            Gets the number of packets received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.BytesReceived">
            <summary>
            Gets the number of bytes received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.PacketsLost">
            <summary>
            Gets the number of packets lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.Jitter">
            <summary>
            Gets the jitter in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.PacketsDiscarded">
            <summary>
            Gets the number of packets discarded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.PacketsDuplicated">
            <summary>
            Gets the number of packets duplicated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.PacketsRepaired">
            <summary>
            Gets the number of packets repaired.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.Sink">
            <summary>
            Gets the sink stats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.ToJson(FM.LiveSwitch.MediaReceiverStats)">
            <summary>
            Serializes media receiver stats to JSON.
            </summary>
            <param name="mediaReceiver">The media receiver's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.FromJson(System.String)">
            <summary>
            Derializes media receiver stats from JSON.
            </summary>
            <param name="mediaReceiverJson">The media receiver's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.ToJsonArray(FM.LiveSwitch.MediaReceiverStats[])">
            <summary>
            Serializes media receiver stats array to JSON.
            </summary>
            <param name="mediaReceivers">The media receivers' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.FromJsonArray(System.String)">
            <summary>
            Derializes media receiver stats array from JSON.
            </summary>
            <param name="mediaReceiversJson">The media receivers' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.IsEquivalent(FM.LiveSwitch.MediaReceiverStats)">
            <summary>
            Checks if a media receiver is equivalent to this one.
            </summary>
            <param name="instance">The media receiver.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaSenderInfo">
            <summary>
            Media sender information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderInfo.Source">
            <summary>
            Gets or sets source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderInfo.Report">
            <summary>
            Gets or sets report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaSenderInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.ToJson(FM.LiveSwitch.MediaSenderInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaSender">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaSenderJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.ToJsonArray(FM.LiveSwitch.MediaSenderInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaSenders">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaSendersJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaSenderStats">
            <summary>
            Media sender stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderStats.PacketsSent">
            <summary>
            Gets the number of packets sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderStats.BytesSent">
            <summary>
            Gets the number of bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderStats.RoundTripTime">
            <summary>
            Gets the round trip time in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderStats.Source">
            <summary>
            Gets the source stats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.ToJson(FM.LiveSwitch.MediaSenderStats)">
            <summary>
            Serializes media sender stats to JSON.
            </summary>
            <param name="mediaSender">The media sender's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.FromJson(System.String)">
            <summary>
            Derializes media sender stats from JSON.
            </summary>
            <param name="mediaSenderJson">The media sender's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.ToJsonArray(FM.LiveSwitch.MediaSenderStats[])">
            <summary>
            Serializes a media sender stats array to JSON.
            </summary>
            <param name="mediaSenders">The media senders' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.FromJsonArray(System.String)">
            <summary>
            Derializes a media sender stats array from JSON.
            </summary>
            <param name="mediaSendersJson">The media senders' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.IsEquivalent(FM.LiveSwitch.MediaSenderStats)">
            <summary>
            Checks if a media sender is equivalent to this one.
            </summary>
            <param name="instance">The media sender.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaSinkInfo">
            <summary>
            Media sink information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkInfo.Tag">
            <summary>
            Gets or sets the media sink tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkInfo.Label">
            <summary>
            Gets or sets the media sink label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkInfo.OutputId">
            <summary>
            Gets or sets the media sink output id.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkInfo.OutputName">
            <summary>
            Gets or sets the media sink output name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkInfo.InputFormat">
            <summary>
            Gets or sets the media sink input format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaSinkInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.ToJson(FM.LiveSwitch.MediaSinkInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaSinkInfo">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaSinkInfoJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.ToJsonArray(FM.LiveSwitch.MediaSinkInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaSinkInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaSinkInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaSinkStats">
            <summary>
            Media sink stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkStats.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkStats.Label">
            <summary>
            Gets or sets the label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkStats.Muted">
            <summary>
            Gets or sets the muted flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkStats.OutputId">
            <summary>
            Gets or sets the output identifier.
            </summary> 
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkStats.OutputName">
            <summary>
            Gets or sets the output name.
            </summary>  
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkStats.InputFormat">
            <summary>
            Gets or sets the input format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.ToJson(FM.LiveSwitch.MediaSinkStats)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance to serialize.</param>
            <returns>Serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.ToJsonArray(FM.LiveSwitch.MediaSinkStats[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="array">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="arrayJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.IsEquivalent(FM.LiveSwitch.MediaSinkStats)">
            <summary>
            Checks if a source is equivalent to this one.
            </summary>
            <param name="instance">The source.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaSourceStats">
            <summary>
            Media source stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceStats.Tag">
            <summary>
            Gets or sets the tag.
            </summary>    
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceStats.Label">
            <summary>
            Gets or sets the label.
            </summary> 
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceStats.Muted">
            <summary>
            Gets or sets the muted flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceStats.InputId">
            <summary>
            Gets or sets the input identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceStats.InputName">
            <summary>
            Gets or sets the input name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceStats.OutputFormat">
            <summary>
            Gets or sets the output format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceStats.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceStats.ToJson(FM.LiveSwitch.MediaSourceStats)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceStats.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The serialized Json.</param>
            <returns>The deserialized VideoSourceInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceStats.IsEquivalent(FM.LiveSwitch.MediaSourceStats)">
            <summary>
            Checks if a source is equivalent to this one.
            </summary>
            <param name="instance">The source.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaStats">
            <summary>
            Media stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStats.Track">
            <summary>
            Gets the first track's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStats.Tracks">
            <summary>
            Gets the tracks' stats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStats.GetTrack(System.String)">
            <summary>
            Gets a track by its identifier.
            </summary>
            <param name="trackId">The track identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStats.ToJson(FM.LiveSwitch.MediaStats)">
            <summary>
            Serializes media stats to JSON.
            </summary>
            <param name="media">The media's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStats.FromJson(System.String)">
            <summary>
            Derializes media stats from JSON.
            </summary>
            <param name="mediaJson">The media's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.EncodingInfo">
            <summary>
            Encoding information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.RtpStreamId">
            <summary>
            Gets or sets the RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.Deactivated">
            <summary>
            Gets or sets whether this encoding is deactivated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.Bitrate">
            <summary>
            Gets or sets the bitrate, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.FrameRate">
            <summary>
            Gets or sets the frame-rate, in fps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.Scale">
            <summary>
            Gets or sets the target scale.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.ScaledSize">
            <summary>
            Gets the scaled size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.ScaledWidth">
            <summary>
            Gets the scaled width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.ScaledHeight">
            <summary>
            Gets the scaled height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.IsEmpty">
            <summary>
            Gets or sets whether this encoding is empty.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToJson(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="encodingInfo">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="encodingInfoJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToJsonArray(FM.LiveSwitch.EncodingInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="encodingInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="encodingInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.IsEquivalent(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Determines whether the specified encoding is equivalent.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.IsEquivalent(FM.LiveSwitch.EncodingInfo,System.Boolean)">
            <summary>
            Determines whether the specified encoding is equivalent.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="restrictionsOnly">Whether to check restrictions only.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.IsEquivalent(FM.LiveSwitch.EncodingInfo,FM.LiveSwitch.EncodingInfo)">
            <summary>
            Determines whether the two encodings are equivalent.
            </summary>
            <param name="encoding1">The first encoding.</param>
            <param name="encoding2">The second encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.IsEquivalent(FM.LiveSwitch.EncodingInfo,FM.LiveSwitch.EncodingInfo,System.Boolean)">
            <summary>
            Determines whether the two encodings are equivalent.
            </summary>
            <param name="encoding1">The first encoding.</param>
            <param name="encoding2">The second encoding.</param>
            <param name="restrictionsOnly">Whether to check restrictions only.</param>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToSdpRidAttribute(System.String)">
            <summary>
            Converts this instance into an SDP RID attribute.
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToSdpRidAttribute(System.String,System.Boolean)">
            <summary>
            Converts this instance into an SDP RID attribute.
            </summary>
            <param name="direction">The direction.</param>
            <param name="includeRestrictions">Whether to include restrictions.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToSdpRidAttribute(FM.LiveSwitch.EncodingInfo,System.String)">
            <summary>
            Converts an instance into an SDP RID attribute.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToSdpRidAttribute(FM.LiveSwitch.EncodingInfo,System.String,System.Boolean)">
            <summary>
            Converts an instance into an SDP RID attribute.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="direction">The direction.</param>
            <param name="includeRestrictions">Whether to include restrictions.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.FromSdpRidAttribute(FM.LiveSwitch.Sdp.Rtp.RidAttribute)">
            <summary>
            Converts an SDP RID attribute into an instance.
            </summary>
            <param name="ridAttribute">The SDP RID attribute.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.Min(FM.LiveSwitch.EncodingInfo,FM.LiveSwitch.EncodingInfo)">
            <summary>
            Returns a new encoding with each value
            being the minimum of two input encodings.
            </summary>
            <param name="encoding1">The first encoding.</param>
            <param name="encoding2">The second encoding.</param>
            <returns>A new encoding.</returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.Max(FM.LiveSwitch.EncodingInfo,FM.LiveSwitch.EncodingInfo)">
            <summary>
            Returns a new encoding with each value
            being the maximum of two input encodings.
            </summary>
            <param name="encoding1">The first encoding.</param>
            <param name="encoding2">The second encoding.</param>
            <returns>A new encoding.</returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaStreamInfo">
            <summary>
            Media stream information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.SendMuted">
            <summary>
            Gets or sets whether the media stream has muted sending.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.SendDisabled">
            <summary>
            Gets or sets whether the media stream has the send direction disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.ReceiveDisabled">
            <summary>
            Gets or sets whether the media stream has the receive direction disabled.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.SendFormats">
            <summary>
            Gets or sets the media stream send formats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.ReceiveFormats">
            <summary>
            Gets or sets the media stream receive formats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.SendEncodings">
            <summary>
            Gets or sets the media stream send encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.ReceiveEncodings">
            <summary>
            Gets or sets the media stream receive encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.Direction">
            <summary>
            Gets or sets the media stream direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.LocalBandwidth">
            <summary>
            Gets or sets the media stream's local bandwidth.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.RemoteBandwidth">
            <summary>
            Gets or sets the media stream's remote bandwidth.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.MaxFrameWidth">
            <summary>
            Gets or sets the media stream's maximum frame width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.MaxFrameHeight">
            <summary>
            Gets or sets the media stream's maximum frame height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.Sender">
            <summary>
            Gets or sets the first media stream sender information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.Senders">
            <summary>
            Gets or sets the media stream senders information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.Receiver">
            <summary>
            Gets or sets the first media stream receiver information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.Receivers">
            <summary>
            Gets or sets the media stream receivers information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.ControlTransportId">
            <summary>
            Gets or sets the control transport id.
            This will be <c>null</c> if BUNDLE is active.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamInfo.ToJson(FM.LiveSwitch.MediaStreamInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaStreamInfo">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaStreamInfoJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamInfo.ToJsonArray(FM.LiveSwitch.MediaStreamInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaStreamInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaStreamInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaStreamStats">
            <summary>
            Media stream stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamStats.Direction">
            <summary>
            Gets the direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamStats.MaxSendBitrate">
            <summary>
            Gets the max send bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamStats.MaxReceiveBitrate">
            <summary>
            Gets the max receive bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamStats.Sender">
            <summary>
            Gets the first sender's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamStats.Senders">
            <summary>
            Gets the senders' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamStats.Receiver">
            <summary>
            Gets the first receiver's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamStats.Receivers">
            <summary>
            Gets the receivers' stats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamStats.ToJson(FM.LiveSwitch.MediaStreamStats)">
            <summary>
            Serializes media stream stats to JSON.
            </summary>
            <param name="mediaStream">The media stream's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamStats.FromJson(System.String)">
            <summary>
            Derializes media stream stats from JSON.
            </summary>
            <param name="mediaStreamJson">The media stream's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamStats.ToJsonArray(FM.LiveSwitch.MediaStreamStats[])">
            <summary>
            Serializes an array of media stream stats to JSON.
            </summary>
            <param name="mediaStreams">The media streams' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamStats.FromJsonArray(System.String)">
            <summary>
            Derializes an array of media stream stats from JSON.
            </summary>
            <param name="mediaStreamsJson">The media streams' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaTrackInfo">
            <summary>
            Media track information
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackInfo.Stopped">
            <summary>
            Gets or sets the whether the media track is stopped.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackInfo.Detached">
            <summary>
            Gets or sets the whether the media track is detached.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackInfo.Muted">
            <summary>
            Gets or sets the whether the media track is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackInfo.Report">
            <summary>
            Gets or sets the data stream report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.#ctor">
            <summary>
            Create MediaTrackInfo instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.#ctor(FM.LiveSwitch.MediaTrackStats,FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Create MediaTrackInfo instance.
            </summary>
            <param name="stats"></param>
            <param name="lastStats"></param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.ToJson(FM.LiveSwitch.MediaTrackInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaTrackInfo">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaTrackInfoJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.ToJsonArray(FM.LiveSwitch.MediaTrackInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaTrackInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaTrackInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaTrackStats">
            <summary>
            Media track stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.Stopped">
            <summary>
            Gets whether the track is stopped.
            Set by source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.Detached">
            <summary>
            Gets whether the track is detached.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.Muted">
            <summary>
            Gets whether the track is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.SynchronizationSource">
            <summary>
            Gets the first synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.SynchronizationSources">
            <summary>
            Gets the synchronization sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.RtpStreamId">
            <summary>
            Gets the first RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.RtpStreamIds">
            <summary>
            Gets the RTP stream identifiers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.RepairedRtpStreamId">
            <summary>
            Gets the first repaired RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.RepairedRtpStreamIds">
            <summary>
            Gets the repaired RTP stream identifiers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.MaxBitrate">
            <summary>
            Gets the maximum bitrate.
            Set by the encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.MinBitrate">
            <summary>
            Gets the minimum bitrate.
            Set by the encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.Bitrate">
            <summary>
            Gets the bitrate.
            Set by the encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FrameWidth">
            <summary>
            Gets the frame width. Video-only.
            Set by encoder or decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FrameHeight">
            <summary>
            Gets the frame height. Video-only.
            Set by encoder or decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FrameRate">
            <summary>
            Gets the frame rate. Video-only.
            Set by encoder or decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FramesSent">
            <summary>
            Gets the number of frames sent.
            Set by packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FramesReceived">
            <summary>
            Gets the number of frames received.
            Set by depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FramesDropped">
            <summary>
            Gets the number of frames dropped. Video-only.
            Set by depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FramesCorrupted">
            <summary>
            Gets the number of corrupted frames. Video-only.
            Set by depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FramesDecoded">
            <summary>
            Gets the number of frames decoded.
            Set by decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FramesEncoded">
            <summary>
            Gets the number of frames encoded.
            Set by encoder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.ToJson(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Serializes media track stats to JSON.
            </summary>
            <param name="mediaTrack">The media track's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.FromJson(System.String)">
            <summary>
            Derializes media track stats from JSON.
            </summary>
            <param name="mediaTrackJson">The media track's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.ToJsonArray(FM.LiveSwitch.MediaTrackStats[])">
            <summary>
            Serializes an array of media track stats to JSON.
            </summary>
            <param name="mediaTracks">The media tracks' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.FromJsonArray(System.String)">
            <summary>
            Derializes an array of media track stats from JSON.
            </summary>
            <param name="mediaTracksJson">The media tracks' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.IsEquivalent(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Checks if a track is equivalent to this one.
            </summary>
            <param name="instance">The track.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaSourceInfo">
            <summary>
            Media source information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceInfo.Tag">
            <summary>
            Gets or sets the media source tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceInfo.Label">
            <summary>
            Gets or sets the media source label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceInfo.Muted">
            <summary>
            Gets or sets the whether the media source is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceInfo.InputId">
            <summary>
            Gets or sets the media source input identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceInfo.InputName">
            <summary>
            Gets or sets the media source input name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceInfo.OutputFormat">
            <summary>
            Gets or sets the media source output format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaSourceInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.ToJson(FM.LiveSwitch.MediaSourceInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaSourceInfo">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaSourceInfoJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.ToJsonArray(FM.LiveSwitch.MediaSourceInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaSourceInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaSourceInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.Point">
            <summary>
            A point (x and y coordinates).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Point.Empty">
            <summary>
            Gets the empty point (0,0).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Point.X">
            <summary>
            Gets or sets the X coordinate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Point.Y">
            <summary>
            Gets or sets the Y coordinate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Point.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Point"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Point"/> class.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Point.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.ToJson(FM.LiveSwitch.Point)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="point">The point.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="pointJson">The JSON to deserialize.</param>
            <returns>The deserialized point.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.ToString">
            <summary>
            Returns a string that represents this instance using format "{x},{y}".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Point.IsEquivalent(FM.LiveSwitch.Point)">
            <summary>
            Determines whether the specified point is equivalent.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:FM.LiveSwitch.Point.IsEquivalent(FM.LiveSwitch.Point,FM.LiveSwitch.Point)">
            <summary>
            Determines whether the two points are equivalent.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
        </member>
        <member name="M:FM.LiveSwitch.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equivalent to the current point.
            Does not require the object pointers to match.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equivalent to the current object; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.Equals(FM.LiveSwitch.Point)">
            <summary>
            Determines whether the specified point is equivalent to the current point.
            Does not require the object pointers to match.
            </summary>
            <param name="point">The point to compare with the current object.</param>
            <returns>true if the specified point is equivalent to the current point; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.op_Equality(FM.LiveSwitch.Point,FM.LiveSwitch.Point)">
            <summary>
            Determines whether the specified point is equivalent to the current point.
            Does not require the object pointers to match.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>true if the specified point is equivalent to the current point; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.op_Inequality(FM.LiveSwitch.Point,FM.LiveSwitch.Point)">
            <summary>
            Determines whether the specified point is NOT equivalent to the current point.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>true if the specified point is NOT equivalent to the current point; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.ToStruct">
            <summary>
            Converts this <see cref="T:FM.LiveSwitch.Point"/> to a System.Drawing.Point.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Point.ToStruct(FM.LiveSwitch.Point)">
            <summary>
            Converts a <see cref="T:FM.LiveSwitch.Point"/> to a System.Drawing.Point.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Point.FromStruct(System.Drawing.Point)">
            <summary>
            Converts a System.Drawing.Point to a <see cref="T:FM.LiveSwitch.Point"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Rectangle">
            <summary>
            A rectangle (size and origin).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rectangle.Empty">
            <summary>
            Gets the empty rectangle (0,0/0x0).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rectangle.Origin">
            <summary>
            Gets or sets the origin.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rectangle.X">
            <summary>
            Gets the origin X coordinate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rectangle.Y">
            <summary>
            Gets the origin Y coordinate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rectangle.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rectangle.Width">
            <summary>
            Gets the size width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rectangle.Height">
            <summary>
            Gets the size height.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rectangle"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.#ctor(FM.LiveSwitch.Point,FM.LiveSwitch.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rectangle"/> class.
            </summary>
            <param name="origin">The origin.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.ToJson(FM.LiveSwitch.Rectangle)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="rectangleJson">The JSON to deserialize.</param>
            <returns>The deserialized rectangle.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.ToString">
            <summary>
            Returns a string that represents this instance using format "{origin}/{size}".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.IsEquivalent(FM.LiveSwitch.Rectangle)">
            <summary>
            Determines whether the specified rectangle is equivalent.
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.IsEquivalent(FM.LiveSwitch.Rectangle,FM.LiveSwitch.Rectangle)">
            <summary>
            Determines whether the two rectangles are equivalent.
            </summary>
            <param name="rectangle1">The first rectangle.</param>
            <param name="rectangle2">The second rectangle.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equivalent to the current rectangle.
            Does not require the object pointers to match.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equivalent to the current object; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.Equals(FM.LiveSwitch.Rectangle)">
            <summary>
            Determines whether the specified rectangle is equivalent to the current rectangle.
            Does not require the object pointers to match.
            </summary>
            <param name="rectangle">The rectangle to compare with the current object.</param>
            <returns>true if the specified rectangle is equivalent to the current rectangle; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.op_Equality(FM.LiveSwitch.Rectangle,FM.LiveSwitch.Rectangle)">
            <summary>
            Determines whether the specified rectangle is equivalent to the current rectangle.
            Does not require the object pointers to match.
            </summary>
            <param name="rectangle1">The first rectangle.</param>
            <param name="rectangle2">The second rectangle.</param>
            <returns>true if the specified rectangle is equivalent to the current rectangle; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.op_Inequality(FM.LiveSwitch.Rectangle,FM.LiveSwitch.Rectangle)">
            <summary>
            Determines whether the specified rectangle is NOT equivalent to the current rectangle.
            </summary>
            <param name="rectangle1">The first rectangle.</param>
            <param name="rectangle2">The second rectangle.</param>
            <returns>true if the specified rectangle is NOT equivalent to the current rectangle; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.ToStruct">
            <summary>
            Converts this <see cref="T:FM.LiveSwitch.Rectangle"/> to a System.Drawing.Rectangle.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.ToStruct(FM.LiveSwitch.Rectangle)">
            <summary>
            Converts a <see cref="T:FM.LiveSwitch.Rectangle"/> to a System.Drawing.Rectangle.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.FromStruct(System.Drawing.Rectangle)">
            <summary>
            Converts a System.Drawing.Rectangle to a <see cref="T:FM.LiveSwitch.Rectangle"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.AddressType">
            <summary>
            Defines valid SDP address types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.AddressType.IP4">
            <summary>
            Gets the SDP address type meaning "IP version 4".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.AddressType.IP6">
            <summary>
            Gets the SDP address type meaning "IP version 6".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AddressType.GetAddressTypeForAddress(System.String)">
            <summary>
            Gets the SDP address type for the specified IP address.
            </summary>
            <param name="ipAddress">The IP address.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Attribute">
            <summary>
            An SDP attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Attribute.AttributeType">
            <summary>
            Gets or sets this Attribute's Type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Attribute.MultiplexingCategory">
            <summary>
            Gets or sets the Multiplexing Category of this Attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.RegisterAttribute(System.Type,System.String,System.Boolean,System.Boolean,FM.LiveSwitch.Function1{FM.LiveSwitch.Sdp.AttributeCreationArgs,FM.LiveSwitch.Sdp.Attribute})">
            <summary>
            Registers an attribute type.
            </summary>
            <param name="type">The attribute type.</param>
            <param name="name">The name.</param>
            <param name="sessionLevel">Whether the attribute applies to sessions.</param>
            <param name="mediaLevel">Whether the attribute applies to media streams.</param>
            <param name="creationDelegate">The creation delegate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.UnregisterAttribute(System.Type)">
            <summary>
            Unregisters an attribute type.
            </summary>
            <param name="type">The attribute type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.GetTypeName(System.Type)">
            <summary>
            Gets the name of the attribute type.
            </summary>
            <param name="type">The attribute type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.IsSessionLevel(System.Type)">
            <summary>
            Determines whether the type applies to sessions.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.IsMediaLevel(System.Type)">
            <summary>
            Determines whether the type applies to media streams.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.CreateAttribute(System.String,System.String)">
            <summary>
            Creates an attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.ConnectionData"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.AttributeCategory">
            <summary>
            Specified Multiplexing category of SDP Attribute.
            Rules governing SDP Attribute multiplexing are as per 
            draft-ietf-mmusic-sdp-mux-attributes
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.Normal">
            <summary>
            The attributes in the NORMAL category can be independently specified
            when multiplexed and they retain their original semantics.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.Caution">
            <summary>
            The attributes in the CAUTION category are advised against
            multiplexing since their usage under multiplexing might lead to
            incorrect behaviour.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.Identical">
            <summary>
            The attributes and their associated values (if any) in the IDENTICAL
            category MUST be repeated across all the media descriptions under
            multiplexing.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.Sum">
            <summary>
            The attributes in the SUM category can be set as they are normally
            used but software using them in the multiplexing scenario MUST apply
            the sum of all the attributes being multiplexed instead of trying to
            use them independently.This is typically used for bandwidth or
            other rate limiting attributes to the underlying transport.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.Transport">
            <summary>
            The attributes in the TRANSPORT category can be set normally for
            multiple items in a multiplexed group but the software MUST pick the
            one that's associated with the "m=" line whose information is used
            for setting up the underlying transport.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.Inherit">
             <summary>
             The attributes in the INHERIT category encapsulate other SDP
             attributes or parameters.  These attributes inherit their
             multiplexing characteristics from the attributes or parameters they
             encapsulate.  Such attributes are defined in [RFC3407], [RFC5939] and
             [RFC6871] as part of a generic framework for indicating and
             negotiating transport, media, and media format related capabilities
             in the SDP.
            
             The inheritance manifests itself when the encapsulated attribute or
             parameter is being leveraged.  In the case of SDP Capability
             Negotiation [RFC5939] for example, this occurs when a capability
             (encapsulating attribute) is used as part of a configuration; the
             configuration inherits the multiplexing category of each of its
             constituent (encapsulated) attributes and parameters.  The inherited
             attributes MUST be coherent in order to form a valid configuration
             from a multiplexing point of view (see Section 14 for further
             details).
             </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.IdenticalPerPT">
            <summary>
            The attributes in the IDENTICAL-PER-PT category define the RTP
            payload configuration on per Payload Type basis and MUST have
            identical values across all the media descriptions for a given RTP
            Payload Type when repeated.  These Payload Types identify the same
            codec configuration as defined in the Section 10.1.2 of
            [I-D.ietf-mmusic-sdp-bundle-negotiation] under this context.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.Special">
            <summary>
            For the attributes in the SPECIAL category, the text in the
            specification defining the attribute MUST be consulted for further
            handling when multiplexed.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.AttributeCollection">
            <summary>
            Collection of SDP Attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.#ctor">
            <summary>
            Create a collection of SDP Attributes
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.AddAttribute(FM.LiveSwitch.Sdp.Attribute)">
            <summary>
            Adds a specified attribute to the collection of attributes.
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.Remove(FM.LiveSwitch.Sdp.AttributeType)">
            <summary>
            Removes all the attributes of the specified type from the given collection.
            </summary>
            <param name="attributeType">Attribute type to remove.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.Remove(FM.LiveSwitch.Sdp.Attribute)">
            <summary>
            Removes the attribute from the given collection if it is present.
            </summary>
            <param name="attribute">Attribute to remove.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.ReplaceAttribute(FM.LiveSwitch.Sdp.Attribute)">
            <summary>
            Replaces existing attribute(s) in the collection with the given attribute.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.TryGetAttribute(FM.LiveSwitch.Sdp.AttributeType,FM.LiveSwitch.Sdp.Attribute@)">
            <summary>
            Returns a value indicating whether attributes of the specified type exist in the collection and populates the out parameter with the first encountered attributes if any are found.
            </summary>
            <param name="type">Sdp attribute type.</param>
            <param name="attribute">Sdp attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.TryGetAttributes(FM.LiveSwitch.Sdp.AttributeType,FM.LiveSwitch.Sdp.Attribute[]@)">
            <summary>
            Returns a value indicating whether attributes of the specified type exist in the collection and populates the out parameter with the attributes if any are found.
            </summary>
            <param name="type">Sdp attribute type.</param>
            <param name="attributes">Sdp attributes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.ToArray">
            <summary>
            Returns an array of attributes that belong to this collection.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.AttributeCreationArgs">
            <summary>
            SDP attribute-creation arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.AttributeCreationArgs.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCreationArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.AttributeCreationArgs"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.AttributeRegistration">
            <summary>
            An SDP attribute registration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.AttributeRegistration.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.AttributeRegistration.SessionLevel">
            <summary>
            Gets or sets a value indicating whether the attribute applies to sessions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.AttributeRegistration.MediaLevel">
            <summary>
            Gets or sets a value indicating whether the attribute applies to media streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.AttributeRegistration.CreationDelegate">
            <summary>
            Gets or sets the creation delegate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeRegistration.#ctor(System.String,System.Boolean,System.Boolean,FM.LiveSwitch.Function1{FM.LiveSwitch.Sdp.AttributeCreationArgs,FM.LiveSwitch.Sdp.Attribute})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.AttributeRegistration"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="sessionLevel">A value indicating whether the attribute applies to sessions.</param>
            <param name="mediaLevel">A value indicating whether the attribute applies to media streams.</param>
            <param name="creationDelegate">The creation delegate.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.AttributeType">
            <summary>
            SDP Attribute types
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.UnknownAttribute">
            <summary>
            Unknown SDP Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.DirectionAttribute">
            <summary>
            SDP Direction Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.CategoryAttribute">
            <summary>
            SDP Category Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.CharacterSetAttribute">
            <summary>
            SDP Character Set Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.ConferenceTypeAttribute">
            <summary>
            SDP Conference Type Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.CryptoAttribute">
            <summary>
            SDP Crypto Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.FormatParametersAttribute">
            <summary>
            SDP Format Parameters Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.FrameRateAttribute">
            <summary>
            SDP Frame Rate Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.KeywordsAttribute">
            <summary>
            SDP Keywords Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.LanguageAttribute">
            <summary>
            SDP Language Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.MaxPacketTimeAttribute">
            <summary>
            SDP Max Packet Time Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.OrientationAttribute">
            <summary>
            SDP Orientiation Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.PacketTimeAttribute">
            <summary>
            SDP Packet Time Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.QualityAttribute">
            <summary>
            SDP Quality Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.SdpLanguageAttribute">
            <summary>
            SDP Sdp Language Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.SetupAttribute">
            <summary>
            SDP Setup Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.ToolAttribute">
            <summary>
            SDP Tool  Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.MediaStreamIdSemanticAttribute">
            <summary>
            SDP Media Stream Id Semantic Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.MediaStreamIdAttribute">
            <summary>
            SDP Stream Id Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.BundleOnlyAttribute">
            <summary>
            SDP Bundle-only Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IceCandidateAttribute">
            <summary>
            SDP Ice Candidate Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IceFingerprintAttribute">
            <summary>
            SDP Ice Fingerprint Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IceLiteAttribute">
            <summary>
            SDP Ice Lite Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IceMismatchAttribute">
            <summary>
            SDP Ice Mismatch Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IceOptionsAttribute">
            <summary>
            SDP Ice Options Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IcePasswordAttribute">
            <summary>
            SDP Ice Password Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IceUfragAttribute">
            <summary>
            SDP Ice Ufrag Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IceRemoteCandidatesAttribute">
            <summary>
            SDP Ice Remote Candidates Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtpMapAttribute">
            <summary>
            SDP RTP Map Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtpSsrcAttribute">
            <summary>
            SDP RTP SSRC Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtpExtMapAttribute">
            <summary>
            SDP RTP Extension Map Attribute (https://tools.ietf.org/html/rfc5285#section-5)
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtcpAttribute">
            <summary>
            SDP RTCP Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtcpFeedbackAttribute">
            <summary>
            SDP RTCP Feedback Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtcpMuxAttribute">
            <summary>
            SDP RTCP Mux Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.SctpPortAttribute">
            <summary>
            SDP SCTP Port Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.SctpMapAttribute">
            <summary>
            SDP SCTP Map Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.SctpMaxMessageSizeAttribute">
            <summary>
            SDP SCTP Max Message Size Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.GroupAttribute">
            <summary>
            SDP Group Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtpRidAttribute">
            <summary>
            SDP RTP RID Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.SimulcastAttribute">
            <summary>
            SDP Simulcast Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtpSsrcGroupAttribute">
            <summary>
            SDP RTP SSRC Group Attribute
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Bandwidth">
            <summary>
            An SDP bandwidth element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Bandwidth.BandwidthType">
            <summary>
            Gets or sets the type of bandwidth. See <see cref="P:FM.LiveSwitch.Sdp.Bandwidth.BandwidthType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Bandwidth.Value">
            <summary>
            Gets or sets the bandwidth, typically in kilobits per second.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Bandwidth.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Bandwidth"/> class.
            </summary>
            <param name="bandwidthType">The type of bandwidth. See <see cref="P:FM.LiveSwitch.Sdp.Bandwidth.BandwidthType"/> for possible values.</param>
            <param name="value">The bandwidth, typically in kilobits per second.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Bandwidth.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Bandwidth.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.Bandwidth"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.BandwidthType">
            <summary>
            Defines valid SDP bandwidth types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BandwidthType.ConferenceTotal">
            <summary>
            Gets the SDP bandwidth type meaning "Conference Total".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BandwidthType.ApplicationSpecific">
            <summary>
            Gets the SDP bandwidth type meaning "Application Specific".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BandwidthType.RtcpSenders">
            <summary>
            Gets the SDP bandwidth type meaning "RTCP Senders".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BandwidthType.RtcpReceivers">
            <summary>
            Gets the SDP bandwidth type meaning "RTCP Receivers".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BandwidthType.TransportIndependentApplicationSpecificMaximum">
            <summary>
            Gets the SDP bandwidth type meaning "Transport Independent Application Specific Maximum".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Base64EncryptionKey">
            <summary>
            An SDP encryption key with a method of "base64".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Base64EncryptionKey.EncodedEncryptionKey">
            <summary>
            Gets or sets the base64-encoded encryption key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Base64EncryptionKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Base64EncryptionKey"/> class.
            </summary>
            <param name="encodedEncryptionKey">The base64-encoded encryption key.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.BundleOnlyAttribute">
             <summary>
             Defined in draft-ietf-mmusic-sdp-bundle-negotiation. 
             Attribute is used to identify that a gioven media description can only be used  in bundled group.
             Its formatting in SDP is described by the following BNF:
             Name: bundle-only
            
             Value: N/A
            
             Usage Level: media
            
             Charset Dependent: no
            
             Example:
            
             a=bundle-only
             </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.BundleOnlyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.BundleOnlyAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.BundleOnlyAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.GroupAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.BundleOnlyAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.CategoryAttribute">
            <summary>
            This attribute gives the dot-separated hierarchical category of
            the session.  This is to enable a receiver to filter unwanted
            sessions by category.  There is no central registry of
            categories.  It is a session-level attribute, and it is not
            dependent on charset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CategoryAttribute.Category">
            <summary>
            Gets or sets the dot-separated hierarchical category of the session.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.CategoryAttribute"/> class.
            </summary>
            <param name="category">The dot-separated hierarchical category of the session.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CategoryAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.CategoryAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CategoryAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.CharacterSetAttribute">
            <summary>
            This specifies the character set to be used to display the
            session name and information data.  By default, the ISO-10646
            character set in UTF-8 encoding is used.  If a more compact
            representation is required, other character sets may be used.
            For example, the ISO 8859-1 is specified with the following SDP
            attribute:
            
               a=charset:ISO-8859-1
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CharacterSetAttribute.CharacterSet">
            <summary>
            Gets or sets the character set to be used to display the session name and information data.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CharacterSetAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.CharacterSetAttribute"/> class.
            </summary>
            <param name="characterSet">The character set to be used to display the session name and information data.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CharacterSetAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.CharacterSetAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CharacterSetAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.ClearEncryptionKey">
            <summary>
            An SDP encryption key with a method of "clear".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ClearEncryptionKey.EncryptionKey">
            <summary>
            Gets or sets the untransformed encryption key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ClearEncryptionKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ClearEncryptionKey"/> class.
            </summary>
            <param name="encryptionKey">The untransformed encryption key.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.ConferenceType">
            <summary>
            Defines valid SDP conference types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConferenceType.Broadcast">
            <summary>
            Gets the SDP conference type meaning "Broadcast", which should imply receive-only.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConferenceType.Meeting">
            <summary>
            Gets the SDP conference type meaning "Meeting", which should imply send-receive.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConferenceType.Moderated">
            <summary>
            Gets the SDP conference type meaning "Moderated", which should indicate the use of
            a floor control tool and that the media tools are started so as to mute
            new sites joining the conference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConferenceType.Test">
            <summary>
            Gets the SDP conference type meaning "Test", which should imply that unless
            explicitly requested otherwise, receivers can safely avoid displaying
            this session description to users.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConferenceType.H332">
            <summary>
            Gets the SDP conference type meaning "H332", which should imply receive-only and
            indicate that this loosely coupled session is part of an H.332 session.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.ConferenceTypeAttribute">
            <summary>
            This specifies the type of the conference.  Suggested values
            are "broadcast", "meeting", "moderated", "test", and "H332".
            "recvonly" should be the default for "type:broadcast" sessions,
            "type:meeting" should imply "sendrecv", and "type:moderated"
            should indicate the use of a floor control tool and that the
            media tools are started so as to mute new sites joining the
            conference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConferenceTypeAttribute.ConferenceType">
            <summary>
            Gets or sets the type of the conference. See <see cref="P:FM.LiveSwitch.Sdp.ConferenceTypeAttribute.ConferenceType"/> for possible values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ConferenceTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ConferenceTypeAttribute"/> class.
            </summary>
            <param name="conferenceType">The type of the conference. See <see cref="P:FM.LiveSwitch.Sdp.ConferenceTypeAttribute.ConferenceType"/> for possible values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ConferenceTypeAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ConferenceTypeAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ConferenceTypeAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.ConnectionData">
            <summary>
            An SDP connection data element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConnectionData.NetworkType">
            <summary>
            Gets or sets the type of network. See <see cref="P:FM.LiveSwitch.Sdp.ConnectionData.NetworkType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConnectionData.AddressType">
            <summary>
            Gets or sets the type of the address. See <see cref="P:FM.LiveSwitch.Sdp.ConnectionData.AddressType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConnectionData.ConnectionAddress">
            <summary>
            Gets or sets the connection address.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ConnectionData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ConnectionData"/> class.
            </summary>
            <param name="connectionAddress">The connection address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ConnectionData.Update(System.String)">
            <summary>
            Updates the connection address.
            </summary>
            <param name="connectionAddress">The connection address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ConnectionData.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ConnectionData.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.ConnectionData"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.CryptoAttribute">
            <summary>
            This gives the maximum amount of media that can be encapsulated
            in each packet, expressed as time in milliseconds.  The time
            SHALL be calculated as the sum of the time the media present in
            the packet represents.  For frame-based codecs, the time SHOULD
            be an integer multiple of the frame size.  This attribute is
            probably only meaningful for audio data, but may be used with
            other media types if it makes sense.  It is a media-level
            attribute, and it is not dependent on charset.  Note that this
            attribute was introduced after RFC 2327, and non-updated
            implementations will ignore this attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoAttribute.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoAttribute.CryptoSuite">
            <summary>
            Gets or sets the crypto suite. See <see cref="P:FM.LiveSwitch.Sdp.CryptoAttribute.CryptoSuite"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoAttribute.KeyParams">
            <summary>
            Gets or sets the key parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoAttribute.SessionParams">
            <summary>
            Gets or sets the session parameters.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.CryptoAttribute"/> class.
            </summary>
            <param name="tag">The tag.</param>
            <param name="cryptoSuite">The crypto suite.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.CryptoAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoAttribute.GetKey">
            <summary>
            Gets the key from the "inline" key parameter.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoAttribute.GetSalt">
            <summary>
            Gets the salt from the "inline" key parameter.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoAttribute.SetKeySalt(System.Byte[],System.Byte[])">
            <summary>
            Sets the key and salt for the "inline" key parameter.
            </summary>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.CryptoKeyMethod">
            <summary>
            Defines valid SDP crypto key methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoKeyMethod.Inline">
            <summary>
            Gets the SDP crypto key method meaning "inline".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.CryptoSessionParam">
            <summary>
            Defines valid SDP crypto session parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoSessionParam.UnencryptedSRTP">
            <summary>
            Gets the SDP crypto session parameter meaning "unencrypted SRTP".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoSessionParam.UnencryptedSRTCP">
            <summary>
            Gets the SDP crypto session parameter meaning "unencrypted SRTCP".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoSessionParam.UnauthenticatedSRTP">
            <summary>
            Gets the SDP crypto session parameter meaning "unauthenticated SRTP".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.CryptoSuite">
            <summary>
            Defines valid SDP crypto suites.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoSuite.AesCM128HmacSha180">
            <summary>
            Gets the SDP crypto suite meaning "AES-CM 128-bit cipher and HMAC-SHA1 message authentication with an 80-bit authentication tag".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoSuite.AesCm128HmacSha132">
            <summary>
            Gets the SDP crypto suite meaning "AES-CM 128-bit cipher and HMAC-SHA1 message authentication with a 32-bit authentication tag".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoSuite.NullHmacSha180">
            <summary>
            Gets the SDP crypto suite meaning "NULL cipher and HMAC-SHA1 message authentication with an 80-bit authentication tag".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoSuite.NullHmacSha132">
            <summary>
            Gets the SDP crypto suite meaning "NULL cipher and HMAC-SHA1 message authentication with a 32-bit authentication tag".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoSuite.GetEncryptionMode(System.String)">
            <summary>
            Converts a crypto-suite string to an EncryptionMode enum.
            </summary>
            <param name="cryptoSuite">The crypto-suite string.</param>
            <returns>The EncryptionMode enum.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoSuite.GetCryptoSuite(FM.LiveSwitch.EncryptionMode)">
            <summary>
            Converts an EncryptionMode enum to a crypto-suite string.
            </summary>
            <param name="encryptionMode">The EncryptionMode enum.</param>
            <returns>The crypto-suite string.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.DirectionAttribute">
            <summary>
            This specifies the mode in which tools should be started.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.DirectionAttribute.StreamDirection">
            <summary>
            Gets the stream direction.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.DirectionAttribute.GenerateDirectionAttribute(FM.LiveSwitch.StreamDirection)">
            <summary>
            Creates a DirectionAttribute for a required direction.
            </summary>
            <param name="direction">Direction.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.EncryptionKey">
            <summary>
            An SDP encryption key element.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.EncryptionKey.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.EncryptionKey"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.EncryptionKey.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.FormatParametersAttribute">
            <summary>
            This attribute allows parameters that are specific to a
            particular format to be conveyed in a way that SDP does not
            have to understand them.  The format must be one of the formats
            specified for the media.  Format-specific parameters may be any
            set of parameters required to be conveyed by SDP and given
            unchanged to the media tool that will use this format.  At most
            one instance of this attribute is allowed for each format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.FormatParametersAttribute.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.FormatParametersAttribute.FormatSpecificParameters">
            <summary>
            Gets the format-specific parameters.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.FormatParametersAttribute"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.FormatParametersAttribute"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="formatSpecificParameters">The format-specific parameters.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.FormatParametersAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.GetFormatSpecificParameter(System.String)">
            <summary>
            Gets a format specific parameter.
            </summary>
            <param name="key">The key.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.TryGetFormatSpecificParameter(System.String,System.String@)">
            <summary>
            Tries to get a format specific parameter.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.SetFormatSpecificParameter(System.String,System.String)">
            <summary>
            Sets a format specific parameter.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.UnsetFormatSpecificParameter(System.String)">
            <summary>
            Unsets a format specific parameter.
            </summary>
            <param name="key">The key.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.DeserializeFormatSpecificParameters">
            <summary>
            Creates a dictionary map from the format specific parameters.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.SerializeFormatSpecificParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Updates the format specific parameters based on a dictionary map.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.FrameRateAttribute">
            <summary>
            This gives the maximum video frame rate in frames/sec.  It is
            intended as a recommendation for the encoding of video data.
            Decimal representations of fractional values using the notation
            "integer.fraction" are allowed.  It is a media-level
            attribute, defined only for video media, and it is not
            dependent on charset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.FrameRateAttribute.FrameRate">
            <summary>
            Gets or sets the maximum video frame rate in frames/second.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FrameRateAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.FrameRateAttribute"/> class.
            </summary>
            <param name="frameRate">The maximum video frame rate in frames/second.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FrameRateAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.FrameRateAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FrameRateAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.BundleGroup">
            <summary>
            A bundle group of SDP Media Description elements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BundleGroup.BundleOnly">
            <summary>
            Gets a value indicating whether this group contains Bundle-only elements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BundleGroup.TaggedMSection">
            <summary>
            Gets or sets the tagged m-section of this bundle group.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BundleGroup.MediaDescriptions">
            <summary>
            Gets the mecia descriptions in this bundle group.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.BundleGroup.AddMediaDescription(FM.LiveSwitch.Sdp.MediaDescription)">
            <summary>
            Adds a media description to this bundle group.
            </summary>
            <param name="mediaDescription"></param>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BundleGroup.Mids">
            <summary>
            Gets media description identifiers associated with this bundle group.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BundleGroup.GroupType">
            <summary>
            Gets the semntic type of this group.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.BundleGroup.#ctor(FM.LiveSwitch.Sdp.GroupSemanticsType)">
            <summary>
            Creates a BundleGroup object.
            </summary>
            <param name="groupType"></param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.GroupAttribute">
            <summary>
            Defined in RFC 3388. Attribute is used for grouping together different media streams.
            Its formatting in SDP is described by the following BNF:
               group-attribute    = "a=group:" semantics
                                    * (space identification-tag)
               semantics          = "LS" | "FID" | "BUNDLE"
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.GroupAttribute.Ids">
            <summary>
            Gets the group identification tags.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.GroupAttribute.Semantics">
            <summary>
            Gets the semantics.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.GroupAttribute.#ctor(FM.LiveSwitch.Sdp.GroupSemanticsType,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.GroupAttribute"/> class.
            </summary>
            <param name="type">The semantics type.</param>
            <param name="ids">Group identification ID tags.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.GroupAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.GroupAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.GroupAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.GroupSemanticsType">
            <summary>
            SDP Group Semantics
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.GroupSemanticsType.LipSynchronization">
            <summary>
            An application that receives a session description that contains "m"
            lines that are grouped together using LS semantics MUST synchronize 
            the playout of the corresponding media streams.Note that LS
            semantics not only apply to a video stream that has to be
            synchronized with an audio stream.The playout of two streams of the
            same type can be synchronized as well.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.GroupSemanticsType.FlowIdentification">
            <summary>
            An "m" line in an SDP session description defines a media stream.
            However, SDP does not define what a media stream is.  This definition
            can be found in the RTSP specification.The RTSP RFC[5] defines a
            media stream as "a single media instance, e.g., an audio stream or a
            video stream as well as a single whiteboard or shared application
            group. When using RTP, a stream consists of all RTP and RTCP packets
            created by a source within an RTP session".
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.GroupSemanticsType.Bundling">
            <summary>
            The extension can be used with the Session Description Protocol(SDP) 
            Offer/Answer mechanism[RFC3264] to negotiate which "m=" sections will 
            become part of a BUNDLE group.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.GroupSemanticsType.Unknown">
            <summary>
            Unknown Group semantics type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.CandidateAttribute">
            <summary>
            The candidate attribute is a media-level attribute only.  It contains
            a transport address for a candidate that can be used for connectivity
            checks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.Foundation">
            <summary>
            Gets or sets the candidate's foundation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.ComponentId">
            <summary>
            Gets or sets the ID of the component for which this is a candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.Protocol">
            <summary>
            Gets or sets the protocol of this candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.Priority">
            <summary>
            Gets or sets the priority of the candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.ConnectionAddress">
            <summary>
            Gets or sets the IP address of the candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.Port">
            <summary>
            Gets or sets the port of the candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.CandidateType">
            <summary>
            Gets or sets the type of the candidate. See <see cref="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.CandidateType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.RelatedAddress">
            <summary>
            Gets or sets the IP address related to the candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.RelatedPort">
            <summary>
            Gets or sets the port related to the candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.Extensions">
            <summary>
            Gets or sets the extensions.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.#ctor(System.String,System.Int64,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.CandidateAttribute" /> class.
            </summary>
            <param name="foundation">The candidate's foundation.</param>
            <param name="priority">The priority of the candidate.</param>
            <param name="connectionAddress">The IP address of the candidate.</param>
            <param name="port">The port of the candidate.</param>
            <param name="candidateType">The type of the candidate. See <see cref="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.CandidateType" /> for possible values.</param>
            <param name="componentId">The component identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.#ctor(System.String,System.Int64,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.CandidateAttribute" /> class.
            </summary>
            <param name="foundation">The candidate's foundation.</param>
            <param name="priority">The priority of the candidate.</param>
            <param name="connectionAddress">The IP address of the candidate.</param>
            <param name="port">The port of the candidate.</param>
            <param name="candidateType">The type of the candidate. See <see cref="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.CandidateType" /> for possible values.</param>
            <param name="relatedAddress">The IP address related to the candidate.</param>
            <param name="relatedPort">The port related to the candidate.</param>
            <param name="protocol">The protocol.</param>
            <param name="componentId">The ID of the component for which this is a candidate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.CandidateAttribute"/> class.
            </summary>
            <param name="value">The attribute as a string.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.CandidateType">
            <summary>
            Defines valid SDP candidate types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateType.Host">
            <summary>
            Gets the SDP candidate type meaning "Host".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateType.ServerReflexive">
            <summary>
            Gets the SDP candidate type meaning "Server Reflexive".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateType.PeerReflexive">
            <summary>
            Gets the SDP candidate type meaning "Peer Reflexive".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateType.Relayed">
            <summary>
            Gets the SDP candidate type meaning "Relayed".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute">
            <summary>
            The SDP session attribute "fingerprint" provides an encryption
            certificate fingerprint to a remote peer for use with DTLS.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute.HashFunction">
            <summary>
            Gets or sets the hash function (i.e. sha-256).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute.Fingerprint">
            <summary>
            Gets or sets the fingerprint.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute"/> class.
            </summary>
            <param name="hashFunction">The hash function.</param>
            <param name="fingerprint">The fingerprint.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute"/> class.
            </summary>
            <param name="value">The attribute as a string.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.LiteAttribute">
            <summary>
            "ice-lite" is a session-level attribute only, and indicates that an
            agent is a lite implementation.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.LiteAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.LiteAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.LiteAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.LiteAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.LiteAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.MismatchAttribute">
            <summary>
            "ice-mismatch" is a media-level
            attribute only, and when present in an answer, indicates that the
            offer arrived with a default destination for a media component that
            didn't have a corresponding candidate attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.MismatchAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.MismatchAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.MismatchAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.MismatchAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.MismatchAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.OptionsAttribute">
            <summary>
            The "ice-options" attribute is a session-level attribute.  It
            contains a series of tokens that identify the options supported by
            the agent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.OptionsAttribute.TrickleOptionSet">
            <summary>
            Gets or sets a value indicating whether trickle-ice is supported.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.OptionsAttribute.Tags">
            <summary>
            Gets or sets the tokens that identify options supported by the agent.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.OptionsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.OptionsAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.OptionsAttribute.#ctor(System.Collections.Generic.List{FM.LiveSwitch.Sdp.Ice.OptionTag})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.OptionsAttribute"/> class.
            </summary>
            <param name="tags">The tokens that identify options supported by the agent.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.OptionsAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.OptionsAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.OptionsAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.OptionTag">
            <summary>
            A tag for an <see cref="T:FM.LiveSwitch.Sdp.Ice.OptionsAttribute"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.OptionTag.Trickle">
            <summary>
            Gets the "trickle" option string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.OptionTag.Type">
            <summary>
            Gets or sets the type of this tag.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.OptionTag.ToString">
            <summary>
            Gets the string representation of this tag.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.OptionTag.Parse(System.String)">
            <summary>
            Generates a tag object from a string.
            </summary>
            <param name="tagString">The tag string.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.OptionTagType">
            <summary>
            A list of known types for <see cref="T:FM.LiveSwitch.Sdp.Ice.OptionTag"/>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.Ice.OptionTagType.Unknown">
            <summary>
            Indicates an unknown option tag.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.Ice.OptionTagType.Trickle">
            <summary>
            Indicates the trickle-ice option tag.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.PasswordAttribute">
            <summary>
            The "ice-pwd" attribute conveys the password used by
            ICE for message integrity.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.PasswordAttribute.Password">
            <summary>
            Gets or sets the password used by ICE for message integrity.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.PasswordAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.PasswordAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.PasswordAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.PasswordAttribute"/> class.
            </summary>
            <param name="password">The password used by ICE for message integrity.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.PasswordAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.PasswordAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.PasswordAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.PasswordAttribute.GeneratePassword">
            <summary>
            Generates a random password.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.RemoteCandidate">
            <summary>
            An SDP remote candidate element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.RemoteCandidate.ComponentId">
            <summary>
            Gets or sets the ID of the component for which this is a remote candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.RemoteCandidate.ConnectionAddress">
            <summary>
            Gets or sets the IP address of the remote candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.RemoteCandidate.Port">
            <summary>
            Gets or sets the port of the remote candidate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.RemoteCandidate.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.RemoteCandidate"/> class.
            </summary>
            <param name="componentId">The ID of the component for which this is a remote candidate.</param>
            <param name="connectionAddress">The IP address of the remote candidate.</param>
            <param name="port">The port of the remote candidate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.RemoteCandidate.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.RemoteCandidate.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.Ice.RemoteCandidate"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.RemoteCandidatesAttribute">
            <summary>
            The attribute contains a connection-address and port for each
            component.  The ordering of components is irrelevant.  However, a
            value MUST be present for each component of a media stream.  This
            attribute MUST be included in an offer by a controlling agent for a
            media stream that is Completed, and MUST NOT be included in any other
            case.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.RemoteCandidatesAttribute.Candidates">
            <summary>
            Gets or sets the array of remote candidates.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.RemoteCandidatesAttribute.#ctor(FM.LiveSwitch.Sdp.Ice.RemoteCandidate[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.RemoteCandidatesAttribute"/> class.
            </summary>
            <param name="candidates">The array of remote candidates.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.RemoteCandidatesAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.RemoteCandidatesAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.RemoteCandidatesAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.TransportProtocol">
            <summary>
            Defines valid SDP transport protocols.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.TransportProtocol.Udp">
            <summary>
            Gets the SDP transport protocol meaning "udp".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.TransportProtocol.Tcp">
            <summary>
            Gets the SDP transport protocol meaning "tcp".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.TrickleIceOptionTag">
            <summary>
            A trickle-ice tag for an <see cref="T:FM.LiveSwitch.Sdp.Ice.OptionsAttribute"/>
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.TrickleIceOptionTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.TrickleIceOptionTag"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.TrickleIceOptionTag.ToString">
            <summary>
            Gets the string representation of this tag
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.UfragAttribute">
            <summary>
            The "ice-ufrag" attribute conveys the username fragment
            used by ICE for message integrity.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.UfragAttribute.Ufrag">
            <summary>
            Gets or sets the username fragment used by ICE for message integrity.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.UfragAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.UfragAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.UfragAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.UfragAttribute"/> class.
            </summary>
            <param name="ufrag">The username fragment used by ICE for message integrity.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.UfragAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.UfragAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.UfragAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.UfragAttribute.GenerateUfrag">
            <summary>
            Generates a username fragment.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.UnknownIceOptionTag">
            <summary>
            An unknown tag for an <see cref="T:FM.LiveSwitch.Sdp.Ice.OptionsAttribute"/>
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.UnknownIceOptionTag.TagString">
            <summary>
            Gets the tag string.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.UnknownIceOptionTag.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.UnknownIceOptionTag"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.UnknownIceOptionTag.ToString">
            <summary>
            Gets the string representation of this tag.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.InactiveAttribute">
            <summary>
            This specifies that the tools should be started in inactive
            mode.  This is necessary for interactive conferences where
            users can put other users on hold.  No media is sent over an
            inactive media stream.  Note that an RTP-based system SHOULD
            still send RTCP, even if started inactive.  It can be either a
            session or media-level attribute, and it is not dependent on
            charset.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.InactiveAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.InactiveAttribute"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.InactiveAttribute.StreamDirection">
            <summary>
            Gets the stream direction.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.InactiveAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.InactiveAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.InactiveAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.KeywordsAttribute">
            <summary>
            Like the cat attribute, this is to assist identifying wanted
            sessions at the receiver.  This allows a receiver to select
            interesting session based on keywords describing the purpose of
            the session; there is no central registry of keywords.  It is a
            session-level attribute.  It is a charset-dependent attribute,
            meaning that its value should be interpreted in the charset
            specified for the session description if one is specified, or
            by default in ISO 10646/UTF-8.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.KeywordsAttribute.Keywords">
            <summary>
            Gets or sets the keywords describing the purpose of the session.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.KeywordsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.KeywordsAttribute"/> class.
            </summary>
            <param name="keywords">The keywords describing the purpose of the session.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.KeywordsAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.KeywordsAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.KeywordsAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.LanguageAttribute">
            <summary>
            This can be a session-level attribute or a media-level
            attribute.  As a session-level attribute, it specifies the
            default language for the session being described.  As a media-
            level attribute, it specifies the language for that media,
            overriding any session-level language specified.  Multiple lang
            attributes can be provided either at session or media level if
            the session description or media use multiple languages, in
            which case the order of the attributes indicates the order of
            importance of the various languages in the session or media
            from most important to least important.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.LanguageAttribute.LanguageTag">
            <summary>
            Gets or sets the default language for the session being described
            (if used as a session-level attribute) or the language for a media
            stream (if used as a media-level attribute).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.LanguageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.LanguageAttribute"/> class.
            </summary>
            <param name="languageTag">The default language for the session being described
            (if used as a session-level attribute) or the language for a media
            stream (if used as a media-level attribute).</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.LanguageAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.LanguageAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.LanguageAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.MaxPacketTimeAttribute">
            <summary>
            This gives the maximum amount of media that can be encapsulated
            in each packet, expressed as time in milliseconds.  The time
            SHALL be calculated as the sum of the time the media present in
            the packet represents.  For frame-based codecs, the time SHOULD
            be an integer multiple of the frame size.  This attribute is
            probably only meaningful for audio data, but may be used with
            other media types if it makes sense.  It is a media-level
            attribute, and it is not dependent on charset.  Note that this
            attribute was introduced after RFC 2327, and non-updated
            implementations will ignore this attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MaxPacketTimeAttribute.MaxPacketTime">
            <summary>
            Gets or sets the maximum amount of media that can be encapsulated,
            in each packet, expressed as time in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MaxPacketTimeAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MaxPacketTimeAttribute"/> class.
            </summary>
            <param name="maxPacketTime">The maximum amount of media that can be encapsulated,
            in each packet, expressed as time in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MaxPacketTimeAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MaxPacketTimeAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MaxPacketTimeAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Media">
            <summary>
            An SDP media element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Media.MediaType">
            <summary>
            Gets or sets the media type. See <see cref="P:FM.LiveSwitch.Sdp.Media.MediaType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Media.TransportPort">
            <summary>
            Gets or sets the transport port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Media.TransportProtocol">
            <summary>
            Gets or sets the transport protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Media.NumberOfPorts">
            <summary>
            Gets or sets the number of ports.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Media.FormatDescription">
            <summary>
            Gets or sets the format description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Media.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Media"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Media.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Media"/> class.
            </summary>
            <param name="mediaType">The media type. See <see cref="P:FM.LiveSwitch.Sdp.Media.MediaType"/> for possible values.</param>
            <param name="transportPort">The transport port.</param>
            <param name="transportProtocol">The transport protocol.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Media.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Media"/> class.
            </summary>
            <param name="mediaType">The media type. See <see cref="P:FM.LiveSwitch.Sdp.Media.MediaType"/> for possible values.</param>
            <param name="transportPort">The transport port.</param>
            <param name="transportProtocol">The transport protocol.</param>
            <param name="formatDescription">The format description.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Media.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Media.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.Media"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.MediaDescription">
            <summary>
            An SDP media description element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.Media">
            <summary>
            Gets or sets the media name and transport address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IsAudio">
            <summary>
            Gets whether this media description represents an audio stream
            (media type == "audio").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IsVideo">
            <summary>
            Gets whether this media description represents a video stream
            (media type == "video").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IsApplication">
            <summary>
            Gets whether this media description represents an application stream
            (media type == "application").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IsText">
            <summary>
            Gets whether this media description represents a text stream
            (media type == "text").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IsMessage">
            <summary>
            Gets whether this media description represents a message stream
            (media type == "message").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.MediaTitle">
            <summary>
            Gets or sets the media title.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.ConnectionData">
            <summary>
            Gets or sets media-level connection data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.Bandwidths">
            <summary>
            Gets the array of proposed bandwidths to be used by the media. 
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.EncryptionKey">
            <summary>
            Gets or sets the media-level encryption key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.MediaAttributes">
            <summary>
            Gets the array of media-level attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.#ctor(FM.LiveSwitch.Sdp.Media)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MediaDescription"/> class.
            </summary>
            <param name="media">The media name and transport address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.AddBandwidth(FM.LiveSwitch.Sdp.Bandwidth)">
            <summary>
            Adds a proposed bandwidth.
            </summary>
            <param name="bandwidth">The proposed bandwidth to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.RemoveBandwidth(FM.LiveSwitch.Sdp.Bandwidth)">
            <summary>
            Removes a proposed bandwidth.
            </summary>
            <param name="bandwidth">The proposed bandwidth to remove.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.BundleOnly">
            <summary>
            Gets a value indicating whether this media description has been marked as bundle-only.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.AddMediaAttribute(FM.LiveSwitch.Sdp.Attribute)">
            <summary>
            Adds a media-level attribute.
            </summary>
            <param name="attribute">The session-level attribute to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.InsertMediaAttribute(FM.LiveSwitch.Sdp.Attribute,System.Int32)">
            <summary>
            DEPRECATED: Use AddMediaAttribute instead.
            Inserts a media-level attribute at the given index.
            </summary>
            <param name="attribute">The session-level attribute to add.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.RemoveMediaAttribute(FM.LiveSwitch.Sdp.Attribute)">
            <summary>
            Removes a media-level attribute.
            </summary>
            <param name="attribute">The session-level attribute to remove.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.MediaDescription"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtcpMultiplexingSupportFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains a value stating whether the given attributes indicate support for RTCP Multiplexing
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.RtcpMultiplexingSupported">
            <summary>
            Gets or sets a value indicating support for RTCP Multiplexing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.SctpMapAttribute">
            <summary>
            Gets the Sctp Map Attribute, if it is present in the Media Description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.SctpPortAttribute">
            <summary>
            Gets the Sctp Port Attribute, if it is present in the Media Description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.SctpMaxMessageSizeAttribute">
            <summary>
            Gets the Sctp Max Message Size Attribute, if it is present in the Media Description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.StreamDirection">
            <summary>
            Gets or sets the stream direction indicated in Media Description. Getter returns StreamDirection if DirectionAttribute is present; otherwise, returns StreamDirection.Unset.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetStreamDirectionFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains the stream direction indicated in the supplied collection of <see cref="T:FM.LiveSwitch.Sdp.Attribute"/>, if it can be found. Otherwise, returns StreamDirection.Unset.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetCandidateAttributes">
            <summary>
            Obtains Ice Candidate attributes associated with this media description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetIceOptionAttributes">
            <summary>
            Obtains Ice Options attributes associated with this media description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetIceOptionAttributesFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains Ice Options attributes associated with this media description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpExtMapAttributesFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains RTP extmap attributes associated with this media description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetBundleOnlyAttributeFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains bundle-only attribute from this media description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.RtcpAttribute">
            <summary>
            Gets or sets Rtcp Attributes associated with this media description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.FingerprintAttribute">
            <summary>
            Gets the Fingerprint Attribute from this MediaDescription
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetFingerprintAttributeFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains the FingerpritAttribute from the given collection of attributes
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.SupportsIce">
            <summary>
            Gets a value indicating whether this SDP MediaDescription suggests support for ICE.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSupportsIceFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Gets a value indicating whether the given set of attributes suggests support for ICE.
            </summary>
            <param name="attributes">The attribute collection</param>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IceUfragAttribute">
            <summary>
            Gets the IceUfragAttribute associated with this MediaDescription
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetIceUfragAttributeFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains the GetIceUfragAttribute from the given collection of attributes.
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IcePasswordAttribute">
            <summary>
            Gets the IcePasswordAttribute associated with this MediaDescription
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetIcePasswordAttributeFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains the IcePasswordAttribute from the given collection of attributes
            </summary>
            <param name="attributes">SDP attributes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetGroupAttributesFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains the Group attributes from the given collection of attributes
            </summary>
            <param name="collection">SDP attributes.</param>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.SetupAttribute">
            <summary>
            Gets or sets the SetupAttribute associated with this MediaDescription.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.QualityAttribute">
            <summary>
            Gets or sets the QualityAttribute associated with this MediaDescription.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.UpdateQualityAttributeValue(System.Int32)">
            <summary>
            Updates SDP Quality Attribute associated with this media description if one is present. Otherwise, 
            creates a new one and inserts it into this media description.
            </summary>
            <param name="quality"></param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSetupAttributeFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains the SetupAttribute associated with the given MediaDescription.
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetQualityAttributeFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains the QualityAttribute associated with the given MediaDescription.
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.CryptoAttributes">
            <summary>
            Gets CryptoAttributes associated with this MediaDescription.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetCryptoAttributesFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains CryptoAttributes from the given collection of attributes.
            </summary>
            <param name="attributes">Attribute HashTable</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttribute(System.Int32)">
            <summary>
            Obtains the RTP map attribute for a given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttribute(System.Int32,System.Int32@)">
            <summary>
            Obtains the RTP map attribute for a given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            <param name="rtpMapAttributeIndex">The index of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute" />.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttribute(System.String,System.Int32)">
            <summary>
            Obtains the RTP map attribute for a given format.
            </summary>
            <param name="formatName">Format name.</param>
            <param name="clockRate">Clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttribute(System.String,System.Int32,System.String)">
            <summary>
            Obtains the RTP map attribute for a given format.
            </summary>
            <param name="formatName">Format name.</param>
            <param name="clockRate">Clock rate.</param>
            <param name="formatParameters">Format parameters.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttribute(System.String,System.Int32,System.String,System.Int32@)">
            <summary>
            Obtains the RTP map attribute for a given format.
            </summary>
            <param name="formatName">Format name.</param>
            <param name="clockRate">Clock rate.</param>
            <param name="formatParameters">Format parameters.</param>
            <param name="rtpMapAttributeIndex">The index of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute" />.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttributes">
            <summary>
            Obtains the RTP map attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetPreferredRtpMapAttributes">
            <summary>
            Obtains the RTP map attributes in preference order.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpExtMapAttributes">
            <summary>
            Obtains the RTP ext-map attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttributes(System.String,System.Int32,System.String)">
            <summary>
            Obtains the RTP map attributes for a given format.
            </summary>        
            <param name="formatName">Format name.</param>
            <param name="clockRate">Clock rate.</param>
            <param name="formatParameters">Format parameters.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttributes(System.String,System.Int32,System.String,System.Int32[]@)">
            <summary>
            Obtains the RTP map attributes for a given format.
            </summary>
            <param name="formatName">Format name.</param>
            <param name="clockRate">Clock rate.</param>
            <param name="formatParameters">Format parameters.</param>
            <param name="rtpMapAttributeIndices">The indeces of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute" />.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetPacketTimeAttribute">
            <summary>
            Obtains the packet time attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetFormatParametersAttribute(System.Int32)">
            <summary>
            Gets the format parameters attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtcpFeedbackAttribute(System.Int32,System.String,System.String)">
            <summary>
            Gets the RTCP feedback attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            <param name="type">The type.</param>
            <param name="subType">The sub-type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetNackFeedbackAttribute(System.Int32)">
            <summary>
            Gets the RTCP "nack" feedback attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetNackPliFeedbackAttribute(System.Int32)">
            <summary>
            Gets the RTCP "nack pli" feedback attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetNackSliFeedbackAttribute(System.Int32)">
            <summary>
            Gets the RTCP "nack sli" feedback attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetNackRpsiFeedbackAttribute(System.Int32)">
            <summary>
            Gets the RTCP "nack rpsi" feedback attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetCcmFirFeedbackAttribute(System.Int32)">
            <summary>
            Gets the RTCP "ccm fir" feedback attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetCcmLrrFeedbackAttribute(System.Int32)">
            <summary>
            Gets the RTCP "ccm lrr" feedback attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetMaxPacketTimeAttribute">
            <summary>
            Obtains the maximum packet time attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetMediaStreamIdentifierAttribute">
            <summary>
            Obtains the media stream identifier attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSimulcastAttribute">
            <summary>
            Obtains the simulcast attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRidAttribute(System.String)">
            <summary>
            Obtains an RID attribute by its RID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRidAttributes">
            <summary>
            Obtains the RID attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRidAttributes(System.String)">
            <summary>
            Obtains the RID attributes.
            </summary>
            <param name="direction">The RID attribute direction.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcAttributes">
            <summary>
            Obtains the SSRC attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcAttributes(System.String)">
            <summary>
            Obtains the SSRC attributes.
            </summary>
            <param name="name">The SSRC attribute name.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcGroupAttributes">
            <summary>
            Obtains the SSRC Group attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcGroupSsrcs(System.String)">
            <summary>
            Obtains the SSRCS from the first SSRC Group with matching semantics.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcAttributes(System.Int64)">
            <summary>
            Obtains the SSRC attributes matching a given synchronization source.
            </summary>
            <param name="ssrc">The synchronization source.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcAttribute(System.Int64,System.String)">
            <summary>
            Obtains the first SSRC attribute matching a given synchronization source and name.
            </summary>
            <param name="ssrc">The synchronization source.</param>
            <param name="name">The attribute name.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcAttributes(System.Int64,System.String)">
            <summary>
            Obtains the SSRC attributes matching a given synchronization source and name.
            </summary>
            <param name="ssrc">The synchronization source.</param>
            <param name="name">The attribute name.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcAttribute(System.Int64,System.String,System.String)">
            <summary>
            Obtains the SSRC attribute matching a given synchronization source, name, and value.
            </summary>
            <param name="ssrc">The synchronization source.</param>
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetFormatParameterValue(System.Int32,System.String)">
            <summary>
            Sets a format parameter value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.SetFormatParameterValue(System.Int32,System.String,System.String)">
            <summary>
            Sets a format parameter value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.PurgeFormat(System.String)">
            <summary>
            Removes a format by name.
            </summary>
            <param name="name">The format name.</param>
            <returns><c>true</c> if the format was found and removed; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.PurgeFormat(System.String,System.Int32)">
            <summary>
            Removes a format by name and clock rate.
            </summary>
            <param name="name">The format name.</param>
            <param name="clockRate">The clock rate.</param>
            <returns><c>true</c> if the format was found and removed; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.PurgeFormat(System.String,System.Int32,System.Int32)">
            <summary>
            Removes a format by name, clock rate, and channel count.
            </summary>
            <param name="name">The format name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
            <returns><c>true</c> if the format was found and removed; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.OrderFormats(System.String[])">
            <summary>
            Orders the formats in preference order.
            </summary>
            <param name="names">The format names.</param>
            <returns><c>false</c> if a media element does not exist; otherwise <c>true</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetCategoryAttributes(FM.LiveSwitch.Sdp.AttributeCategory)">
            <summary>
            Gets attributes of a given category in this media description.
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IdenticalCategoryAttributes">
            <summary>
            Gets the attributes with Identical Multiplexing Category present in this description.
            </summary>
            <returns>Attributes with Identical Multiplexing Category present in this description.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.TransportCategoryAttributes">
            <summary>
            Gets the attributes with Transport Multiplexing Category present in this description.
            </summary>
            <returns>Attributes with Transport Multiplexing Category present in this description.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.RemoveBundleCategoryAttributes">
            <summary>
            Removes Bundle (i.e. Transport and Identical) Category Attributes.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.MediaStreamIdAttribute">
            <summary>
            https://tools.ietf.org/html/rfc5888#page-4
            "Media stream identification" media attribute, which is used for identifying media streams within a session description.
            Its formatting in SDP [RFC4566] is described by
            the following Augmented Backus-Naur Form(ABNF) [RFC5234]:
            
            mid-attribute      = "a=mid:" identification-tag
            identification-tag = token
                                 ; token is defined in RFC 4566
            The identification-tag MUST be unique within an SDP session description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaStreamIdAttribute.IdentificationTag">
            <summary>
            Gets the identification tag.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaStreamIdAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MediaStreamIdAttribute"/> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaStreamIdAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaStreamIdAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MediaStreamIdAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute">
            <summary>
            https://tools.ietf.org/html/draft-ietf-mmusic-msid-08 - NB: Removed in subsequent drafts, most likely will not be used eventually.
            Used here for compatibility with Google Chrome and Mozilla Firefox.
            
            A session-level attribute is defined for signalling the semantics
            associated with an msid grouping.This allows msid groupings with
            different semantics to coexist.
            
            This OPTIONAL attribute gives the group identifier and its group
            semantic; it carries the same meaning as the ssrc-group-attr of RFC
            5576 section 4.2, but uses the identifier of the group rather than a
            list of SSRC values.
            
            This attribute MUST be present if "a=msid" is used.
            
            An empty list of identifiers is an indication that the sender
            supports the indicated semantic, but has no msid groupings of the
            given type in the present SDP.
            
            An identifier of "*" is an indication that all "a=msid" lines in the
            SDP have this specific semantic.  If "*" is not used, each msid-id in
            the SDP MUST appear in one and only one "msid-semantic" line.
            The name of the attribute is "msid-semantic".
            The value of the attribute is given by the following ABNF:
            
            msid-semantic-value = msid - semantic msid-list
            msid-semantic = token ; see RFC 4566
            msid-list = *(" " msid-id) / " *"
            
            The semantic field holds values from the IANA registriy "Semantics
            for the msid-semantic SDP attribute" (which is defined in Section 6 of https://tools.ietf.org/html/draft-ietf-mmusic-msid-08 ).
            
            An example msid-semantic might look like this, if a semantic LS was
            registered by IANA for the same purpose as the existing LS grouping
            semantic:
            
            a= msid-semantic:LS xyzzy forolow
            
            This means that the SDP description has two lip sync groups, with the
            group identifiers xyzzy and forolow, respectively.
            
            The msid-semantic attribute can occur more than once, but MUST NOT
            occur more than once with the same msid-semantic value.
            </summary>
            <seealso cref="T:FM.LiveSwitch.Sdp.Attribute" />
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute.MsIdList">
            <summary>
            Gets or sets the space-delimited list of msids for which a given semantic is used. 
            An empty list of identifiers is an indication that the sender
            supports the indicated semantic, but has no msid groupings of the
            given type in the present SDP.
            
            An identifier of "*" is an indication that all "a=msid" lines in the
            SDP have this specific semantic.  If "*" is not used, each msid-id in
            the SDP MUST appear in one and only one "msid-semantic" line.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute.#ctor(FM.LiveSwitch.Sdp.MediaStreamIdSemanticToken)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute" /> class.
            </summary>
            <param name="semanticToken">The semantic token.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute.#ctor(FM.LiveSwitch.Sdp.MediaStreamIdSemanticToken,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute" /> class.
            </summary>
            <param name="semanticToken">The semantic token.</param>
            <param name="msidList">The msid list for the given semantic token.</param>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute.SemanticToken">
            <summary>
            Gets or sets the semantic token.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.MediaStreamIdSemanticToken">
            <summary>
            Media Stream Id Semantic Tokens
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.MediaStreamIdSemanticToken.Wms">
            <summary>
            WebRTC Media Stream Semantic
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.MediaType">
            <summary>
            Defines valid SDP media types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaType.Audio">
            <summary>
            Gets the SDP media type meaning "Audio".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaType.Video">
            <summary>
            Gets the SDP media type meaning "Video".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaType.Text">
            <summary>
            Gets the SDP media type meaning "Text".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaType.Application">
            <summary>
            Gets the SDP media type meaning "Application".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaType.Message">
            <summary>
            Gets the SDP media type meaning "Message".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaType.ToStreamType(System.String)">
            <summary>
            Converts an SDP media type to a StreamType enum.
            </summary>
            <param name="mediaType">The SDP media type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaType.FromStreamType(FM.LiveSwitch.StreamType)">
            <summary>
            Convert a StreamType enum to an SDP media type.
            </summary>
            <param name="streamType">The StreamType enum.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Message">
            <summary>
            An SDP message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.ProtocolVersion">
            <summary>
            Gets or sets the version of the Session Description Protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.SessionName">
            <summary>
            Gets or sets the textual session name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.Origin">
            <summary>
            Gets or sets the originator of the session plus a session identifier and version number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.SessionInformation">
            <summary>
            Gets or sets textual information about the session.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.Uri">
            <summary>
            Gets or sets the pointer to additional information about the session.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.EmailAddress">
            <summary>
            Gets or sets the email address for the person responsible for the conference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.PhoneNumber">
            <summary>
            Gets or sets the phone number for the person responsible for the conference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.ConnectionData">
            <summary>
            Gets or sets session-level connection data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.Bandwidths">
            <summary>
            Gets the array of proposed bandwidths to be used by the session. 
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.TimeDescriptions">
            <summary>
            Gets the array of start, stop, and repeat times for the session.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.TimeZoneAdjustments">
            <summary>
            Gets or sets the time zone adjustments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.EncryptionKey">
            <summary>
            Gets or sets the session-level encryption key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.SessionAttributes">
            <summary>
            Gets the array of session-level attributes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.MediaDescriptions">
            <summary>
            Gets the array of media descriptions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.AudioDescription">
            <summary>
            Gets the first media description of type "audio".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.AudioDescriptions">
            <summary>
            Gets any media descriptions of type "audio".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.VideoDescription">
            <summary>
            Gets the first media description of type "video".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.VideoDescriptions">
            <summary>
            Gets any media descriptions of type "video".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.ApplicationDescription">
            <summary>
            Gets the first media description of type "application".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.ApplicationDescriptions">
            <summary>
            Gets any media descriptions of type "application".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.TextDescription">
            <summary>
            Gets the first media description of type "text".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.TextDescriptions">
            <summary>
            Gets any media descriptions of type "text".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.MessageDescription">
            <summary>
            Gets the first media description of type "message".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.MessageDescriptions">
            <summary>
            Gets any media descriptions of type "message".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.BundleGroups">
            <summary>
            Gets bundle groups in this media description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.#ctor(FM.LiveSwitch.Sdp.Origin)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Message"/> class.
            </summary>
            <param name="origin">The originator of the session plus a session identifier and version number.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.#ctor(FM.LiveSwitch.Sdp.Origin,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Message"/> class.
            </summary>
            <param name="origin">The originator of the session plus a session identifier and version number.</param>
            <param name="sessionName">The textual session name.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.#ctor(FM.LiveSwitch.Sdp.Origin,System.String,FM.LiveSwitch.Sdp.TimeDescription[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Message"/> class.
            </summary>
            <param name="origin">The originator of the session plus a session identifier and version number.</param>
            <param name="sessionName">The textual session name.</param>
            <param name="timeDescriptions">The array of start, stop, and repeat times for the session.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.AddBandwidth(FM.LiveSwitch.Sdp.Bandwidth)">
            <summary>
            Adds a proposed bandwidth.
            </summary>
            <param name="bandwidth">The proposed bandwidth to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.RemoveBandwidth(FM.LiveSwitch.Sdp.Bandwidth)">
            <summary>
            Removes a proposed bandwidth.
            </summary>
            <param name="bandwidth">The proposed bandwidth to remove.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.AddTimeDescription(FM.LiveSwitch.Sdp.TimeDescription)">
            <summary>
            Adds a start, stop, and repeat time.
            </summary>
            <param name="timeDescription">The start, stop, and repeat time to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.RemoveTimeDescription(FM.LiveSwitch.Sdp.TimeDescription)">
            <summary>
            Removes a start, stop, and repeat time.
            </summary>
            <param name="timeDescription">The start, stop, and repeat time to remove.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.RemoveTimeDescriptions">
            <summary>
            Removes all time descriptions.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.AddSessionAttribute(FM.LiveSwitch.Sdp.Attribute)">
            <summary>
            Adds a session-level attribute.
            </summary>
            <param name="attribute">The session-level attribute to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.RemoveSessionAttribute(FM.LiveSwitch.Sdp.AttributeType)">
            <summary>
            Removes a session-level attribute.
            </summary>
            <param name="attributeType">The session-level attribute type to remove.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelDirection">
            <summary>
            Obtains the stream direction indicated as a session-level attribute in this message. If none is supplied, StreamDirection.Unset is returned.
            Stream Direction may also be (and most likely is) indicated as a media-level attribute, so individual media descriptions must also be examined.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelRtcpMultiplexingSupport">
            <summary>
            Returns a value stating whether Rtcp Multiplexing support is indicated  as a session-level attribute in this message.
            Rtcp Multiplexing support may also be indicated via a media-level argument, so individual media descriptions must also be examined.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelCryptoAttributes">
            <summary>
            Obtains Crypto attributes from the session-level attributes in this message.
            Crypto attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelFingerprintAttribute">
            <summary>
            Obtains Fingerprint attribute from the session-level attributes in this message.
            Fingerprint attribute may also be sent as a media-level argument, so individual media descriptions must also be examined.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelIceOptionAttributes">
            <summary>
            Obtains session-level Ice Options attributes associated with the Sdp Message.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelRtpExtMapAttributes">
            <summary>
            Obtains session-level RTP ext-map attributes associated with the Sdp Message.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelIcePasswordAttribute">
            <summary>
            Obtains Ice Password Attribute from the session-level attributes in this message.
            Ice Password attribute may also be sent as a media-level argument, so individual media descriptions must also be examined.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelIceUfragAttribute">
            <summary>
            Obtains Ice Ufrag Attribute from the session-level attributes in this message.
            Ice Ufrag Attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelSetupAttribute">
            <summary>
            Obtains Setup Attribute from the session-level attributes in this message.
            Setup Attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.AddMediaDescription(FM.LiveSwitch.Sdp.MediaDescription)">
            <summary>
            Adds a media description.
            </summary>
            <param name="mediaDescription">The media description to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.InsertMediaDescription(System.Int32,FM.LiveSwitch.Sdp.MediaDescription)">
            <summary>
            Adds a media description at the given index.
            </summary>
            <param name="index">The index at which to add the media description.</param>
            <param name="mediaDescription">The media description to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.RemoveMediaDescription(FM.LiveSwitch.Sdp.MediaDescription)">
            <summary>
            Removes a media description.
            </summary>
            <param name="mediaDescription">The media description to remove.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.UpdateSetupValue(System.String)">
            <summary>
            Updates SDP Setup Value associated with the session description.
            </summary>
            <param name="setupValue"></param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.Message"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.SupportsTrickleIce">
            <summary>
            Gets or sets a value indicating whether Trickle-ICE is supported.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.NetworkType">
            <summary>
            Defines valid SDP network types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.NetworkType.Internet">
            <summary>
            Gets the SDP network type meaning "Internet".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Orientation">
            <summary>
            Defines valid SDP orientations.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Orientation.Portrait">
            <summary>
            Gets the SDP orientation meaning "Portrait".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Orientation.Landscape">
            <summary>
            Gets the SDP orientation meaning "Landscape".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Orientation.Seascape">
            <summary>
            Gets the SDP orientation meaning "Upside-Down Landscape".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.OrientationAttribute">
            <summary>
            Normally this is only used for a whiteboard or presentation
            tool.  It specifies the orientation of a the workspace on the
            screen.  It is a media-level attribute.  Permitted values are
            "portrait", "landscape", and "seascape" (upside-down
            landscape).  It is not dependent on charset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.OrientationAttribute.Orientation">
            <summary>
            Gets or sets the orientation of a workspace on the screen. See <see cref="P:FM.LiveSwitch.Sdp.OrientationAttribute.Orientation"/> for possible values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.OrientationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.OrientationAttribute"/> class.
            </summary>
            <param name="orientation">The orientation of a workspace on the screen. See <see cref="P:FM.LiveSwitch.Sdp.OrientationAttribute.Orientation"/> for possible values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.OrientationAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.OrientationAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.OrientationAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Origin">
            <summary>
            An SDP origin element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Origin.Username">
            <summary>
            Gets or sets the user's login on the originating host.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Origin.SessionId">
            <summary>
            Gets or sets the globally unique identifier for the session.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Origin.SessionVersion">
            <summary>
            Gets or sets the version number for the session.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Origin.NetworkType">
            <summary>
            Gets or sets the type of network. See <see cref="P:FM.LiveSwitch.Sdp.Origin.NetworkType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Origin.AddressType">
            <summary>
            Gets or sets the type of the address. See <see cref="P:FM.LiveSwitch.Sdp.Origin.AddressType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Origin.UnicastAddress">
            <summary>
            Gets or sets the address of the machine from which the session was created.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Origin.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Origin"/> class.
            </summary>
            <param name="unicastAddress">The address of the machine from which the session was created.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Origin.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Origin"/> class.
            </summary>
            <param name="unicastAddress">The address of the machine from which the session was created.</param>
            <param name="username">The user's login on the originating host.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Origin.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Origin.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.Origin"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.PacketTimeAttribute">
            <summary>
            This gives the length of time in milliseconds represented by
            the media in a packet.  This is probably only meaningful for
            audio data, but may be used with other media types if it makes
            sense.  It should not be necessary to know ptime to decode RTP
            or vat audio, and it is intended as a recommendation for the
            encoding/packetisation of audio.  It is a media-level
            attribute, and it is not dependent on charset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.PacketTimeAttribute.PacketTime">
            <summary>
            Gets or sets the length of time in milliseconds represented by
            the media in a packet.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.PacketTimeAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.PacketTimeAttribute"/> class.
            </summary>
            <param name="packetTime">The length of time in milliseconds represented by
            the media in a packet.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.PacketTimeAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.PacketTimeAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.PacketTimeAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.PromptEncryptionKey">
            <summary>
            An SDP encryption key with a method of "prompt".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.QualityAttribute">
            <summary>
            This gives a suggestion for the quality of the encoding as an
            integer value.  The intention of the quality attribute for
            video is to specify a non-default trade-off between frame-rate
            and still-image quality.  For video, the value is in the range
            0 to 10, with the following suggested meaning:
            
               10 - the best still-image quality the compression scheme can
                    give.
               5  - the default behaviour given no quality suggestion.
               0  - the worst still-image quality the codec designer thinks
                    is still usable.
            
            It is a media-level attribute, and it is not dependent on
            charset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.QualityAttribute.Quality">
            <summary>
            Gets or sets the suggested quality of the encoding as an integer value from 0-10.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.QualityAttribute.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.QualityAttribute"/> class.
            </summary>
            <param name="quality">The suggested quality of the encoding as an integer value from 0-10.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.QualityAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.QualityAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.QualityAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.ReceiveOnlyAttribute">
            <summary>
            This specifies that the tools should be started in receive-only
            mode where applicable.  It can be either a session- or media-
            level attribute, and it is not dependent on charset.  Note that
            recvonly applies to the media only, not to any associated
            control protocol (e.g., an RTP-based system in recvonly mode
            SHOULD still send RTCP packets).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ReceiveOnlyAttribute.StreamDirection">
            <summary>
            Gets the stream direction.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ReceiveOnlyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ReceiveOnlyAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ReceiveOnlyAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ReceiveOnlyAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ReceiveOnlyAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.RepeatTime">
            <summary>
            An SDP repeat time element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.RepeatTime.RepeatInterval">
            <summary>
            Gets or sets the repeat interval.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.RepeatTime.ActiveDuration">
            <summary>
            Gets or sets the active duration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.RepeatTime.Offsets">
            <summary>
            Gets the array of offsets from the start time.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.RepeatTime.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.RepeatTime"/> class.
            </summary>
            <param name="repeatInterval">The repeat interval.</param>
            <param name="activeDuration">The active duration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.RepeatTime.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.RepeatTime"/> class.
            </summary>
            <param name="repeatInterval">The repeat interval.</param>
            <param name="activeDuration">The active duration.</param>
            <param name="offsets">The offsets from the start time.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.RepeatTime.AddOffset(System.TimeSpan)">
            <summary>
            Adds an offset from the start time.
            </summary>
            <param name="offset">The offset from the start time to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.RepeatTime.RemoveOffset(System.TimeSpan)">
            <summary>
            Removes an offset from the start time.
            </summary>
            <param name="offset">The offset from the start time to remove.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.RepeatTime.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.RepeatTime.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.RepeatTime"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtcp.Attribute">
            <summary>
            The RTCP attribute is used to document the RTCP port used for media
            stream, when that port is not the next higher (odd) port number
            following the RTP port described in the media line.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.Attribute.Port">
            <summary>
            Gets or sets the RTCP port number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.Attribute.NetworkType">
            <summary>
            Gets or sets the type of network. See <see cref="P:FM.LiveSwitch.Sdp.Rtcp.Attribute.NetworkType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.Attribute.AddressType">
            <summary>
            Gets or sets the type of the address. See <see cref="P:FM.LiveSwitch.Sdp.Rtcp.Attribute.AddressType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.Attribute.ConnectionAddress">
            <summary>
            Gets or sets the RTCP connection address.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.Attribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtcp.Attribute"/> class.
            </summary>
            <param name="port">The RTCP port number.</param>
            <param name="connectionAddress">The RTCP connection address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.Attribute.Update(System.Int32,System.String)">
            <summary>
            Updates the port and connection address.
            </summary>
            <param name="port">The port.</param>
            <param name="connectionAddress">The connection address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.Attribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtcp.Attribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.Attribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute">
            <summary>
            This attribute is used to indicate the capability of
            using RTCP feedback.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.PayloadType">
            <summary>
            Gets or sets the payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.WildcardPayloadType">
            <summary>
            Gets the payload type that represents
            wildcard feedback attributes ('*').
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.SubType">
            <summary>
            Gets or sets the sub-type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute" /> class.
            </summary>
            <param name="payloadType">The payload type.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute" /> class.
            </summary>
            <param name="payloadType">The payload type.</param>
            <param name="type">The type.</param>
            <param name="subtype">The subtype.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.NackAttribute(System.Int32)">
            <summary>
            Creates a "nack" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.NackPliAttribute(System.Int32)">
            <summary>
            Creates a "nack pli" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.NackSliAttribute(System.Int32)">
            <summary>
            Creates a "nack sli" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.NackRpsiAttribute(System.Int32)">
            <summary>
            Creates a "nack rpsi" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.CcmFirAttribute(System.Int32)">
            <summary>
            Creates a "ccm fir" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.CcmLrrAttribute(System.Int32)">
            <summary>
            Creates a "ccm lrr" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.CcmTmmbrAttribute(System.Int32)">
            <summary>
            Creates a "ccm tmmbr" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.CcmTmmbnAttribute(System.Int32)">
            <summary>
            Creates a "ccm tmmbn" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.RembAttribute(System.Int32)">
            <summary>
            Creates a "goog-remb" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType">
            <summary>
            A feedback attribute sub type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType.Pli">
            <summary>
            Gets the "picture loss indication" sub-type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType.Sli">
            <summary>
            Gets the "slice loss indication" sub-type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType.Rpsi">
            <summary>
            Gets the "reference picture selection indication" sub-type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType.Fir">
            <summary>
            Gets the "full intraframe refresh" sub-type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType.Lrr">
            <summary>
            Gets the "layer refresh request" sub-type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType.Tmmbr">
            <summary>
            Gets the "temporary maximum media-stream bitrate request" sub-type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType.Tmmbn">
            <summary>
            Gets the "temporary maximum media-stream bitrate notification" sub-type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeType">
            <summary>
            A feedback attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeType.Ack">
            <summary>
            Gets the "positive acknowledgement" type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeType.App">
            <summary>
            Gets the application-defined type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeType.Ccm">
            <summary>
            Gets the "codec control message" type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeType.Nack">
            <summary>
            Gets the "negative acknowledgement" type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeType.Remb">
            <summary>
            Gets the "receiver estimated maximum bitrate" type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtcp.MuxAttribute">
            <summary>
            This attribute is used to signal that RTP and RTCP traffic should be
            multiplexed on a single port.  It is a property attribute, which does
            not take a value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.MuxAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtcp.MuxAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.MuxAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtcp.MuxAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.MuxAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute">
             <summary>
             https://tools.ietf.org/html/rfc5285#section-5
             Stream or media-level attribute used to indicate the presence of RTP Header Extensions, and the mapping of
             local identifiers used in the header extension to a larger namespace.
             
             A usable mapping MUST use IDs in the valid range, and each ID in this
             range MUST be used only once for each media (or only once if the
             mappings are session level).  Mappings that do not conform to these
             rules MAY be presented, for instance, during offer/answer negotiation
             as described in the next section, but remapping to conformant values
             is necessary before they can be applied.
             
             Each extension is named by a URI. Each local identifier potentially used in the stream is mapped to a
             string using an attribute of the form:
             a=extmap:VALUE["/"DIRECTION] URI EXTENSIONATTRIBUTES
             Where URI is a URI, as above, VALUE is the local identifier (ID)
             of this extension and is an integer in the valid range inclusive (0
             is reserved for padding in both forms, and 15 is reserved in the one-byte header form),
             and direction is one of "sendonly", "recvonly", "sendrecv", or "inactive" (without the quotes).
             Example:
            
             a=extmap:1 http://example.com/082005/ext.htm#ttime
             a=extmap:2/sendrecv http://example.com/082005/ext.htm#xmeta short
             </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.Id">
            <summary>
            Gets or sets the local identifier of this extension.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.Uri">
            <summary>
            Gets the well-known URI of this extension
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.ExtensionAttributes">
            <summary>
            Gets or sets extension attributes (optional).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.Direction">
            <summary>
            Gets or sets the direction of this extension (optional). If not present, stream direction is assumed to be the direction of the extension.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.#ctor(System.Int32,System.String)">
            <summary>
            RTP Extension Map Attribute.
            </summary>
            <param name="id">Local identifier of this extension and is an integer in the valid range inclusive (0 is reserved for padding in both forms, and 15 is reserved in the one-byte header form.</param>
            <param name="uri">Well known extension identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.#ctor(System.Int32,System.String,FM.LiveSwitch.StreamDirection)">
            <summary>
            RTP Extension Map Attribute.
            </summary>
            <param name="id">Local identifier of this extension and is an integer in the valid range inclusive (0 is reserved for padding in both forms, and 15 is reserved in the one-byte header form.</param>
            <param name="uri">Well known extension identifier.</param>
            <param name="direction">Disered direction of this RTP Extension Header.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection">
            <summary>
            Collection of FeedbackAttributes.
            AB: This rally should be merged with the AttributeCollection using generics or subclassing.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection.#ctor">
            <summary>
            Create a collection of SDP Attributes
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection.AddAttribute(FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute)">
            <summary>
            Adds a specified FeedbackAttribute to the collection of attributes.
            Returns a value indicating whether the attribute has been added or
            was skipped because it already eisted in the connection.
            </summary>
            <param name="attribute">Attribute to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection.Remove(FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute)">
            <summary>
            Removes the attribute from the given collection if it is present.
            </summary>
            <param name="attribute">Attribute to remove.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection.Clear">
            <summary>
            Removes all the attributes from the current collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection.ToArray">
            <summary>
            Returns an array of feedback attributes that belong to this collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection.TryGetFeedbackAttribute(System.Int32,System.String,System.String,FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute@)">
            <summary>
            Returns a value indicating whether FeedbackAttribute with the specified parameters exists in the collection and updates a reference to it accordingly.
            </summary>
            <param name="payloadType"></param>
            <param name="feedbackAttributeType"></param>
            <param name="subType"></param>
            <param name="feedbackAttribute"></param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection.CalculateFeedbackAttributeKey(System.Int32,System.String,System.String)">
            <summary>
            Gets the key for the given feedback attribute.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute">
            <summary>
            This attribute maps from an RTP payload type number (as used in
            an "m=" line) to an format name denoting the payload format
            to be used.  It also provides information on the clock rate and
            format parameters.  It is a media-level attribute that is not
            dependent on charset.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetIanaMapAttribute(System.Int32)">
            <summary>
            Gets the RTP map attribute for an IANA-reserved payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedRtcpFeedbackAttribute(System.String,System.String)">
            <summary>
            Gets the RTCP feedback attribute for the given type and subtype associated with this payload type.
            </summary>
            <param name="type">The type.</param>
            <param name="subType">The sub-type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedRtcpFeedbackAttribute(System.Int32,System.String,System.String)">
            <summary>
            Gets the RTCP feedback attribute for the given payload type, type and subtype associated with this payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            <param name="type">The type.</param>
            <param name="subType">The sub-type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedNackFeedbackAttribute">
            <summary>
            Gets the RTCP "nack" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedNackPliFeedbackAttribute">
            <summary>
            Gets the RTCP "nack pli" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedNackSliFeedbackAttribute">
            <summary>
            Gets the RTCP "nack sli" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedNackRpsiFeedbackAttribute">
            <summary>
            Gets the RTCP "nack rpsi" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedCcmFirFeedbackAttribute">
            <summary>
            Gets the RTCP "ccm fir" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedCcmLrrFeedbackAttribute">
            <summary>
            Gets the RTCP "ccm lrr" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedCcmTmmbrFeedbackAttribute">
            <summary>
            Gets the RTCP "ccm tmmbr" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedCcmTmmbnFeedbackAttribute">
            <summary>
            Gets the RTCP "ccm tmmbn" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedRembFeedbackAttribute">
            <summary>
            Gets the RTCP "goog-remb" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.MapAttribute.RelatedRtcpFeedbackAttributes">
            <summary>
            Gets Rtcp Feedback attributes associated with this Map Attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.ResetRtcpFeedbackAttributes(FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute[])">
            <summary>
            Resets Rtcp Feedback attributes associated with this Map Attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.AddRelatedRtcpFeedbackAttribute(FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute)">
            <summary>
            Adds an Rtcp Feedback attribute associated with this Map Attribute.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.RemoveRelatedRtcpFeedbackAttribute(FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute)">
            <summary>
            Removes an Rtcp Feedback attribute associated with this Map Attribute.
            Returns true if the attribute was reomved; if the attribute was not present, returns false.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.MapAttribute.RelatedFormatParametersAttribute">
            <summary>
            Gets or sets Format Parameters attribute associated with this Map Attribute
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.MapAttribute.PayloadType">
            <summary>
            Gets or sets the RTP payload type number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.MapAttribute.FormatName">
            <summary>
            Gets or sets the format name denoting the payload format to be used.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.MapAttribute.ClockRate">
            <summary>
            Gets or sets the payload clock rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.MapAttribute.FormatParameters">
            <summary>
            Gets or sets format parameters for the payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute"/> class.
            </summary>
            <param name="payloadType">The RTP payload type number.</param>
            <param name="formatName">The format name denoting the payload format to be used.</param>
            <param name="clockRate">The payload clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.#ctor(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute"/> class.
            </summary>
            <param name="payloadType">The RTP payload type number.</param>
            <param name="formatName">The format name denoting the payload format to be used.</param>
            <param name="clockRate">The payload clock rate.</param>
            <param name="formatParameters">The format parameters for the payload.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.Media">
            <summary>
            An SDP media description with a transport protocol of "RTP/AVP" or "RTP/SAVP".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.Media.RtpSavpfTransportProtocol">
            <summary>
            Gets the protocol keyword for the extended Secure RTP audio/video profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.Media.RtpAvpfTransportProtocol">
            <summary>
            Gets the protocol keyword for the extended RTP audio/video profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.Media.RtpSavpTransportProtocol">
            <summary>
            Gets the protocol keyword for the Secure RTP audio/video profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.Media.RtpAvpTransportProtocol">
            <summary>
            Gets the protocol keyword for the RTP audio/video profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.Media.UdpTlsRtpSavpfTransportProtocol">
            <summary>
            Gets the protocol keyword for the extended Secure RTP audio/video profile with DTLS key exchange.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.Media.UdpTlsRtpSavpTransportProtocol">
            <summary>
            Gets the protocol keyword for the Secure RTP audio/video profile with DTLS key exchange.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.Media.SupportsEncryption(System.String)">
            <summary>
            Returns a value indicating whther a given protocol supports encryption.
            </summary>
            <param name="protocol">Protocol keyword.</param>
            <returns>Value indicating whther a given protocol supports encryption.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.Media.SupportsRtcpBasedFeedback(System.String)">
            <summary>
            Returns a value indicating whther a given protocol supports encryption.
            </summary>
            <param name="protocol">Protocol keyword.</param>
            <returns>Value indicating whther a given protocol supports encryption.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.Media.GenerateRtpProfile(FM.LiveSwitch.StreamType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates Rtp Prfile for a given combination of stream type, whjether or not RTCP-based feedback is supported, whether (D)TLS is in use and whether encryption is in use in general.
            </summary>
            <param name="type">Stream type.</param>
            <param name="rtcpFeedbackSupported">Indicates whether Rtcp-based feedback is supported.</param>
            <param name="useDtls">Indicates whether (D)TLS is in use.</param>
            <param name="useEncryption">Indicates whether encryption is in use.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.Media.#ctor(System.String,System.Int32,System.String,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.Media"/> class.
            </summary>
            <param name="mediaType">The media type. See <see cref="T:FM.LiveSwitch.Sdp.MediaType"/> for possible values.</param>
            <param name="transportPort">The transport port.</param>
            <param name="transportProtocol">The transport protocol.</param>
            <param name="rtpPayloadTypeNumbers">The RTP payload type numbers.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.Media.GetPayloadTypes(System.String)">
            <summary>
            Gets the payload types.
            </summary>
            <param name="formatDesciption">The media format desciption.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.Media.GetWellKnownPayloadName(System.Int32)">
            <summary>
            Returns the name of a well-known payload type.
            </summary>
            <param name="payloadType">The well-known payload type to get the name of.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.Media.GetWellKnownPayloadClockRate(System.Int32)">
            <summary>
            Returns the clockrate of a well-known payload type.
            </summary>
            <param name="payloadType">The well-known payload type to get the clockrate of.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStream">
            <summary>
            A stream for a simulcast stream description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastStream.Ids">
            <summary>
            Gets the identifiers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastStream.#ctor(FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStream"/> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastStream.#ctor(FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStream"/> class.
            </summary>
            <param name="ids">The identifiers.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SimulcastDirection">
            <summary>
            The allowed directions for a simulcast attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastDirection.Send">
            <summary>
            Gets the send direction ("send").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastDirection.Receive">
            <summary>
            Gets the receive direction ("recv").
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription">
            <summary>
            A stream description for a simulcast attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription.Direction">
            <summary>
            Gets the direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription.Streams">
            <summary>
            Gets the streams.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription.#ctor(System.String,FM.LiveSwitch.Sdp.Rtp.SimulcastStream[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription"/> class.
            </summary>
            <param name="direction">The direction.</param>
            <param name="streams">The streams.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.RidDirection">
            <summary>
            The allowed directions for an RID attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidDirection.Send">
            <summary>
            Gets the send direction ("send").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidDirection.Receive">
            <summary>
            Gets the receive direction ("recv").
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.RidRestriction">
            <summary>
            A restriction for an RID attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.MaxWidthKey">
            <summary>
            Gets the "max-width" key, for spatial resolution in pixels. In the case that
            stream orientation signaling is used to modify the intended
            display orientation, this attribute refers to the width of the
            stream when a rotation of zero degrees is encoded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.MaxHeightKey">
            <summary>
            Gets the "max-height" key, for spatial resolution in pixels. In the case that
            stream orientation signaling is used to modify the intended
            display orientation, this attribute refers to the height of the
            stream when a rotation of zero degrees is encoded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.MaxFramesPerSecondKey">
            <summary>
            Gets the "max-fps" key, for frame rate in frames per second. For encoders that
            do not use a fixed framerate for encoding, this value is used to
            restrict the minimum amount of time between frames: the time
            between any two consecutive frames SHOULD NOT be less than 1 / max -
            fps seconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.MaxFrameSizeKey">
            <summary>
            Gets the "max-fs" key, for frame size in pixels per frame. This is the product
            of frame width and frame height, in pixels, for rectangular frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.MaxBitrateKey">
            <summary>
            Gets the "max-br" key, for bit rate in bits per second. The restriction applies
            to the media payload only, and does not include overhead
            introduced by other layers(e.g., RTP, UDP, IP, or Ethernet).  The
            exact means of keeping within this limit are left up to the
            implementation, and instantaneous excursions outside the limit are
            permissible. For any given one-second sliding window, however,
            the total number of bits in the payload portion of RTP SHOULD NOT
            exceed the value specified in "max-br."
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.MaxPixelsPerSecondKey">
            <summary>
            Gets the "max-pps" key, for pixel rate in pixels per second. This value SHOULD
            be handled identically to max-fps, after performing the following
            conversion: max-fps = max-pps / (width* height).  If the stream
            resolution changes, this value is recalculated. Due to this
            recalculation, excursions outside the specified maximum are
            possible near resolution change boundaries.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.MaxBitsPerPixelKey">
            <summary>
            Gets the "max-bpp" key, for maximum number of bits per pixel, calculated as an
            average of all samples of any given coded picture. This is
            expressed as a floating point value, with an allowed range of
            0.0001 to 48.0.  These values MUST NOT be encoded with more than
            four digits to the right of the decimal point.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.DependKey">
            <summary>
            Gets the "depend" key, for spatial resolution in pixels. The
            value is a comma-separated list of rid-ids.These rid-ids
            identify RTP streams that this stream depends on in order to allow
            for proper interpretation.  The mechanism defined in this document
            allows for such dependencies to be expressed only when the streams
            are in the same media section.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.Key">
            <summary>
            Gets the restriction key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.Value">
            <summary>
            Gets or sets the restriction value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidRestriction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.RidRestriction"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidRestriction.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.RidRestriction"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.RidAttribute">
            <summary>
            The SDP media attribute "rid" specifies restrictions defining a
            unique RTP payload configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidAttribute.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidAttribute.Direction">
            <summary>
            Gets the direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidAttribute.PayloadTypes">
            <summary>
            Gets or sets the payload types that can
            be used in the associated stream. This
            property is optional and may be null.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidAttribute.Restrictions">
            <summary>
            Gets or sets the codec-agnostic restrictions
            to which the corresponding stream will conform.
            This property is optional and may be null.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.RidAttribute"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.#ctor(System.String,System.String,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.RidAttribute"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="direction">The direction.</param>
            <param name="payloadTypes">The payload types.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.#ctor(System.String,System.String,FM.LiveSwitch.Sdp.Rtp.RidRestriction[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.RidAttribute"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="direction">The direction.</param>
            <param name="restrictions">The restrictions.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.#ctor(System.String,System.String,System.Int32[],FM.LiveSwitch.Sdp.Rtp.RidRestriction[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.RidAttribute"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="direction">The direction.</param>
            <param name="payloadTypes">The payload types.</param>
            <param name="restrictions">The restrictions.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.ValidateId(System.String)">
            <summary>
            Validates that the identifier conforms to RFC syntax,
            which means that it only contains alpha-numeric
            characters and/or the hyphen and underscore.
            See https://tools.ietf.org/html/draft-ietf-avtext-rid/ and
            https://tools.ietf.org/html/draft-ietf-mmusic-rid/ for more info.
            </summary>
            <param name="id">The identifier</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.GetRestrictionValue(System.String)">
            <summary>
            Gets a restriction value.
            </summary>
            <param name="restrictionKey">The restriction key.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.RidAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute">
            <summary>
            The SDP media attribute "simulcast" describes, independently for send
            and receive directions, the number of simulcast RTP streams as well
            as potential alternative formats for each simulcast RTP stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.DraftVersion">
            <summary>
            Gets or sets the version of the IETF draft to comply with.
            https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.Description1">
            <summary>
            Gets the first description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.Description2">
            <summary>
            Gets the second description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.SendDescription">
            <summary>
            Gets the 'send' description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.ReceiveDescription">
            <summary>
            Gets the 'receive' description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.#ctor(FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute"/> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.#ctor(FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription,FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute"/> class.
            </summary>
            <param name="description1">The first description.</param>
            <param name="description2">The second description.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId">
            <summary>
            A simulcast stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId.Paused">
            <summary>
            Gets whether the stream is paused.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId"/> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="paused">Whether the stream is paused.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute">
            <summary>
            The SDP media attribute "ssrc-group" expresses a relationship among
            several sources of an RTP session.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute.Semantics">
            <summary>
            Gets the semantics.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute.SynchronizationSources">
            <summary>
            Gets the synchronization sources.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute.#ctor(System.String,System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute"/> class.
            </summary>
            <param name="semantics">The semantics.</param>
            <param name="synchronizationSources">The synchronization sources.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute">
            <summary>
            The SDP media attribute "ssrc" indicates a property (known as a
            "source-level attribute") of a media source (RTP stream) within an
            RTP session.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute"/> class.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="attributeName">Name of the attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute.#ctor(System.Int64,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute"/> class.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SsrcAttributeName">
            <summary>
            SSRC atribute names.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttributeName.CName">
            <summary>
            Gets a value indicating canonical name. 
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttributeName.PreviousSsrc">
            <summary>
            Gets a value indicating previous SSRC.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttributeName.FormatParameters">
            <summary>
            Gets a value indicating format parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttributeName.MediaStreamId">
            <summary>
            Gets a value indicating media stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttributeName.MediaStreamLabel">
            <summary>
            Gets a value indicating media stream label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttributeName.Label">
            <summary>
            Gets a value indicating label.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Sctp.MapAttribute">
            <summary>
             AB: Legacy attribute. To be removed when Firefox and Chrome stop using it.
             The sctpmap attribute maps from a port number (as used in an "m="
             line) to an encoding name denoting the payload format to be used on
             top of the SCTP association or the actual protocol running on top of it.
             Last appears in https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-06#page-6
             Has been replaced in subsequent drafts but is used in Firefox and Chrome for now.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.MapAttribute.Port">
            <summary>
            Gets or sets the SCTP port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.MapAttribute.SctpProtocol">
            <summary>
            Gets or sets the SCTP sub-protocol (association usage).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.MapAttribute.Streams">
            <summary>
            Gets the number of incoming streams.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.MapAttribute.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Sctp.PortAttribute" /> class.
            </summary>
            <param name="port">The SCTP port.</param>
            <param name="protocol">The protocol.</param>
            <param name="streams">The streams.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.MapAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Sctp.PortAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.MapAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Sctp.MaxMessageSizeAttribute">
            <summary>
            The attribute can be associated with an m- line to indicate
            the maximum message size (indicated in bytes) that an SCTP endpoint
            is willing to receive on the SCTP association associated with the m-
            line. Different attribute values can be used in each direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.MaxMessageSizeAttribute.MaxMessageSize">
            <summary>
            Gets or sets the maximum message size in bytes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.MaxMessageSizeAttribute.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Sctp.MaxMessageSizeAttribute"/> class.
            </summary>
            <param name="maxMessageSize">The maximum message size in bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.MaxMessageSizeAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Sctp.MaxMessageSizeAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.MaxMessageSizeAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Sctp.Media">
            <summary>
            An SDP media description with a transport protocol of "RTP/AVP" or "RTP/SAVP".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.Media.WebRtcDatachannelAssociationUsage">
            <summary>
            Gets the Association Usage name registry for WebRTC Datachannel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.Media.SctpTransportProtocol">
            <summary>
            Gets the protocol keyword for the SCTP data profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.Media.SctpDtlsTransportProtocol">
            <summary>
            Gets the protocol keyword for the DTLS over SCTP data profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.Media.DtlsSctpTransportProtocol">
            <summary>
            Gets the protocol keyword for the SCTP over DTLS data profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.Media.UdpDtlsSctpTransportProtocol">
            <summary>
            Gets the protocol keyword for the SCTP over DTLS over UDP data profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.Media.TcpDtlsSctpTransportProtocol">
            <summary>
            Gets the protocol keyword for the SCTP over DTLS over TCP data profile.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.Media.SupportsEncryption(System.String)">
            <summary>
            Returns a value indicating whther a given protocol supports encryption.
            </summary>
            <param name="protocol">Protocol keyword.</param>
            <returns>Value indicating whther a given protocol supports encryption.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.Media.IsSupported(System.String)">
            <summary>
            Returns a value indicating whther a given protocol is supported.
            </summary>
            <param name="protocol">Protocol keyword.</param>
            <returns>Value indicating whther a given protocol is supported.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.Media.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Sctp.Media" /> class.
            </summary>
            <param name="mediaType">The media type. See <see cref="T:FM.LiveSwitch.Sdp.MediaType" /> for possible values.</param>
            <param name="transportPort">The transport port.</param>
            <param name="transportProtocol">The transport protocol.</param>
            <param name="associationUsage">The association usage.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Sctp.PortAttribute">
            <summary>
            The attribute can be associated with an SDP media description (m-
            line) with a 'UDP/DTLS/SCTP' or a 'TCP/DTLS/SCTP' proto value, in
            which case the m- line port value indicates the port of the
            underlying transport-layer protocol (UDP or TCP), on which SCTP is
            carried, and the 'sctp-port' value indicates the SCTP port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.PortAttribute.Port">
            <summary>
            Gets or sets the SCTP port.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.PortAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Sctp.PortAttribute"/> class.
            </summary>
            <param name="port">The SCTP port.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.PortAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Sctp.PortAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.PortAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.SdpLanguageAttribute">
            <summary>
            This can be a session-level attribute or a media-level
            attribute.  As a session-level attribute, it specifies the
            language for the session description.  As a media-level
            attribute, it specifies the language for any media-level SDP
            information field associated with that media.  Multiple sdplang
            attributes can be provided either at session or media level if
            multiple languages in the session description or media use
            multiple languages, in which case the order of the attributes
            indicates the order of importance of the various languages in
            the session or media from most important to least important.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.SdpLanguageAttribute.LanguageTag">
            <summary>
            Gets or sets the language for either the session description
            (if used as a session-level attribute) or any media-level SDP
            information field associated with that media (if used as a
            media-level attribute).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SdpLanguageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SdpLanguageAttribute"/> class.
            </summary>
            <param name="languageTag">The language for either the session description
            (if used as a session-level attribute) or any media-level SDP
            information field associated with that media (if used as a
            media-level attribute).</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SdpLanguageAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SdpLanguageAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SdpLanguageAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.SendOnlyAttribute">
            <summary>
            This specifies that the tools should be started in send-only
            mode.  An example may be where a different unicast address is
            to be used for a traffic destination than for a traffic source.
            In such a case, two media descriptions may be used, one
            sendonly and one recvonly.  It can be either a session- or
            media-level attribute, but would normally only be used as a
            media attribute.  It is not dependent on charset.  Note that
            sendonly applies only to the media, and any associated control
            protocol (e.g., RTCP) SHOULD still be received and processed as
            normal.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SendOnlyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SendOnlyAttribute"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.SendOnlyAttribute.StreamDirection">
            <summary>
            Gets the stream direction.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SendOnlyAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SendOnlyAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SendOnlyAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.SendReceiveAttribute">
            <summary>
            This specifies that the tools should be started in send and
            receive mode.  This is necessary for interactive conferences
            with tools that default to receive-only mode.  It can be either
            a session or media-level attribute, and it is not dependent on
            charset.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SendReceiveAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SendReceiveAttribute"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.SendReceiveAttribute.StreamDirection">
            <summary>
            Gets the stream direction.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SendReceiveAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SendReceiveAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SendReceiveAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Setup">
            <summary>
            Defines valid SDP setups.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Setup.ActPass">
            <summary>
            Gets the SDP setup meaning "Active or Passive".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Setup.Active">
            <summary>
            Gets the SDP setup meaning "Active".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Setup.Passive">
            <summary>
            Gets the SDP setup meaning "Passive".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.SetupAttribute">
            <summary>
            The 'setup' attribute indicates which of the end points should
            initiate the TCP connection establishment (i.e., send the initial TCP
            SYN).  The 'setup' attribute is charset-independent and can be a
            session-level or a media-level attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.SetupAttribute.Setup">
            <summary>
            Gets or sets which end point should initiate the connection establishment. See <see cref="P:FM.LiveSwitch.Sdp.SetupAttribute.Setup"/> for possible values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SetupAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SetupAttribute"/> class.
            </summary>
            <param name="setup">Which end point should initiate the connection establishment. See <see cref="P:FM.LiveSwitch.Sdp.SetupAttribute.Setup"/> for possible values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SetupAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SetupAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SetupAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.TimeDescription">
            <summary>
            An SDP time description element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.TimeDescription.Timing">
            <summary>
            Gets or sets the start and stop time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.TimeDescription.RepeatTimes">
            <summary>
            Gets the array of repeat times.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeDescription.#ctor(FM.LiveSwitch.Sdp.Timing)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.TimeDescription"/> class.
            </summary>
            <param name="timing">The start and stop time.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeDescription.AddRepeatTime(FM.LiveSwitch.Sdp.RepeatTime)">
            <summary>
            Adds a repeat time.
            </summary>
            <param name="repeatTime">The repeat time to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeDescription.RemoveRepeatTime(FM.LiveSwitch.Sdp.RepeatTime)">
            <summary>
            Removes a repeat time.
            </summary>
            <param name="repeatTime">The repeat time to remove.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeDescription.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeDescription.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.TimeDescription"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.TimeZone">
            <summary>
            An SDP time zone element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.TimeZone.AdjustmentTime">
            <summary>
            Gets or sets the time that a time zone adjustment happens (network time protocol).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.TimeZone.Offset">
            <summary>
            Gets or sets the offset from the time when the session was first scheduled.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZone.#ctor(System.Double,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.TimeZone"/> class.
            </summary>
            <param name="adjustmentTime">The time that a time zone adjustment happens (network time protocol).</param>
            <param name="offset">The offset from the time when the session was first scheduled.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZone.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZone.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.TimeZone"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.TimeZones">
            <summary>
            An SDP time zones element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.TimeZones.Values">
            <summary>
            Gets the array of time zone adjustments.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZones.#ctor(FM.LiveSwitch.Sdp.TimeZone[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.TimeZones" /> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZones.AddTimeZone(FM.LiveSwitch.Sdp.TimeZone)">
            <summary>
            Adds a time zone adjustment.
            </summary>
            <param name="value">The time zone adjustment to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZones.RemoveTimeZone(FM.LiveSwitch.Sdp.TimeZone)">
            <summary>
            Removes a time zone adjustment.
            </summary>
            <param name="value">The time zone adjustment to remove.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZones.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZones.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.TimeZones"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Timing">
            <summary>
            An SDP timing element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Timing.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Timing.StopTime">
            <summary>
            Gets or sets the stop time.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Timing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Timing"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Timing.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Timing"/> class.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="stopTime">The stop time.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Timing.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Timing.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.Timing"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.ToolAttribute">
            <summary>
            This gives the name and version number of the tool used to
            create the session description.  It is a session-level
            attribute, and it is not dependent on charset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ToolAttribute.Tool">
            <summary>
            Gets or sets the name and version number of the
            tool used to create the session description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ToolAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ToolAttribute"/> class.
            </summary>
            <param name="tool">The name and version number of the
            tool used to create the session description.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ToolAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ToolAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ToolAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.UdpMedia">
            <summary>
            An SDP media description with a transport protocol of "udp".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.UdpMedia.UdpTransportProtocol">
            <summary>
            Gets the protocol keyword for UDP.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.UdpMedia.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.UdpMedia"/> class.
            </summary>
            <param name="mediaType">The media type. See <see cref="T:FM.LiveSwitch.Sdp.MediaType"/> for possible values.</param>
            <param name="transportPort">The transport port.</param>
            <param name="formatDescription">The format description.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.UnknownAttribute">
            <summary>
            This attribute is used to encapsulate unrecognized SDP attributes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.UnknownAttribute.Name">
            <summary>
            Gets or sets the attribute name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.UnknownAttribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.UnknownAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.UnknownAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.UnknownAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.UriEncryptionKey">
            <summary>
            An SDP encryption key with a method of "uri".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.UriEncryptionKey.Uri">
            <summary>
            Gets or sets the URI referring to the data containing the key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.UriEncryptionKey.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.UriEncryptionKey"/> class.
            </summary>
            <param name="uri">The URI referring to the data containing the key.</param>
        </member>
        <member name="T:FM.LiveSwitch.SessionDescription">
            <summary>
            A session description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.SessionId">
            <summary>
            Gets the session id of the remote description, if remote description is set. Returns null otherwise.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.SessionVersion">
            <summary>
            Gets the version of the remote description, if remote description is set. Returns null otherwise.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.SdpMessage">
            <summary>
            Gets or sets the SDP message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.TieBreaker">
            <summary>
            Gets or sets the tie breaker in case of a role conflict.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.IsOffer">
            <summary>
            Gets a value indicating whether this instance is offer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.HasAudio">
            <summary>
            Gets a value indicating whether an audio stream is described.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.HasVideo">
            <summary>
            Gets a value indicating whether a video stream is described.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.HasData">
            <summary>
            Gets a value indicating whether a data stream is described.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescription.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.SessionDescription.ToJson(FM.LiveSwitch.SessionDescription)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="sessionDescription">The session description.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescription.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="sessionDescriptionJson">The JSON to deserialize.</param>
            <returns>The deserialized session description.</returns>
        </member>
        <member name="T:FM.LiveSwitch.SessionDescriptionType">
            <summary>
            A session description type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SessionDescriptionType.Offer">
            <summary>
            Indicates an offer.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SessionDescriptionType.Answer">
            <summary>
            Indicates an answer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Size">
            <summary>
            A size (width and height).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Size.Empty">
            <summary>
            Gets the empty size (0x0).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Size.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Size.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Size.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Size"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Size"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FM.LiveSwitch.Size.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.ToJson(FM.LiveSwitch.Size)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="size">The size.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="sizeJson">The JSON to deserialize.</param>
            <returns>The deserialized size.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.ToString">
            <summary>
            Returns a string that represents this instance using format "{width}x{height}".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Size.IsEquivalent(FM.LiveSwitch.Size)">
            <summary>
            Determines whether the specified size is equivalent.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:FM.LiveSwitch.Size.IsEquivalent(FM.LiveSwitch.Size,FM.LiveSwitch.Size)">
            <summary>
            Determines whether the two sizes are equivalent.
            </summary>
            <param name="size1">The first size.</param>
            <param name="size2">The second size.</param>
        </member>
        <member name="M:FM.LiveSwitch.Size.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equivalent to the current size.
            Does not require the object pointers to match.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equivalent to the current object; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.Equals(FM.LiveSwitch.Size)">
            <summary>
            Determines whether the specified size is equivalent to the current size.
            Does not require the object pointers to match.
            </summary>
            <param name="size">The size to compare with the current object.</param>
            <returns>true if the specified size is equivalent to the current size; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.op_Equality(FM.LiveSwitch.Size,FM.LiveSwitch.Size)">
            <summary>
            Determines whether the specified size is equivalent to the current size.
            Does not require the object pointers to match.
            </summary>
            <param name="size1">The first size.</param>
            <param name="size2">The second size.</param>
            <returns>true if the specified size is equivalent to the current size; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.op_Inequality(FM.LiveSwitch.Size,FM.LiveSwitch.Size)">
            <summary>
            Determines whether the specified size is NOT equivalent to the current size.
            </summary>
            <param name="size1">The first size.</param>
            <param name="size2">The second size.</param>
            <returns>true if the specified size is NOT equivalent to the current size; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.ToStruct">
            <summary>
            Converts this <see cref="T:FM.LiveSwitch.Size"/> to a System.Drawing.Size.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Size.ToStruct(FM.LiveSwitch.Size)">
            <summary>
            Converts a <see cref="T:FM.LiveSwitch.Size"/> to a System.Drawing.Size.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Size.FromStruct(System.Drawing.Size)">
            <summary>
            Converts a System.Drawing.Size to a <see cref="T:FM.LiveSwitch.Size"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Size.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified size and returns an indication of their relative values.
            </summary>
            <param name="size">A size to compare.</param>
            <returns> A signed number indicating the relative values of this instance and size.</returns>
        </member>
        <member name="T:FM.LiveSwitch.StreamDirection">
            <summary>
            A stream direction.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamDirection.SendReceive">
            <summary>
            Indicates a stream that can send and can receive.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamDirection.SendOnly">
            <summary>
            Indicates a stream that can send.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamDirection.ReceiveOnly">
            <summary>
            Indicates a stream that can receive.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamDirection.Inactive">
            <summary>
            Indicates a stream that cannot send or receive.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamDirection.Unset">
            <summary>
            Indicates that a stream direction has not been set.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.StreamDirectionHelper">
            <summary>
            Class containing utility methods to manipulate <see cref="T:FM.LiveSwitch.StreamDirection"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.DirectionToString(FM.LiveSwitch.StreamDirection)">
            <summary>
            Obtains the string representation of <see cref="T:FM.LiveSwitch.StreamDirection"/>.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The direction string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.DirectionFromString(System.String)">
            <summary>
            Converts string representations of stream directions to <see cref="T:FM.LiveSwitch.StreamDirection"/>.
            </summary>
            <param name="directionString">The direction string.</param>
            <returns>The direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.IsSendDisabled(System.String)">
            <summary>
            Checks the send flag.
            </summary>
            <param name="directionString">The direction string.</param>
            <returns>The send flag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.IsSendDisabled(FM.LiveSwitch.StreamDirection)">
            <summary>
            Checks the send flag.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The send flag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.SetSendDisabled(System.String,System.Boolean)">
            <summary>
            Sets the send flag.
            </summary>
            <param name="directionString">The direction string.</param>
            <param name="disabled">Whether to disable the send flag.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.SetSendDisabled(FM.LiveSwitch.StreamDirection,System.Boolean)">
            <summary>
            Sets the send flag.
            </summary>
            <param name="direction">The direction.</param>
            <param name="disabled">Whether to disable the send flag.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.IsReceiveDisabled(System.String)">
            <summary>
            Checks the receive flag.
            </summary>
            <param name="directionString">The direction string.</param>
            <returns>The receive flag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.IsReceiveDisabled(FM.LiveSwitch.StreamDirection)">
            <summary>
            Checks the receive flag.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The receive flag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.SetReceiveDisabled(System.String,System.Boolean)">
            <summary>
            Sets the receive flag.
            </summary>
            <param name="directionString">The direction string.</param>
            <param name="disabled">Whether to disable the receive flag.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.SetReceiveDisabled(FM.LiveSwitch.StreamDirection,System.Boolean)">
            <summary>
            Sets the receive flag.
            </summary>
            <param name="direction">The direction.</param>
            <param name="disabled">Whether to disable the receive flag.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.ToggleSend(System.String)">
            <summary>
            Toggles the send flag.
            </summary>
            <param name="directionString">The direction string.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.ToggleSend(FM.LiveSwitch.StreamDirection)">
            <summary>
            Toggles the send flag.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.ToggleReceive(System.String)">
            <summary>
            Toggles the receive flag.
            </summary>
            <param name="directionString">The direction string.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.ToggleReceive(FM.LiveSwitch.StreamDirection)">
            <summary>
            Toggles the receive flag.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="T:FM.LiveSwitch.StreamInfo">
            <summary>
            Stream information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamInfo.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamInfo.TransportId">
            <summary>
            Gets or sets the transport id.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.StreamState">
            <summary>
            The state of a stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.New">
            <summary>
            Indicates that the stream is new and has not been started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.Initializing">
            <summary>
            Indicates that the stream is being initialized but no connecting attempts have been made.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.Connecting">
            <summary>
            Indicates that the stream is currently connecting.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.Connected">
            <summary>
            Indicates that the stream is currently connected.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.Failing">
            <summary>
            Indicates that the stream has encountered an error and is cleaning up.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.Failed">
            <summary>
            Indicates that the stream has encountered an error and has cleaned up.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.Closing">
            <summary>
            Indicates that the stream has been instructed to close and is cleaning up.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.Closed">
            <summary>
            Indicates that the stream has been instructed to close and has cleaned up.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.StreamStats">
            <summary>
            Stream stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamStats.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamStats.Transport">
            <summary>
            Gets the transport's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamStats.IsRelayed">
            <summary>
            Gets whether the transport's active candidate pair has a relayed candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamStats.IsReflexive">
            <summary>
            Gets whether the transport's active candidate pair has a reflexive candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamStats.IsHost">
            <summary>
            Gets whether the transport's active candidate pair has a host candidate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.StreamType">
            <summary>
            A stream type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamType.Audio">
            <summary>
            Indicates an audio stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamType.Video">
            <summary>
            Indicates a video stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamType.Application">
            <summary>
            Indicates an application stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamType.Message">
            <summary>
            Indicates a message stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamType.Text">
            <summary>
            Indicates a text stream.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.TransportInfo">
            <summary>
            Transport Information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportInfo.LocalCertificate">
            <summary>
            Gets or sets the local certificate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportInfo.RemoteCertificate">
            <summary>
            Gets or sets the remote certificate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportInfo.LocalCandidates">
            <summary>
            Gets or sets the local candidates.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportInfo.RemoteCandidates">
            <summary>
            Gets or sets the remote candidates.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportInfo.CandidatePairs">
            <summary>
            Gets or sets the candidate pairs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportInfo.ActiveCandidatePairId">
            <summary>
            Gets or sets the active candidate pair identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportInfo.Report">
            <summary>
            Gets or sets the transport report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TransportInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.ToJson(FM.LiveSwitch.TransportInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="transportReport">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a TransportReport.
            </summary>
            <param name="transportReportJson">The serialized Json.</param>
            <returns>The deserialized TransportReport.</returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.ToJsonArray(FM.LiveSwitch.TransportInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="transportInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="transportInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.TransportStats">
            <summary>
            Transport stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.BytesSent">
            <summary>
            Gets or sets the number of bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.BytesReceived">
            <summary>
            Gets or sets the number of bytes received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.RtcpTransport">
            <summary>
            Gets or sets the RTCP transport's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.LocalCandidates">
            <summary>
            Gets or sets the local candidates' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.RemoteCandidates">
            <summary>
            Gets or sets the remote candidates' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.CandidatePairs">
            <summary>
            Gets or sets the candidate pairs' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.ActiveCandidatePair">
            <summary>
            Gets or sets the active candidate pair's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.LocalCertificate">
            <summary>
            Gets or sets the local certificate's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.RemoteCertificate">
            <summary>
            Gets or sets the remote certificate's stats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.GetLocalCandidate(System.String)">
            <summary>
            Gets a local candidate by its identifier.
            </summary>
            <param name="candidateId">The candidate identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.GetRemoteCandidate(System.String)">
            <summary>
            Gets a remote candidate by its identifier.
            </summary>
            <param name="candidateId">The candidate identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.GetCandidatePair(System.String)">
            <summary>
            Gets a candidate pair by its identifier.
            </summary>
            <param name="candidatePairId">The candidate pair identifier.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.IsRelayed">
            <summary>
            Gets whether the active candidate pair has a relayed candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.IsReflexive">
            <summary>
            Gets whether the active candidate pair has a reflexive candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.IsHost">
            <summary>
            Gets whether the active candidate pair has a host candidate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.ToJson(FM.LiveSwitch.TransportStats)">
            <summary>
            Serializes transport stats to JSON.
            </summary>
            <param name="transport">The transport's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.FromJson(System.String)">
            <summary>
            Derializes transport stats from JSON.
            </summary>
            <param name="transportJson">The transport's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.Utility">
            <summary>
            Utility methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Utility.FirstOrDefault``1(``0[])">
            <summary>
            Gets the first element in the array or the default
            value if the array is null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.FirstOrDefault``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the first element in the list or the default
            value if the list is null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.LastOrDefault``1(``0[])">
            <summary>
            Gets the last element in the array or the default
            value if the array is null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.LastOrDefault``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the last element in the list or the default
            value if the list is null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.SingleOrDefault``1(``0[])">
            <summary>
            Gets the only element in the array or the default value
            if the array is null or does not have exactly one value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.SingleOrDefault``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the only element in the list or the default value
            if the list is null or does not have exactly one value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.TreeSearch``1(``0,FM.LiveSwitch.Function1{``0,``0[]},FM.LiveSwitch.Action1{``0})">
            <summary>
            Enumerates over all nodes in the tree, invoking the callback for each one.
            </summary>
            <typeparam name="T">The generic to search.</typeparam>
            <param name="root">The root.</param>
            <param name="childrenCallback">The children callback.</param>
            <param name="nodeCallback">The node callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.Utility.TreeFindLeaves``1(``0,FM.LiveSwitch.Function1{``0,``0[]},FM.LiveSwitch.Action1{``0})">
            <summary>
            Enumerates over all nodes in the tree, invoking the callback for each one.
            </summary>
            <typeparam name="T">The generic to search.</typeparam>
            <param name="root">The root.</param>
            <param name="childrenCallback">The children callback.</param>
            <param name="nodeCallback">The node callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.Utility.Clone``1(System.Collections.Generic.List{``0})">
            <summary>
            Clones the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.ToList``1(``0[])">
            <summary>
            Converts an array to a list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.FormatDoubleAsPercent(System.Double,System.Int32)">
            <summary>
            Formats a double as a percentage string.
            </summary>
            <param name="value">The value.</param>
            <param name="decimalPlaces">The number of decimal places to include.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.GenerateSynchronizationSource">
            <summary>
            Generates a synchronization source.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Utility.GetRtpSequenceNumberDelta(System.Int32,System.Int32)">
            <summary>
            Retrieves the difference between two RTP sequence numbers
            while accounting for overflow rollover.
            </summary>
            <param name="rtpSequenceNumber">The current RTP sequence number.</param>
            <param name="lastRtpSequenceNumber">The last (previous) RTP sequence number.</param>
            <returns>The difference between the two RTP sequence numbers.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.GetRtpTimestampDelta(System.Int64,System.Int64)">
            <summary>
            Retrieves the difference between two RTP timestamps
            while accounting for overflow rollover.
            </summary>
            <param name="rtpTimestamp">The current RTP timestamp.</param>
            <param name="lastRtpTimestamp">The last (previous) RTP timestamp.</param>
            <returns>The difference between the two RTP timestamps.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.GenerateTieBreaker">
            <summary>
            Generates a tie-breaker.
            Obsolete. Alias for <see cref="M:FM.LiveSwitch.Utility.GenerateId"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.GenerateId">
            <summary>
            Generates a unique identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.Splice``1(``0[],System.Int32,System.Int32,FM.LiveSwitch.Function1{System.Int32,``0[]})">
            <summary>
            Splices an array.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="array">The array.</param>
            <param name="index">The splice index.</param>
            <param name="removeCount">The number of items to remove.</param>
            <param name="createArray">A function that creates an array of the given size.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.Splice``1(``0[],System.Int32,``0[],FM.LiveSwitch.Function1{System.Int32,``0[]})">
            <summary>
            Splices an array.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="array">The array.</param>
            <param name="index">The splice index.</param>
            <param name="addItems">The items to add.</param>
            <param name="createArray">A function that creates an array of the given size.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.Splice``1(``0[],System.Int32,System.Int32,``0[],FM.LiveSwitch.Function1{System.Int32,``0[]})">
            <summary>
            Splices an array.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="array">The array.</param>
            <param name="index">The splice index.</param>
            <param name="removeCount">The number of items to remove.</param>
            <param name="addItems">The items to add.</param>
            <param name="createArray">A function that creates an array of the given size.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.ToLongArray(System.Collections.Generic.List{System.Int64})">
            <summary>
            Converts a list of long values to an array of long values.
            </summary>
            <param name="longList">A list of long values.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.ToIntArray(System.Collections.Generic.List{System.Int32})">
            <summary>
            Converts a list of int values to an array of int values.
            </summary>
            <param name="intList">A list of int values.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.ToStringArray(System.Collections.Generic.List{System.String})">
            <summary>
            Converts a list of string values to an array of string values.
            </summary>
            <param name="stringList">A list of string values.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.CloneIntArray(System.Int32[])">
            <summary>
            Clones an array of int values.
            </summary>
            <param name="intArray">An array of int values.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.CloneLongArray(System.Int64[])">
            <summary>
            Clones an array of long values.
            </summary>
            <param name="longArray">An array of long values.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.CloneStringArray(System.String[])">
            <summary>
            Clones an array of string values.
            </summary>
            <param name="stringArray">An array of string values.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.ScreenConfig">
            <summary>
            A screen configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.Region">
            <summary>
            Gets or sets the region.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.Origin">
            <summary>
            Gets or sets the region origin.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.X">
            <summary>
            Gets the region origin X coordinate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.Y">
            <summary>
            Gets the region origin Y coordinate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.Size">
            <summary>
            Gets or sets the region size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.Width">
            <summary>
            Gets the region size width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.Height">
            <summary>
            Gets the region size height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.FrameRate">
            <summary>
            Gets or sets the frame-rate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScreenConfig" /> class.
            </summary>
            <param name="x">The region origin X coordinate.</param>
            <param name="y">The region origin Y coordinate.</param>
            <param name="width">The region size width.</param>
            <param name="height">The region size height.</param>
            <param name="frameRate">The frame rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScreenConfig" /> class.
            </summary>
            <param name="x">The region origin X coordinate.</param>
            <param name="y">The region origin Y coordinate.</param>
            <param name="width">The region size width.</param>
            <param name="height">The region size height.</param>
            <param name="frameRate">The frame rate.</param>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.#ctor(FM.LiveSwitch.Point,FM.LiveSwitch.Size,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScreenConfig" /> class.
            </summary>
            <param name="origin">The region origin.</param>
            <param name="size">The region size.</param>
            <param name="frameRate">The frame rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.#ctor(FM.LiveSwitch.Point,FM.LiveSwitch.Size,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScreenConfig" /> class.
            </summary>
            <param name="origin">The region origin.</param>
            <param name="size">The region size.</param>
            <param name="frameRate">The frame rate.</param>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.#ctor(FM.LiveSwitch.Rectangle,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScreenConfig" /> class.
            </summary>
            <param name="region">The region.</param>
            <param name="frameRate">The frame rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.#ctor(FM.LiveSwitch.Rectangle,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScreenConfig" /> class.
            </summary>
            <param name="region">The region.</param>
            <param name="frameRate">The frame rate.</param>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.IsEquivalent(FM.LiveSwitch.ScreenConfig)">
            <summary>
            Determines whether the specified configuration is equivalent.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="T:FM.LiveSwitch.VideoConfig">
            <summary>
            A video configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoConfig.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoConfig.Width">
            <summary>
            Gets the size width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoConfig.Height">
            <summary>
            Gets the size height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoConfig.FrameRate">
            <summary>
            Gets or sets the frame-rate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoConfig.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoConfig" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="frameRate">The frame rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoConfig.#ctor(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoConfig" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="frameRate">The frame rate.</param>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoConfig.#ctor(FM.LiveSwitch.Size,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoConfig" /> class.
            </summary>
            <param name="size">The size.</param>
            <param name="frameRate">The frame rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoConfig.#ctor(FM.LiveSwitch.Size,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoConfig" /> class.
            </summary>
            <param name="size">The size.</param>
            <param name="frameRate">The frame rate.</param>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoConfig.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoConfig.IsEquivalent(FM.LiveSwitch.VideoConfig)">
            <summary>
            Determines whether the specified configuration is equivalent.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="P:FM.LiveSwitch.VideoConfig.FrameDuration">
            <summary>
            Gets the frame duration in milliseconds.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.AecContext">
            <summary>
            An acoustic echo cancellation context.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AecContext.Config">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AecContext.Processor">
            <summary>
            Gets the echo cancellation processor.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AecContext.OutputMixer">
            <summary>
            Gets the echo cancellation output mixer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AecContext.OutputMixerSink">
            <summary>
            Gets the echo cancellation output mixer sink.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AecContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AecContext"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AecContext.CreateProcessor">
            <summary>
            Creates an echo cancellation processor.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.AecContext.CreateOutputMixer(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates an echo cancellation output mixer.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AecContext.CreateOutputMixerSink(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates an echo cancellation output mixer sink.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AecContext.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.AecPipe">
            <summary>
            An acoustic echo cancellation (AEC) pipe.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AecPipe.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AecPipe" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:FM.LiveSwitch.AecPipe.Speaker">
            <summary>
            Gets or sets the speaker sink.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AecPipe.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AecPipe.ProcessSpeakerFrame(FM.LiveSwitch.AudioFrame)">
            <summary>
            Processes a speaker frame.
            </summary>
            <param name="frame">The frame.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Aes.Counter">
            <summary>
            AES counter implementation.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Aes.Counter.Clear">
            <summary>
            Clears an instance of the <see cref="T:FM.LiveSwitch.Aes.Counter"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Aes.Counter.#ctor(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Aes.Counter"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
        </member>
        <member name="M:FM.LiveSwitch.Aes.Counter.#ctor(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Aes.Counter"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <param name="maxOutputSize">The maximum expected output size.</param>
        </member>
        <member name="M:FM.LiveSwitch.Aes.Counter.Generate(System.Byte,System.Int32)">
            <summary>
            Generates a value for the specified label.
            </summary>
            <param name="label">The label.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Aes.Counter.Encrypt(FM.LiveSwitch.DataBuffer,System.Int64,System.Int64)">
            <summary>
            Encrypts a block of data.
            </summary>
            <param name="buffer">The buffer to encrypt.</param>
            <param name="ssrc">The SSRC of the stream.</param>
            <param name="packetIndex">The packet index.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Aes.Counter.Encrypt(FM.LiveSwitch.DataBuffer,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Encrypts a block of data.
            </summary>
            <param name="buffer">The buffer to encrypt.</param>
            <param name="ssrc">The SSRC of the stream.</param>
            <param name="packetIndex">The packet index.</param>
            <param name="usePool">Use the data buffer pool.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Aes.Counter.Decrypt(FM.LiveSwitch.DataBuffer,System.Int64,System.Int64)">
            <summary>
            Decrypts a block of data.
            </summary>
            <param name="buffer">The buffer to decrypt.</param>
            <param name="ssrc">The SSRC of the stream.</param>
            <param name="packetIndex">The packet index.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Aes.Counter.Decrypt(FM.LiveSwitch.DataBuffer,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Decrypts a block of data.
            </summary>
            <param name="buffer">The buffer to decrypt.</param>
            <param name="ssrc">The SSRC of the stream.</param>
            <param name="packetIndex">The packet index.</param>
            <param name="usePool">Use the data buffer pool.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Aes.CounterContext">
            <summary>
            Context for <see cref="T:FM.LiveSwitch.Aes.Counter"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Aes.CounterContext.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Aes.CounterContext"/> class with default parameters
            (block size of cryptographic operation = 128 bits, mode of operation = ECB, no padding)
            </summary>
            <param name="key">The secret key for the symmetric algorithm.</param>
        </member>
        <member name="M:FM.LiveSwitch.Aes.CounterContext.Clear">
            <summary>
            Releases all the resources associated with the symmetric algorithm class
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Aes.CounterContext.GenerateKeystream(FM.LiveSwitch.DataBuffer,System.Int32,System.Byte[])">
            <summary>
            Generates AES keystream data.
            </summary>
            <param name="output">The output buffer to write to.</param>
            <param name="length">The number of bytes to write.</param>
            <param name="counter">The counter.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.AfbControlFrame">
            <summary>
            An Application Layer Feedback control (RFC 4585).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AfbControlFrame.RegisteredFeedbackMessageType">
            <summary>
            Gets the type of the registered feedback message.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AfbControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AfbControlFrame"/> class.
            <param name="buffer">The backing data buffer.</param>
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AfbControlFrame.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AfbControlFrame" /> class.
            </summary>
            <param name="senderSyncronizationSource">The sender syncronization source.</param>
            <param name="mediaSynchronizationSource">The media synchronization source.</param>
        </member>
        <member name="M:FM.LiveSwitch.AfbControlFrame.#ctor(System.Int64,System.Int64,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AfbControlFrame" /> class.
            </summary>
            <param name="senderSyncronizationSource">The sender syncronization source.</param>
            <param name="mediaSynchronizationSource">The media synchronization source.</param>
            <param name="feedbackControlInformation">The feedback control information.</param>
        </member>
        <member name="T:FM.LiveSwitch.AppControlFrame">
            <summary>
            An RTCP APP packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AppControlFrame.RegisteredPayloadType">
            <summary>
            Gets the application-specific payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AppControlFrame.FixedPayloadHeaderLength">
            <summary>
            Gets the length of the fixed payload header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AppControlFrame.SubType">
            <summary>
            Gets or sets the subtype to allow a set of APP packets to be defined
            under one unique name, or for any application-dependent data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AppControlFrame.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AppControlFrame.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AppControlFrame.DataPayloadOffset">
            <summary>
            Gets or sets the offset of the <see cref="P:FM.LiveSwitch.AppControlFrame.Data"/> in the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AppControlFrame.DataLength">
            <summary>
            Gets the length of the <see cref="P:FM.LiveSwitch.AppControlFrame.Data"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AppControlFrame.Data">
            <summary>
            Gets or sets optional application-dependent data.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AppControlFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AppControlFrame"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AppControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AppControlFrame"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.AppControlFrame.#ctor(System.Int32,System.Int64,System.String,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AppControlFrame"/> class.
            </summary>
            <param name="subType">Type of the sub.</param>
            <param name="synchronizationSource">The SSRC.</param>
            <param name="name">The name.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:FM.LiveSwitch.AudioBranch">
            <summary>
            An audio branch.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioBranch.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioBranch.#ctor(FM.LiveSwitch.AudioTrack[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioBranch" /> class.
            </summary>
            <param name="tracks">The tracks.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioBranch.ArrayFromTracks(System.Collections.Generic.List{FM.LiveSwitch.AudioTrack})">
            <summary>
            Creates an array of tracks from a list of tracks.
            </summary>
            <param name="tracks">The list of tracks.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.AudioBuffer">
            <summary>
            An audio buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioBuffer.Gain">
            <summary>
            Gets or sets the gain.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioBuffer.GeneratedByPlc">
            <summary>
            Gets or sets a value indicating whether this buffer contains
            data generated by packet loss concealment (PLC).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.ApplyGain(System.Double)">
            <summary>
            Applies gain to this instance.
            </summary>
            <param name="gain">The gain.</param>
        </member>
        <member name="P:FM.LiveSwitch.AudioBuffer.IsPcm">
            <summary>
            Gets a value indicating whether this buffer has raw PCM audio.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioBuffer.IsPcmu">
            <summary>
            Gets a value indicating whether this buffer has PCMU audio.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioBuffer.IsPcma">
            <summary>
            Gets a value indicating whether this buffer has PCMA audio.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioBuffer.IsOpus">
            <summary>
            Gets a value indicating whether this buffer has Opus audio.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioBuffer.IsDtmf">
            <summary>
            Gets a value indicating whether this buffer has DTMF data.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.CalculateLevel">
            <summary>
            Calculates the level of this instance.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.AudioBuffer.IsMuted">
            <summary>
            Gets a value indicating whether this instance has been muted.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.Mute">
            <summary>
            Mutes this instance. This is a one-way operation that clears
            the underlying data buffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioBuffer" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.#ctor(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioBuffer" /> class.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.#ctor(FM.LiveSwitch.DataBuffer[],FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioBuffer" /> class.
            </summary>
            <param name="dataBuffers">The data buffers.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.Clone">
            <summary>
            Clones this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.GetMinimumBufferLength(System.Int32,FM.LiveSwitch.AudioConfig)">
            <summary>
            Gets the minimum data buffer length for a given duration and configuration.
            </summary>
            <param name="duration">The duration.</param>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.GetMinimumBufferLength(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the minimum data buffer length for a given duration, clock rate, and channel count.
            </summary>
            <param name="duration">The duration.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.CreateSilence(System.Int32,FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a silent audio buffer with the specified duration and configuration.
            </summary>
            <param name="duration">The duration in milliseconds.</param>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.CreateSilence(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a silent audio buffer with the specified duration, clock rate, and channel count.
            </summary>
            <param name="duration">The duration in milliseconds.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.CreateSound(System.Int64,System.Int32,FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates an audio buffer with the specified duration and configuration, a frequency of 440Hz, and an amplitude of 16,384.
            </summary>
            <param name="timestamp">The starting time of this buffer relative to the clock rate.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.CreateSound(System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an audio buffer with the specified duration, clock rate, and channel count, a frequency of 440Hz, and an amplitude of 16,384.
            </summary>
            <param name="timestamp">The starting time of this buffer relative to the clock rate.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.CreateSound(System.Int64,System.Int32,FM.LiveSwitch.AudioConfig,System.Single)">
            <summary>
            Creates a silent audio buffer with the specified duration, configuration, and frequency, and an amplitude of 16,384.
            </summary>
            <param name="timestamp">The starting time of this buffer relative to the clock rate.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="config">The configuration.</param>
            <param name="frequency">The frequency.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.CreateSound(System.Int64,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a silent audio buffer with the specified duration, clock rate, channel count, and frequency, and an amplitude of 16,384.
            </summary>
            <param name="timestamp">The starting time of this buffer relative to the clock rate.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
            <param name="frequency">The frequency.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.CreateSound(System.Int64,System.Int32,FM.LiveSwitch.AudioConfig,System.Single,System.Int32)">
            <summary>
            Creates a silent audio buffer with the specified duration, configuration, frequency, and amplitude.
            </summary>
            <param name="timestamp">The starting time of this buffer relative to the clock rate.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="config">The configuration.</param>
            <param name="frequency">The frequency.</param>
            <param name="amplitude">The amplitude.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.CreateSound(System.Int64,System.Int32,System.Int32,System.Int32,System.Single,System.Int32)">
            <summary>
            Creates a silent audio buffer with the specified duration, clock rate, channel count, frequency, and amplitude.
            </summary>
            <param name="timestamp">The starting time of this buffer relative to the clock rate.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
            <param name="frequency">The frequency.</param>
            <param name="amplitude">The amplitude.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.ToJson(FM.LiveSwitch.AudioBuffer)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="audioBuffer">The audio buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="audioBufferJson">The audio buffer JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.ToJsonArray(FM.LiveSwitch.AudioBuffer[])">
            <summary>
            Serializes an array of instances to JSON.
            </summary>
            <param name="audioBuffers">The audio buffers.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioBuffer.FromJsonArray(System.String)">
            <summary>
            Deserializes an array of instances from JSON.
            </summary>
            <param name="audioBuffersJson">The audio buffers JSON.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.AudioBufferCollection">
            <summary>
            An audio buffer collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioBufferCollection.ArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.AudioBuffer})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioBufferCollection.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.AudioClock">
            <summary>
            A clock used to raise audio data in appropriate intervals.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioClock.ClockRate">
            <summary>
            Gets the audio's clock rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioClock.ChannelCount">
            <summary>
            Gets the audio's channel count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioClock.BlockAlign">
            <summary>
            Gets the BlockAlign.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioClock.Running">
            <summary>
            Gets whether the clock is running.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioClock.StrictDuration">
            <summary>
            Gets or sets the strict duration, in milliseconds.
            If 0, then variable duration is used. If greater
            than zero, then the clock will only raise frames
            of that duration.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioClock.#ctor(System.Int32,System.Int32,FM.LiveSwitch.Action2{System.Int32,System.Int32})">
            <summary>
            Creates a new AudioClock.
            </summary>
            <param name="clockRate">The clock rate to use.</param>
            <param name="channelCount">How many channels the audio will have.</param>
            <param name="raiseCallback">The callback that will be invoked when data is needed.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioClock.#ctor(System.Int32,System.Int32,System.Int32,FM.LiveSwitch.Action2{System.Int32,System.Int32})">
            <summary>
            Creates a new AudioClock.
            </summary>
            <param name="clockRate">The clock rate to use.</param>
            <param name="channelCount">How many channels the audio will have.</param>
            <param name="blockAlign">The block align of the source data.</param>
            <param name="raiseCallback">The callback that will be invoked when data is needed.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioClock.Start">
            <summary>
            Starts the audio clock.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioClock.Stop">
            <summary>
            Stops the audio clock.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.AudioDecoder">
            <summary>
            An audio decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioDecoder.DisablePlc">
            <summary>
            Gets or sets a value indicating whether to disable
            packet loss concealment (PLC).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioDecoder.MinInputBitrate">
            <summary>
            Gets the minimum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            Returns -1 by default.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioDecoder.MaxInputBitrate">
            <summary>
            Gets the maximum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            Returns -1 by default.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioDecoder.MinOutputBitrate">
            <summary>
            Gets the minimum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            Returns -1 by default.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioDecoder.MaxOutputBitrate">
            <summary>
            Gets the maximum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            Returns -1 by default.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioDecoder.#ctor(FM.LiveSwitch.AudioFormat,FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioDecoder" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="P:FM.LiveSwitch.AudioDecoder.MissingDuration">
            <summary>
            Gets or sets the number of milliseconds missing in the stream between
            the last frame processed and the current frame. This value is
            updated constantly, just before a frame is processed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioDecoder.ProcessFrame(FM.LiveSwitch.AudioFrame)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioDecoder.RaiseFrame(FM.LiveSwitch.AudioFrame)">
            <summary>
            Raises a frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioDecoder.GeneratePlc(System.Int32)">
            <summary>
            Generates a PLC buffer. This method
            uses the <see cref="T:FM.LiveSwitch.DataBufferPool"/>
            so the returned value MUST be freed.
            </summary>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.AudioDecoder.FramesDecoded">
            <summary>
            Gets the number of decoded frames.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioDecoder.DoProcessTrackStatsFromInput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Process track stats from an input.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="T:FM.LiveSwitch.AudioDepacketizer">
            <summary>
            An audio depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioDepacketizer.AllowDiagnosticTimer">
            <summary>
            Gets whether this pipe is allowed to be timed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioDepacketizer.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioDepacketizer"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioDepacketizer.#ctor(FM.LiveSwitch.AudioFormat,FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioDepacketizer" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioDepacketizer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioDepacketizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioDepacketizer.RaiseFrame(FM.LiveSwitch.AudioFrame)">
            <summary>
            Raises the frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="P:FM.LiveSwitch.AudioDepacketizer.FramesReceived">
            <summary>
            Gets the number of received frames.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioDepacketizer.DoProcessTrackStatsFromInput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Process track stats from an input.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="T:FM.LiveSwitch.AudioEncoder">
            <summary>
            An audio encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioEncoder.MinCodecBitrate">
            <summary>
            Gets the minimum possible codec bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioEncoder.MaxCodecBitrate">
            <summary>
            Gets the maximum possible codec bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioEncoder.StaticOutputBitrate">
            <summary>
            Gets or sets whether <see cref="P:FM.LiveSwitch.AudioEncoder.MinOutputBitrate"/> and
            <see cref="P:FM.LiveSwitch.AudioEncoder.MaxOutputBitrate"/> should return
            <see cref="P:FM.LiveSwitch.AudioEncoder.MinCodecBitrate"/> and
            <see cref="P:FM.LiveSwitch.AudioEncoder.MaxCodecBitrate"/>, respectively, or
            response to changes in <see cref="P:FM.LiveSwitch.AudioEncoder.MinBitrate"/> and
            <see cref="P:FM.LiveSwitch.AudioEncoder.MaxBitrate"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioEncoder.MinOutputBitrate">
            <summary>
            Gets or sets the minimum output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioEncoder.MinBitrate">
            <summary>
            Gets or sets the minimum bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioEncoder.MaxOutputBitrate">
            <summary>
            Gets or sets the maximum output bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioEncoder.MaxBitrate">
            <summary>
            Gets or sets the maximum bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioEncoder.TargetOutputBitrate">
            <summary>
            Gets or sets the target output bitrate, in kbps.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioEncoder.TargetBitrate">
            <summary>
            Gets or sets the target bitrate, in kbps.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioEncoder.Bitrate">
            <summary>
            Gets or sets the current bitrate, in kbps.
            A value of -1 indicates unset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioEncoder.CanChangeBitrate">
            <summary>
            Gets whether this pipe can change the output bitrate.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.AudioEncoder.OnBitrateChange">
            <summary>
            Raised when the bitrate changes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncoder.#ctor(FM.LiveSwitch.AudioFormat,FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioEncoder" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncoder.RaiseFrame(FM.LiveSwitch.AudioFrame)">
            <summary>
            Raises the frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="P:FM.LiveSwitch.AudioEncoder.FramesEncoded">
            <summary>
            Gets the number of encoded frames.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncoder.DoProcessTrackStatsFromOutput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes track stats from an output.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="T:FM.LiveSwitch.AudioFormat">
            <summary>
            An audio format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.PcmName">
            <summary>
            Gets the name of the PCM audio format ("PCM").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.PcmuName">
            <summary>
            Gets the name of the PCMU audio format ("PCMU").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.PcmaName">
            <summary>
            Gets the name of the PCMA audio format ("PCMA").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.G722Name">
            <summary>
            Gets the name of the G.722 audio format ("G722").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.OpusName">
            <summary>
            Gets the name of the Opus audio format ("opus").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.DtmfName">
            <summary>
            Gets the name of the DTMF audio format ("telephone-event").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.IsCompressed">
            <summary>
            Gets whether this is a compressed format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.IsPcm">
            <summary>
            Gets a value indicating whether this format is PCM.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.IsPcmu">
            <summary>
            Gets a value indicating whether this format is PCMU.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.IsPcma">
            <summary>
            Gets a value indicating whether this format is PCMA.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.IsG722">
            <summary>
            Gets a value indicating whether this format is G.722.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.IsOpus">
            <summary>
            Gets a value indicating whether this format is Opus.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.IsDtmf">
            <summary>
            Gets a value indicating whether this format is DTMF.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.LittleEndian">
            <summary>
            Gets or sets whether the format uses little endian byte order.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.ChannelCount">
            <summary>
            Gets or sets the channel count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.Info">
            <summary>
            Gets this format as an info object.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioFormat"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioFormat.#ctor(System.String,FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioFormat" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioFormat.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioFormat" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioFormat.Clone">
            <summary>
            Clones this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioFormat.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.AudioFormat.Config">
            <summary>
            Gets the clock rate and channel count as a configuration.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioFormat.IsEquivalent(FM.LiveSwitch.AudioFormat,System.Boolean)">
            <summary>
            Determines whether the specified format is equivalent.
            </summary>
            <param name="format">The format.</param>
            <param name="ignoreIsPacketized">Whether to ignore if the two formats differ in whether they are packetized.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioFormat.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioFormat.ToJson(FM.LiveSwitch.AudioFormat)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="audioFormat">The audio format.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioFormat.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="audioFormatJson">The audio format JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioFormat.FromFormatInfo(FM.LiveSwitch.FormatInfo)">
            <summary>
            Transforms a FormatInfo into an AudioFormat.
            </summary>
            <param name="info">The format info.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioFormat.IsCompatible(FM.LiveSwitch.AudioFormat)">
            <summary>
            Determines whether the specified format is compatible.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="T:FM.LiveSwitch.AudioFormatCollection">
            <summary>
            A collection of audio formats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioFormatCollection.ArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.AudioFormat})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioFormatCollection.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.AudioFrame">
            <summary>
            An audio frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioFrame.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioFrame.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioFrame" /> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioFrame.#ctor(System.Int32,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioFrame" /> class.
            </summary>
            <param name="duration">The duration.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioFrame.#ctor(System.Int32,FM.LiveSwitch.AudioBuffer[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioFrame" /> class.
            </summary>
            <param name="duration">The duration.</param>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioFrame.Clone">
            <summary>
            Clones this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioFrame.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioFrame.CreateMediaBufferCollection">
            <summary>
            Creates a media buffer collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioFrame.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioFrame.CalculateTimestampDelta(System.Int32,System.Int32)">
            <summary>
            Calculates a timestamp delta given a duration and clock rate.
            </summary>
            <param name="duration">The duration in milliseconds.</param>
            <param name="clockRate">The clock rate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioFrame.GeneratePcmFrame(System.Int32,FM.LiveSwitch.AudioConfig)">
            <summary>
            Generates a silent audio frame for the given duration and configuration.
            </summary>
            <param name="duration">The duration.</param>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.AudioMixer">
            <summary>
            A mixer that mixes multiple audio inputs into a single output.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioMixer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioMixer.AllowInputRateTimer">
            <summary>
            Gets whether this media pipe input rate is allowed to be timed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioMixer.AllowDurationTimer">
            <summary>
            Gets whether this media pipe output rate is allowed to be timed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioMixer.IsMixer">
            <summary>
            Gets whether this pipe processes media from different sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioMixer.FrameDuration">
            <summary>
            Gets the frame duration in milliseconds.
            Defaults to 20.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioMixer.Latency">
            <summary>
            Gets the latency.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioMixer.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioMixer" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioMixer.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioMixer" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioMixer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioMixer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioMixer.#ctor(FM.LiveSwitch.IAudioOutput[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioMixer"/> class.
            </summary>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioMixer.#ctor(FM.LiveSwitch.AudioConfig,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioMixer" /> class.
            </summary>
            <param name="config">The configuration.</param>
            <param name="latency">The latency in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioMixer.#ctor(FM.LiveSwitch.AudioFormat,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioMixer" /> class.
            </summary>
            <param name="format">The format.</param>
            <param name="latency">The latency in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioMixer.#ctor(FM.LiveSwitch.IAudioOutput,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioMixer" /> class.
            </summary>
            <param name="input">The input.</param>
            <param name="latency">The latency in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioMixer.#ctor(FM.LiveSwitch.IAudioOutput[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioMixer"/> class.
            </summary>
            <param name="inputs">The inputs.</param>
            <param name="latency">The latency in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioMixer.#ctor(FM.LiveSwitch.AudioConfig,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioMixer" /> class.
            </summary>
            <param name="config">The configuration.</param>
            <param name="latency">The latency in milliseconds.</param>
            <param name="frameDuration">The output frame duration in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioMixer.#ctor(FM.LiveSwitch.AudioFormat,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioMixer" /> class.
            </summary>
            <param name="format">The format.</param>
            <param name="latency">The latency in milliseconds.</param>
            <param name="frameDuration">The output frame duration in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioMixer.#ctor(FM.LiveSwitch.IAudioOutput,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioMixer" /> class.
            </summary>
            <param name="input">The input.</param>
            <param name="latency">The latency in milliseconds.</param>
            <param name="frameDuration">The output frame duration in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioMixer.#ctor(FM.LiveSwitch.IAudioOutput[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioMixer"/> class.
            </summary>
            <param name="inputs">The inputs.</param>
            <param name="latency">The latency in milliseconds.</param>
            <param name="frameDuration">The output frame duration in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioMixer.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioMixer.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.AudioPacketizer">
            <summary>
            An audio packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioPacketizer.AllowDiagnosticTimer">
            <summary>
            Gets whether this pipe is allowed to be timed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioPacketizer.CanPauseBitrate">
            <summary>
            Gets whether this pipe can pause the output bitrate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioPacketizer.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioPacketizer"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioPacketizer.#ctor(FM.LiveSwitch.AudioFormat,FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioPacketizer" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioPacketizer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioPacketizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioPacketizer.ProcessFrame(FM.LiveSwitch.AudioFrame)">
            <summary>
            Processes the frame.
            </summary>
            <param name="frame">The frame.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.AudioPacketizer.FramesSent">
            <summary>
            Gets the number of sent frames.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioPacketizer.DoProcessTrackStatsFromOutput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes track stats from an output.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="T:FM.LiveSwitch.AudioPipe">
            <summary>
            An audio pipe.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioPipe.Gain">
            <summary>
            Gets or sets a value indicating the gain
            (input amplification) of this sink.
            Any value greater than or equal to 0.0
            is acceptable.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioPipe.Volume">
            <summary>
            Gets or sets a value indicating the volume
            (output resistance) of this source.
            Valid value range is 0.0 to 1.0, inclusive.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioPipe.Config">
            <summary>
            Gets the output configuration.
            (Alias for <see cref="P:FM.LiveSwitch.AudioPipe.OutputConfig"/>.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioPipe.InputConfig">
            <summary>
            Gets the input configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioPipe.OutputConfig">
            <summary>
            Gets the output configuration.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioPipe.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioPipe" /> class.
            </summary>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioPipe.#ctor(FM.LiveSwitch.AudioFormat,FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioPipe" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioPipe.CreateFrame(FM.LiveSwitch.AudioBuffer)">
            <summary>
            Creates a frame.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioPipe.CreateOutputCollection(FM.LiveSwitch.IAudioInput)">
            <summary>
            Creates an output collection.
            </summary>
            <param name="input">The input.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioPipe.CreateInputCollection(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Creates an input collection.
            </summary>
            <param name="output">The output.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioPipe.ProcessFrame(FM.LiveSwitch.AudioFrame)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioPipe.RaiseFrame(FM.LiveSwitch.AudioFrame)">
            <summary>
            Raises a frame.
            </summary>
            <param name="frame">The frame.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.AudioRecorder">
            <summary>
            An audio recorder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioRecorder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioRecorder"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="T:FM.LiveSwitch.AudioSink">
            <summary>
            An audio sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSink.Gain">
            <summary>
            Gets or sets a value indicating the gain
            (input amplification) of this sink.
            Any value greater than or equal to 0.0
            is acceptable.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSink.Config">
            <summary>
            Gets the input configuration.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioSink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioSink" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioSink.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioSink" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioSink.CreateOutputCollection(FM.LiveSwitch.IAudioInput)">
            <summary>
            Creates an output collection.
            </summary>
            <param name="input">The input.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioSink.ProcessFrame(FM.LiveSwitch.AudioFrame)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.AudioSource">
            <summary>
            An audio source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSource.Volume">
            <summary>
            Gets or sets a value indicating the volume
            (output resistance) of this source.
            Valid value range is 0.0 to 1.0, inclusive.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSource.Config">
            <summary>
            Gets the output configuration.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioSource.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioSource" /> class.
            </summary>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioSource.#ctor(FM.LiveSwitch.AudioFormat,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioSource" /> class.
            </summary>
            <param name="outputFormat">The output format.</param>
            <param name="frameDuration">The frame duration in milliseconds.</param>
        </member>
        <member name="P:FM.LiveSwitch.AudioSource.DisableTimestampReset">
            <summary>
            Gets or sets whether the timestamp should be reset
            using the wall clock after <see cref="P:FM.LiveSwitch.AudioSource.TimestampResetInterval" />
            milliseconds elapse between frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSource.ForceTimestampReset">
            <summary>
            Gets or sets whether the timestamp should be reset
            before the next frame is processed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSource.TimestampResetInterval">
            <summary>
            Gets or sets the amount of time in milliseconds
            between audio frames that will trigger a reset of
            the timestamp to the wall clock.
            </summary>
            Defaults to 1000.
        </member>
        <member name="P:FM.LiveSwitch.AudioSource.FrameDuration">
            <summary>
            Gets the frame duration in milliseconds.
            Defaults to 20.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioSource.CalculateDuration(System.Int32)">
            <summary>
            Calculates the duration of an audio chunk given its data
            length (the number of bytes) and assuming that the clock
            rate and channel count match the output format.
            </summary>
            <param name="dataLength">The length of the audio chunk.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioSource.CalculateDurationFloat(System.Int32)">
            <summary>
            Calculates the duration of an audio chunk given its data
            length (the number of bytes) and assuming that the clock
            rate and channel count match the output format.
            </summary>
            <param name="dataLength">The length of the audio chunk.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioSource.CalculateDuration(System.Int32,FM.LiveSwitch.AudioConfig)">
            <summary>
            Calculates the duration of an audio chunk given its data
            length (the number of bytes), clock rate, and channel count.
            </summary>
            <param name="dataLength">The length of the audio chunk.</param>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioSource.CalculateDuration(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the duration of an audio chunk given its data
            length (the number of bytes), clock rate, and channel count.
            </summary>
            <param name="dataLength">The length of the audio chunk.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioSource.CalculateDurationFloat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the duration of an audio chunk given its data
            length (the number of bytes), clock rate, and channel count.
            </summary>
            <param name="dataLength">The length of the audio chunk.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioSource.CreateInputCollection(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Creates an input collection.
            </summary>
            <param name="output">The output.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioSource.RaiseFrame(FM.LiveSwitch.AudioFrame)">
            <summary>
            Raises a frame.
            </summary>
            <param name="frame">The frame.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioSource.TrySetSystemTimestamp(FM.LiveSwitch.AudioFrame)">
            <summary>
            Tries to set the system timestamp on an audio frame.
            This will succeed if the system timestamp is already
            set or if the system timestamp can be calculated off
            the timestamp.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioSource.TrySetTimestamp(FM.LiveSwitch.AudioFrame)">
            <summary>
            Tries to set the timestamp on an audio frame.
            This will succeed if the timestamp is already
            set or if the timestamp can be calculated off
            the system timestamp.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="T:FM.LiveSwitch.AudioStream">
            <summary>
            An audio stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioStream.Gain">
            <summary>
            Gets or sets a value indicating the gain
            (input amplification) of this sink.
            Any value greater than or equal to 0.0
            is acceptable.
            Currently, this value is not used since audio streams require
            packetized input/output formats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioStream.Volume">
            <summary>
            Gets or sets a value indicating the volume
            (output resistance) of this source.
            Valid value range is 0.0 to 1.0, inclusive.
            Currently, this value is not used since audio streams require
            packetized input/output formats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioStream.Config">
            <summary>
            Gets the output configuration.
            (Alias for <see cref="P:FM.LiveSwitch.AudioStream.OutputConfig"/>.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioStream.InputConfig">
            <summary>
            Gets the input configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioStream.OutputConfig">
            <summary>
            Gets the output configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioStream.OpusDisabled">
            <summary>
            Gets or sets whether Opus is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioStream.G722Disabled">
            <summary>
            Gets or sets whether G.722 is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioStream.PcmuDisabled">
            <summary>
            Gets or sets whether PCMU is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioStream.PcmaDisabled">
            <summary>
            Gets or sets whether PCMA is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioStream.DiscardOutboundDtmfTones">
            <summary>
            Gets or sets whether outbound DTMF tones should be discarded.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.IAudioOutput[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream"/> class.
            </summary>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.IAudioInput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream"/> class.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.IAudioInput[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream"/> class.
            </summary>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.IAudioOutput,FM.LiveSwitch.IAudioInput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream" /> class.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.AudioTrack)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream"/> class.
            </summary>
            <param name="localTrack">The local track.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.AudioTrack,FM.LiveSwitch.AudioTrack)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream" /> class.
            </summary>
            <param name="localTrack">The local track.</param>
            <param name="remoteTrack">The remote track.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.LocalMedia)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream" /> class.
            </summary>
            <param name="localMedia">The local media.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.RemoteMedia)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream" /> class.
            </summary>
            <param name="remoteMedia">The remote media.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.LocalMedia,FM.LiveSwitch.RemoteMedia)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream" /> class.
            </summary>
            <param name="localMedia">The local media.</param>
            <param name="remoteMedia">The remote media.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.IAudioOutput[],FM.LiveSwitch.IAudioInput[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream" /> class.
            </summary>
            <param name="inputs">The inputs.</param>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream"/> class.
            </summary>
            <param name="discardOutboundDtmfTones">Whether to discard outbound DTMF tones.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.IAudioOutput,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream"/> class.
            </summary>
            <param name="input">The input.</param>
            <param name="discardOutboundDtmfTones">Whether to discard outbound DTMF tones.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.IAudioOutput[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream"/> class.
            </summary>
            <param name="inputs">The inputs.</param>
            <param name="discardOutboundDtmfTones">Whether to discard outbound DTMF tones.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.IAudioInput,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream"/> class.
            </summary>
            <param name="output">The output.</param>
            <param name="discardOutboundDtmfTones">Whether to discard outbound DTMF tones.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.IAudioInput[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream"/> class.
            </summary>
            <param name="outputs">The outputs.</param>
            <param name="discardOutboundDtmfTones">Whether to discard outbound DTMF tones.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.IAudioOutput,FM.LiveSwitch.IAudioInput,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream" /> class.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="discardOutboundDtmfTones">Whether to discard outbound DTMF tones.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.AudioTrack,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream"/> class.
            </summary>
            <param name="localTrack">The local track.</param>
            <param name="discardOutboundDtmfTones">Whether to discard outbound DTMF tones.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.AudioTrack,FM.LiveSwitch.AudioTrack,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream" /> class.
            </summary>
            <param name="localTrack">The local track.</param>
            <param name="remoteTrack">The remote track.</param>
            <param name="discardOutboundDtmfTones">Whether to discard outbound DTMF tones.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.LocalMedia,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream" /> class.
            </summary>
            <param name="localMedia">The local media.</param>
            <param name="discardOutboundDtmfTones">Whether to discard outbound DTMF tones.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.RemoteMedia,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream" /> class.
            </summary>
            <param name="remoteMedia">The remote media.</param>
            <param name="discardOutboundDtmfTones">Whether to discard outbound DTMF tones.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.LocalMedia,FM.LiveSwitch.RemoteMedia,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream" /> class.
            </summary>
            <param name="localMedia">The local media.</param>
            <param name="remoteMedia">The remote media.</param>
            <param name="discardOutboundDtmfTones">Whether to discard outbound DTMF tones.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.#ctor(FM.LiveSwitch.IAudioOutput[],FM.LiveSwitch.IAudioInput[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioStream" /> class.
            </summary>
            <param name="inputs">The inputs.</param>
            <param name="outputs">The outputs.</param>
            <param name="discardOutboundDtmfTones">Whether to discard outbound DTMF tones.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.FormatArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.AudioFormat})">
            <summary>
            Creates a format array from a format list.
            </summary>
            <param name="formatList">The format list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.InputArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.IAudioInput})">
            <summary>
            Creates an input array from an input list.
            </summary>
            <param name="inputList">The input list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.OutputArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.IAudioOutput})">
            <summary>
            Creates an output array from an output list.
            </summary>
            <param name="outputList">The output list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.CreateFormat(FM.LiveSwitch.Sdp.Rtp.MapAttribute,FM.LiveSwitch.Sdp.FormatParametersAttribute)">
            <summary>
            Creates a format.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="formatParametersAttribute">The format parameters attribute.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.CreateFormat(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates a format.
            </summary>
            <param name="name">The format name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="parameters">The parameters.</param>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.CreateOutputCollection(FM.LiveSwitch.IAudioInput)">
            <summary>
            Creates an output collection.
            </summary>
            <param name="input">The input.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.CreateInputCollection(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Creates an input collection.
            </summary>
            <param name="output">The output.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.CreateMediaFormatCollection">
            <summary>
            Creates a media format collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.CreateRedFormat">
            <summary>
            Creates a RED format.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.CreateUlpFecFormat">
            <summary>
            Creates a ulpfec format.
            </summary>
            
        </member>
        <member name="E:FM.LiveSwitch.AudioStream.OnSendDtmfTone">
            <summary>
            Raised when a DTMF packet is sent.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.AudioStream.OnSendDtmfToneChange">
            <summary>
            Raised when the sent DTMF tone changes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.AudioStream.OnReceiveDtmfTone">
            <summary>
            Raised when a DTMF packet is received.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.AudioStream.OnReceiveDtmfToneChange">
            <summary>
            Raised when the received DTMF tone changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioStream.DtmfMode">
            <summary>
            Gets or sets the DTMF mode.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.InsertDtmfTone(FM.LiveSwitch.Dtmf.Tone)">
            <summary>
            Inserts a DTMF tone.
            </summary>
            <param name="dtmfTone">The DTMF tone.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.InsertDtmfTones(FM.LiveSwitch.Dtmf.Tone[])">
            <summary>
            Inserts DTMF tones.
            </summary>
            <param name="dtmfTones">The DTMF tones.</param>
        </member>
        <member name="E:FM.LiveSwitch.AudioStream.OnDiscardOutboundDtmfTones">
            <summary>
            Raised when outbound DTMF tones are discarded
            due to policy restrictions or lack of support.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.GetInputSourceMuted(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Gets whether an input source is muted.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.SetInputSourceMuted(FM.LiveSwitch.IAudioOutput,System.Boolean)">
            <summary>
            Sets whether an input source is muted.
            </summary>
            <param name="input">The input.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.GetOutputSinkMuted(FM.LiveSwitch.IAudioInput)">
            <summary>
            Gets whether an output sink is muted.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioStream.SetOutputSinkMuted(FM.LiveSwitch.IAudioInput,System.Boolean)">
            <summary>
            Sets whether an output sink is muted.
            </summary>
            <param name="output">The output.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.BundleGroup.CoreTransport">
            <summary>
            Gets or set the core transport associated with this bundle group.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BundleGroup.Streams">
            <summary>
            Gets the streams in this bundle group.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BundleGroup.Add(FM.LiveSwitch.Stream)">
            <summary>
            Adds a stream to the bundle.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.BundleGroup.Remove(FM.LiveSwitch.Stream)">
            <summary>
            Removes a stream from the bundle.
            </summary>
            <param name="stream">The stream to remove.</param>
            <returns>A value indicating if the stream was in the bundle prior to the removal.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BundleGroup.Remove(System.String)">
            <summary>
            Removes a stream from the bundle for a given msid.
            </summary>
            <param name="id">ID of the stream to remove.</param>
            <returns>A value indicating if the stream was in the bundle prior to the removal.</returns>
        </member>
        <member name="T:FM.LiveSwitch.BundleTransport">
            <summary>
            Object responsible for demultiplexing incoming payload data.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BundleTransport.#ctor(FM.LiveSwitch.Ice.Transport,FM.LiveSwitch.Dtls.Transport,FM.LiveSwitch.HexDump)">
            <summary>
            Creates an instance of the BundleTransport class and takes optional transport parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.CcmTmmbnPolicy">
            <summary>
            The CCM TMMBN policy.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CcmTmmbnPolicy.Disabled">
            <summary>
            The usage of CCM TMMBN is disabled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CcmTmmbnPolicy.Negotiated">
            <summary>
            The usage of CCM TMMBN is negotiated with the peer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.CcmTmmbrPolicy">
            <summary>
            The CCM TMMBR policy.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CcmTmmbrPolicy.Disabled">
            <summary>
            The usage of CCM TMMBR is disabled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CcmTmmbrPolicy.Negotiated">
            <summary>
            The usage of CCM TMMBR is negotiated with the peer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ControlFrameEntry">
            <summary>
            RTCP frame entry.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ControlFrameEntry.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.     
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamMediaDescriptionManager.LegacySignallingFormat">
            <summary>
            Gets a value indicating whether the application stream media description is formated the legacy way.
            Legacy means support for https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-05
            Modern means support for https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-21
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamMediaDescriptionManager.MaxMessageSize">
            <summary>
            Gets or Sets maximum message size transmitted over data stream in bytes. -1 indicates unset maximum.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamMediaDescriptionManager.CreateSdpMediaDescription(FM.LiveSwitch.MediaDescriptionRequirements,FM.LiveSwitch.Sdp.Message,System.Boolean,System.Boolean)">
            <summary>
            Generates SDP media description for stream.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.BlockAdditions">
            <summary>
            A Matroska EBML Block Additions element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.BlockAdditions.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.BlockAdditions.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.BlockAdditions.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.Attachments">
            <summary>
            A Matroska EBML Attachments element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Attachments.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Attachments.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Attachments.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.Audio">
            <summary>
            A Matroska audio element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Audio.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Audio.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Audio.SamplingFrequency">
            <summary>
            Gets or sets the sampling frequency.
            Defaults to 8000.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Audio.OutputSamplingFrequency">
            <summary>
            Gets or sets the output sampling frequency.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Audio.Channels">
            <summary>
            Gets or sets the channels.
            Defaults to 1.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Audio.BitDepth">
            <summary>
            Gets or sets the bit depth.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Audio.DefaultSamplingFrequency">
            <summary>
            Gets the default sampling frequency.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Audio.DefaultChannels">
            <summary>
            Gets the default channels.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Audio.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Audio"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Audio.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Audio"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Audio.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.AudioRecorder">
            <summary>
            A Matroska audio recorder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioRecorder.#ctor(System.String,FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.AudioRecorder" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="inputFormat">The input format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioRecorder.DoWrite(FM.LiveSwitch.AudioBuffer,System.Int64)">
            <summary>
            Write an encoded video frame.
            </summary>
            <param name="buffer">The encoded buffer.</param>
            <param name="presentationTimestamp">The presentation timestamp.</param>
            <returns>
              <c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioRecorder.DoWriteHeader">
            <summary>
            Writes the file header.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioRecorder.DoUpdateHeader">
            <summary>
            Updates the file header.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.AudioSink">
            <summary>
            A Matroska-file-based audio sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.AudioSink.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.AudioSink.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Matroska.AudioSink.OnFileOpen">
            <summary>
            Raised when a new file is opened in response to
            this sink being activated and processing a frame.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Matroska.AudioSink.OnFileClose">
            <summary>
            Raised when an existing file is close in response to
            this sink being deactivated or destroyed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.AudioSink.OpenFilePath">
            <summary>
            Gets the currently open file path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.AudioSink.LastFilePath">
            <summary>
            Gets the last known file path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.AudioSink.BaseTimestamp">
            <summary>
            Gets the base timestamp - the timestamp of the first frame
            processed by the recorder after being activated. This timestamp
            will change each time a new file is created in response to the
            sink being activated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.AudioSink.LastTimestamp">
            <summary>
            Gets the last timestamp processed by the recorder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioSink.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.AudioSink" /> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioSink.#ctor(System.String,FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.AudioSink" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioSink.#ctor(System.String,FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.AudioSink" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioSink.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioSink.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.Block">
            <summary>
            A Matroska block element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Block.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Block.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Block.TrackNumber">
            <summary>
            Gets or sets the track number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Block.Timecode">
            <summary>
            Gets or sets the timecode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Block.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Block.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Block.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Block"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Block.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Block"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Block.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.BlockFlags">
            <summary>
            Valid Matroska block element flags.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.BlockFlags.NoLacing">
            <summary>
            Gets a value indicating no lacing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.BlockFlags.XiphLacing">
            <summary>
            Gets a value indicating Xiph lacing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.BlockFlags.EbmlLacing">
            <summary>
            Gets a value indicating EBML lacing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.BlockFlags.FixedSizeLacing">
            <summary>
            Gets a value indicating fixed size lacing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.BlockFlags.Invisible">
            <summary>
            Gets a value indicating invisible.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.BlockGroup">
            <summary>
            A Matroska block group element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.BlockGroup.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.BlockGroup.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.BlockGroup.Block">
            <summary>
            Gets or sets the block element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.BlockGroup.ReferenceBlocks">
            <summary>
            Gets or sets the reference blocks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.BlockGroup.BlockDuration">
            <summary>
            Gets or sets the duration of the block.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.BlockGroup.DiscardPadding">
            <summary>
            Gets or sets the duration in nanoseconds of the silent data added to the block.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.BlockGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.BlockGroup"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.BlockGroup.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.BlockGroup"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.BlockGroup.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.Chapters">
            <summary>
            A Matroska EBML Chapters element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Chapters.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Chapters.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Chapters.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.Cluster">
            <summary>
            A Matroska cluster element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Cluster.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Cluster.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Cluster.Timecode">
            <summary>
            Gets or sets the timecode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Cluster.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Cluster.PrevSize">
            <summary>
            Gets or sets the previous size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Cluster.BlockGroups">
            <summary>
            Gets or sets the block group elements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Cluster.SimpleBlocks">
            <summary>
            Gets or sets the simple block elements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Cluster.DefaultTimecode">
            <summary>
            Gets the default timecode.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Cluster.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Cluster"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Cluster.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Cluster"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Cluster.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Cluster.Merge(FM.LiveSwitch.Matroska.Cluster)">
            <summary>
            Merges another <see cref="T:FM.LiveSwitch.Matroska.Cluster" /> into this one.
            </summary>
            <param name="cluster">The <see cref="T:FM.LiveSwitch.Matroska.Cluster"/>.</param>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.ContentCompAlgo">
            <summary>
            Valid Matroska content compression element algorithms.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentCompAlgo.Zlib">
            <summary>
            Gets a value indicating zlib.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentCompAlgo.Bzlib">
            <summary>
            Gets a value indicating bzlib.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentCompAlgo.Lzo1x">
            <summary>
            Gets a value indicating lzo1x.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentCompAlgo.HeaderStriping">
            <summary>
            Gets a value indicating header striping.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.ContentCompression">
            <summary>
            A Matroska content compression element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentCompression.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentCompression.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentCompression.ContentCompAlgo">
            <summary>
            Gets or sets the content compression algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentCompression.ContentCompSettings">
            <summary>
            Gets or sets the content compression settings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentCompression.DefaultContentCompAlgo">
            <summary>
            Gets the default content compression algorithm.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.ContentCompression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.ContentCompression"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.ContentCompression.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.ContentCompression"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.ContentCompression.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.ContentEncoding">
            <summary>
            A Matroska content encoding element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncoding.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncoding.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncoding.ContentEncodingOrder">
            <summary>
            Gets or sets the content encoding order.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncoding.ContentEncodingScope">
            <summary>
            Gets or sets the content encoding scope.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncoding.ContentEncodingType">
            <summary>
            Gets or sets the content encoding type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncoding.ContentCompression">
            <summary>
            Gets or sets the content compression element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncoding.DefaultContentEncodingOrder">
            <summary>
            Gets the default content encoding order.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncoding.DefaultContentEncodingScope">
            <summary>
            Gets the default content encoding scope.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncoding.DefaultContentEncodingType">
            <summary>
            Gets the default content encoding type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.ContentEncoding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.ContentEncoding"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.ContentEncoding.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.ContentEncoding"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.ContentEncoding.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.ContentEncodings">
            <summary>
            A Matroska content encodings element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncodings.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncodings.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncodings.ContentEncodingElements">
            <summary>
            Gets or sets the content encoding elements.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.ContentEncodings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.ContentEncodings"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.ContentEncodings.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.ContentEncodings"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.ContentEncodings.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.ContentEncodingScope">
            <summary>
            Valid Matroska content encoding element scopes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncodingScope.All">
            <summary>
            Gets a value indicating all.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncodingScope.CodecPrivate">
            <summary>
            Gets a value indicating codec private.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.ContentEncodingScope.ContentCompressionInNextContentEncoding">
            <summary>
            Gets a value indicating content compression in next content encoding.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.Cues">
            <summary>
            A Matroska EBML Cues element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Cues.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Cues.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Cues.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.Ebml">
            <summary>
            A Matroska EBML element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.EbmlVersion">
            <summary>
            Gets or sets the EBML version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.EbmlReadVersion">
            <summary>
            Gets or sets the EBML read version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.EbmlMaxIdLength">
            <summary>
            Gets or sets the EBML maximum identifier length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.EbmlMaxSizeLength">
            <summary>
            Gets or sets the EBML maximum size length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.DocType">
            <summary>
            Gets or sets the document type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.DocTypeVersion">
            <summary>
            Gets or sets the document type version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.DocTypeReadVersion">
            <summary>
            Gets or sets the document type read version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.DefaultEbmlVersion">
            <summary>
            Gets the default EBML version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.DefaultEbmlReadVersion">
            <summary>
            Gets the default EBML read version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.DefaultEbmlMaxIdLength">
            <summary>
            Gets the default EBML maximum identifier length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.DefaultEbmlMaxSizeLength">
            <summary>
            Gets the default EBML maximum size length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.DefaultDocType">
            <summary>
            Gets the default document type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.DefaultDocTypeVersion">
            <summary>
            Gets the default document type version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Ebml.DefaultDocTypeReadVersion">
            <summary>
            Gets the default document type read version.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Ebml.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Ebml"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Ebml.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Ebml"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Ebml.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Ebml.Merge(FM.LiveSwitch.Matroska.Ebml)">
            <summary>
            Merges another <see cref="T:FM.LiveSwitch.Matroska.Ebml" /> into this one.
            </summary>
            <param name="ebml">The <see cref="T:FM.LiveSwitch.Matroska.Ebml" />.</param>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.EbmlCrc32">
            <summary>
            A Matroska EBML CRC-32 element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.EbmlCrc32.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.EbmlCrc32.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.EbmlCrc32.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.EbmlCrc32.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.EbmlVoid">
            <summary>
            A Matroska EBML void element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.EbmlVoid.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.EbmlVoid.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.EbmlVoid.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.Element">
            <summary>
            A Matroska element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Element.WriteDefaultValues">
            <summary>
            Gets or sets whether to include default values
            when serializing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Element.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Element.SizeLength">
            <summary>
            Gets or sets the length of the size field, in bytes.
            Defaults to zero (variable size).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Element.Length">
            <summary>
            Gets the total length of the element (including ID/size field), set after calling <see cref="M:FM.LiveSwitch.Matroska.Element.GetBytes"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Element.Size">
            <summary>
            Gets the size of the element (excluding ID/size field), set after calling <see cref="M:FM.LiveSwitch.Matroska.Element.GetBytes"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.GetBytes">
            <summary>
            Serializes to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.SerializeVariableInteger(System.Int64)">
            <summary>
            Serializes a variable integer.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.SerializeVariableInteger(System.Int64,System.Int32)">
            <summary>
            Serializes a variable integer using a fixed length.
            </summary>
            <param name="value">The value.</param>
            <param name="length">The length to use.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.WriteVariableInteger(System.Int64,FM.LiveSwitch.ByteOutputStream)">
            <summary>
            Writes a variable integer ("vint") to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="stream">The stream to write.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.WriteVariableInteger(System.Int64,FM.LiveSwitch.ByteOutputStream,System.Int32)">
            <summary>
            Writes a variable integer ("vint") to the stream using a fixed length.
            </summary>
            <param name="value">The value to write.</param>
            <param name="stream">The stream to write.</param>
            <param name="length">The length to use.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.ReadVariableInteger(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Reads a variable integer ("vint") from the byte array.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offset">The offset into the byte array.</param>
            <param name="offsetPlus">The offset plus the amount read.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.WriteUnsignedInteger(System.Int64,System.Byte[],FM.LiveSwitch.ByteOutputStream)">
            <summary>
            Writes an unsigned integer element to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="id">The ID of the value.</param>
            <param name="stream">The stream to write.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.ReadUnsignedInteger(System.Byte[])">
            <summary>
            Reads an unsigned integer element from the byte array.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.WriteSignedInteger(System.Int64,System.Byte[],FM.LiveSwitch.ByteOutputStream)">
            <summary>
            Writes an signed integer element to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="id">The ID of the value.</param>
            <param name="stream">The stream to write.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.ReadSignedInteger(System.Byte[])">
            <summary>
            Reads a signed integer element from the byte array.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.WriteBool(System.Boolean,System.Byte[],FM.LiveSwitch.ByteOutputStream)">
            <summary>
            Writes a boolean element to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="id">The ID of the value.</param>
            <param name="stream">The stream to write.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.ReadBool(System.Byte[])">
            <summary>
            Reads a boolean element from the stream.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.WriteFloat(System.Single,System.Byte[],FM.LiveSwitch.ByteOutputStream)">
            <summary>
            Writes a float element to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="id">The ID of the value.</param>
            <param name="stream">The stream to write.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.ReadFloat(System.Byte[])">
            <summary>
            Reads a float element from the stream.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.WriteDouble(System.Double,System.Byte[],FM.LiveSwitch.ByteOutputStream)">
            <summary>
            Writes a double element to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="id">The ID of the value.</param>
            <param name="stream">The stream to write.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.ReadDouble(System.Byte[])">
            <summary>
            Reads a double element from the stream.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.WriteDate(System.DateTime,System.Byte[],FM.LiveSwitch.ByteOutputStream)">
            <summary>
            Writes a date element to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="id">The ID of the value.</param>
            <param name="stream">The stream to write.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.ReadDate(System.Byte[])">
            <summary>
            Reads a date string element from the stream.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.WriteString(System.String,System.Byte[],FM.LiveSwitch.ByteOutputStream)">
            <summary>
            Writes an ASCII string element to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="id">The ID of the value.</param>
            <param name="stream">The stream to write.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.ReadString(System.Byte[])">
            <summary>
            Reads an ASCII string element from the stream.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.WriteUtf8(System.String,System.Byte[],FM.LiveSwitch.ByteOutputStream)">
            <summary>
            Writes a UTF-8 string element to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="id">The ID of the value.</param>
            <param name="stream">The stream to write.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.ReadUtf8(System.Byte[])">
            <summary>
            Reads a UTF-8 string element from the stream.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.WriteGuid(System.Guid,System.Byte[],FM.LiveSwitch.ByteOutputStream)">
            <summary>
            Writes a GUID element to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="id">The ID of the value.</param>
            <param name="stream">The stream to write.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.ReadGuid(System.Byte[])">
            <summary>
            Reads a GUID element from the stream.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.Write(System.Byte[],System.Byte[],FM.LiveSwitch.ByteOutputStream)">
            <summary>
            Writes a binary element to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="id">The ID of the value.</param>
            <param name="stream">The stream to write.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.ReadId(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Reads a binary ID from the stream.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offset">The offset into the byte array.</param>
            <param name="offsetPlus">The offset plus the amount read.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.ReadValue(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Reads a binary value from the stream.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offset">The offset into the byte array.</param>
            <param name="offsetPlus">The offset plus the amount read.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Element.Compare(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays for equality.
            </summary>
            <param name="bytes1">The first byte array.</param>
            <param name="bytes2">The second byte array.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.File">
            <summary>
            A Matroska file.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.File.Ebml">
            <summary>
            Gets or sets the EBML element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.File.Segment">
            <summary>
            Gets or sets the segment element.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.File.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.File"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.File.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.File" /> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.File.GetBytes">
            <summary>
            Serializes to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.File.Merge(FM.LiveSwitch.Matroska.File)">
            <summary>
            Merges another <see cref="T:FM.LiveSwitch.Matroska.File"/> into this one.
            </summary>
            <param name="file">The <see cref="T:FM.LiveSwitch.Matroska.File"/>.</param>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.AudioSource">
            <summary>
            A Matroska-file-based audio source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.AudioSource.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.AudioSource.Label">
            <summary>
            Gets the label.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Matroska.AudioSource.OnEnded">
            <summary>
            Raised when the file ends.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.AudioSource" /> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioSource.CreateOpusDecoder(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates an Opus decoder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioSource.CreatePcmuDecoder(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a PCMU decoder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioSource.CreatePcmaDecoder(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a PCMA decoder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioSource.GetInputs">
            <summary>
            Gets the source inputs (tracks).
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioSource.DoStart">
            <summary>
            Starts the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioSource.DoStop">
            <summary>
            Stops the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.AudioSource.CaptureLoop(FM.LiveSwitch.ManagedThread)">
            <summary>
            Captures the loop.
            </summary>
            <param name="thread">The thread.</param>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.VideoSource">
            <summary>
            A Matroska-file-based video source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.VideoSource.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.VideoSource.Label">
            <summary>
            Gets the label.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Matroska.VideoSource.OnEnded">
            <summary>
            Raised when the file ends.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.VideoSource" /> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoSource.CreateVp8Decoder">
            <summary>
            Creates a VP8 decoder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoSource.CreateVp9Decoder">
            <summary>
            Creates a VP9 decoder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoSource.CreateH264Decoder">
            <summary>
            Creates an H.264 decoder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoSource.GetInputs">
            <summary>
            Gets the source inputs (tracks).
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoSource.DoStart">
            <summary>
            Starts the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoSource.DoStop">
            <summary>
            Stops the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoSource.CaptureLoop(FM.LiveSwitch.ManagedThread)">
            <summary>
            Captures the loop.
            </summary>
            <param name="thread">The thread.</param>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.Seek">
            <summary>
            A Matroska seek element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Seek.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Seek.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Seek.SeekId">
            <summary>
            Gets or sets the seek identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Seek.SeekPosition">
            <summary>
            Gets or sets the seek position.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Seek.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Seek"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Seek.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Seek" /> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Seek.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.SeekHead">
            <summary>
            A Matroska seek head element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SeekHead.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SeekHead.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SeekHead.Seeks">
            <summary>
            Gets or sets the seek elements.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.SeekHead.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.SeekHead"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.SeekHead.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.SeekHead"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.SeekHead.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.Segment">
            <summary>
            A Matroska segment element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Segment.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Segment.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Segment.SegmentInfo">
            <summary>
            Gets or sets the segment info element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Segment.SeekHeads">
            <summary>
            Gets or sets the seek head elements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Segment.Tracks">
            <summary>
            Gets or sets the track elements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Segment.Clusters">
            <summary>
            Gets or sets the cluster elements.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Segment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Segment"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Segment.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Segment"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Segment.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Segment.Merge(FM.LiveSwitch.Matroska.Segment)">
            <summary>
            Merges another <see cref="T:FM.LiveSwitch.Matroska.Segment" /> into this one.
            </summary>
            <param name="segment">The <see cref="T:FM.LiveSwitch.Matroska.Segment"/>.</param>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.SegmentInfo">
            <summary>
            A Matroska segment info element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.SegmentUid">
            <summary>
            Gets or sets the segment UID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.SegmentFilename">
            <summary>
            Gets or sets the segment filename.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.PrevUid">
            <summary>
            Gets or sets the previous UID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.PrevFilename">
            <summary>
            Gets or sets the previous filename.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.NextUid">
            <summary>
            Gets or sets the next UID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.NextFilename">
            <summary>
            Gets or sets the next filename.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.TimecodeScale">
            <summary>
            Gets or sets the timecode scale.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.MuxingApp">
            <summary>
            Gets or sets the muxing application.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.WritingApp">
            <summary>
            Gets or sets the writing application.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.DateUtc">
            <summary>
            Gets or sets the date in UTC time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SegmentInfo.DefaultTimecodeScale">
            <summary>
            Gets the default timecode scale.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.SegmentInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.SegmentInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.SegmentInfo.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.SegmentInfo"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.SegmentInfo.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.SegmentInfo.Merge(FM.LiveSwitch.Matroska.SegmentInfo)">
            <summary>
            Merges another <see cref="T:FM.LiveSwitch.Matroska.SegmentInfo" /> into this one.
            </summary>
            <param name="segmentInfo">The <see cref="T:FM.LiveSwitch.Matroska.SegmentInfo"/>.</param>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.SimpleBlock">
            <summary>
            A Matroska simple block element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SimpleBlock.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SimpleBlock.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.SimpleBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.SimpleBlock"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.SimpleBlock.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.SimpleBlock" /> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.SimpleBlockFlags">
            <summary>
            Valid Matroska simple block element flags.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SimpleBlockFlags.Keyframe">
            <summary>
            Gets a value indicating keyframe.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.SimpleBlockFlags.Discardable">
            <summary>
            Gets a value indicating discardable.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.Tags">
            <summary>
            A Matroska EBML Tags element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Tags.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Tags.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Tags.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.Track">
            <summary>
            A Matroska track element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Track.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Track.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Track.TrackEntries">
            <summary>
            Gets or sets the track entry elements.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Track.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Track"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Track.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Track"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Track.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Track.Merge(FM.LiveSwitch.Matroska.Track)">
            <summary>
            Merges another <see cref="T:FM.LiveSwitch.Matroska.Track" /> into this one.
            </summary>
            <param name="track">The <see cref="T:FM.LiveSwitch.Matroska.Track"/>.</param>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.TrackEntry">
            <summary>
            A Matroska track entry element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.Vp8CodecId">
            <summary>
            Gets the VP8 codec ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.Vp9CodecId">
            <summary>
            Gets the VP8 codec ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.H264CodecId">
            <summary>
            Gets the H.264 codec ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.OpusCodecId">
            <summary>
            Gets the Opus codec ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.PcmCodecId">
            <summary>
            Gets the PCM codec ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.PcmuFormatTag">
            <summary>
            Gets the PCMU format tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.PcmaFormatTag">
            <summary>
            Gets the PCMA format tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.G722FormatTag">
            <summary>
            Gets the PCMA format tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.TrackNumber">
            <summary>
            Gets or sets the track number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.TrackUid">
            <summary>
            Gets or sets the track UID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.TrackType">
            <summary>
            Gets or sets the track type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.FlagEnabled">
            <summary>
            Gets or sets the enabled flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.FlagDefault">
            <summary>
            Gets or sets the default flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.FlagForced">
            <summary>
            Gets or sets the forced flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.FlagLacing">
            <summary>
            Gets or sets the lacing flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.MinCache">
            <summary>
            Gets or sets the minimum cache.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.MaxCache">
            <summary>
            Gets or sets the maximum cache.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.DefaultDuration">
            <summary>
            Gets or sets the default duration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.TrackTimecodeScale">
            <summary>
            Gets or sets the track timecode scale.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.Language">
            <summary>
            Gets or sets the language.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.CodecId">
            <summary>
            Gets or sets the codec identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.CodecPrivate">
            <summary>
            Gets or sets the codec private.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.CodecName">
            <summary>
            Gets or sets the codec name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.CodecDelay">
            <summary>
            Gets or sets the codec delay.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.SeekPreRoll">
            <summary>
            Gets or sets the seek pre-roll.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.AttachmentLinks">
            <summary>
            Gets or sets the attachment links.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.Video">
            <summary>
            Gets or sets the video element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.Audio">
            <summary>
            Gets or sets the audio element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.ContentEncodings">
            <summary>
            Gets or sets the content encoding elements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.DefaultFlagEnabled">
            <summary>
            Gets the default enabled flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.DefaultFlagDefault">
            <summary>
            Gets the default default flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.DefaultFlagForced">
            <summary>
            Gets the default forced flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.DefaultFlagLacing">
            <summary>
            Gets the default lacing flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.DefaultMinCache">
            <summary>
            Gets the default minimum cache.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackEntry.DefaultLanguage">
            <summary>
            Gets the default language.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.TrackEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.TrackEntry"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.TrackEntry.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.TrackEntry"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.TrackEntry.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.TrackType">
            <summary>
            Valid Matroska track entry element types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackType.Video">
            <summary>
            Gets a value indicating video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackType.Audio">
            <summary>
            Gets a value indicating audio.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackType.Complex">
            <summary>
            Gets a value indicating complex.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackType.Logo">
            <summary>
            Gets a value indicating logo.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackType.Subtitle">
            <summary>
            Gets a value indicating subtitle.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackType.Button">
            <summary>
            Gets a value indicating button.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.TrackType.Control">
            <summary>
            Gets a value indicating control.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.Video">
            <summary>
            A Matroska video element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.EbmlId">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.Id">
            <summary>
            Gets the EBML ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.FlagInterlaced">
            <summary>
            Gets or sets a flag indicating whether the video is interlaced.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.PixelWidth">
            <summary>
            Gets or sets the pixel width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.PixelHeight">
            <summary>
            Gets or sets the pixel height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.PixelCropBottom">
            <summary>
            Gets or sets the pixel crop bottom.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.PixelCropTop">
            <summary>
            Gets or sets the pixel crop top.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.PixelCropLeft">
            <summary>
            Gets or sets the pixel crop left.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.PixelCropRight">
            <summary>
            Gets or sets the pixel crop right.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.DisplayWidth">
            <summary>
            Gets or sets the display width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.DisplayHeight">
            <summary>
            Gets or sets the display height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.DisplayUnit">
            <summary>
            Gets or sets the display unit.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.AlphaMode">
            <summary>
            Gets or sets the alpha mode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.DefaultFlagInterlaced">
            <summary>
            Gets the default flag interlaced.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.DefaultPixelCropBottom">
            <summary>
            Gets the default pixel crop bottom.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.DefaultPixelCropTop">
            <summary>
            Gets the default pixel crop top.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.DefaultPixelCropLeft">
            <summary>
            Gets the default pixel crop left.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.DefaultPixelCropRight">
            <summary>
            Gets the default pixel crop right.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.DefaultDisplayUnit">
            <summary>
            Gets the default display unit.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.Video.DefaultAlphaMode">
            <summary>
            Gets the default alpha mode.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Video.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Video"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Video.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.Video"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.Video.GetInnerBytes">
            <summary>
            Gets the inner bytes.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Matroska.VideoDisplayUnit">
            <summary>
            Valid Matroska video element display units.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.VideoDisplayUnit.Pixels">
            <summary>
            Gets a value indicating pixels.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.VideoDisplayUnit.Centimeters">
            <summary>
            Gets a value indicating centimeters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.VideoDisplayUnit.Inches">
            <summary>
            Gets a value indicating inches.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.VideoDisplayUnit.DisplayAspectRatio">
            <summary>
            Gets a value indicating display aspect ratio.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.VideoRecorder">
            <summary>
            A Matroska video recorder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoRecorder.#ctor(System.String,FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.VideoRecorder"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="inputFormat">The input format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoRecorder.DoWrite(FM.LiveSwitch.VideoBuffer,System.Int64)">
            <summary>
            Write an encoded video frame.
            </summary>
            <param name="buffer">The encoded buffer.</param>
            <param name="presentationTimestamp">The presentation timestamp.</param>
            <returns>
              <c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoRecorder.DoWriteHeader">
            <summary>
            Writes the file header.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoRecorder.DoUpdateHeader">
            <summary>
            Updates the file header.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Matroska.VideoSink">
            <summary>
            A Matroska-file-based video sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.VideoSink.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.VideoSink.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Matroska.VideoSink.OnFileOpen">
            <summary>
            Raised when a new file is opened in response to
            this sink being activated and processing a frame.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Matroska.VideoSink.OnFileClose">
            <summary>
            Raised when an existing file is close in response to
            this sink being deactivated or destroyed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.VideoSink.OpenFilePath">
            <summary>
            Gets the currently open file path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.VideoSink.LastFilePath">
            <summary>
            Gets the last known file path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.VideoSink.BaseTimestamp">
            <summary>
            Gets the base timestamp - the timestamp of the first frame
            processed by the recorder after being activated. This timestamp
            will change each time a new file is created in response to the
            sink being activated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Matroska.VideoSink.LastTimestamp">
            <summary>
            Gets the last timestamp processed by the recorder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoSink.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.VideoSink"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoSink.#ctor(System.String,FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.VideoSink" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoSink.#ctor(System.String,FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Matroska.VideoSink" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoSink.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Matroska.VideoSink.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.VideoType">
            <summary>
            A video type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.VideoType.Unknown">
            <summary>
            Indicates an unknown type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.VideoType.Camera">
            <summary>
            Indicates camera-based video.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.VideoType.Screen">
            <summary>
            Indicates screen-based video.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.VideoDegradationPreference">
            <summary>
            A video degradation preference.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.VideoDegradationPreference.Automatic">
            <summary>
            Indicates a preference to automate
            the degradation preference based on
            the video type.
            A video type of <see cref="F:FM.LiveSwitch.VideoType.Screen"/>
            will prefer to degrade <see cref="F:FM.LiveSwitch.VideoDegradationPreference.FrameRate"/>.
            A video type of <see cref="F:FM.LiveSwitch.VideoType.Camera"/>
            will prefer to degrade <see cref="F:FM.LiveSwitch.VideoDegradationPreference.Resolution"/>.
            A video type of <see cref="F:FM.LiveSwitch.VideoType.Unknown"/>
            will prefer a <see cref="F:FM.LiveSwitch.VideoDegradationPreference.Balanced"/> approach.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.VideoDegradationPreference.Balanced">
            <summary>
            Indicates a preference to degrade
            both frame-rate and resolution
            together in smaller increments.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.VideoDegradationPreference.FrameRate">
            <summary>
            Indicates a preference to degrade
            frame-rate instead of resolution.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.VideoDegradationPreference.Resolution">
            <summary>
            Indicates a preference to degrade
            resolution instead of frame-rate.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Diagnostics.DurationSample">
            <summary>
            A sample for the duration timer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Diagnostics.DurationSample.BeginMillis">
            <summary>
            Gets the stopwatch value in milliseconds when the sample started.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Diagnostics.DurationSample.EndMillis">
            <summary>
            Gets the stopwatch value in milliseconds when the sample stopped.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Diagnostics.DurationSample.#ctor(System.Int64)">
            <summary>
            Creates a new instance of the <see cref="T:FM.LiveSwitch.Diagnostics.DurationSample"/> class.
            </summary>
            <param name="beginMillis">The stopwatch value in milliseconds when the sample started.</param>
        </member>
        <member name="M:FM.LiveSwitch.Diagnostics.DurationSample.End(System.Int64)">
            <summary>
            Ends the sample.
            </summary>
            <param name="endMillis">The stopwatch value in milliseconds when the sample stopped.</param>
        </member>
        <member name="T:FM.LiveSwitch.Diagnostics.DurationTimer">
            <summary>
            A duration timer for calculating how long a process takes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Diagnostics.DurationTimer.HasData">
            <summary>
            Gets whether this timer has data or not.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Diagnostics.DurationTimer.BeginSample">
            <summary>
            Adds beginning timestamp to the sample queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Diagnostics.DurationTimer.EndSample(FM.LiveSwitch.Diagnostics.DurationSample)">
            <summary>
            Adds an end timestamp to the sample queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Diagnostics.DurationTimer.GetStats">
            <summary>
            Processes samples and calculates instant while keeping track of the total the min, max, and average.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Diagnostics.RateTimer">
            <summary>
            A rate timer for calculating the frequency of something.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Diagnostics.RateTimer.HasData">
            <summary>
            Gets whether this timer has data or not.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Diagnostics.RateTimer.AddTick">
            <summary>
            Adds a sample.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Diagnostics.RateTimer.GetStats">
            <summary>
            Gets the current stats for this timer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Diagnostics.Timer">
            <summary>
            The base class for the diagnostic timers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Diagnostics.Timer.Watch">
            <summary>
            Gets the stop watch used in this timer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Diagnostics.Timer.Tag">
            <summary>
            Gets the tag for this diagnostic timer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Diagnostics.Timer.HasData">
            <summary>
            Gets if this Timer has data or not.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Diagnostics.Timer.GetStats">
            <summary>
            Gets a string containing the stats from this timer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Diagnostics.Timer.Destroy">
            <summary>
            Destroys this timer and its data.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Diagnostics.Timers">
            <summary>
            The management class for all diagnostic timers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Diagnostics.Timers.Enabled">
            <summary>
            Gets whether the timings diagnostics are enabled or not.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Diagnostics.Timers.OutputLogLevel">
            <summary>
            Gets or sets the log level to use when outputting the timings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Diagnostics.Timers.OutputInterval">
            <summary>
            Gets or sets the output interval (in seconds) for diagnostic timings. Setting to 0 disables.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Diagnostics.Timers.GetDurationTimer(System.String)">
            <summary>
            Gets a duration timer with a specific tag.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:FM.LiveSwitch.Diagnostics.Timers.GetDurationTimer(System.Type)">
            <summary>
            Gets a duration timer with a tag corresponding to a type name.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Diagnostics.Timers.GetRateTimer(System.String)">
            <summary>
            Gets a rate timer with a specific tag.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:FM.LiveSwitch.Diagnostics.Timers.GetRateTimer(System.Type)">
            <summary>
            Gets a rate timer with a tag corresponding to a type name.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:FM.LiveSwitch.Dtls.Transport.StopOnConnected">
            <summary>
            Gets or sets a value indicating whether this transport should stop (close) when it transitions to Connected state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtls.Transport.ClosingShouldNotTriggerGlobalNonGracefulShutdown">
            <summary>
            Gets or sets a value indicating whether closing of this transport is expected and thus should not be treated as error
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtls.Transport.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Dtls.Transport.OnStateChange">
            <summary>
            Raised when the state changes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtls.Transport.GetSrtpProtectionProfile(FM.LiveSwitch.EncryptionMode)">
            <summary>
            Converts an EncryptionMode enum to an SRTP protection profile.
            </summary>
            <param name="encryptionMode">The EncryptionMode enum.</param>
            <returns>The SRTP protection profile.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Dtls.Transport.ConnectionShouldStayAliveWhenClosed">
            <summary>
            Gets or sets a value indicating whether the connection should still be open/active when Transport is closed/stopped
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Dtls.TransportState">
            <summary>
            <see cref="T:FM.LiveSwitch.Dtls.Transport"/> states.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Dtls.TransportState.New">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Dtls.Transport"/> has been created and has not started negotiating yet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Dtls.TransportState.Connecting">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Dtls.Transport"/> is in the process of negotiating a secure connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Dtls.TransportState.Connected">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Dtls.Transport"/> has completed negotiation of a secure connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Dtls.TransportState.Closed">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Dtls.Transport"/> has been closed intentionally via a call to <see cref="M:FM.LiveSwitch.Dtls.Transport.Stop"/>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Dtls.TransportState.Failed">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Dtls.Transport"/> has been closed as the result of an error.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.BundleDescriptionManager">
            <summary>
            Object responsible for managing bundle groups within a SDP session/connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BundleDescriptionManager.UpdateDescription(FM.LiveSwitch.SessionDescription,FM.LiveSwitch.BundlePolicy,FM.LiveSwitch.SessionDescription,FM.LiveSwitch.Stream[])">
            <summary>
            Update the session description in such a way that media description is bundling-ready given policy.
            </summary>
            <param name="description">Description to be updated.</param>
            <param name="referenceDescription">Referenced corresponding offer, if this is an answer. Null if this is an offer.</param>
            <param name="policy">Bundling policy.</param>
            <param name="streams">Streams.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.BundleDescriptionManager.ReassignTransportsAndUpdateProperties(FM.LiveSwitch.SessionDescription,FM.LiveSwitch.Stream[],System.Boolean)">
            <summary>
            Reassigns Transports and updates Properties.
            </summary>
            <param name="description"></param>
            <param name="streams"></param>
            <param name="isLocal">Indicates wherther this is a local description.</param>
            <returns>A triplet: core transport to delete; core transport to replace with; index of media section.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BundleDescriptionManager.UpdateLocalOfferDescription(FM.LiveSwitch.SessionDescription,FM.LiveSwitch.BundlePolicy)">
            <summary>
            Update the session description in such a way that media description is bundling-ready given policy.
            </summary>
            <param name="description">Description to be updated.</param>
            <param name="policy">Bundling policy.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.BundleDescriptionManager.UpdateLocalAnswerOrSubsequentOfferDescription(FM.LiveSwitch.SessionDescription,FM.LiveSwitch.BundlePolicy,FM.LiveSwitch.BundleGroup[],System.Boolean)">
            <summary>
            Update the session description in such a way that media description is bundling-ready given policy.
            </summary>
            <param name="description">Description to be updated.</param>
            <param name="policy">Bundling policy.</param>
            <param name="remoteGroups">Reference groups (for the renegotiation cases).</param>
            <param name="offer"></param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Fec.RawPacket">
            <summary>
            A raw packet with data/length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.RawPacket.Length">
            <summary>
            Gets or sets the length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.RawPacket.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Fec.RawPacket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Fec.RawPacket"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Fec.Context">
            <summary>
            A context that provides codec-independent forward error correction, based
            on RFC 5109. Supports both unequal level protection (UEP) across packets
            as well as uneven level protection (ULP) within packets.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Context.SortablePacketLessThan(FM.LiveSwitch.Fec.SortablePacket,FM.LiveSwitch.Fec.SortablePacket)">
            <summary>
            Returns true if the first is less than or equal to the second.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Context.PacketLessThan(FM.LiveSwitch.Fec.Packet,FM.LiveSwitch.Fec.Packet)">
            <summary>
            Returns true if the first is less than or equal to the second.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Context.RecoveredPacketLessThan(FM.LiveSwitch.Fec.RecoveredPacket,FM.LiveSwitch.Fec.RecoveredPacket)">
            <summary>
            Returns true if the first is less than or equal to the second.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Context.MaxMediaPackets">
            <summary>
            Gets the maximum number of media packets that can be protected.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Context.IPPacketSize">
            <summary>
            Gets the maximum size of an IP packet.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Context.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Fec.Context"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Context.PacketReceived">
            <summary>
            Gets or sets whether an FEC packet has been received.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Context.Generate(System.Collections.Generic.List{FM.LiveSwitch.Fec.RawPacket},System.Int32,System.Int32,System.Boolean,FM.LiveSwitch.FecMaskType,System.Collections.Generic.List{FM.LiveSwitch.Fec.RawPacket})">
            <summary>
            Generates a list of FEC packets from supplied media packets.
            </summary>
            <param name="mediaPackets">The mediaPacketList.</param>
            <param name="protectionFactor">The protection factor (0 to 255).</param>
            <param name="numImportantPackets">The number of "important" packets which may receive greater protection.</param>
            <param name="useUnequalProtection">Whether to allocate more protection to the important packets.</param>
            <param name="maskType">The packet mask type to use.</param>
            <param name="packetList">The empty list to fill with FEC packets.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Context.Decode(System.Collections.Generic.List{FM.LiveSwitch.Fec.ReceivedPacket},System.Collections.Generic.List{FM.LiveSwitch.Fec.RecoveredPacket})">
            <summary>
            Decodes a list of media and FEC packets. It will parse the received packet
            list, storing FEC packets internally and inserting media packets into
            the output recovered packet list. The recovered list will be sorted by
            ascending sequence number and have duplicates removed.
            </summary>
            <param name="receivedPacketList">The receivedPacketList.</param>
            <param name="recoveredPacketList">The recoveredPacketList.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Context.GetNumberOfFecPackets(System.Int32,System.Int32)">
            <summary>
            Gets the number of fec packets.
            </summary>
            <param name="numMediaPackets">The number of media packets.</param>
            <param name="protectionFactor">The protection factor.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Context.PacketOverhead">
            <summary>
            Gets the packet overhead (size in bytes of the FEC/ULP headers).
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Context.ResetState(System.Collections.Generic.List{FM.LiveSwitch.Fec.RecoveredPacket})">
            <summary>
            Resets internal states from the last frame and clears the recovered packet list.
            </summary>
            <param name="recoveredPacketList">The recoveredPacketList.</param>
        </member>
        <member name="T:FM.LiveSwitch.Fec.Packet">
            <summary>
            An FEC packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Packet.ProtectedPacketList">
            <summary>
            Gets or sets the protected packet list.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Packet.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Packet.Raw">
            <summary>
            Gets or sets the raw packet.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Packet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Fec.Packet"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Fec.PacketMaskTable">
            <summary>
            An FEC packet mask table.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.PacketMaskTable.MaskType">
            <summary>
            Gets or sets the mask type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.PacketMaskTable.Table">
            <summary>
            Gets or sets the table.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Fec.PacketMaskTable.#ctor(FM.LiveSwitch.FecMaskType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Fec.PacketMaskTable"/> class.
            </summary>
            <param name="maskType">The mask type.</param>
            <param name="numMediaPackets">The number of media packets.</param>
        </member>
        <member name="T:FM.LiveSwitch.Fec.Producer">
            <summary>
            A producer of FEC packets.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Producer.ExcessOverheadBelowMax">
            <summary>
            Gets a value indicating whether the excess overhead is below the maximum allowed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Producer.MinimumMediaPacketsReached">
            <summary>
            Gets a value indicating whether the minimum number of media packets has been reached.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Producer.FecAvailable">
            <summary>
            Gets a value indicating whether FEC packets are available.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Producer.Overhead">
            <summary>
            Gets the overhead relative to the number of media packets (not
            relative to the total number of packets). This definition is
            inherited from the protection factor and how the FEC generation
            is implemented.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Producer.#ctor(FM.LiveSwitch.Fec.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Fec.Producer"/> class.
            </summary>
            <param name="fec">The fec.</param>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Producer.SetFecParameters(FM.LiveSwitch.FecProtectionParameters,System.Int32)">
            <summary>
            Sets the FEC parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="numberFirstPartition">The number of first partition packets.</param>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Producer.BuildRedPacket(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a RED packet.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
            <param name="payloadLength">Length of the payload.</param>
            <param name="rtpHeaderLength">Length of the RTP header.</param>
            <param name="redPayloadType">Type of the red payload.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Producer.AddRtpPacketAndGenerateFec(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds an RTP packet and generates FEC.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
            <param name="payloadLength">Length of the payload.</param>
            <param name="rtpHeaderLength">Length of the RTP header.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Producer.GetFecPacket(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the FEC/RED packet.
            </summary>
            <param name="redPayloadType">Type of the RED payload.</param>
            <param name="fecPayloadType">Type of the FEC payload.</param>
            <param name="sequenceNumber">The sequence number.</param>
            <param name="rtpHeaderLength">Length of the RTP header.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Fec.ProtectedPacket">
            <summary>
            A protected packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.ProtectedPacket.Raw">
            <summary>
            Gets or sets the raw packet.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Fec.ProtectionMode">
            <summary>
            Forward error correction protection modes.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Fec.ProtectionMode.NoOverlap">
            <summary>
            Indicates no overlap.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Fec.ProtectionMode.Overlap">
            <summary>
            Indicates overlap.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Fec.ProtectionMode.BiasFirstPacket">
            <summary>
            Indicates a bias towards the first packet.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Fec.ReceivedPacket">
            <summary>
            A received packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.ReceivedPacket.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            This must have a value for FEC packets, but
            is not required for media packets.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.ReceivedPacket.IsFec">
            <summary>
            Gets or sets whether this is an FEC packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.ReceivedPacket.Raw">
            <summary>
            Gets or sets the raw packet.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Fec.Receiver">
            <summary>
            A context for managing incoming data for FEC.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Receiver.NumPackets">
            <summary>
            Gets the number of received packets.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Receiver.NumFecPackets">
            <summary>
            Gets the number of received FEC packets.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Receiver.LastPacketReceivedSoloFec">
            <summary>
            Gets whether the last packet received contained FEC 
            but no media payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.Receiver.NumRecoveredPackets">
            <summary>
            Gets the number of recovered media packets using FEC.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Receiver.#ctor(FM.LiveSwitch.Action2{FM.LiveSwitch.Fec.RawPacket,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Fec.Receiver"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Receiver.AddReceivedRedPacket(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds a received RED packet.
            </summary>
            <param name="incomingRtpHeaderLength">Length of the incoming RTP header.</param>
            <param name="incomingRtpSequenceNumber">The incoming RTP sequence number.</param>
            <param name="incomingRtpPacket">The incoming RTP packet.</param>
            <param name="packetLength">Length of the packet.</param>
            <param name="fecPayloadType">The FEC payload type.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Fec.Receiver.ProcessReceivedFec">
            <summary>
            Processes received FEC data.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Fec.RecoveredPacket">
            <summary>
            A recovered packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.RecoveredPacket.WasRecovered">
            <summary>
            Gets or sets whether the packet was recovered by FEC.
            Otherwise it was a media packet passed in through
            the received packet list.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.RecoveredPacket.Returned">
            <summary>
            Gets or sets whether the packet has already been
            returned to the caller through the callback.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.RecoveredPacket.LengthRecovery">
            <summary>
            Gets or sets the two bytes used for recovering
            the packet length with XOR operations.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.RecoveredPacket.Raw">
            <summary>
            Gets or sets the raw packet.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Fec.RecoveredPacket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Fec.RecoveredPacket"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Fec.RedPacket">
            <summary>
            A RED packet for FEC.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.RedPacket.RedForFecHeaderLength">
            <summary>
            Gets the length of the RED header for FEC.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.RedPacket.MaxExcessOverhead">
            <summary>
            Gets the maximum amount of excess overhead (actual - target)
            allowed in order to trigger GenerateFEC(), before the maximum
            number of FEC frames is reached. Overhead here is defined as
            relative to number of media packets.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.RedPacket.MinimumMediaPackets">
            <summary>
            Gets the minimum number of media packets required (above some
            protection level) in order to trigger GenerateFEC(), before
            the maximum number of FEC frames is reached.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.RedPacket.HighProtectionThreshold">
            <summary>
            Gets the threshold on the received FEC protection level, above
            which we enforce at least <see cref="P:FM.LiveSwitch.Fec.RedPacket.MinimumMediaPackets"/>
            packets for the FEEC code. Below this threshold,
            <see cref="P:FM.LiveSwitch.Fec.RedPacket.MinimumMediaPackets"/> is set ot the default value
            of 1. Valid range is 0 to 255, where 255 corresponds to 100%
            overhead (relative to the number of media packets).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.RedPacket.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.RedPacket.Length">
            <summary>
            Gets or sets the length.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Fec.RedPacket.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Fec.RedPacket"/> class.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.Fec.RedPacket.CreateHeader(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the header.
            </summary>
            <param name="rtpHeader">The RTP header.</param>
            <param name="headerLength">Length of the header.</param>
            <param name="redPayloadType">Type of the RED payload.</param>
            <param name="payloadType">Type of the payload.</param>
        </member>
        <member name="M:FM.LiveSwitch.Fec.RedPacket.SetSequenceNumber(System.Int32)">
            <summary>
            Sets the sequence number.
            </summary>
            <param name="sequenceNumber">The sequence number.</param>
        </member>
        <member name="M:FM.LiveSwitch.Fec.RedPacket.AssignPayload(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Assigns the payload.
            </summary>
            <param name="payload">The payload.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.Fec.RedPacket.ClearMarkerBit">
            <summary>
            Clears the marker bit.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Fec.RedPacket.GetPayloadTypes(System.Byte[],System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the payload types inside the RTP payload of a RED packet.
            </summary>
            <param name="rtpPayload">The RTP payload.</param>
            <param name="payloadType1">The first payload type.</param>
            <param name="payloadType1Offset">The offset of the first payload type.</param>
            <param name="payloadType2">The second payload type.</param>
            <param name="payloadType2Offset">The offset of the second payload type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Fec.RedPacket.ReplacePayloadTypes(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Replaces the payload types inside the RTP payload of a RED packet.
            </summary>
            <param name="rtpPayload">The RTP payload.</param>
            <param name="sourceMediaPayloadType">The source media payload type.</param>
            <param name="targetMediaPayloadType">The target media payload type.</param>
            <param name="sourceFecPayloadType">The source FEC payload type.</param>
            <param name="targetFecPayloadType">The target FEC payload type.</param>
        </member>
        <member name="T:FM.LiveSwitch.Fec.SortablePacket">
            <summary>
            A sortable packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fec.SortablePacket.SequenceNumber">
            <summary>
            Gets or sets the sequence number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.LossController.SystemClock">
            <summary>
            Gets the system clock.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.LossController.BandwidthEstimate">
            <summary>
            Gets the bandwidth estimate, in kbps.
            A value of -1 indicates an unknown estimate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.LossController.MaxBandwidthEstimate">
            <summary>
            Gets the max bandwidth estimate, in kbps.
            A value of -1 (unset) indicates an unknown maximum estimate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.LossController.CurrentBitrate">
            <summary>
            Gets or sets the current bitrate, in kbps.
            A value of -1 (unset) indicates an unknown bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.LossController.InitialBandwidthEstimate">
            <summary>
            Gets the initial bandwidth estimate, in kbps.
            A value of -1 indicates an unknown estimate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.LossController.SoftInitialBandwidthEstimateMultiplier">
            <summary>
            Gets the soft multiplier for the initial bandwidth estimate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.LossController.SoftMaxBandwidthEstimateMultiplier">
            <summary>
            Gets the soft multiplier for the max bandwidth estimate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.LossController.#ctor(FM.LiveSwitch.ISystemClock,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rtp.LossController"/> class.
            </summary>
            <param name="systemClock">The system clock.</param>s
            <param name="initialBandwidthEstimate">The initial bandwidth estimate, or -1 if unknown.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.LossController.#ctor(FM.LiveSwitch.ISystemClock,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rtp.LossController"/> class.
            </summary>
            <param name="systemClock">The system clock.</param>s
            <param name="initialBandwidthEstimate">The initial bandwidth estimate, or -1 if unknown.</param>
            <param name="softInitialBandwidthEstimateMultiplier">The soft multiplier for the initial bandwidth estimate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.LossController.#ctor(FM.LiveSwitch.ISystemClock,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rtp.LossController"/> class.
            </summary>
            <param name="systemClock">The system clock.</param>s
            <param name="initialBandwidthEstimate">The initial bandwidth estimate, or -1 if unknown.</param>
            <param name="softInitialBandwidthEstimateMultiplier">The soft multiplier for the initial bandwidth estimate.</param>
            <param name="softMaxBandwidthEstimateMultiplier">The soft multiplier for the max bandwidth estimate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.LossController.HardReset(System.Double)">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.LossController.SoftReset(System.Double)">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.LossController.Update(System.Double)">
            <summary>
            Adds a sample to the loss controller. This sample should
            come from the 'fraction lost' value in an RTCP report block,
            transformed to the 0..1 floating-point range.
            </summary>
            <param name="percentLost"></param>
        </member>
        <member name="T:FM.LiveSwitch.Rtp.HeaderExtensionRegistryArgs">
            <summary>
            RTP Header Extension Registry Args.
            This implementation follows https://tools.ietf.org/html/rfc5285
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.InboundRtcp.Frames">
            <summary>
            Gets or sets the parsed control frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.InboundRtcp.NetworkSystemTimestamp">
            <summary>
            Gets or sets the network system timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.InboundRtcp.TransportSystemTimestamp">
            <summary>
            Gets or sets the transport system timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.InboundRtcp.Footprint">
            <summary>
            Gets the memory footprint.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.InboundRtp.Header">
            <summary>
            Gets or sets the header parsed out of <see cref="T:FM.LiveSwitch.DataBuffer"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.InboundRtp.Buffer">
            <summary>
            Gets or sets the entire raw RTP packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.InboundRtp.NetworkSystemTimestamp">
            <summary>
            Gets or sets the network system timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.InboundRtp.TransportSystemTimestamp">
            <summary>
            Gets or sets the transport system timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.InboundRtp.Footprint">
            <summary>
            Gets or sets the memory footprint.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterEstimator.UpdateEstimate(System.Int64,System.Int32)">
            <summary>
            Updates the jitter estimate with a complete frame.
            </summary>
            <param name="frameDelayMillis">The frame delay.</param>
            <param name="frameLength">The frame length.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterEstimator.UpdateEstimate(System.Int64,System.Int32,System.Boolean)">
            <summary>
            Updates the jitter estimate with a frame.
            </summary>
            <param name="frameDelayMillis">The frame delay.</param>
            <param name="frameLength">The frame length.</param>
            <param name="incompleteFrame">Whether the estimate is being updated before the frame is complete.</param>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterEstimator.JitterEstimate">
            <summary>
            Gets the current jitter estimate in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterEstimator.UpdateMaxFrameSize(System.Int32)">
            <summary>
            Updates the max frame size.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterEstimator.KalmanEstimateChannel(System.Int64,System.Int32)">
            <summary>
            Updates the Kalman filter for the line describing the frame size dependent jitter.
            </summary>
            <param name="frameDelayMillis">The frame delay in milliseconds.</param>
            <param name="frameSizeDelta">The frame size delta (the frame size at time T minus frame size at time T-1).</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterEstimator.EstimateRandomJitter(System.Double,System.Boolean)">
            <summary>
            Updates the random jitter estimate, i.e. the variance
            of the time deviations from the line given by the Kalman filter.
            </summary>
            <param name="dev">The deviation from the kalman estimate.</param>
            <param name="incompleteFrame">Whether the estimate is being updated before the frame is complete.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterEstimator.CalculateEstimate">
            <summary>
            Calculates the current jitter estimate.
            </summary>
            <returns>The current jitter estimate in milliseconds.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterEstimator.DeviationFromExpectedDelay(System.Int64,System.Int32)">
            <summary>
            Calculates the difference in delay between a sample and the
            expected delay estimated by the Kalman filter.
            </summary>
            <param name="frameDelayMillis">The frame delay.</param>
            <param name="frameSizeDelta">The frame size delta (the frame size at time T minus frame size at time T-1).</param>
            <returns>The difference in milliseconds.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Rtp.MissingFrame">
            <summary>
            Details about a missing frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.MissingFrame.SequenceNumber">
            <summary>
            Gets the sequence number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.MissingFrame.LastNackSystemTimestamp">
            <summary>
            Gets the last NACK system timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.MissingFrame.NackCount">
            <summary>
            Gets the number of times this frame has been NACKed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.MissingFrame.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rtp.MissingFrame"/> class.
            </summary>
            <param name="sequenceNumber">The sequence number.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.MissingFrame.Nacked(System.Int64)">
            <summary>
            Updates the missing frame following a NACK.
            </summary>
            <param name="systemTimestamp">The system timestamp.</param>
        </member>
        <member name="T:FM.LiveSwitch.Rtp.JitterBuffer`4">
            <summary>
            A jitter buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.Holding">
            <summary>
            Gets whether any frames are being actively held back
            because of a sequence gap.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.HeldCount">
            <summary>
            Gets the number of frames being actively held back
            because of a sequence gap.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.HeldSequenceNumbers">
            <summary>
            Gets the sequence numbers being actively held back
            because of a sequence gap.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.MissingCount">
            <summary>
            Gets the number of frames currently missing from the
            sequence of frames being active held back.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.MissingFrames">
            <summary>
            Gets details about the frames currently missing from the
            sequence of frames being active held back.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.MissingSequenceNumbers">
            <summary>
            Gets the sequence numbers currently missing from the
            sequence of frames being active held back.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.LateCount">
            <summary>
            Gets the number of frames discarded due to arriving after
            an older frame had been released from the buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.DuplicateCount">
            <summary>
            Gets the number of frames discarded due to being a duplicate
            of a frame already received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.FoundCount">
            <summary>
            Gets the number of frames that were missing but received
            before older frames were released from the buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.LostCount">
            <summary>
            Gets the number of frames that were missing and not received
            before older frames were released from the buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.NackEnabled">
            <summary>
            Gets or sets whether negative acknowledgements are enabled.
            Enabling negative acknowledgements will also include the
            round-trip-time (RTT) in the overall duration of this buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.AverageFrameDurationTicks">
            <summary>
            Gets or sets the average frame duration in ticks, if known.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.AverageFrameDurationMillis">
            <summary>
            Gets or sets the average frame duration in milliseconds, if known.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.RoundTripTimeTicks">
            <summary>
            Gets or sets the average round-trip-time in ticks, if known.
            Only used if NACK is enabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.RoundTripTimeMillis">
            <summary>
            Gets or sets the average round-trip-time in milliseconds, if known.
            Only used if NACK is enabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.JitterEstimateTicks">
            <summary>
            Gets or sets the network jitter estimate in ticks, if known.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.JitterEstimateMillis">
            <summary>
            Gets or sets the network jitter estimate in milliseconds, if known.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.MinExpiryTicks">
            <summary>
            Gets or sets the minimum expiry in ticks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.MinExpiryMillis">
            <summary>
            Gets or sets the minimum expiry in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.MaxExpiryTicks">
            <summary>
            Gets or sets the maximum expiry in ticks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.MaxExpiryMillis">
            <summary>
            Gets or sets the maximum expiry in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.ExpiryTicks">
            <summary>
            Gets the current expiry in ticks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.ExpiryMillis">
            <summary>
            Gets the current expiry in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.Head">
            <summary>
            Gets the first held frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.Tail">
            <summary>
            Gets the last held frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.JitterBuffer`4.RtpStreamId">
            <summary>
            Gets or sets the RTP stream ID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterBuffer`4.#ctor(System.Int32,FM.LiveSwitch.Action1{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rtp.JitterBuffer`4"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
            <param name="pop">The action to invoke when a frame is ready for additional processing.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterBuffer`4.Push(`0,System.Int64)">
            <summary>
            Pushes a frame into the buffer. The frame should represent a single packet.
            </summary>
            <param name="frame">The frame.</param>
            <param name="systemTimestamp">The system timestamp.</param>
            <returns>The sequence numbers to NACK, or <c>null</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterBuffer`4.Pop(`0)">
            <summary>
            Pops the specified frame to the owning code.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterBuffer`4.TryPopHead">
            <summary>
            Pops the buffer head if it can be done without
            introducing a discontinuity in the stream.
            </summary>
            <returns><c>true</c> if a frame was popped; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterBuffer`4.TryPopGap">
            <summary>
            Pops the buffer head as needed until the buffer
            is no longer violating duration constraints.
            </summary>
            <returns><c>true</c> if at least one frame was popped; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterBuffer`4.TryGetNackSequenceNumbers(System.Int64)">
            <summary>
            Gets the missing sequence numbers that are ready to be NACKed
            (i.e. they have never been NACKed before or sufficient time has
            elapsed since the last NACK to try again). If there are no missing
            frames, or if NACK is disabled, this will return <c>null</c>.
            </summary>
            <param name="systemTimestamp">The current system timestamp.</param>
            <returns>An array of sequence numbers to NACK, or <c>null</c> if there is nothing to NACK.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterBuffer`4.TryHold(`0)">
            <summary>
            Holds a frame for later processing provided it is not
            a duplicate. Updates the list of missing sequence numbers
            as required.
            </summary>
            <param name="frame">The frame.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.JitterBuffer`4.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.OutboundRtcp.Frames">
            <summary>
            Gets or sets the parsed control frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.OutboundRtcp.TransportSystemTimestamp">
            <summary>
            Gets or sets the transport system timestamp.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Rtp.HeaderSdesMid">
            <summary>
            The SDES MID RTP Header Extension.
            
            It is simply used to associate RTP-based media with the correct SDP
            media description("m=" section) in the SDP used to negotiate the media.
            
            The purpose of the extension is for the offerer to be able to
            associate received multiplexed RTP-based media before the offerer
            receives the associated SDP answer.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Rtp.Listener.OnReceiveRtp">
            <summary>
            Raised when an RTP data buffer is received.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Rtp.Listener.OnReceiveRtcp">
            <summary>
            Raised when an RTCP data buffer is received.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Rtp.Listener.OnStateChange">
            <summary>
            Raised when the state changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Listener.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Listener.MediaTransport">
            <summary>
            Gets the media transport.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Listener.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.Listener.#ctor(System.Object,FM.LiveSwitch.Rtp.VideoTransport)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rtp.Listener" /> class.
            </summary>
            <param name="lockObject">The lock object.</param>
            <param name="videoTransport">The video transport.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.Listener.#ctor(System.Object,FM.LiveSwitch.Rtp.AudioTransport)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rtp.Listener" /> class.
            </summary>
            <param name="lockObject">The lock object.</param>
            <param name="audioTransport">The video transport.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.Listener.Start(System.Int32)">
            <summary>
            Starts this instance.
            An RTP/Listener cannot be reused once it has been stopped. 
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Rtp.Listener.Stop">
            <summary>
            Stops this instance.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Receiver`5.TestReceivedRtpBuffer">
            <summary>
            Gets or sets a method that can be used to test and optionally modify inbound RTP buffers.
            FOR TESTING PURPOSES ONLY. Returning <c>null</c> will cause the buffer to be discarded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Receiver`5.LegacyJitterBuffer">
            <summary>
            Gets the jitter buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Receiver`5.LegacyNackBuffer">
            <summary>
            Gets the nack buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Sender`5.TestSendingRtpBuffer">
            <summary>
            Gets or sets a method that can be used to test and optionally modify outbound RTP buffers.
            FOR TESTING PURPOSES ONLY. Returning <c>null</c> will cause the buffer to be discarded.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.Sender`5.GetNextRtpSequenceNumber(System.Int64@)">
            <summary>
            Gets the next sequence number.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Rtp.ArrivalTimeFilter">
            <summary>
            This class implements Arrival-time filter using Kalman filter algorithm following https://tools.ietf.org/html/draft-alvestrand-rmcat-congestion-03 .
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.ArrivalTimeFilter.Smooth(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates smoothed estimate of current bitrate (throughput) and smoothed estimate of delay offset given the earlier values, new intergroup delay and the size of the packet group.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Rtp.HeaderAbsSendTime">
            <summary>
            The Absolute Send Time extension is used to stamp RTP packets with a timestamp showing the departure time from the system 
            that put this packet on the wire (or as close to this as can be managed).
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Rtp.HeaderExtension">
            <summary>
            RTP Header Extension defined in RFC 3550 5.3.1 and extended in RFC 5285
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.HeaderExtension.Form">
            <summary>
            Gets or sets Header Extension Form. Shows what kind of header extensions elements are present in 
            this header extension.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.HeaderExtension.HeaderExtensionElements">
            <summary>
            Gets a collection of header extension elements present in this header extension.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.HeaderExtension.AbsSendTime">
            <summary>
            Gets or sets abs-send-time RTP Header extension element in this Header Extension.
            If the element is got and it is not present, null is returned.
            If the element is set and it is present, it is over-written.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.HeaderExtension.SdesMid">
            <summary>
            Gets or sets MID RTP Header extension element in this Header Extension.
            If the element is got and it is not present, null is returned.
            If the element is set and it is present, it is over-written.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.HeaderExtension.SdesRtpStreamId">
            <summary>
            Gets or sets RtpStreamId RTP Header extension element in this Header Extension.
            If the element is got and it is not present, null is returned.
            If the element is set and it is present, it is over-written.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.HeaderExtension.SdesRepairedRtpStreamId">
            <summary>
            Gets or sets RepairedRtpStreamId RTP Header extension element in this Header Extension.
            If the element is got and it is not present, null is returned.
            If the element is set and it is present, it is over-written.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.HeaderExtension.ExtensionElementCount">
            <summary>
            Gets the number of RTP Header Extension elements in this header extension.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.HeaderExtension.AppBits">
            <summary>
            Gets application bits for the two-byte extension headers. For one-byte extension headers returns 0.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.HeaderExtension.Id">
            <summary>
            Gets RTP Header extension identifier, defined by profile.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtension.#ctor(FM.LiveSwitch.Rtp.HeaderExtensionForm,FM.LiveSwitch.Rtp.HeaderExtensionElement[])">
            <summary>
            RTP Header Extension.
            </summary>
            <param name="form">Header Extension Form (1-bit or 2-bit).</param>
            <param name="elements">Header extension elements.</param>
            <returns>RTP HeaderExtension.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtension.#ctor(FM.LiveSwitch.Rtp.HeaderExtensionForm,FM.LiveSwitch.Rtp.HeaderExtensionElement[],System.Int32)">
            <summary>
            RTP Header Extension.
            </summary>
            <param name="form">Header Extension Form (1-bit or 2-bit).</param>
            <param name="elements">Header extension elements.</param>
            <param name="appBits">App bits - only for the two-byte extension elements.</param>
            <returns>RTP HeaderExtension.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtension.GetData">
            <summary>
            Converts this instance to a byte array.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtension.FillBuffer(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Fills a buffer with the bytes that make up this header extension.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtension.FillBytes(FM.LiveSwitch.Rtp.HeaderExtension,FM.LiveSwitch.DataBuffer,System.Int32,System.Boolean)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="extension">The packet.</param>
            <param name="buffer">The buffer to fill.</param>
            <param name="offset">Offset at which to fill buffer.</param>
            <param name="includeHeader">Indicates whether header extension header must be included.</param>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.HeaderExtension.Length">
            <summary>
            Gets the length of this header extension.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtension.ParseBytes(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.Rtp.HeaderExtensionRegistry)">
            <summary>
            Parses a header extension.
            </summary>
            <param name="bytes">Bytes to parse.</param>
            <param name="registry">RTP Header extension registry.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtension.ParsePayload(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.Rtp.HeaderExtensionRegistry,FM.LiveSwitch.Rtp.HeaderExtensionForm,System.Int32)">
            <summary>
            Parses a header extension payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtension.ParseRawHeaderExtension(FM.LiveSwitch.Rtp.RawHeaderExtension,FM.LiveSwitch.Rtp.HeaderExtensionRegistry)">
            <summary>
            Parses a raw header extension.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Rtp.HeaderExtensionElement">
            <summary>
            RTP Header Extension Element.
            cf. https://tools.ietf.org/html/rfc5285
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.HeaderExtensionElement.Type">
            <summary>
            Gets or sets RTP Header Extension Element Type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.HeaderExtensionElement.Form">
            <summary>
            Gets or sets Header Extension Form. Shows what kind of header extensions elements are present in 
            this header extension.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.HeaderExtensionElement.Id">
            <summary>
            Gets or sets the dynamic identifier of this RTP Header Extension.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.HeaderExtensionElement.Length">
            <summary>
            Gets the length of this header extension elements in bytes (including the one- or two--byte header.)
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtensionElement.ParseBytes(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.Rtp.HeaderExtensionForm,FM.LiveSwitch.Rtp.HeaderExtensionRegistry,System.Int32@)">
            <summary>
            Used to parse bytes in a given data buffer starting at a specified offset. Returns null if a padding byte is encountered.
            </summary>
            <param name="buf">Data buffer to parse.</param>
            <param name="offset">Starting position for parsing.</param>
            <param name="form">Header extension form.</param>
            <param name="registry">RTP Header extension registry.</param>
            <param name="bytesRead">Bytes read while parsing this element.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Rtp.HeaderExtensionForm">
            <summary>
            Header Extension form type. 
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Rtp.HeaderExtensionForm.OneByte">
            <summary>
            Indicates a one-byte header extension form.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Rtp.HeaderExtensionForm.TwoByte">
            <summary>
            Indicates a two-byte header extension form.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Rtp.HeaderExtensionRegistry">
            <summary>
            RTP Header Extension Registry.
            This implementation follows https://tools.ietf.org/html/rfc5285
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtensionRegistry.#ctor">
            <summary>
            RTP Header Extension Registry.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtensionRegistry.#ctor(FM.LiveSwitch.Rtp.HeaderExtensionRegistryArgs)">
            <summary>
            RTP Header Extension Registry.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtensionRegistry.Clear">
            <summary>
            Deletes all the registry entries.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtensionRegistry.Update(FM.LiveSwitch.Rtp.HeaderExtensionType,FM.LiveSwitch.StreamDirection,System.String)">
            <summary>
            Updates information regarding provided RTP Header Extension in the registry.
            </summary>
            <param name="direction">Direction of the header extension.</param>
            <param name="type">Type of header extension.</param>
            <param name="uri">Uri of the header extension.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtensionRegistry.Register(FM.LiveSwitch.Rtp.HeaderExtensionType,FM.LiveSwitch.StreamDirection,System.String)">
            <summary>
            Registers provided RTP Header Extension.
            </summary>
            <param name="direction">Direction of the header extension.</param>
            <param name="type">Type of header extension.</param>
            <param name="uri">Uri of the header extension.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtensionRegistry.Register(FM.LiveSwitch.Rtp.HeaderExtensionType,FM.LiveSwitch.StreamDirection,System.String,System.Int32)">
            <summary>
            Registers provided RTP Header Extension.
            If the ID flls outside of the valid range, an attempt is made to assign a valid Id.
            At the moment the assumption is that if multiple mutually exclusive RTP Header extensions are offered, one of them should be picked
            using logic outside of this class. These extensions will have the same id in the range outside of the valid range.
            In the future, when our clients supoort such scenarios, additional methods of registering mutually exclusive header extensions will need to be added.
            </summary>
            <param name="direction">Direction of the header extension.</param>
            <param name="type">Type of header extension.</param>
            <param name="uri">Uri of the header extension.</param>
            <param name="id">Id of this element.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtensionRegistry.Populate(FM.LiveSwitch.Rtp.HeaderExtensionRegistryElement[])">
            <summary>
            Repopulates the registry, clearing any existing values and not trying to maintain each RTP extension header IDs.
            </summary>
            <param name="elements">Header extension requiring registration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.HeaderExtensionRegistry.Unify(FM.LiveSwitch.Rtp.HeaderExtensionRegistry)">
            <summary>
            Unifies this registry with teh registries from other (bundled) stream.
            If conflicts arise with ID assignments, this registry takes priority and errors are logged.
            </summary>
            <param name="otherRegistry">Header Extension Registry from the bundled stream.</param>
        </member>
        <member name="T:FM.LiveSwitch.Rtp.HeaderExtensionType">
            <summary>
            RTP Header Extension Element Types
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Rtp.HeaderExtensionType.AbsSendTime">
            <summary>
            RTP Header Extension for Absolute Sender Time.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Rtp.HeaderExtensionType.SdesRtpStreamId">
            <summary>
            RTP SDES Header Extension for RTP Stream ID.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Rtp.HeaderExtensionType.SdesRepairedRtpStreamId">
            <summary>
            RTP SDES Header Extension for Repaired RTP Stream ID.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Rtp.HeaderExtensionType.SdesMid">
            <summary>
            RTP SDES Header Extension for Media identification.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Rtp.HeaderExtensionType.Unknown">
            <summary>
            Unknown RTP Header Extension
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.Parameters`2.HasNegotiatedPayloadType(System.Int32)">
            <summary>
            Determines whether this transport has negotiated a payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.Parameters`2.SetNegotiatedFormat(System.Int32,`0)">
            <summary>
            Sets a negotiated format.
            </summary>
            <param name="payloadType">The payload type.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.Parameters`2.GetNegotiatedFormat(System.Int32)">
            <summary>
            Gets a negotiated format given a payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.Parameters`2.GetNegotiatedPayloadType(`0)">
            <summary>
            Gets a negotiated payload type given a format description.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="T:FM.LiveSwitch.Rtp.RawHeaderExtension">
            <summary>
            An Rtp header extension that hasn't been parsed yet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.RawHeaderExtension.Payload">
            <summary>
            Gets the header extension payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.RawHeaderExtension.Id">
            <summary>
            Gets the header extension ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.RawHeaderExtension.Form">
            <summary>
            Gets the header extension form.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.RawHeaderExtension.AppBits">
            <summary>
            Gets the app bits.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.RawHeaderExtension.Length">
            <summary>
            Gets the length of the header extension in 32-bit words.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.RawHeaderExtension.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Create a new instance of the RawHeaderExtension.
            </summary>
            <param name="id">The 2 byte ID.</param>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.RawHeaderExtension.FillBuffer(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Serialize the header extension to a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset to start writing at.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.SendBuffer`4.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rtp.SendBuffer`4"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="size">The size.</param>
        </member>
        <member name="T:FM.LiveSwitch.Rtp.Transport`5">
            <summary>
            An RTP Transport.
            </summary>
            <typeparam name="TFrame">The type of the frame.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <typeparam name="TFormatCollection">The type of the format collection.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.Direction">
            <summary>
            Gets the direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.SimulcastMode">
            <summary>
            Gets the simulcast mode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.JitterConfig">
            <summary>
            Gets the jitter configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.NackConfig">
            <summary>
            Gets the NACK configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.RedFecConfig">
            <summary>
            Gets the FEC configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.LegacyReceiver">
            <summary>
            Gets or sets a value indicating whether to use legacy receiver processing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.DisableAutomaticReports">
            <summary>
            Gets or sets a value indicating whether to disable automatic reports.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.RtpTransport">
            <summary>
            Gets the underlying RTP transport.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.RtcpTransport">
            <summary>
            Gets or sets the underlying RTCP transport.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.Listener">
            <summary>
            Gets the listener.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.LocalProtectionParameters">
            <summary>
            Gets the local protection parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.RemoteProtectionParameters">
            <summary>
            Gets the remote protection parameters.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Rtp.Transport`5.OnSendControlFrames">
            <summary>
            Raised when control frames are being sent.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Rtp.Transport`5.OnSendControlFrameResponses">
            <summary>
            Raised when control frame responses are being sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.GetInboundRtpTransportSystemTimestamp">
            <summary>
            Gets or sets a method that overrides the default transport system timestamp behaviour for inbound RTP packets.
            FOR TESTING PURPOSES ONLY.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.GetInboundRtcpTransportSystemTimestamp">
            <summary>
            Gets or sets a method that overrides the default transport system timestamp behaviour for inbound RTCP packets.
            FOR TESTING PURPOSES ONLY.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.GetOutboundRtcpTransportSystemTimestamp">
            <summary>
            Gets or sets a method that overrides the default transport system timestamp behaviour for outbound RTCP packets.
            FOR TESTING PURPOSES ONLY.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.TestReceivedRtpBuffer">
            <summary>
            Gets or sets a method that can be used to test and optionally modify inbound RTP buffers.
            FOR TESTING PURPOSES ONLY. Returning <c>null</c> will cause the buffer to be discarded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.TestSendingRtpBuffer">
            <summary>
            Gets or sets a method that can be used to test and optionally modify outbound RTP buffers.
            FOR TESTING PURPOSES ONLY. Returning <c>null</c> will cause the buffer to be discarded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.RembEnabled">
            <summary>
            Gets or sets whether REMB is enabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.LossBasedOutboundBandwidthEstimate">
            <summary>
            Gets the loss-based outbound bandwidth estimate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.LossBasedInboundBandwidthEstimate">
            <summary>
            Gets the loss-based inbound bandwidth estimate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.InitialLossBasedOutboundBandwidthEstimate">
            <summary>
            Gets the initial loss-based outbound bandwidth estimate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.InitialLossBasedInboundBandwidthEstimate">
            <summary>
            Gets the initial loss-based inbound bandwidth estimate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.RequestedOutboundBitrate">
            <summary>
            Gets the requested outbound bitrate as set by inbound REMB.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.RequestedInboundBitrate">
            <summary>
            Gets the requested inbound bitrate as set by outbound REMB.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.OutboundBandwidthEstimate">
            <summary>
            Gets the outbound bandwidth estimate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.InboundBandwidthEstimate">
            <summary>
            Gets the inbound bandwidth estimate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.InitialOutboundBandwidthEstimate">
            <summary>
            Gets the initial outbound bandwidth estimate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.InitialInboundBandwidthEstimate">
            <summary>
            Gets the initial inbound bandwidth estimate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.Transport`5.RoundTripTime">
            <summary>
            Gets the current round-trip-time in milliseconds.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Rtp.UnknownHeaderExtensionElement">
            <summary>
            Unknown (yet valid) header extension element.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.UnknownHeaderExtensionElement.ParseBytes(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.Rtp.HeaderExtensionForm,System.Int32@)">
            <summary>
            Used to parse bytes in a given data buffer starterting at a specified offset. Returns null if a padding byte is encountered.
            </summary>
            <param name="buf">Data buffer to parse.</param>
            <param name="offset">Starting position for parsing.</param>
            <param name="bytesRead">Number of bytes consumed while parsing.</param>
            <param name="form">Header extensioin form</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.UnknownHeaderExtensionElement.Payload">
            <summary>
            Payload of the unknown RTP Header Extension Element
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtp.UnknownHeaderExtensionElement.#ctor(FM.LiveSwitch.Rtp.HeaderExtensionForm,System.Int32,System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Creates Absolute Send Time extension object
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtp.UnknownHeaderExtensionElement.Length">
            <summary>
            Gets the length of this header extension elements in bytes (including the header).
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.AudioSimulcastConfig">
            <summary>
            An audio simulcast configuration.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioSimulcastConfig.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioSimulcastConfig"/> class.
            </summary>
            <param name="encodingCount">The encoding count.</param>
            <param name="preferredBitrate">The preferred bitrate, in kbps.</param>
        </member>
        <member name="T:FM.LiveSwitch.VideoSimulcastConfig">
            <summary>
            A video simulcast configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSimulcastConfig.BitsPerPixel">
            <summary>
            Gets or sets the desired bits-per-pixel (bpp).
            If this value is set and the video source has
            declared a target width, height, and frame-rate,
            encoding bitrates will be automatically calculated
            using this value instad of using preferred bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSimulcastConfig.DegradationPreference">
            <summary>
            Gets or sets the degradation preference.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoSimulcastConfig.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoSimulcastConfig"/> class.
            </summary>
            <param name="encodingCount">The encoding count.</param>
            <param name="preferredBitrate">The preferred bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoSimulcastConfig.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoSimulcastConfig"/> class.
            </summary>
            <param name="encodingCount">The encoding count.</param>
            <param name="preferredBitrate">The preferred bitrate, in kbps.</param>
            <param name="bitsPerPixel">The bits-per-pixel.</param>
        </member>
        <member name="T:FM.LiveSwitch.SimulcastConfig">
            <summary>
            A simulcast configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SimulcastConfig.Disabled">
            <summary>
            Gets or sets whether simulcast is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SimulcastConfig.EncodingCount">
            <summary>
            Gets or sets the number of encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SimulcastConfig.PreferredBitrate">
            <summary>
            Gets or sets the preferred bitrate, in kbps.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SimulcastConfig.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SimulcastConfig"/> class.
            </summary>
            <param name="encodingCount">The encoding count.</param>
            <param name="preferredBitrate">The preferred bitrate, in kbps.</param>
        </member>
        <member name="T:FM.LiveSwitch.TmmbrEntry">
            <summary>
            An RTCP temporary maximum media-stream bitrate request (TMMBR) packet entry.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbrEntry.FixedPayloadLength">
            <summary>
            Gets or sets the fixed length of an FIR entry.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbrEntry.DataBuffer">
            <summary>
            Gets or sets the backing data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbrEntry.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbrEntry.MaximumBitrateExponent">
            <summary>
            Gets or sets the maximum bitrate exponent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbrEntry.MaximumBitrateMantissa">
            <summary>
            Gets or sets the maximum bitrate mantissa.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbrEntry.MaximumBitrate">
            <summary>
            Gets or sets the maximum bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbrEntry.NormalizedMaximumBitrate">
            <summary>
            Gets or sets the normalized maximum bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbrEntry.MeasuredOverhead">
            <summary>
            Gets or sets the measured average packet overhead in bytes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TmmbrEntry.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TmmbrEntry"/> class.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.TmmbrEntry.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TmmbrEntry"/> class.
            </summary>
            <param name="maximumBitrate">The maximum bitrate.</param>
            <param name="synchronizationSource">The synchronization source.</param>
        </member>
        <member name="M:FM.LiveSwitch.TmmbrEntry.Normalized(System.Int32,System.Int64)">
            <summary>
            Creates a <see cref="T:FM.LiveSwitch.TmmbrEntry"/> using normalized parameters.
            </summary>
            <param name="normalizedMaximumBitrate">The normalized maximum bitrate.</param>
            <param name="synchronizationSource">The synchronization source.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.TmmbnEntry">
            <summary>
            An RTCP temporary maximum media-stream bitrate notification (TMMBN) packet entry.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbnEntry.FixedPayloadLength">
            <summary>
            Gets or sets the fixed length of an FIR entry.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbnEntry.DataBuffer">
            <summary>
            Gets or sets the backing data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbnEntry.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbnEntry.MaximumBitrateExponent">
            <summary>
            Gets or sets the maximum bitrate exponent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbnEntry.MaximumBitrateMantissa">
            <summary>
            Gets or sets the maximum bitrate mantissa.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbnEntry.MaximumBitrate">
            <summary>
            Gets or sets the maximum bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbnEntry.NormalizedMaximumBitrate">
            <summary>
            Gets or sets the normalized maximum bitrate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TmmbnEntry.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TmmbnEntry"/> class.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.TmmbnEntry.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TmmbnEntry"/> class.
            </summary>
            <param name="maximumBitrate">The maximum bitrate.</param>
            <param name="synchronizationSource">The synchronization source.</param>
        </member>
        <member name="M:FM.LiveSwitch.TmmbnEntry.Normalized(System.Int32,System.Int64)">
            <summary>
            Creates a <see cref="T:FM.LiveSwitch.TmmbnEntry"/> using normalized parameters.
            </summary>
            <param name="normalizedMaximumBitrate">The normalized maximum bitrate.</param>
            <param name="synchronizationSource">The synchronization source.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.TmmbnControlFrame">
            <summary>
            An RTCP temporary maximum media-stream bitrate notification (TMMBN) packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbnControlFrame.RegisteredFeedbackMessageType">
            <summary>
            Gets the type of the registered feedback message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbnControlFrame.Entry">
            <summary>
            Gets or sets the entry.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbnControlFrame.Entries">
            <summary>
            Gets or sets the entries.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TmmbnControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TmmbnControlFrame"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.TmmbnControlFrame.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TmmbnControlFrame" /> class.
            </summary>
            <param name="maximumBitrate">The maximum bitrate.</param>
            <param name="synchronizationSource">The synchronization source.</param>
        </member>
        <member name="M:FM.LiveSwitch.TmmbnControlFrame.#ctor(FM.LiveSwitch.TmmbnEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TmmbnControlFrame" /> class.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:FM.LiveSwitch.TmmbnControlFrame.#ctor(FM.LiveSwitch.TmmbnEntry[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TmmbnControlFrame" /> class.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:FM.LiveSwitch.TmmbnControlFrame.Normalized(System.Int32,System.Int64)">
            <summary>
            Creates a <see cref="T:FM.LiveSwitch.TmmbnControlFrame"/> using normalized parameters.
            </summary>
            <param name="normalizedMaximumBitrate">The normalized maximum bitrate.</param>
            <param name="synchronizationSource">The synchronization source.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TmmbnControlFrame.Normalized(System.Int32,System.Int64,System.Int64)">
            <summary>
            Creates a <see cref="T:FM.LiveSwitch.TmmbnControlFrame"/> using normalized parameters.
            </summary>
            <param name="normalizedMaximumBitrate">The normalized maximum bitrate.</param>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="packetSenderSynchronizationSource">The packet sender synchronization source.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.TmmbrControlFrame">
            <summary>
            An RTCP temporary maximum media-stream bitrate request (TMMBR) packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbrControlFrame.RegisteredFeedbackMessageType">
            <summary>
            Gets the type of the registered feedback message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbrControlFrame.Entry">
            <summary>
            Gets or sets the entry.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TmmbrControlFrame.Entries">
            <summary>
            Gets or sets the entries.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TmmbrControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TmmbrControlFrame"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.TmmbrControlFrame.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TmmbrControlFrame" /> class.
            </summary>
            <param name="maximumBitrate">The maximum bitrate.</param>
            <param name="synchronizationSource">The synchronization source.</param>
        </member>
        <member name="M:FM.LiveSwitch.TmmbrControlFrame.#ctor(FM.LiveSwitch.TmmbrEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TmmbrControlFrame" /> class.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:FM.LiveSwitch.TmmbrControlFrame.#ctor(FM.LiveSwitch.TmmbrEntry[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TmmbrControlFrame" /> class.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:FM.LiveSwitch.TmmbrControlFrame.Normalized(System.Int32,System.Int64)">
            <summary>
            Creates a <see cref="T:FM.LiveSwitch.TmmbrControlFrame"/> using normalized parameters.
            </summary>
            <param name="normalizedMaximumBitrate">The normalized maximum bitrate.</param>
            <param name="synchronizationSource">The synchronization source.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TmmbrControlFrame.Normalized(System.Int32,System.Int64,System.Int64)">
            <summary>
            Creates a <see cref="T:FM.LiveSwitch.TmmbrControlFrame"/> using normalized parameters.
            </summary>
            <param name="normalizedMaximumBitrate">The normalized maximum bitrate.</param>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="packetSenderSynchronizationSource">The packet sender synchronization source.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.G722.Codec.Saturate(System.Int32)">
            <summary>
            hard limits to 16 bit samples
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.G722.Decoder">
            <summary>
            A G.722 decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.G722.Decoder.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.G722.Decoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Decoder" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.G722.Decoder.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Decoder" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.G722.Decoder.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Decoder" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.G722.Decoder.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.G722.Decoder.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.G722.Depacketizer">
            <summary>
            A G.722 depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.G722.Depacketizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.G722.Depacketizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Depacketizer" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.G722.Depacketizer.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Depacketizer" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.G722.Depacketizer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Depacketizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:FM.LiveSwitch.G722.Encoder">
            <summary>
            A G.722 encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.G722.Encoder.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.G722.Encoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Encoder" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.G722.Encoder.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Encoder" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.G722.Encoder.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Encoder" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.G722.Encoder.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.G722.Encoder.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.G722.Format">
            <summary>
            A G.722 format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.G722.Format.DefaultClockRate">
            <summary>
            Gets the default clock rate (16000).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.G722.Format.DefaultChannelCount">
            <summary>
            Gets the default clock rate (1).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.G722.Format.DefaultConfig">
            <summary>
            Gets the default configuration (16000/1).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.G722.Format.MinBitrate">
            <summary>
            Gets the minimum bitrate supported by this format, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.G722.Format.MaxBitrate">
            <summary>
            Gets the maximum bitrate supported by this format, in kbps.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.G722.Format.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Format" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.G722.Format.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Format" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.G722.Format.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Format"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="M:FM.LiveSwitch.G722.Format.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.G722.Packetizer">
            <summary>
            A G.722 packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.G722.Packetizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.G722.Packetizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Packetizer" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.G722.Packetizer.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Packetizer" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.G722.Packetizer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G722.Packetizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaDescriptionManagerBase">
            <summary>
            Manages Generation of Media Descriptions for Streams
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaDescriptionRequirements.EncryptionPolicy">
            <summary>
            Gets or sets a value indicating Encryption Policy
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaDescriptionRequirements.EncryptionModes">
            <summary>
            Gets or sets the encryption modes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaDescriptionRequirements.SdesPolicy">
            <summary>
            Gets or sets Sdes policy for stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamMediaDescriptionManager`1.RembEnabled">
            <summary>
            Gets True if goog-remb is negotiated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamMediaDescriptionManager`1.AbsoluteSenderTimeDirection">
            <summary>
            Gets the current direction for the RTP Header Extension for Absolute Sender Time. See https://webrtc.org/experiments/rtp-hdrext/abs-send-time/ .
            If the remote capability has not yet been receieved, only local requirements are taken into consideration.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamMediaDescriptionManager`1.CreateSdpMediaDescription(FM.LiveSwitch.MediaDescriptionRequirements,FM.LiveSwitch.Sdp.Message,System.Boolean,System.Boolean)">
            <summary>
            Generates SDP media description for stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamMediaDescriptionRequirements`1.AbsoluteSenderTimePolicy">
            <summary>
            Gets or sets a value of the policy indicating support for the RTP Header Extension for Absolute Sender Time. See https://webrtc.org/experiments/rtp-hdrext/abs-send-time/ .
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamMediaDescriptionRequirements`1.SdesMidPolicy">
            <summary>
            Gets or sets a value of the policy indicating support for the RTP Header Extension for SDES MID. 
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamMediaDescriptionRequirements`1.SdesRtpStreamIdPolicy">
            <summary>
            Gets or sets a value of the policy indicating support for the RTP Header Extension for RTP Stream ID. 
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamMediaDescriptionRequirements`1.SdesRepairedRtpStreamIdPolicy">
            <summary>
            Gets or sets a value of the policy indicating support for the RTP Header Extension for Repaired RTP Stream ID.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ResetAudioPipe">
            <summary>
            An audio pipe that clones each input frame and
            includes only the last buffer in its output.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ResetAudioPipe.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ResetAudioPipe.ControlFrameAllowed">
            <summary>
            Gets or sets the callback that determines whether a
            media control frame should be raised by this pipe.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ResetAudioPipe.ControlFrameResponseAllowed">
            <summary>
            Gets or sets the callback that determines whether a
            media control frame response should be raised by this pipe.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ResetAudioPipe.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new <see cref="T:FM.LiveSwitch.ResetAudioPipe"/>.
            </summary>
            <param name="format">The input/output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ResetAudioPipe.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.ResetAudioPipe.DoProcessControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.ResetAudioPipe.DoProcessControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frame responses.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="M:FM.LiveSwitch.ResetAudioPipe.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ResetVideoPipe">
            <summary>
            A video pipe that clones each input frame and
            includes only the last buffer in its output.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ResetVideoPipe.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ResetVideoPipe.ControlFrameAllowed">
            <summary>
            Gets or sets the callback that determines whether a
            media control frame should be raised by this pipe.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ResetVideoPipe.ControlFrameResponseAllowed">
            <summary>
            Gets or sets the callback that determines whether a
            media control frame response should be raised by this pipe.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ResetVideoPipe.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new <see cref="T:FM.LiveSwitch.ResetVideoPipe"/>.
            </summary>
            <param name="format">The input/output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ResetVideoPipe.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.ResetVideoPipe.DoProcessControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.ResetVideoPipe.DoProcessControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frame responses.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="M:FM.LiveSwitch.ResetVideoPipe.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.CameraSourceBase">
            <summary>
            A base class for camera-based sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.MinSupportedSize">
            <summary>
            Gets the minimum supported size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.MaxSupportedSize">
            <summary>
            Gets the maximum supported size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.StaticOutputSize">
            <summary>
            Gets or sets whether <see cref="P:FM.LiveSwitch.CameraSourceBase.MinOutputSize"/> and
            <see cref="P:FM.LiveSwitch.CameraSourceBase.MaxOutputSize"/> should return
            <see cref="P:FM.LiveSwitch.CameraSourceBase.MinSupportedSize"/> and
            <see cref="P:FM.LiveSwitch.CameraSourceBase.MaxSupportedSize"/>, respectively, or
            response to changes in <see cref="P:FM.LiveSwitch.CameraSourceBase.MinSize"/> and
            <see cref="P:FM.LiveSwitch.CameraSourceBase.MaxSize"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.MinOutputSize">
            <summary>
            Gets or sets the minimum allowed output size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.MinSize">
            <summary>
            Gets or sets the minimum size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.MaxOutputSize">
            <summary>
            Gets or sets the maximum allowed output size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.MaxSize">
            <summary>
            Gets or sets the maximum output size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.TargetOutputSize">
            <summary>
            Gets or sets the target output size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.TargetSize">
            <summary>
            Gets or sets the target size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.Size">
            <summary>
            Gets or sets the current size.
            A value of null indicates unset, and will
            default to the target size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.MinSupportedFrameRate">
            <summary>
            Gets the minimum supported frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.MaxSupportedFrameRate">
            <summary>
            Gets the maximum supported frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.StaticOutputFrameRate">
            <summary>
            Gets or sets whether <see cref="P:FM.LiveSwitch.CameraSourceBase.MinOutputFrameRate"/> and
            <see cref="P:FM.LiveSwitch.CameraSourceBase.MaxOutputFrameRate"/> should return
            <see cref="P:FM.LiveSwitch.CameraSourceBase.MinSupportedFrameRate"/> and
            <see cref="P:FM.LiveSwitch.CameraSourceBase.MaxSupportedFrameRate"/>, respectively, or
            response to changes in <see cref="P:FM.LiveSwitch.CameraSourceBase.MinFrameRate"/> and
            <see cref="P:FM.LiveSwitch.CameraSourceBase.MaxFrameRate"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.MinOutputFrameRate">
            <summary>
            Gets or sets the minimum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.MinFrameRate">
            <summary>
            Gets or sets the minimum frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.MaxOutputFrameRate">
            <summary>
            Gets or sets the maximum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.MaxFrameRate">
            <summary>
            Gets or sets the maximum output frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.TargetOutputFrameRate">
            <summary>
            Gets or sets the target output frame-rate, in fps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.TargetFrameRate">
            <summary>
            Gets or sets the target frame-rate, in fps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.FrameRate">
            <summary>
            Gets or sets the current frame-rate, in fps.
            A value of -1 indicates unset, and will
            default to the target frame-rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.TargetConfig">
            <summary>
            Gets or sets the target config.
            A value of null indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CameraSourceBase.Config">
            <summary>
            Gets or sets the current config.
            A value of null indicates unset (pass-through).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CameraSourceBase.#ctor(FM.LiveSwitch.VideoFormat,FM.LiveSwitch.VideoConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScreenSourceBase"/> class.
            </summary>
            <param name="outputFormat">The output format.</param>
            <param name="targetConfig">The target configuration.</param>
        </member>
        <member name="T:FM.LiveSwitch.ScreenSourceBase">
            <summary>
            A base class for screen-based sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.MinSupportedSize">
            <summary>
            Gets the minimum supported size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.MaxSupportedSize">
            <summary>
            Gets the maximum supported size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.StaticOutputSize">
            <summary>
            Gets or sets whether <see cref="P:FM.LiveSwitch.ScreenSourceBase.MinOutputSize"/> and
            <see cref="P:FM.LiveSwitch.ScreenSourceBase.MaxOutputSize"/> should return
            <see cref="P:FM.LiveSwitch.ScreenSourceBase.MinSupportedSize"/> and
            <see cref="P:FM.LiveSwitch.ScreenSourceBase.MaxSupportedSize"/>, respectively, or
            response to changes in <see cref="P:FM.LiveSwitch.ScreenSourceBase.MinSize"/> and
            <see cref="P:FM.LiveSwitch.ScreenSourceBase.MaxSize"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.MinOutputSize">
            <summary>
            Gets or sets the minimum allowed output size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.MinSize">
            <summary>
            Gets or sets the minimum size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.MaxOutputSize">
            <summary>
            Gets or sets the maximum allowed output size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.MaxSize">
            <summary>
            Gets or sets the maximum output size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.TargetOutputSize">
            <summary>
            Gets or sets the target output size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.TargetSize">
            <summary>
            Gets or sets the target size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.Size">
            <summary>
            Gets or sets the current size.
            A value of null indicates unset, and will
            default to the target size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.MinSupportedFrameRate">
            <summary>
            Gets the minimum supported frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.MaxSupportedFrameRate">
            <summary>
            Gets the maximum supported frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.StaticOutputFrameRate">
            <summary>
            Gets or sets whether <see cref="P:FM.LiveSwitch.ScreenSourceBase.MinOutputFrameRate"/> and
            <see cref="P:FM.LiveSwitch.ScreenSourceBase.MaxOutputFrameRate"/> should return
            <see cref="P:FM.LiveSwitch.ScreenSourceBase.MinSupportedFrameRate"/> and
            <see cref="P:FM.LiveSwitch.ScreenSourceBase.MaxSupportedFrameRate"/>, respectively, or
            response to changes in <see cref="P:FM.LiveSwitch.ScreenSourceBase.MinFrameRate"/> and
            <see cref="P:FM.LiveSwitch.ScreenSourceBase.MaxFrameRate"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.MinOutputFrameRate">
            <summary>
            Gets or sets the minimum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.MinFrameRate">
            <summary>
            Gets or sets the minimum frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.MaxOutputFrameRate">
            <summary>
            Gets or sets the maximum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.MaxFrameRate">
            <summary>
            Gets or sets the maximum output frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.TargetOutputFrameRate">
            <summary>
            Gets or sets the target output frame-rate, in fps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.TargetFrameRate">
            <summary>
            Gets or sets the target frame-rate, in fps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.FrameRate">
            <summary>
            Gets or sets the current frame-rate, in fps.
            A value of -1 indicates unset, and will
            default to the target frame-rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.TargetOrigin">
            <summary>
            Gets or sets the target origin.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.Origin">
            <summary>
            Gets or sets the current origin.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.TargetRegion">
            <summary>
            Gets or sets the target region.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.Region">
            <summary>
            Gets or sets the current region.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.TargetConfig">
            <summary>
            Gets or sets the target config.
            A value of null indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenSourceBase.Config">
            <summary>
            Gets or sets the current config.
            A value of null indicates unset (pass-through).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ScreenSourceBase.#ctor(FM.LiveSwitch.VideoFormat,FM.LiveSwitch.ScreenConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScreenSourceBase"/> class.
            </summary>
            <param name="outputFormat">The output format.</param>
            <param name="targetConfig">The target configuration.</param>
        </member>
        <member name="T:FM.LiveSwitch.SessionDescriptionManagerBase`5">
            <summary>
            Manages Generation of Session Descriptions for Connections
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionManagerBase`5.#ctor">
            <summary>
            Creates a BaseSessionDescriptionManager.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionManagerBase`5.AddStream(`0)">
            <summary>
            Adds stream to this manager.
            </summary>
            <param name="stream">The stream to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionManagerBase`5.RemoveStream(`0)">
            <summary>
            Removes stream from this manager.
            </summary>
            <param name="stream">The stream to remove.</param>
            <returns>Value indicating whether the stream was successfully removed.</returns>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionManagerBase`5.ParseSessionDescriptionForStreamChangesAndUpdateMids(FM.LiveSwitch.SessionDescription,`0[],`0[],`0[])">
            <summary>
            Method takes remote description and identifies if any streams have been added to or removed from the description by remote peer.
            </summary>
            <param name="newRemoteDescription">New remote session description.</param>
            <param name="existingAudioStreams">Existing Audio Streams.</param>
            <param name="existingVideoStreams">Existing Video Streams.</param>
            <param name="existingDataStreams">Existing Video Stream.</param>
            <returns>Array of new stream descriptions and array of deleted streams.</returns>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionManagerBase`5.AddMediaDescriptions(FM.LiveSwitch.Sdp.Message,FM.LiveSwitch.Sdp.MediaDescription[])">
            <summary>
            Adds media descriptions to SDP Message in the order that complies with offerer's ordering.
            </summary>
            <param name="msg"></param>
            <param name="descriptions"></param>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionManagerBase`5.MatchAndProcessDescriptionPerType(System.Collections.Generic.List{`0},FM.LiveSwitch.SessionDescription,System.Boolean,FM.LiveSwitch.SessionDescriptionStreamMatcher{`0},FM.LiveSwitch.Function5{`0,FM.LiveSwitch.Sdp.MediaDescription,System.Int32,System.Boolean,System.Boolean,FM.LiveSwitch.Error},System.Boolean)">
            <summary>
            This method matches offerer-indexed and internal-indexed streams for a group of streams of the same type.
            When matched, it processes relevant part of SDP message related to that matched stream.
            </summary>
            <param name="streams">List of streams: must be all streams of the same type.</param>
            <param name="description">Session Description reuireing processing.</param>
            <param name="isLocalDescription">Flag indicating if this is a local description.</param>
            <param name="streamMatcher">StreamMatcher used to match streams.</param>
            <param name="processSdpMediaDescriptionForStreamHandler">Function handler responsible for processing SDP for the given stream.</param>
            <param name="processSdpMediaDescriptionInternal">Flag indicating whether internal stream SDP processing must occurr.</param>
            <returns>Value indicating if an error occurred.</returns>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionManagerBase`5.ProcessSdpMediaDescriptionForStream(`0,FM.LiveSwitch.Sdp.MediaDescription,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Processes a media description.
            </summary>
            <param name="stream">The stream.</param>
            <param name="sdpMediaDescription">The SDP media description.</param>
            <param name="sdpMediaIndex">The SDP media index.</param>
            <param name="isLocalDescription">Flag indicating if this is a local Sdp description.</param>
            <param name="isRenegotiation">Flag indicating whether SDP renegotiation is currently in progress.</param>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionManagerBase`5.UpdateLocalDescription(FM.LiveSwitch.SessionDescription)">
            <summary>
            Updates the local description.
            </summary>
            <param name="localDescription">The local description.</param>
        </member>
        <member name="T:FM.LiveSwitch.CcmLrrPolicy">
            <summary>
            The CCM LRR policy.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CcmLrrPolicy.Disabled">
            <summary>
            The usage of CCM LRR is disabled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CcmLrrPolicy.Negotiated">
            <summary>
            The usage of CCM LRR is negotiated with the peer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataMessage">
            <summary>
            LiveSwitch DataMessage.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessage.Version">
            <summary>
            Gets the version of this DataMessage
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessage.DataString">
            <summary>
            Gets the data string in this message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessage.DataBytes">
            <summary>
            Gets the data bytes in this message.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DataMessage.IntUnset">
            <summary>
            Indicates an unset value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessage.TimeToLive">
            <summary>
            Gets or sets the time to live for this message in ms.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessage.NumberOfRetransmissions">
            <summary>
            Gets or sets the number of retransmissions for this message.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataMessage"/> class.
            </summary>
            <param name="messageString">The string to send.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataMessage.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataMessage"/> class.
            </summary>
            <param name="messageBytes">The bytes to send.</param>
        </member>
        <member name="T:FM.LiveSwitch.DataMessageHeader.DeliveryAttemptsElement">
            <summary>
            DeliveryAttempts flexible DataMessage Header element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessageHeader.DeliveryAttemptsElement.Length">
            <summary>
            Gets the length of this element in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessageHeader.DeliveryAttemptsElement.DeliveryAttempts">
            <summary>
            Gets the number of delivery attempts.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataMessageHeader.DeliveryAttemptsElement.#ctor(System.Int32)">
            <summary>
            Creates an instance of <see cref="T:FM.LiveSwitch.DataMessageHeader.DeliveryAttemptsElement"/>.
            </summary>
            <param name="numAttempts">The number of delivery attempts.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataMessageHeader.DeliveryAttemptsElement.GetBytes">
            <summary>
            Serealizes this <see cref="T:FM.LiveSwitch.DataMessageHeader.DeliveryAttemptsElement"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataMessageHeader.DeliveryAttemptsElement.DoParseBytes(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32@)">
            <summary>
            Deserealizes this <see cref="T:FM.LiveSwitch.DataMessageHeader.DeliveryAttemptsElement"/>.
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="offsetPlus"></param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.DataMessageHeader.Element">
            <summary>
            DataMessage Header flexible size element
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessageHeader.Element.Length">
            <summary>
            Gets the length of this element in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessageHeader.Element.Type">
            <summary>
            Gets the type of this element
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataMessageHeader.Element.GetBytes">
            <summary>
            Gets the serialized version of this DataMessageHeader element
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataMessageHeader.Element.ParseBytes(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32@)">
            <summary>
            Deserializes the bytes
            </summary>
            <param name="buffer">Buffer to read.</param>
            <param name="offset">Offset at which to read</param>
            <param name="offsetPlus">Number of bytes read.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.DataMessageHeader.ConnectionIdElement">
            <summary>
            ConnectionId flexible DataMessage Header element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessageHeader.ConnectionIdElement.Length">
            <summary>
            Gets the length of this element in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessageHeader.ConnectionIdElement.ConnectionId">
            <summary>
            Gets the Connection ID
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataMessageHeader.ConnectionIdElement.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:FM.LiveSwitch.DataMessageHeader.ConnectionIdElement"/>.
            </summary>
            <param name="id">The Connection ID.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataMessageHeader.ConnectionIdElement.GetBytes">
            <summary>
            Serealizes this <see cref="T:FM.LiveSwitch.DataMessageHeader.ConnectionIdElement"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataMessageHeader.ConnectionIdElement.DoParseBytes(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32@)">
            <summary>
            Deserealizes this <see cref="T:FM.LiveSwitch.DataMessageHeader.ConnectionIdElement"/>.
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="offsetPlus"></param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.DataMessageHeader.TimeToLiveElement">
            <summary>
            TimeToLive flexible DataMessage Header element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessageHeader.TimeToLiveElement.Length">
            <summary>
            Gets the length of this element in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessageHeader.TimeToLiveElement.TimeToLive">
            <summary>
            Gets Time To Live.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataMessageHeader.TimeToLiveElement.#ctor(System.Int64)">
            <summary>
            Creates an instance of <see cref="T:FM.LiveSwitch.DataMessageHeader.TimeToLiveElement"/>.
            </summary>
            <param name="ttl"></param>
        </member>
        <member name="M:FM.LiveSwitch.DataMessageHeader.TimeToLiveElement.GetBytes">
            <summary>
            Serealizes this <see cref="T:FM.LiveSwitch.DataMessageHeader.TimeToLiveElement"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataMessageHeader.TimeToLiveElement.DoParseBytes(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32@)">
            <summary>
            Deserealizes this <see cref="T:FM.LiveSwitch.DataMessageHeader.TimeToLiveElement"/>.
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="offsetPlus"></param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.DataMessageHeader.Type.TimeToLive">
            <summary>
            Time To Live
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessageHeader.Type.DeliveryAttempts">
            <summary>
            Delivery Attempts
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessageHeader.Type.ConnectionId">
            <summary>
            Connection ID
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataMessageHeader.UnknownElement">
            <summary>
            Unknown (generic) DataMessage Header element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessageHeader.UnknownElement.Length">
            <summary>
            Gets the length of this element in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataMessageHeader.UnknownElement.Payload">
            <summary>
            Gets or sets the payload of this Unknown/Generic Header Extension
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataMessageHeader.UnknownElement.#ctor(System.Byte,FM.LiveSwitch.DataBuffer)">
            <summary>
            Creates an instance of <see cref="T:FM.LiveSwitch.DataMessageHeader.UnknownElement"/>.
            </summary>
            <param name="type">Type.</param>
            <param name="payload">Payload.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataMessageHeader.UnknownElement.GetBytes">
            <summary>
            Serealizes this <see cref="T:FM.LiveSwitch.DataMessageHeader.UnknownElement"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataMessageHeader.UnknownElement.DoParseBytes(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32@)">
            <summary>
            Deserealizes this <see cref="T:FM.LiveSwitch.DataMessageHeader.UnknownElement"/>.
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="offsetPlus"></param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.CcmUtility">
            <summary>
            A utility for codec control messages (CCM).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CcmUtility.GetSequenceNumberDelta(System.Int32,System.Int32)">
            <summary>
            Gets the delta between sequence numbers, adjusted for overflow.
            </summary>
            <param name="sequenceNumber">The current sequence number.</param>
            <param name="lastSequenceNumber">The last sequence number.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.FrameRatePipe">
            <summary>
            A frame-rate pipe.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FrameRatePipe.MinSupportedFrameRate">
            <summary>
            Gets the minimum supported frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FrameRatePipe.MaxSupportedFrameRate">
            <summary>
            Gets the maximum supported frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FrameRatePipe.StaticOutputFrameRate">
            <summary>
            Gets or sets whether <see cref="P:FM.LiveSwitch.FrameRatePipe.MinOutputFrameRate"/> and
            <see cref="P:FM.LiveSwitch.FrameRatePipe.MaxOutputFrameRate"/> should return
            <see cref="P:FM.LiveSwitch.FrameRatePipe.MinSupportedFrameRate"/> and
            <see cref="P:FM.LiveSwitch.FrameRatePipe.MaxSupportedFrameRate"/>, respectively, or
            response to changes in <see cref="P:FM.LiveSwitch.FrameRatePipe.MinFrameRate"/> and
            <see cref="P:FM.LiveSwitch.FrameRatePipe.MaxFrameRate"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FrameRatePipe.MinOutputFrameRate">
            <summary>
            Gets or sets the minimum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FrameRatePipe.MinFrameRate">
            <summary>
            Gets or sets the minimum frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FrameRatePipe.MaxOutputFrameRate">
            <summary>
            Gets or sets the maximum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FrameRatePipe.MaxFrameRate">
            <summary>
            Gets or sets the maximum output frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FrameRatePipe.TargetOutputFrameRate">
            <summary>
            Gets or sets the target output frame-rate, in fps.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FrameRatePipe.TargetFrameRate">
            <summary>
            Gets or sets the target frame-rate, in fps.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FrameRatePipe.FrameRate">
            <summary>
            Gets or sets the current frame-rate, in fps.
            A value of -1 indicates unset (pass-through).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FrameRatePipe.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FrameRatePipe.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FrameRatePipe"/> class.
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:FM.LiveSwitch.FrameRatePipe.FrameRateChanging(System.Double,System.Double)">
            <summary>
            Indicates that the frame-rate is about to change.
            </summary>
            <param name="oldFrameRate">The old frame-rate.</param>
            <param name="newFrameRate">The new frame-rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.FrameRatePipe.FrameRateChanged(System.Double,System.Double)">
            <summary>
            Indicates that the frame-rate has changed.
            </summary>
            <param name="oldFrameRate">The old frame-rate.</param>
            <param name="newFrameRate">The new frame-rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.FrameRatePipe.DoPreProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Pre-processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.FrameRatePipe.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.FrameRatePipe.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.FrameRateController">
            <summary>
            A frame-rate controller.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FrameRateController.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FrameRateController.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FrameRateController"/> class.
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:FM.LiveSwitch.FrameRateController.FrameRateChanged(System.Double,System.Double)">
            <summary>
            Indicates that the frame-rate has changed.
            </summary>
            <param name="oldFrameRate">The old frame-rate.</param>
            <param name="newFrameRate">The new frame-rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.FrameRateController.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.FrameRateController.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ImageSizePipe">
            <summary>
            An image size pipe.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageSizePipe.MinSupportedSize">
            <summary>
            Gets the minimum supported size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageSizePipe.MaxSupportedSize">
            <summary>
            Gets the maximum supported size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageSizePipe.StaticOutputSize">
            <summary>
            Gets or sets whether <see cref="P:FM.LiveSwitch.ImageSizePipe.MinOutputSize"/> and
            <see cref="P:FM.LiveSwitch.ImageSizePipe.MaxOutputSize"/> should return
            <see cref="P:FM.LiveSwitch.ImageSizePipe.MinSupportedSize"/> and
            <see cref="P:FM.LiveSwitch.ImageSizePipe.MaxSupportedSize"/>, respectively, or
            response to changes in <see cref="P:FM.LiveSwitch.ImageSizePipe.MinSize"/> and
            <see cref="P:FM.LiveSwitch.ImageSizePipe.MaxSize"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageSizePipe.MinOutputSize">
            <summary>
            Gets or sets the minimum allowed output size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageSizePipe.MinSize">
            <summary>
            Gets or sets the minimum size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageSizePipe.MaxOutputSize">
            <summary>
            Gets or sets the maximum allowed output size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageSizePipe.MaxSize">
            <summary>
            Gets or sets the maximum output size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageSizePipe.TargetOutputSize">
            <summary>
            Gets or sets the target output size.
            A value of null indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageSizePipe.TargetSize">
            <summary>
            Gets or sets the target size.
            A value of null indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageSizePipe.Size">
            <summary>
            Gets or sets the current size.
            A value of null indicates unset (pass-through).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageSizePipe.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ImageSizePipe.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ImageSizePipe" /> class.
            </summary>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ImageSizePipe.#ctor(FM.LiveSwitch.VideoFormat,FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ImageSizePipe" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ImageSizePipe.SizeChanging(FM.LiveSwitch.Size,FM.LiveSwitch.Size)">
            <summary>
            Indicates that the size is about to change.
            </summary>
            <param name="oldSize">The old size.</param>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:FM.LiveSwitch.ImageSizePipe.SizeChanged(FM.LiveSwitch.Size,FM.LiveSwitch.Size)">
            <summary>
            Indicates that the size has changed.
            </summary>
            <param name="oldSize">The old size.</param>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:FM.LiveSwitch.ImageSizePipe.DoPreProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Pre-processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.ImageSizePipe.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.ImageSizePipe.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ImageScalePipe">
            <summary>
            An image scale pipe.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageScalePipe.MinSupportedScale">
            <summary>
            Gets the minimum supported scale.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageScalePipe.MaxSupportedScale">
            <summary>
            Gets the maximum supported scale.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageScalePipe.StaticOutputScale">
            <summary>
            Gets or sets whether <see cref="P:FM.LiveSwitch.ImageScalePipe.MinOutputScale"/> and
            <see cref="P:FM.LiveSwitch.ImageScalePipe.MaxOutputScale"/> should return
            <see cref="P:FM.LiveSwitch.ImageScalePipe.MinSupportedScale"/> and
            <see cref="P:FM.LiveSwitch.ImageScalePipe.MaxSupportedScale"/>, respectively, or
            response to changes in <see cref="P:FM.LiveSwitch.ImageScalePipe.MinScale"/> and
            <see cref="P:FM.LiveSwitch.ImageScalePipe.MaxScale"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageScalePipe.MinOutputScale">
            <summary>
            Gets or sets the minimum allowed output scale.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageScalePipe.MinScale">
            <summary>
            Gets or sets the minimum output scale.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageScalePipe.MaxOutputScale">
            <summary>
            Gets or sets the maximum allowed output scale.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageScalePipe.MaxScale">
            <summary>
            Gets or sets the maximum output scale.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageScalePipe.TargetOutputScale">
            <summary>
            Gets or sets the target output scale.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageScalePipe.TargetScale">
            <summary>
            Gets or sets the target scale.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageScalePipe.Scale">
            <summary>
            Gets or sets the current scale.
            A value of -1 indicates unset (pass-through).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ImageScalePipe.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ImageScalePipe.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ImageScalePipe" /> class.
            </summary>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ImageScalePipe.#ctor(FM.LiveSwitch.VideoFormat,FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ImageScalePipe" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ImageScalePipe.ScaleChanging(System.Double,System.Double)">
            <summary>
            Indicates that the scale is about to change.
            </summary>
            <param name="oldScale">The old scale.</param>
            <param name="newScale">The new scale.</param>
        </member>
        <member name="M:FM.LiveSwitch.ImageScalePipe.ScaleChanged(System.Double,System.Double)">
            <summary>
            Indicates that the scale has changed.
            </summary>
            <param name="oldScale">The old scale.</param>
            <param name="newScale">The new scale.</param>
        </member>
        <member name="M:FM.LiveSwitch.ImageScalePipe.DoPreProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Pre-processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.ImageScalePipe.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.ImageScalePipe.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.LrrEntry">
            <summary>
            An RTCP layer refresh request (FIR) packet entry.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LrrEntry.FixedPayloadLength">
            <summary>
            Gets or sets the fixed length of an LRR entry.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LrrEntry.DataBuffer">
            <summary>
            Gets or sets the backing data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LrrEntry.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LrrEntry.SequenceNumber">
            <summary>
            Gets or sets the sequence number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LrrEntry.CurrentIdsPresent">
            <summary>
            Gets or sets whether the current temporal layer ID
            and current layer ID fields are present.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LrrEntry.PayloadType">
            <summary>
            Gets or sets the payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LrrEntry.TargetTemporalId">
            <summary>
            Gets or sets the target temporal ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LrrEntry.TargetLayerId">
            <summary>
            Gets or sets the target layer ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LrrEntry.CurrentTemporalId">
            <summary>
            Gets or sets the current temporal ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LrrEntry.CurrentLayerId">
            <summary>
            Gets or sets the current layer ID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LrrEntry.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LrrEntry"/> class.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.LrrEntry.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LrrEntry"/> class.
            </summary>
            <param name="sequenceNumber">The sequence number.</param>
        </member>
        <member name="M:FM.LiveSwitch.LrrEntry.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LrrEntry"/> class.
            </summary>
            <param name="sequenceNumber">The sequence number.</param>
            <param name="targetTemporalId">The target temporal ID.</param>
            <param name="targetLayerId">The target layer ID.</param>
        </member>
        <member name="M:FM.LiveSwitch.LrrEntry.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LrrEntry"/> class.
            </summary>
            <param name="sequenceNumber">The sequence number.</param>
            <param name="targetTemporalId">The target temporal ID.</param>
            <param name="targetLayerId">The target layer ID.</param>
            <param name="currentTemporalId">Teh current temporal ID.</param>
            <param name="currentLayerId">The current layer ID.</param>
        </member>
        <member name="T:FM.LiveSwitch.LrrControlFrame">
            <summary>
            An RTCP layer refresh request (LRR) packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LrrControlFrame.RegisteredFeedbackMessageType">
            <summary>
            Gets the type of the registered feedback message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LrrControlFrame.Entry">
            <summary>
            Gets or sets the entry.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LrrControlFrame.Entries">
            <summary>
            Gets or sets the entries.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LrrControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LrrControlFrame"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.LrrControlFrame.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LrrControlFrame" /> class.
            </summary>
            <param name="sequenceNumber">The sequence number.</param>
        </member>
        <member name="M:FM.LiveSwitch.LrrControlFrame.#ctor(FM.LiveSwitch.LrrEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LrrControlFrame" /> class.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:FM.LiveSwitch.LrrControlFrame.#ctor(FM.LiveSwitch.LrrEntry[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LrrControlFrame" /> class.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="T:FM.LiveSwitch.SessionDescriptionManager">
            <summary>
            Manages Generation of Session Descriptions for Connections
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescriptionManager.OriginalSignallingExchangeComplete">
            <summary>
            Indicates whether original session descriotion negotiation has completed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionManager.#ctor">
            <summary>
            Creates a SessionDescriptionManager.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescriptionManager.MultiplexPolicy">
            <summary>
            Gets or sets the mutiplex policy.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionManager.Clear">
            <summary>
            Clears internal collections.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionManager.ProcessSdpMediaDescriptionForStream(FM.LiveSwitch.Stream,FM.LiveSwitch.Sdp.MediaDescription,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Processes a media description.
            </summary>
            <param name="stream">The stream.</param>
            <param name="sdpMediaDescription">The SDP media description.</param>
            <param name="sdpMediaIndex">The SDP media index.</param>
            <param name="isLocalDescription">Flag indicating if this is a local Sdp description.</param>
            <param name="isRenegotiation">Flag indicating if SDP renegotiation is currently in progress.</param>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionManager.SortMediaDescriptions(FM.LiveSwitch.Sdp.Message)">
            <summary>
            Sorts media descriptions in an SDP Message in the order that complies with offerer's ordering.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:FM.LiveSwitch.ISynchronizer">
            <summary>
            A media rendering synchronizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ISynchronizer.Active">
            <summary>
            Gets whether synchronization is active.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ISynchronizer.Master">
            <summary>
            Gets whether this is the master.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ISynchronizer.Slaves">
            <summary>
            Gets the slaves.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ISynchronizer.Activate(System.Boolean,FM.LiveSwitch.ISynchronizer[])">
            <summary>
            Activates synchronizing.
            </summary>
            <param name="master">Whether this is a master.</param>
            <param name="slaves">The slaves, if this is a master.</param>
        </member>
        <member name="P:FM.LiveSwitch.ISynchronizer.MasterSystemTimestamp">
            <summary>
            Gets or sets the master system timestamp.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ISynchronizableStream">
            <summary>
            A synchronizable stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ISynchronizableStream.Id">
            <summary>
            Gets the stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ISynchronizableStream.Type">
            <summary>
            Gets the stream type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ISynchronizableStream.RemoteDescriptionMediaId">
            <summary>
            Gets the remote description media identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ISynchronizableStream.SynchronizeContext">
            <summary>
            Gets or sets the synchronize context.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ISynchronizableStream.Synchronizers">
            <summary>
            Gets all synchronizers in the stream output tracks.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ISynchronizableStream.OnMasterSynchronizeContextReady">
            <summary>
            Raised by master streams when the synchronize context is ready.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ISynchronizableStream.Synchronize(System.Boolean)">
            <summary>
            Initializes synchronization.
            </summary>
            <param name="master">Whether this is a master stream.</param>
        </member>
        <member name="P:FM.LiveSwitch.ISynchronizableStream.OutputSynchronizationDisabled">
            <summary>
            Gets or sets whether output synchronization is disabled.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.CcmFirPolicy">
            <summary>
            The CCM FIR policy.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CcmFirPolicy.Disabled">
            <summary>
            The usage of CCM FIR is disabled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CcmFirPolicy.Negotiated">
            <summary>
            The usage of CCM FIR is negotiated with the peer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.NackPliPolicy">
            <summary>
            The NACK PLI policy.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.NackPliPolicy.Disabled">
            <summary>
            The usage of NACK PLI is disabled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.NackPliPolicy.Negotiated">
            <summary>
            The usage of NACK PLI is negotiated with the peer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.SessionDescriptionStreamMatcher`1">
            <summary>
            Stores internal mappings between offerer SDP and internal stream indexing.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionStreamMatcher`1.Reset">
            <summary>
            Resets stream matching (to be called when renegotiation occurs OR new streams are added/removed).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionStreamMatcher`1.Reset(System.Int32)">
            <summary>
            Resets stream matching (to be called when renegotiation occurs OR new streams are added/removed).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescriptionStreamMatcher`1.#ctor(System.Int32)">
            <summary>
            Initialises a SessionDescriptionStreamMatcher.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.SimulcastMode">
            <summary>
            The simulcast mode.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SimulcastMode.Disabled">
            <summary>
            Simulcast will not be signalled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SimulcastMode.SynchronizationSource">
            <summary>
            Simulcast will be signalled using synchronization sources
            and the "SIM" synchronization source group.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SimulcastMode.RtpStreamId">
            <summary>
            Simulcast will be signalled using RTP stream identifiers
            and the "simulcast" media attribute.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.AudioTrack">
            <summary>
            An audio chain.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.AudioTrack.OnLevel">
            <summary>
            Raised whenever the level is calculated.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.AudioTrack.OnPcmBuffer">
            <summary>
            Raised whenever a PCM buffer is raised.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioTrack.Gain">
            <summary>
            Gets or sets a value indicating the gain
            (input amplification) of this track.
            Any value greater than or equal to 0.0
            is acceptable.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioTrack.Volume">
            <summary>
            Gets or sets a value indicating the volume
            (output resistance) of this track.
            Valid value range is 0.0 to 1.0, inclusive.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioTrack.Config">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioTrack.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioTrack.Elements">
            <summary>
            Gets the elements.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioTrack" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.#ctor(FM.LiveSwitch.AudioTrack[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioTrack" /> class.
            </summary>
            <param name="tracks">The branch of tracks.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.#ctor(FM.LiveSwitch.IAudioElement)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioTrack" /> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.AddElement(FM.LiveSwitch.IAudioElement)">
            <summary>
            Adds an element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.ArrayFromOutputs(System.Collections.Generic.List{FM.LiveSwitch.IAudioOutput})">
            <summary>
            Creates an array of outputs from a list of outputs.
            </summary>
            <param name="outputs">The list of outputs.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.ArrayFromInputs(System.Collections.Generic.List{FM.LiveSwitch.IAudioInput})">
            <summary>
            Creates an array of inputs from a list of inputs.
            </summary>
            <param name="inputs">The list of inputs.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.ArrayFromSinks(System.Collections.Generic.List{FM.LiveSwitch.AudioSink})">
            <summary>
            Creates an array of sinks from a list of sinks.
            </summary>
            <param name="sinks">The list of sinks.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.BranchFromTracks(FM.LiveSwitch.AudioTrack[])">
            <summary>
            Creates a branch from an array of tracks.
            </summary>
            <param name="tracks">The tracks.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.IsBranch(FM.LiveSwitch.IAudioElement)">
            <summary>
            Determines whether the specified element is a branch.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.IsSource(FM.LiveSwitch.IAudioElement)">
            <summary>
            Determines whether the specified element is a source.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.IsPipe(FM.LiveSwitch.IAudioElement)">
            <summary>
            Determines whether the specified element is a pipe.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.IsSink(FM.LiveSwitch.IAudioElement)">
            <summary>
            Determines whether the specified element is a sink.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.IsStream(FM.LiveSwitch.IAudioElement)">
            <summary>
            Determines whether the specified element is a stream.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.IsInput(FM.LiveSwitch.IAudioElement)">
            <summary>
            Determines whether the specified element is an input.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioTrack.IsOutput(FM.LiveSwitch.IAudioElement)">
            <summary>
            Determines whether the specified element is an output.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.RtcAudioTrackConfig">
            <summary>
            A WebRTC/ORTC-compatible audio track configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcAudioTrackConfig.OpusDisabled">
            <summary>
            Gets or sets whether the Opus codec should be disabled.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcAudioTrackConfig.G722Disabled">
            <summary>
            Gets or sets whether the G.722 codec should be disabled.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcAudioTrackConfig.PcmuDisabled">
            <summary>
            Gets or sets whether the PCMU codec should be disabled.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcAudioTrackConfig.PcmaDisabled">
            <summary>
            Gets or sets whether the PCMA codec should be disabled.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.BasicAudioDepacketizer">
            <summary>
            A basic audio depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BasicAudioDepacketizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BasicAudioDepacketizer.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BasicAudioDepacketizer" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicAudioDepacketizer.#ctor(FM.LiveSwitch.AudioFormat,FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BasicAudioDepacketizer" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicAudioDepacketizer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BasicAudioDepacketizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicAudioDepacketizer.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicAudioDepacketizer.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.BasicAudioPacketizer">
            <summary>
            A basic audio packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BasicAudioPacketizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BasicAudioPacketizer.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BasicAudioPacketizer" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicAudioPacketizer.#ctor(FM.LiveSwitch.AudioFormat,FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BasicAudioPacketizer" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicAudioPacketizer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BasicAudioPacketizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicAudioPacketizer.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicAudioPacketizer.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.BasicVideoDepacketizer">
            <summary>
            A basic video depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BasicVideoDepacketizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BasicVideoDepacketizer.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BasicVideoDepacketizer" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicVideoDepacketizer.#ctor(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BasicVideoDepacketizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicVideoDepacketizer.DoCreateFragment(FM.LiveSwitch.RtpPacketHeader,FM.LiveSwitch.DataBuffer)">
            <summary>
            Creates a fragment from a data buffer.
            </summary>
            <param name="header">The rtp header for this packet.</param>
            <param name="dataBuffer">The data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicVideoDepacketizer.IsKeyFrame(FM.LiveSwitch.DataBuffer)">
            <summary>
            Checks if the databuffer contains a keyframe.
            </summary>
            <param name="inputBuffer">VideoBuffer containing video data.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicVideoDepacketizer.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.BasicVideoPacketizer">
            <summary>
            A basic video packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BasicVideoPacketizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BasicVideoPacketizer.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BasicVideoPacketizer" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicVideoPacketizer.#ctor(FM.LiveSwitch.VideoFormat,FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BasicVideoPacketizer" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicVideoPacketizer.#ctor(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BasicVideoPacketizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicVideoPacketizer.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.BasicVideoPacketizer.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.BundlePolicy">
            <summary>
            The local bundle negotiation policy. Denotes the policy this peer uses when negotiating resulting connection bundling policy.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BundlePolicy.Balanced">
            <summary>
            Indicates that the first media section of each type will contain transport parameters.
            The second and any subsequent media sections of each type will be marked as "bundle only".
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BundlePolicy.MaxCompatibility">
            <summary>
            Indicates that all media sections will contain transport parameters.
            No media sections will be marked as "bundle only".
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BundlePolicy.MaxBundle">
            <summary>
            Indicates that only the first media section will contain transport parameters.
            All other media sections will be marked as "bundle only".
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BundlePolicy.Disabled">
            <summary>
            Indicates that all media sections will contain transport parameters.
            No support for bundling.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ByeControlFrame">
            <summary>
            An RTCP BYE packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByeControlFrame.RegisteredPayloadType">
            <summary>
            Gets the goodbye payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByeControlFrame.FixedPayloadHeaderLength">
            <summary>
            Gets the length of the fixed payload header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByeControlFrame.FixedReasonForLeavingPayloadHeaderLength">
            <summary>
            Gets the length of the fixed reason for leaving header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByeControlFrame.SourceCount">
            <summary>
            Gets the number of <see cref="P:FM.LiveSwitch.ByeControlFrame.Sources"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByeControlFrame.SourcesPayloadOffset">
            <summary>
            Gets the offset of the <see cref="P:FM.LiveSwitch.ByeControlFrame.Sources"/> array in the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByeControlFrame.SourcesLength">
            <summary>
            Gets the length of the <see cref="P:FM.LiveSwitch.ByeControlFrame.Sources"/> in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByeControlFrame.Sources">
            <summary>
            Gets or sets the synchronization and contributing sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByeControlFrame.Reason">
            <summary>
            Gets a value indicating whether this instance has a reason for leaving.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByeControlFrame.ReasonForLeavingOffset">
            <summary>
            Gets the offset of the <see cref="P:FM.LiveSwitch.ByeControlFrame.ReasonForLeaving"/> in the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByeControlFrame.ReasonForLeavingLength">
            <summary>
            Gets the length of the reason for leaving.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByeControlFrame.ReasonForLeavingPayload">
            <summary>
            Gets or sets the reason for leaving.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByeControlFrame.ReasonForLeaving">
            <summary>
            Gets the reason for leaving as a string.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByeControlFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByeControlFrame"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByeControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByeControlFrame"/> class.
            </summary>
            <param name="buffer">The packet.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByeControlFrame.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByeControlFrame" /> class.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByeControlFrame.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByeControlFrame" /> class.
            </summary>
            <param name="synchronizationSources">The synchronization sources.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByeControlFrame.#ctor(System.Int64[],System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByeControlFrame"/> class.
            </summary>
            <param name="synchronizationSources">The synchronization sources.</param>
            <param name="contributingSources">The contributing sources.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByeControlFrame.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByeControlFrame" /> class.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="reasonForLeaving">The reason for leaving.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByeControlFrame.#ctor(System.Int64[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByeControlFrame" /> class.
            </summary>
            <param name="synchronizationSources">The synchronization sources.</param>
            <param name="reasonForLeaving">The reason for leaving.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByeControlFrame.#ctor(System.Int64[],System.Int64[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByeControlFrame" /> class.
            </summary>
            <param name="synchronizationSources">The synchronization sources.</param>
            <param name="contributingSources">The contributing sources.</param>
            <param name="reasonForLeaving">The reason for leaving.</param>
        </member>
        <member name="T:FM.LiveSwitch.Candidate">
            <summary>
            A candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Candidate.Dispatched">
            <summary>
            Gets or sets a value indicating whether this candidate has been
            already been dispatched as a part of a session description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Candidate.SdpMediaIndex">
            <summary>
            Gets or sets the media index.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Candidate.SdpCandidateAttribute">
            <summary>
            Gets or sets the SDP candidate attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Candidate.TurnTransportProtocol">
            <summary>
            Gets or sets the relay protocol, the protocol used by this
            candidate to communicate with the relay (TURN) server.
            Obsolete. Alias for <see cref="P:FM.LiveSwitch.Candidate.RelayProtocol"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Candidate.RelayProtocol">
            <summary>
            Gets or sets the relay protocol, the protocol used by this
            candidate to communicate with the relay (TURN) server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Candidate.Protocol">
            <summary>
            Protocol that can be used to communicate with this Candidate.
            If communicating peer-to-peer, then this is also the protocol used by the local socket.
            If communicating over relay, this is the protocol used by the accepting socket on the relay server (not the local socket on the client): <seealso cref="P:FM.LiveSwitch.Candidate.RelayProtocol"/> for this case.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Candidate.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Candidate.ToJson(FM.LiveSwitch.Candidate)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="candidate">The candidate to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Candidate.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="candidateJson">The JSON to deserialize.</param>
            <returns>
            The deserialized candidate.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Color">
            <summary>
            A color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.R">
            <summary>
            Gets the red value (0-255).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.G">
            <summary>
            Gets the green value (0-255).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.B">
            <summary>
            Gets the blue value (0-255).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Color" /> class.
            </summary>
            <param name="r">The red value (0-255).</param>
            <param name="g">The green value (0-255).</param>
            <param name="b">The blue value (0-255).</param>
        </member>
        <member name="M:FM.LiveSwitch.Color.FromHsb(System.Double,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:FM.LiveSwitch.Color"/> using hue, saturation, and brightness.
            </summary>
            <param name="hue">The hue value (0-359).</param>
            <param name="saturation">The saturation value (0.0-1.0).</param>
            <param name="brightness">The brightness value (0.0-1.0).</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.Color.Black">
            <summary>
            Gets a black color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.Gray">
            <summary>
            Gets a gray color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.White">
            <summary>
            Gets a white color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.Red">
            <summary>
            Gets a red color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.Green">
            <summary>
            Gets a green color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.Blue">
            <summary>
            Gets a blue color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.DarkRed">
            <summary>
            Gets a dark-red color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.DarkGreen">
            <summary>
            Gets a dark-green color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.DarkBlue">
            <summary>
            Gets a dark-blue color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.Yellow">
            <summary>
            Gets a yellow color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.Magenta">
            <summary>
            Gets a magenta color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.Cyan">
            <summary>
            Gets a cyan color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.Olive">
            <summary>
            Gets an olive color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.Purple">
            <summary>
            Gets a purple color.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Color.Teal">
            <summary>
            Gets a teal color.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Connection">
            <summary>
            A peer-to-peer connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.GetStats">
            <summary>
            Gets the current connection stats.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.Connection.TestRoundTripTime">
            <summary>
            Gets or sets a fixed round-trip time (in milliseconds) to use in the network transport.
            FOR TESTING PURPOSES ONLY. Defaults to -1, which indicates that normal round-trip time
            calculations should be used.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.TestReceivedRtpBuffer">
            <summary>
            Gets or sets a method that can be used to test and optionally modify inbound RTP buffers.
            FOR TESTING PURPOSES ONLY. Returning <c>null</c> will cause the buffer to be discarded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.TestSendingRtpBuffer">
            <summary>
            Gets or sets a method that can be used to test and optionally modify outbound RTP buffers.
            FOR TESTING PURPOSES ONLY. Returning <c>null</c> will cause the buffer to be discarded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.GetInboundRtpTransportSystemTimestamp">
            <summary>
            Gets or sets a method that overrides the default transport system timestamp behaviour for inbound RTP packets.
            FOR TESTING PURPOSES ONLY.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.GetInboundRtcpTransportSystemTimestamp">
            <summary>
            Gets or sets a method that overrides the default transport system timestamp behaviour for inbound RTCP packets.
            FOR TESTING PURPOSES ONLY.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.GetOutboundRtcpTransportSystemTimestamp">
            <summary>
            Gets or sets a method that overrides the default transport system timestamp behaviour for outbound RTCP packets.
            FOR TESTING PURPOSES ONLY.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.IcePolicy">
            <summary>
            Gets or sets policy indicating whether ICE is required (and enabled) or disabled (and not required for this connection).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.KeepAliveInterval">
            <summary>
            Gets or sets a value indicating how many
            milliseconds must elapse between STUN
            keep-alive binding requests.
            Defaults to 1000.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.ActiveIceKeepAliveEnabled">
            <summary>
            Gets or set a value indicating if Active ICE Keep-Alive is enabled for this Connection.
            Active means that ICE transports initiate keep-alives itself as opposed to keep-alives
            being triggered by receipt of remote keep-alive requests.
            Plays no role when ICE is not in use.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.PublicIPAddress">
            <summary>
            Gets or sets the public IP address of this
            device, if the NAT is known to be 1:1 and
            the IP address is known in advance. This
            should only be used in controlled server
            environments as an alternative to using
            an external STUN server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.PublicIPAddresses">
            <summary>
            Gets or sets the public IP address of this
            device, if the NAT is known to be 1:1 and
            the IP address is known in advance. This
            should only be used in controlled server
            environments as an alternative to using
            an external STUN server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.PrivateIPAddress">
            <summary>
            Gets or sets the private IP address of this
            device. If set, this will bypass the local
            network discovery and use this as the sole
            host candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.PrivateIPAddresses">
            <summary>
            Gets or sets the private IP address of this
            device. If set, this will bypass the local
            network discovery and use this as the sole
            host candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.IcePortRange">
            <summary>
            Gets or sets the ICE port range.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.IceAddressTypes">
            <summary>
            Gets or sets the ICE address types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.TcpConnectTimeout">
            <summary>
            Gets or sets connection timeout for stream sockets in ms.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.TurnAllocateRequestLimit">
            <summary>
            Gets or sets the limit on the the number of Turn Allocate request messages when trying to establish allocation on a Turn server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.StunBindingRequestLimit">
            <summary>
            Gets or sets the limit on the the number of Turn Allocate request messages when trying to establish allocation on a Turn server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.StunRequestTimeout">
            <summary>
            Gets or sets the timeout for individual Stun (and Turn) request messages in ms.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.IceRole">
            <summary>
            Gets the ICE role.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.IceConnectionState">
            <summary>
            Gets or sets the ICE connection state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.IceTransportOptions">
            <summary>
            Gets Ice Transport Options
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.UpdateIceConnectionsState">
            <summary>
            Updates the state of Ice on this connection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.DtlsServerMinVersion">
            <summary>
            Gets or sets the minimum protocol version to
            allow when in the DTLS server role. Defaults
            to <see cref="F:FM.LiveSwitch.DtlsProtocolVersion.Dtls10"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.DtlsServerMaxVersion">
            <summary>
            Gets or sets the maximum protocol version to
            allow when in the DTLS server role. Defaults
            to <see cref="F:FM.LiveSwitch.DtlsProtocolVersion.Dtls12"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.DtlsClientVersion">
            <summary>
            Gets or sets the protocol version to use
            when in the DTLS client role. Defaults
            to <see cref="F:FM.LiveSwitch.DtlsProtocolVersion.Dtls12"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.PreferredDtlsRole">
            <summary>
            Gets or sets the preferred DTLS role.
            Defaults to <see cref="F:FM.LiveSwitch.DtlsRole.Auto"/>
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.VerifyDtlsStillNeeded">
            <summary>
            Verifies that Dtls encryption is still required after Sdp negotiation has occurred
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.DefaultLocalDtlsCertificate">
            <summary>
            Gets or sets the default local DTLS certificate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.DefaultLocalDtlsCertificates">
            <summary>
            Gets or sets the default local DTLS certificates.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.LocalDtlsCertificate">
            <summary>
            Gets or sets the local DTLS certificate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.LocalDtlsCertificates">
            <summary>
            Gets or sets the local DTLS certificates.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.DtlsCipherSuites">
            <summary>
            Gets or sets the DTLS cipher suites to use.
            Defaults to:
            DtlsCipherSuite.EcdheEcdsaAes128Sha,
            DtlsCipherSuite.EcdheEcdsaAes128GcmSha256,
            DtlsCipherSuite.EcdheEcdsaAes128CbcSha256,
            DtlsCipherSuite.EcdheRsaAes128Sha,
            DtlsCipherSuite.EcdheRsaAes128GcmSha256,
            DtlsCipherSuite.EcdheRsaAes128CbcSha256,
            DtlsCipherSuite.RsaAes128Sha,
            DtlsCipherSuite.RsaAes128GcmSha256,
            DtlsCipherSuite.RsaAes128CbcSha256,
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.InitialiseInternalTransports(FM.LiveSwitch.BundleGroup[])">
            <summary>
            Builds internal transports and starts gathering 
            </summary>
            <returns>Value indicating whether internal transports have been built successfully.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Connection.ProcessStateChange">
            <summary>
            Processes a state change.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.#ctor(System.Object,FM.LiveSwitch.Stream[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Connection" /> class.
            </summary>
            <param name="sharedLock">The shared lock.</param>
            <param name="streams">The streams.</param>
        </member>
        <member name="P:FM.LiveSwitch.Connection.Instance">
            <summary>
            Gets the current instance.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.Connection.LocalIceParameters">
            <summary>
            Gets or sets the local ICE parameters.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.PrepareTransports(FM.LiveSwitch.BundleGroup[])">
            <summary>
            Prepares (initialises) internal transports (supporting all possible outcomes that could be negotiated; except for bundling, for now).
            Returns a value indicating whether internal transports have been initialised correctly
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.UpdateBundlePolicy(FM.LiveSwitch.BundlePolicy)">
            <summary>
            Updates bundle policy for the non-base connection classes on individual platforms.
            </summary>
            <param name="policy"></param>
        </member>
        <member name="P:FM.LiveSwitch.Connection.MultiplexPolicy">
            <summary>
            Gets or sets the multiplex policy.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.AddToDictionaryList``1(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{``0}},System.String,``0)">
            <summary>
            Adds to dictionary list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Connection.BuildMediaStream(FM.LiveSwitch.Stream,FM.LiveSwitch.CoreTransport,FM.LiveSwitch.CoreTransport,FM.LiveSwitch.CoreTransport)">
            <summary>
            Builds the media stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="rtpCoreTransport">The RTP core transport.</param>
            <param name="rtcpCoreTransport">The RTCP core transport.</param>
            <param name="bundledCoreTransport">Core transport to be used if bundled connection is negotiated.</param>
        </member>
        <member name="M:FM.LiveSwitch.Connection.BuildStreamTransports(FM.LiveSwitch.BundleGroup[])">
            <summary>
            Builds the stream transports.
            </summary>
            <returns>Error, if one occurred while building transports. Null if everything succeeded.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Connection.DoBuildStreamTransports(FM.LiveSwitch.BundleGroup[])">
            <summary>
            The method is now converted to build stream transports given multiplex policy and will always build Dtls transport
            prior to Sdp negotiation. Earlier, this method was used after Sdp negotiation was completed.
            This will be expanded once we have bundling.
            </summary>
            <returns>Error, if one occurred while building transports. Null if everything succeeded.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Connection.BuildDataStream(FM.LiveSwitch.DataStream,FM.LiveSwitch.CoreTransport,FM.LiveSwitch.CoreTransport)">
            <summary>
            Builds the data stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="individualCoreTransport">The core transport to be used when stream is not bundled.</param>
            <param name="bundledCoreTransport">The core transport to be used when stream is not bundled.</param>
        </member>
        <member name="M:FM.LiveSwitch.Connection.AssignCoreTransportsToStream(FM.LiveSwitch.Stream,FM.LiveSwitch.CoreTransport,FM.LiveSwitch.CoreTransport,FM.LiveSwitch.CoreTransport)">
            <summary>
            Assigns the core transport to stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="rtpCoreTransport">The RTP core transport.</param>
            <param name="rtcpCoreTransport">The RTCP core transport.</param>
            <param name="bundledCoreTransport">The RTCP core transport.</param>        
        </member>
        <member name="M:FM.LiveSwitch.Connection.ProcessActiveCandidatePairChange(FM.LiveSwitch.Ice.Transport,FM.LiveSwitch.Ice.CandidatePair)">
            <summary>
            Processes the active candidate pair change.
            </summary>
            <param name="transport">The transport.</param>
            <param name="p">The p.</param>
        </member>
        <member name="M:FM.LiveSwitch.Connection.CommenceGathering(FM.LiveSwitch.CoreTransport)">
            <summary>
            Starts asynchronous gathering process. 
            </summary>
            <param name="coreTransport">The coreTransport.</param>
            <returns>Error if one was encountered while starting to gather.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Connection.StartStreamCore(FM.LiveSwitch.CoreTransport)">
            <summary>
            Starts the stream core.
            </summary>
            <param name="coreTransport">The core transport.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Connection.StopStreamCore(FM.LiveSwitch.CoreTransport)">
            <summary>
            Stops the stream core.
            </summary>
            <param name="coreTransport">The core transport.</param>
        </member>
        <member name="P:FM.LiveSwitch.Connection.CreateDatagramSocket">
            <summary>
            Gets or sets a method that creates Datagram sockets. Optional. If not set, default OS UDP socket is used.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.CreateStreamSocket">
            <summary>
            Gets or sets a method that creates Stream sockets. Optional. If not set, default OS TCP socket is used.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.CreateIceGatherOptions(System.Int32)">
            <summary>
            Gets the ICE gather options.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.GatheringState">
            <summary>
            Gets or sets the ICE gathering state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.ProcessNewLocalCandidate(FM.LiveSwitch.Ice.Gatherer,FM.LiveSwitch.Ice.Candidate)">
            <summary>
            Processes the new local candidate.
            </summary>
            <param name="gatherer">The gatherer.</param>
            <param name="iceCandidate">The candidate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Connection.DoSendCachedLocalCandidates">
            <summary>
            Dispatches cached local candidates that were gathered while Connection generated session description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.ProcessGathererStateChange(FM.LiveSwitch.Ice.Gatherer)">
            <summary>
            Processes the gatherer state change.
            </summary>
            <param name="gatherer">The gatherer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Connection.UpdateConnectionGatheringState">
            <summary>
            Updates the state of the connection gathering.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.StopGatherer(FM.LiveSwitch.Ice.Gatherer)">
            <summary>
            Stops the gatherer.
            </summary>
            <param name="gatherer">The gatherer.</param>
        </member>
        <member name="P:FM.LiveSwitch.Connection.OnRemoteAddStream">
            <summary>
            Gets or sets the event listener raised when a stream is added to connection via negotiation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.OnRemoteRemoveStream">
            <summary>
            Gets or sets the event listener raised when a stream is removed from a connection via negotiation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.Streams">
            <summary>
            Gets the streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.AudioStreams">
            <summary>
            Gets the audio streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.VideoStreams">
            <summary>
            Gets the video streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Connection.DataStreams">
            <summary>
            Gets the data streams.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.GetStreamByType``1(FM.LiveSwitch.StreamType)">
            <summary>
            Gets the type of the stream by.
            </summary>
            <param name="type">The type of the stream.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Connection.GetStreamsByType``1(FM.LiveSwitch.StreamType)">
            <summary>
            Gets the streams by type.
            </summary>
            <param name="type">The type of the stream.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Connection.EstablishConnectionTimeout(FM.LiveSwitch.ScheduledItem)">
            <summary>
            Executes to verify whether connection has been established within specified time-frame (which defaults to 30,000 ms).
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FM.LiveSwitch.Connection.DisableSecondaryComponent(FM.LiveSwitch.Stream,System.Int32)">
            <summary>
            Disables secondary component for a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="sdpMediaIndex">The sdpMediaIndex.</param>
        </member>
        <member name="P:FM.LiveSwitch.Connection.SynchronizeMediaStreams">
            <summary>
            Gets or sets a value indicating whether media streams belonging to the same media source should be synchronized.
            Deprecated. Use MediaStream.OutputSynchronizationDisabled instead.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.DoProcessDescription(FM.LiveSwitch.SessionDescription,System.Boolean)">
            <summary>
            Processes a session description.
            </summary>
            <param name="description">The session description.</param>
            <param name="isLocalDescription">Whether this is a local session description.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Connection.DoCreateOffer(FM.LiveSwitch.Promise{FM.LiveSwitch.SessionDescription})">
            <summary>
            Creates an offer.
            </summary>
            <param name="promise">The promise.</param>
        </member>
        <member name="M:FM.LiveSwitch.Connection.DoCreateAnswer(FM.LiveSwitch.Promise{FM.LiveSwitch.SessionDescription})">
            <summary>
            Creates an answer.
            </summary>
            <param name="promise">The promise.</param>
        </member>
        <member name="M:FM.LiveSwitch.Connection.RaiseLocalCandidate(FM.LiveSwitch.Candidate)">
            <summary>
            Raises a local candidate but only if it has not been already raised.
            </summary>
            <param name="localCandidate">The local candidate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Connection.DoAddRemoteCandidate(FM.LiveSwitch.Promise{FM.LiveSwitch.Candidate},FM.LiveSwitch.Candidate)">
            <summary>
            Adds the remote candidate.
            </summary>
            <param name="promise">The promise.</param>
            <param name="remoteCandidate">The remote candidate.</param>
        </member>
        <member name="P:FM.LiveSwitch.Connection.LocalDescription">
            <summary>
            Gets the local description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.DoSetLocalDescription(FM.LiveSwitch.Promise{FM.LiveSwitch.SessionDescription},FM.LiveSwitch.SessionDescription)">
            <summary>
            Sets the local description.
            </summary>
            <param name="promise">The promise.</param>
            <param name="localDescription">The local description.</param>
        </member>
        <member name="P:FM.LiveSwitch.Connection.RemoteDescription">
            <summary>
            Gets the remote description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.DoSetRemoteDescription(FM.LiveSwitch.Promise{FM.LiveSwitch.SessionDescription},FM.LiveSwitch.SessionDescription)">
            <summary>
            Sets the remote description.
            </summary>
            <param name="promise">The promise.</param>
            <param name="remoteDescription">The remote description.</param>
        </member>
        <member name="M:FM.LiveSwitch.Connection.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Connection.ShutdownOnFailure(FM.LiveSwitch.Error,FM.LiveSwitch.TransportType,System.String)">
            <summary>
            Shuts down the on failure.
            </summary>
            <param name="error">The error.</param>
            <param name="causingTransport">The transport.</param>
            <param name="transportId">The transport identifier.</param>
        </member>
        <member name="T:FM.LiveSwitch.ConnectionBase`6">
            <summary>
            Connection base properties/methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.CanonicalName">
            <summary>
            Gets the canonical name.
            Getting the value of Connection.CanonicalName is deprecated. Get the value of MediaStream.LocalCanonicalName instead.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.GetConnectionWideCanonicalName">
            <summary>
            Gets connection-wide canonical name. This is in use to set CanonicalName on Connection and DataStream, which is obsolete.  
            </summary>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.ExternalId">
            <summary>
            Gets or sets the external identifier.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ConnectionBase`6.OnExternalIdChange">
            <summary>
            Raised when external Id of this connection changes. Old external Id as well as internal Id are raised.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.TieBreaker">
            <summary>
            Gets or sets the tie breaker.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.BundlePolicy">
            <summary>
            Gets or sets the bundle policy.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.UpdateBundlePolicy(FM.LiveSwitch.BundlePolicy)">
            <summary>
            Updates bundle policy for the non-base connection classes on individual platforms.
            </summary>
            <param name="policy"></param>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.LegacyTimeout">
            <summary>
            Gets or sets a value indicating whether legacy Connection.Timeout should be used.
            When disabled, Connection.Timeout only accounts for the time spent trying to establish 
            connectivity (i.e. time it takes to transition from the Connecting to the Connected state;
            from the time point when both offer and answer had been set to the connection 
            being fully established).
            When enabled, Connection.Timeout accounts for the time spent from receiving an offer (or creating an
            offer) to establishing connectivity (i.e. time it takes to transition from Initializing to Connected
            state).
            By default, LegacyTimeout is set to true, so that existing behavior is preserved. However, in the future
            default will be updated to false. This means that IL will not account for any signalling delays that may
            occur while establishing connectivity. This option will be later deprecated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.Timeout">
            <summary>
            Gets or sets the amount of time (in milliseconds)
            to wait for a connection to establish before
            giving up and closing it. Defaults to 30,000.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.DeadStreamTimeout">
            <summary>
            Gets or sets the amount of time (in milliseconds)
            to wait for connectivity checks to re-establish
            after they start to fail on a live connection.
            Defaults to 15,000.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.IceGatherPolicy">
            <summary>
            Gets or sets the ICE gather policy.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.GetStats">
            <summary>
            Gets the current connection stats.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.Connected">
            <summary>
            Gets a future that resolves if the connection enters the Connected state
            or rejects if the connection enters the Failed state before that happens.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.Closed">
            <summary>
            Gets a future that resolves if the connection enters the Closed state
            or rejects if the connection enters the Failed state before that happens.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.Failed">
            <summary>
            Gets a future that resolves if the connection enters the Failed state
            or rejects if the connection enters the Closed state before that happens.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionBase`6.ConnectionLock">
            <summary>
            The state lock.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.Error">
            <summary>
            Gets or sets the error.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.IsTerminating">
            <summary>
            Gets a value indicating whether the connection is currently closing or failing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.IsTerminated">
            <summary>
            Gets a value indicating whether the connection is currently closed or failed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.IsTerminatingOrTerminated">
            <summary>
            Gets a value indicating whether the connection is currently closing, failing, closed, or failed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.State">
            <summary>
            Gets or sets the state of the connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.ProcessStateChange">
            <summary>
            Processes a state change.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ConnectionBase`6.OnIceConnectionStateChange">
            <summary>
            Raised when the ice connection state changes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ConnectionBase`6.OnGatheringStateChange">
            <summary>
            Raised when the gathering state changes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ConnectionBase`6.OnLocalDescription">
            <summary>
            Raised when a local description is set.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ConnectionBase`6.OnRemoteDescription">
            <summary>
            Raised when a remote description is set.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ConnectionBase`6.OnLocalCandidate">
            <summary>
            Raised when a local candidate is added.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ConnectionBase`6.OnRemoteCandidate">
            <summary>
            Raised when a remote description is added.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ConnectionBase`6.OnStateChange">
            <summary>
            Raised when the connection state changes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.RaiseGatheringStateChange(`0)">
            <summary>
            Raises gathering state change.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.RaiseIceConnectionStateChange(`0)">
            <summary>
            Raises ICE connection state change.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.RaiseLocalDescription(FM.LiveSwitch.SessionDescription)">
            <summary>
            Raises the local description.
            </summary>
            <param name="localDescription">The local description.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.RaiseRemoteDescription(FM.LiveSwitch.SessionDescription)">
            <summary>
            Raises the remote description.
            </summary>
            <param name="remoteDescription">The remote description.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.RaiseLocalCandidate(FM.LiveSwitch.Candidate)">
            <summary>
            Raises a local candidate but only if it has not been already raised.
            </summary>
            <param name="localCandidate">The local candidate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.RaiseRemoteCandidate(FM.LiveSwitch.Candidate)">
            <summary>
            Raises a remote candidate.
            </summary>
            <param name="remoteCandidate">The remote candidate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.DoSendCachedLocalCandidates">
            <summary>
            Dispatches cached local candidates that were gathered while Connection generated session description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ConnectionBase`6"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.Instance">
            <summary>
            Gets the current instance.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.IceServers">
            <summary>
            Gets or sets the ICE servers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.IceServer">
            <summary>
            Gets or sets the ICE server.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.AddIceServer(FM.LiveSwitch.IceServer)">
            <summary>
            Adds an ICE server.
            </summary>
            <param name="iceServer">The ICE server.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.RemoveIceServer(FM.LiveSwitch.IceServer)">
            <summary>
            Removes an ICE server.
            </summary>
            <param name="iceServer">The ICE server.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.AddIceServers(FM.LiveSwitch.IceServer[])">
            <summary>
            Adds some ICE servers.
            </summary>
            <param name="iceServers">The ICE servers.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.RemoveIceServers(FM.LiveSwitch.IceServer[])">
            <summary>
            Removes some ICE servers.
            </summary>
            <param name="iceServers">The ICE servers.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.RegisterStreamWithSessionDescriptionManager(`1)">
            <summary>
            Registers stream with the session description manager.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.UnregisterStreamWithSessionDescriptionManager(`1)">
            <summary>
            Unregisters stream with the session description manager.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.Stream">
            <summary>
            Gets the first stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.Streams">
            <summary>
            Gets the streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.HasAudio">
            <summary>
            Gets whether this connection has an audio stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.HasVideo">
            <summary>
            Gets whether this connection has a video stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.HasData">
            <summary>
            Gets whether this connection has a data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.AudioStream">
            <summary>
            Gets the first audio stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.AudioStreams">
            <summary>
            Gets the audio streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.VideoStream">
            <summary>
            Gets the first video stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.VideoStreams">
            <summary>
            Gets the video streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.DataStream">
            <summary>
            Gets the first data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.DataStreams">
            <summary>
            Gets the data streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.IceConnectionState">
            <summary>
            Gets or sets the ICE connection state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.GatheringState">
            <summary>
            Gets or sets the ICE gathering state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.TrickleIcePolicy">
            <summary>
            Gets or sets Trickle Ice Support Policy. Cf. https://tools.ietf.org/html/draft-ietf-ice-trickle-05
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.CreateOffer">
            <summary>
            Creates an offer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.DoCreateOffer(FM.LiveSwitch.Promise{FM.LiveSwitch.SessionDescription})">
            <summary>
            Creates an offer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.CreateAnswer">
            <summary>
            Creates an answer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.DoCreateAnswer(FM.LiveSwitch.Promise{FM.LiveSwitch.SessionDescription})">
            <summary>
            Creates an answer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.AddRemoteCandidate(FM.LiveSwitch.Candidate)">
            <summary>
            Adds the remote candidate.
            </summary>
            <param name="remoteCandidate">The remote candidate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.DoAddRemoteCandidate(FM.LiveSwitch.Promise{FM.LiveSwitch.Candidate},FM.LiveSwitch.Candidate)">
            <summary>
            Adds the remote candidate.
            </summary>
            <param name="promise">The promise.</param>
            <param name="remoteCandidate">The remote candidate.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.LocalDescription">
            <summary>
            Gets the local description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.SetLocalDescription(FM.LiveSwitch.SessionDescription)">
            <summary>
            Sets the local description.
            </summary>
            <param name="localDescription">The local description.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.DoSetLocalDescription(FM.LiveSwitch.Promise{FM.LiveSwitch.SessionDescription},FM.LiveSwitch.SessionDescription)">
            <summary>
            Sets the local description.
            </summary>
            <param name="promise">The promise.</param>
            <param name="localDescription">The local description.</param>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.RemoteDescription">
            <summary>
            Gets the remote description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.SetRemoteDescription(FM.LiveSwitch.SessionDescription)">
            <summary>
            Sets the remote description.
            </summary>
            <param name="remoteDescription">The remote description.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.DoSetRemoteDescription(FM.LiveSwitch.Promise{FM.LiveSwitch.SessionDescription},FM.LiveSwitch.SessionDescription)">
            <summary>
            Sets the remote description.
            </summary>
            <param name="promise">The promise.</param>
            <param name="remoteDescription">The remote description.</param>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionBase`6.SignallingState">
            <summary>
            Gets or sets the state of the signalling.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ConnectionBase`6.OnSignallingStateChange">
            <summary>
            Raised when the signalling state changes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.ProcessDescription(FM.LiveSwitch.SessionDescription,System.Boolean)">
            <summary>
            Processes a session description.
            </summary>
            <param name="description">The session description.</param>
            <param name="isLocalDescription">Whether this is a local session description.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.DoProcessDescription(FM.LiveSwitch.SessionDescription,System.Boolean)">
            <summary>
            Processes a session description.
            </summary>
            <param name="description">The session description.</param>
            <param name="isLocalDescription">Whether this is a local session description.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionBase`6.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ConnectionCollection">
            <summary>
            A collection of connections.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionCollection.GetById(System.String)">
            <summary>
            Gets a connection by internal connection ID.
            </summary>
            <param name="id">The internal connection identifier.</param>
            <returns>The connection, or <c>null</c> if the connection does not exist.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionCollection.GetByExternalId(System.String)">
            <summary>
            Gets a connection by extenral connection ID.
            </summary>
            <param name="id">The external connection identifier.</param>
            <returns>The connection, or <c>null</c> if the connection does not exist.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionCollection.TryGetById(System.String,FM.LiveSwitch.Connection@)">
            <summary>
            Tries to get a connection by internal connection ID.
            </summary>
            <param name="id">The internal Connection identifier.</param>
            <param name="connection">The connection.</param>
            <returns>The connection, or <c>null</c> if the connection does not exist.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionCollection.TryGetByExternalId(System.String,FM.LiveSwitch.Connection@)">
            <summary>
            Tries to get a connection by external connection ID.
            </summary>
            <param name="id">The internal Connection identifier.</param>
            <param name="connection">The connection.</param>
            <returns>The connection, or <c>null</c> if the connection does not exist.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionCollection.AddSuccess(FM.LiveSwitch.Connection)">
            <summary>
            Invoked when an element is added to the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionCollection.RemoveSuccess(FM.LiveSwitch.Connection)">
            <summary>
            Invoked when an element is removed from the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionCollection.ArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.Connection})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.ConnectionCollection.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.DataChannelStateMachine">
            <summary>
            A state machine for data channel states.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStateMachine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataChannelStateMachine"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStateMachine.StateToValue(FM.LiveSwitch.DataChannelState)">
            <summary>
            Converts a state to an integer value.
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStateMachine.ValueToState(System.Int32)">
            <summary>
            Converts an integer value to a state.
            </summary>
            <param name="value">The integer value.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Ice.LocalReflexiveCandidate">
            <summary>
            Local Reflexive Candidate extends Candidate class: this adds extra functionality that allows to send application data and connectivity checks over local host candidates
            that serve as a base for the peer or server reflexive candidates.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Ice.Candidate.OnPriorityChange">
            <summary>
            Raised on candidate priority change.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.Candidate.CalculatePriority(FM.LiveSwitch.CandidateType,System.Int32,FM.LiveSwitch.Ice.Component,FM.LiveSwitch.ProtocolType)">
            <summary>
            Calculates a priority.
            </summary>
            <param name="type">The type.</param>
            <param name="localPreference">The local preference.</param>
            <param name="component">The component.</param>
            <param name="protocol">Transport protocol type</param>
        </member>
        <member name="M:FM.LiveSwitch.Ice.Candidate.CalculateLocalPreference(FM.LiveSwitch.CandidateType,System.Int64,FM.LiveSwitch.Ice.Component,FM.LiveSwitch.ProtocolType)">
            <summary>
            Calculates local preference.
            </summary>
            <param name="type">The type.</param>
            <param name="priority">The priority.</param>
            <param name="component">The component.</param>
            <param name="protocol">The protocol over which this canddate was discovered.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ice.Candidate.GenerateLocalCandidateFoundation(FM.LiveSwitch.CandidateType,System.String,FM.LiveSwitch.TransportAddress,FM.LiveSwitch.ProtocolType)">
            <summary>
            Gets the foundation,
            an arbitrary string, that is the same for two candidates
            that have the same type, base IP address, protocol (UDP, TCP,
            etc.), and STUN or TURN server.  If any of these are different,
            then the foundation will be different.  Two candidate pairs with
            the same foundation pairs are likely to have similar network
            characteristics.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.Candidate.NotifyOfSocketError(FM.LiveSwitch.Error)">
            <summary>
            Notifies this Candidate of the unrecoverable error on the main DSM
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="P:FM.LiveSwitch.Ice.Candidate.Protocol">
            <summary>
            Protocol that can be used to communicate with this Candidate.
            If communicating peer-to-peer, then this is also the protocol used by the local socket.
            If communicating over relay, this is the protocol used by the accepting socket on the relay server (not the local socket on the client): <seealso cref="P:FM.LiveSwitch.Ice.Candidate.RelayProtocol"/> for this case.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.Candidate.RelayProtocol">
            <summary>
            Gets or sets the relay protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.Candidate.RelatedIPAddress">
            <summary>
            Gets the related IP address.
            For relayed candidates, this is a server reflexive address.
            For server reflexive candidates, this is a host address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.Candidate.RelatedPort">
            <summary>
            Gets the related port.
            For relayed candidates, this is a server reflexive port.
            For server reflexive candidates, this is a host port.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.Candidate.GenerateAttribute(System.Int32)">
            <summary>
            Converts this instance to an SDP candidate attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Ice.Candidate.FromSdpCandidateAttribute(System.Object,FM.LiveSwitch.Sdp.Ice.CandidateAttribute)">
            <summary>
            Converts an SDP candidate attribute to an ICE candidate.
            </summary>
            <param name="lockObject">The lock object.</param>
            <param name="candidateAttribute">The SDP candidate attribute.</param>
        </member>
        <member name="T:FM.LiveSwitch.Ice.CandidatePair">
            <summary>
            A pairing containing a local candidate and a remote candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.AwaitingOriginalRelayPermissions">
            <summary>
            Gets or sets a value indicating whether the candidate pair awaits
            relay permissions. Outgoing connectivity checks should not commense
            until this value is set to false. Triggered connectivity checks may commense, however.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.OnOriginalRelayPermissionsObtained">
            <summary>
            Gets or sets the callback that is fired when original relay permissions are obtained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.Local">
            <summary>
            Gets or sets a candidate that an agent has obtained and included
            in an offer or answer it sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.Remote">
            <summary>
            Gets a candidate that an agent received in an offer or
            answer from its peer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.Priority">
            <summary>
            Gets or sets the priority of this pair.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.Foundation">
            <summary>
            Gets the combined foundation of the candidates in this pair.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CandidatePair.CalculateFoundation(FM.LiveSwitch.Ice.Candidate,FM.LiveSwitch.Ice.Candidate)">
            <summary>
            Calculate combined foundation for the given local and remote candidates.
            </summary>
            <param name="local">Local candidate.</param>
            <param name="remote">Remote candidate.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.UseCandidateReceived">
            <summary>
            Gets or sets a flag indicating that this candidate
            was nominated by the peer before we have processed 
            a complete send/receive cycle.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.RelatedValidPairId">
            <summary>
            Gets or sets the ID of the valid pair that resulted from a successful check.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.Nominated">
            <summary>
            Gets or sets whether this is a nominated candidate pair.
            If a valid candidate pair has its nominated flag set, it
            means that it may be selected by ICE for sending and receiving
            media.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.Valid">
            <summary>
            Gets or sets whether this is a valid candidate pair.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.KeepAliveTimeout">
            <summary>
            Gets or sets the keepalive timeout (in ms).
            If no data is received from the remote party for this period of time
            after the connection is established, the pair moves to the CONNECTIVITY_LOST state.
            Default value = 3,000 ms.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.RelayConnectionTimeout">
            <summary>
            Gets or sets the relay connection timeout (in ms).
            If relay connectivity cannot be established within RelayConnectionTimeout or 
            relay permissions cannot be renwewed within this timeout, then this pair
            moves to FAILED state.
            Default value = 10,000 ms.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CandidatePair.#ctor(System.Object,FM.LiveSwitch.Ice.Candidate,FM.LiveSwitch.Ice.Candidate,FM.LiveSwitch.IceParameters,FM.LiveSwitch.IceParameters,FM.LiveSwitch.IceRole,System.Int64,FM.LiveSwitch.Ice.Component,FM.LiveSwitch.Ice.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Ice.CandidatePair" /> class.
            </summary>
            <param name="lockObject">The lock object.</param>
            <param name="local">The local candidate.</param>
            <param name="remote">The remote candidate.</param>
            <param name="localParameters">The local parameters.</param>
            <param name="remoteParameters">The remote parameters.</param>
            <param name="localRole">The local role.</param>
            <param name="tieBreaker">The tie breaker.</param>
            <param name="component">The component.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CandidatePair.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CandidatePair.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CandidatePair.Equals(FM.LiveSwitch.Ice.Candidate,FM.LiveSwitch.Ice.Candidate)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="local">Local candidate of the other candidate pair.</param>
            <param name="remote">Remote candidate of the other pair.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CandidatePair.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CandidatePair.AssignPriority(FM.LiveSwitch.IceRole)">
            <summary>
            Assigns the priority.
            </summary>
            <param name="role">The role.</param>
        </member>
        <member name="F:FM.LiveSwitch.Ice.CandidatePair.OnPriorityChange">
            <summary>
            Raised when this Candidate Pair's priority changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.State">
            <summary>
            Gets or sets the state of this pair.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CandidatePair.StartPermissionRequests">
            <summary>
            Starts recurring permission requests.
            </summary>
            <returns>A value indicating whether the permission transactions have been started.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CandidatePair.Stop">
            <summary>
            Stops the connectivity checks, keep alive and permission refresh transactions and detaches delegates.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.OnStateChange">
            <summary>
            Gets or sets the callback invoked when the state changes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CandidatePair.CancelConnectivityCheck">
            <summary>
            Cancels the connectvity check.
            Cancellation means that the agent
            will not retransmit the request, will not treat the lack of
            response to be a failure, but will wait the duration of the
            transaction timeout for a response.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CandidatePair.SendPassiveKeepAlive">
            <summary>
            Sends KeepAlive if the last KeepAlive was sent MinimumPassiveKeepAliveInterval ms ago.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CandidatePair.DoSendKeepAlive">
            <summary>
            Sends KeepAlive if the last KeepAlive was sent MinimumPassiveKeepAliveInterval ms ago.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.TotalRoundTripTime">
            <summary>
            Gets the value that represents the sum of all round trip time measurements in milliseconds since the beginning of the session, based on both STUN connectivity check [ STUN-PATH-CHAR] responses (responsesReceived) and consent [ RFC7675] responses (consentResponsesReceived). The average round trip time can be computed from totalRoundTripTime by dividing it by (responsesReceived + consentResponsesReceived).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.LastRoundTripTime">
            <summary>
            Gets the most recent instantaneous (non-smoothed) value of the Round Trip Time (RTT) in milliseconds for this pair. Set to -1 if the value is not available.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.CandidatePair.SmoothedRoundTripTime">
            <summary>
            Gets the most recent smoothed calculation of the Round Trip Time (RTT) in milliseconds for this pair. Set to -1 if the value is not available.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.CheckList">
            <summary>
            ICE check list.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CheckList.GetWaitingCandidatePair">
            <summary>
            Gets the next waiting candidate pair.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Ice.CheckList.AddToOrdinaryCheckList(FM.LiveSwitch.Ice.CandidatePair)">
            <summary>
            Adds a candidate pair.
            </summary>
            <param name="candidatePair">The candidate pair to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CheckList.FindMatchingLocalCandidate(System.String,System.Int32)">
            <summary>
            Finds a matching local candidate.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Ice.CheckList.FindMatchingCandidatePair(FM.LiveSwitch.Ice.Candidate,FM.LiveSwitch.Ice.Candidate)">
            <summary>
            Finds a matching candidate pair.
            </summary>
            <param name="local"></param>
            <param name="remote"></param>
        </member>
        <member name="M:FM.LiveSwitch.Ice.CheckList.FindMatchingCandidatePair(FM.LiveSwitch.Ice.CandidatePair)">
            <summary>
            Finds a matching candidate pair.
            </summary>
            <param name="cp">The candidate pair.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Ice.CheckList.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Ice.DatagramSocketManager">
            <summary>
            UDP Socket Manager
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.DatagramSocketManager.SocketIsClosed">
            <summary>
            Gets a value indicating whether the socket is closed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.DatagramSocketManager.Start(FM.LiveSwitch.Ice.GatherOptions)">
            <summary>
            Starts listening for incoming packets.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.DatagramSocketManager.SendServerBindStunMessage(FM.LiveSwitch.ScheduledItem)">
            <summary>
            Sends a request.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.DatagramSocketManager.SendServerAllocateStunMessage(FM.LiveSwitch.ScheduledItem)">
            <summary>
            Sends a request.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.DatagramSocketManager.SendStunMessage(FM.LiveSwitch.Ice.SendMessageArgs)">
            <summary>
            Sends a request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.DatagramSocketManager.Socket">
            <summary>
            Gets or sets the socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.DatagramSocketManager.LocalTransportAddress">
            <summary>
            Gets the local transport address
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.Gatherer.OpenSockets(FM.LiveSwitch.ProtocolType,FM.LiveSwitch.ManagedSocket[]@,FM.LiveSwitch.ManagedSocket[]@)">
            <summary>
            Finds ports and opens sockets for each local ip address.
            If a related Rtcp Gatherer was created, corresponding Rtcp sockets are open as well.
            </summary>
            <param name="protocol">Transport protocol.</param>
            <param name="primarySockets">Datagram sockets (created on the even ports) for the given ip addresses.</param>
            <param name="complementarySockets">Complementary datagram sockets (created on adjacent odd ports) for the given ip addresses.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ice.Gatherer.DoDnsResolveCallback(System.String[],System.Object)">
            <summary>
            Callback on DNS reolution. Once all the supplied servers have been resolved, 
            gathering of nonlocal host candidates commences.
            </summary>
            <param name="serverIPAddresses">The server ip addresses.</param>
            <param name="stateObj">The state object.</param>
        </member>
        <member name="P:FM.LiveSwitch.Ice.Gatherer.ClosingShouldNotTriggerGlobalNonGracefulShutdown">
            <summary>
            Gets or sets a value indicating whether closing of this transport is expected and thus should not be treated as error
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Ice.Gatherer.OnStateChange">
            <summary>
            Raised when the state changes.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.LocalCandidateState.Ready">
            <summary>
            Indicates that this local <see cref="T:FM.LiveSwitch.Ice.Candidate"/> is ready for communication.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.LocalCandidateState.Closed">
            <summary>
            Indicates that this local <see cref="T:FM.LiveSwitch.Ice.Candidate"/> was closed intentionally. Communication over this local <see cref="T:FM.LiveSwitch.Ice.Candidate"/> is not possible.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.LocalCandidateState.Failed">
            <summary>
            Indicates that this local <see cref="T:FM.LiveSwitch.Ice.Candidate"/> was closed due to an error. Failure reason can be accessed via the <see cref="P:FM.LiveSwitch.Ice.Candidate.Error"/> property.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.LocalRelayedCandidate">
            <summary>
            Local Relayed Candidate extends Candidate class with all the required logic to interact with
            the relay servers.
            NB: This does not support candidate restarts (i.e. requesting allocations when the candidate
            is deallocating or has deallocated).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.LocalRelayedCandidate.Expires">
            <summary>
            Gets or sets the allocation expiry timestamp.
            Updates the corresponding scheduler transaction
            if the difference in expiry time is significant.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.LocalRelayedCandidate.Open">
            <summary>
            Gets a value indicating whether this <see cref="T:FM.LiveSwitch.Ice.LocalRelayedCandidate"/> is open for communication:
            allocated and ready to send and receive data (but may be currently refreshing its allocation)
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.LocalRelayedCandidate.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.LocalRelayedCandidate.StartScheduleRefreshTransactions">
            <summary>
            Starts refresh transactions for this relayed candidate
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.LocalRelayedCandidate.StopRelayTransactions(System.Boolean)">
            <summary>
            Stops refresh transactions for this relayed candidate.
            </summary>
            <param name="deallocate">Indicates whether the candidate should also be deallocated on the server.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ice.LocalRelayedCandidate.GenerateAllocationRefreshScheduledItem">
            <summary>
            Generates scheduled item that attempts to refresh turn server allocation
            Attempts to refresh allocation are made with an increasing interval with the timeout of 15 sec.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.LocalRelayedCandidate.ProcessRefreshTimedout(FM.LiveSwitch.ScheduledItem)">
            <summary>
            Processes the refresh timeout.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ice.LocalRelayedCandidate.ProcessRefreshExecutionFailed(FM.LiveSwitch.Ice.SendRequestFailureArgs)">
            <summary>
            Processes callback invoked when underlying class failed to dispatch refresh request
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ice.LocalRelayedCandidate.ProcessRefreshResponse(FM.LiveSwitch.Ice.SendRequestSuccessArgs)">
            <summary>
            Processes response to the server allocation refresh request
            </summary>
            <param name="e">Success args.</param>
        </member>
        <member name="P:FM.LiveSwitch.Ice.LocalRelayedCandidate.LastRelayServerRoundTripTime">
            <summary>
            Gets the most recent instantaneous (non-smoothed) value of the Round Trip Time (RTT) in milliseconds between this peer and the relay server. Set to -1 if the value is not available.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.LocalRelayedCandidate.SmoothedRelayServerRoundTripTime">
            <summary>
            Gets the most recent smoothed calculation of the Round Trip Time (RTT) in milliseconds between the local peer and the relay server. Set to -1 if the value is not available.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.LocalRelayedCandidateState">
            <summary>
            <see cref="T:FM.LiveSwitch.Ice.LocalRelayedCandidate"/> states.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.LocalRelayedCandidateState.Allocated">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Ice.LocalRelayedCandidate"/> has been recently allocated and its ready for communication
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.LocalRelayedCandidateState.Refreshing">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Ice.LocalRelayedCandidate"/> is refreshing its allocation. It is, nevertheless, available for communication
            because the current allocation has not expired.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.LocalRelayedCandidateState.Closing">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Ice.LocalRelayedCandidate"/> is undergoing a deallocation procedure with the server.
            Communication via this candidate is not possible.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.LocalRelayedCandidateState.Closed">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Ice.LocalRelayedCandidate"/> has been deallocated from the associated relay server.
            Communication via this candidate is not possible.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.LocalRelayedCandidateState.Failed">
            <summary>
            Indicates the allocation refresh request for the <see cref="T:FM.LiveSwitch.Ice.LocalRelayedCandidate"/> has failed.
            Communication via this candidate is not possible.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.SendMessageArgs">
            <summary>
            ICE send-request context.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendMessageArgs.RaiseServerReflexiveCandidates">
            <summary>
            Gets or sets a value indicating whether gathered server reflexive candidates should be reported by the gatherer.
            </summary>
            <value>
            <c>true</c> if [raise server reflexive candidates]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendMessageArgs.RelayPassword">
            <summary>
            Gets or sets the password (for Turn relay)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendMessageArgs.Message">
            <summary>
            Gets or sets the Stun message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendMessageArgs.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendMessageArgs.CandidatePairId">
            <summary>
            Gets or sets the foundation of the candidate pair, for which a connectivity check is being conducted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendMessageArgs.TurnRelay">
            <summary>
            Gets or sets the TURN relay.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendMessageArgs.OnResponse">
            <summary>
            Gets or sets the callback to execute when response to Stun Message is received
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendMessageArgs.OnFailure">
            <summary>
            Gets or sets the callback to execute on execution failure.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendMessageArgs.Cancelled">
            <summary>
            Gets or sets a value indicating whether this ICE Check is cancelled.
            </summary>
            <value>
              <c>true</c> if cancelled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Ice.SendMessageArgs.CancelTransaction">
            <summary>
            Cancel ICE connectivity check:
            Cancellation means that the agent
            will not retransmit the request, will not treat the lack of
            response to be a failure, but will wait the duration of the
            transaction timeout for a response.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.SendMessageArgs.#ctor(FM.LiveSwitch.Stun.Message,FM.LiveSwitch.TransportAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Ice.SendMessageArgs"/> class.
            </summary>
            <param name="message">The request or response.</param>
            <param name="address">The address.</param>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendMessageArgs.DispatchTimestamp">
            <summary>
            Gets or sets the dispatch time of the message.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.SendRequestBeforeSendArgs">
            <summary>
            ICE send-request before-send arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestBeforeSendArgs.MessageBroker">
            <summary>
            Gets or sets the message broker.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestBeforeSendArgs.Request">
            <summary>
            Gets or sets the original request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestBeforeSendArgs.Address">
            <summary>
            Gets or sets the original address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestBeforeSendArgs.Attempt">
            <summary>
            Gets or sets the original attempt number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestBeforeSendArgs.TurnRelay">
            <summary>
            Gets or sets the original TURN relay.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestBeforeSendArgs.Cancel">
            <summary>
            Gets or sets whether to cancel the request.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.SendRequestCompleteArgs">
            <summary>
            ICE send-request complete arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestCompleteArgs.SocketManager">
            <summary>
            Gets or sets the socket manager.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestCompleteArgs.Request">
            <summary>
            Gets or sets the original request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestCompleteArgs.Address">
            <summary>
            Gets or sets the original address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestCompleteArgs.Attempt">
            <summary>
            Gets or sets the original attempt number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestCompleteArgs.MaxAttempts">
            <summary>
            Gets or sets the original maximum allowed number of retries.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestCompleteArgs.TurnRelay">
            <summary>
            Gets or sets the original TURN relay.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.SendRequestFailureArgs">
            <summary>
            ICE send-request failure arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestFailureArgs.CandidatePairId">
            <summary>
            Gets or sets the ID of the candidate pair associated with this failed request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestFailureArgs.Address">
            <summary>
            Gets or sets the original address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestFailureArgs.TurnRelay">
            <summary>
            Gets or sets the original TURN relay.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestFailureArgs.Error">
            <summary>
            Gets or sets the error.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.SendRequestSuccessArgs">
            <summary>
            ICE send-request success arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestSuccessArgs.Item">
            <summary>
            Gets or sets the scheduled item associated with this transaction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestSuccessArgs.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestSuccessArgs.RemoteAddress">
            <summary>
            Gets or sets the remote address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestSuccessArgs.Relayed">
            <summary>
            Gets or sets a value indicating whether the response was relayed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendRequestSuccessArgs.RequestDispatchTimestamp">
            <summary>
            Gets or sets the dispatch time of the associated request message.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.SendResponseArgs">
            <summary>
            ICE send-response arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseArgs.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseArgs.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseArgs.TurnRelay">
            <summary>
            Gets or sets the TURN relay.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseArgs.OnSuccess">
            <summary>
            Gets or sets the callback that executes on success.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseArgs.OnFailure">
            <summary>
            Gets or sets the callback that executes on failure.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseArgs.OnComplete">
            <summary>
            Gets or sets the callback that executes on complete.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.SendResponseArgs.#ctor(FM.LiveSwitch.Stun.Message,FM.LiveSwitch.TransportAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Ice.SendResponseArgs"/> class.
            </summary>
            <param name="response">The response.</param>
            <param name="address">The address.</param>
        </member>
        <member name="T:FM.LiveSwitch.Ice.SendResponseCompleteArgs">
            <summary>
            ICE send-response complete arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseCompleteArgs.Response">
            <summary>
            Gets or sets the original response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseCompleteArgs.Address">
            <summary>
            Gets or sets the original address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseCompleteArgs.TurnRelay">
            <summary>
            Gets or sets the original turn relay.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.SendResponseFailureArgs">
            <summary>
            ICE send-response failure arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseFailureArgs.Response">
            <summary>
            Gets or sets the original response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseFailureArgs.Address">
            <summary>
            Gets or sets the original address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseFailureArgs.TurnRelay">
            <summary>
            Gets or sets the original turn relay.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseFailureArgs.Exception">
            <summary>
            Gets or sets the exception that occurred.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.SendResponseSuccessArgs">
            <summary>
            ICE send-response success arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseSuccessArgs.Response">
            <summary>
            Gets or sets the original response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseSuccessArgs.Address">
            <summary>
            Gets or sets the original address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SendResponseSuccessArgs.TurnRelay">
            <summary>
            Gets or sets the original turn relay.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.SocketManager">
            <summary>
            ICE socket manager.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SocketManager.LocalPreference">
            <summary>
            Gets or sets the local preference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.SocketManager.NumberOfStunRequests">
            <summary>
            Indicates the number of STUN requests targetting a specific IP address.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.SocketManager.Stop">
            <summary>
            Stops listening for incoming packets and cancels all the current outgoing requests
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.SocketManager.Finalise">
            <summary>
            Completes closing procedures for this datagram socket manager
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.StreamSocketManager">
            <summary>
            TCP Socket Manager
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.StreamSocketManager.Start(FM.LiveSwitch.Ice.GatherOptions)">
            <summary>
            Starts listening for incoming packets.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.StreamSocketManager.SendStunMessage(FM.LiveSwitch.Ice.SendMessageArgs,System.Boolean,FM.LiveSwitch.Action0,FM.LiveSwitch.Action3{FM.LiveSwitch.Ice.SendMessageArgs,System.Exception,System.Boolean})">
            <summary>
            Sends a request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.StreamSocketManager.StreamSendTimeout">
            <summary>
            Gets or sets the timeout for asynchronous application data dispatch over stream socket in ms. Unset by default.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.TransactionManager">
            <summary>
            Keeps track of ICE Stun/Turn transactions; singleton
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.TransactionManager.TryTriggerOnResponse(System.String,FM.LiveSwitch.Ice.SendRequestSuccessArgs)">
            <summary>
            Finds the owner of the transaction with associated key and triggers its response callback. 
            </summary>
            <param name="key">The key.</param>
            <param name="successArgs">The success arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Ice.TransactionManager.Remove(System.Object)">
            <summary>
            Removes all the transactions associated with a given caller.
            </summary>
            <param name="caller">The caller.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ice.TransactionManager.HasActiveTransactions(System.Object)">
            <summary>
            Determines whether the specified caller has active transactions.
            </summary>
            <param name="caller">The caller.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Ice.TransactionManager.ScheduledItemsForCaller(System.Object)">
            <summary>
            ScheduleItems for a given caller.
            </summary>
            <param name="caller">The caller.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Ice.TransactionManager.SendMessageArgsForCaller(System.Object)">
            <summary>
            SendMessageArgs for a given caller.
            </summary>
            <param name="caller">The caller.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.Ice.Transport.LastRoundTripTime">
            <summary>
            Gets the most recent instantaneous (non-smoothed) value of the Round Trip Time (RTT) in milliseconds for the active pair on this transport. Set to -1 if the value is not available.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.Transport.SmoothedRoundTripTime">
            <summary>
            Gets the most recent smoothed calculation of the Round Trip Time (RTT) in milliseconds for the active pair on this transport. Set to -1 if the value is not available.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.Transport.LastRelayServerRoundTripTime">
            <summary>
            Gets the most recent instantaneous (non-smoothed) value of the Round Trip Time (RTT) between the local peer and the relay server if the local candidate on the active pair is a relayed candidate, in milliseconds. Set to -1 if the value is not available.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.Transport.SmoothedRelayServerRoundTripTime">
            <summary>
            Gets the most recent smoothed calculation of the Round Trip Time (RTT) between the local peer and the relay server if the local candidate on the active pair is a relayed candidate, in milliseconds. Set to -1 if the value is not available.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.Transport.RoundTripTime">
            <summary>
            Gets the current round-trip-time in milliseconds.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.Transport._CheckList">
            <summary>
            Gets or sets the check list.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.Transport._ValidList">
            <summary>
            Gets or sets the valid list.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.Transport.ClosingShouldNotTriggerGlobalNonGracefulShutdown">
            <summary>
            Gets or sets a value indicating whether closing of this transport is expected and thus should not be treated as error
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.Transport.ActiveIceKeepAliveEnabled">
            <summary>
            Gets or set a value indicating if Active ICE Keep-Alive is enabled on this transport.
            Active means that the transport initiates keep-alives itself as opposed to keep-alives
            being triggered by receipt of remote keep-alive requests.
            Plays no role when ICE is not in use.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.Transport.ProcessGotOriginalRelayPermissionsNonIceCP(FM.LiveSwitch.Ice.CandidatePair)">
            <summary>
            Used to process the event of obtaining relay permissions for the CP when ICE is not in use
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.Transport.VerifyIceRole(FM.LiveSwitch.Stun.Message)">
            <summary>
            Verifies the ICE role in the incoming requests. If the role does not match what we expect, we either send an error response or switch our role.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Ice.Transport.CreateIceRoleConflictResponse(FM.LiveSwitch.DataBuffer)">
            <summary>
            Creates an ICE Role Conflict response.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.Transport.StopNonActivePairs">
            <summary>
            Concludes ICE processing. Called when a pair is nominated.
            https://tools.ietf.org/html/rfc5245#section-8
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.Transport.FindMatchingRemoteCandidate(System.String,System.Int32)">
            <summary>
            Finds a matching remote candidate.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
            
        </member>
        <member name="F:FM.LiveSwitch.Ice.KeepAlivePolicy.All">
            <summary>
            All candidate pairs are kept alive
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.KeepAlivePolicy.ActiveOnly">
            <summary>
            Only the active candidate pairs are kept alive
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.TransportOptions.KeepAlivePolicy">
            <summary>
            Gets a value indicating which candidate pairs are kept alive after connection is established.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.TransportOptions.DeadStreamTimeout">
            <summary>
            Gets the candidate pair keep-alive timeout (in ms).
            If no response is received within the dead stream timeout period, a candidate pair is declared Failed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.TransportOptions.KeepAliveInterval">
            <summary>
            Gets a value indicating how many milliseconds must elapse between STUN
            keep-alive binding requests.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.TransportOptions.#ctor(FM.LiveSwitch.Ice.KeepAlivePolicy,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Ice.TransportOptions"/> class.
            </summary>
            <param name="keepAlivePolicy">The keep alive policy.</param>
            <param name="deadStreamTimeout">The dead stream timeout (in ms).</param>
            <param name="keepAliveInterval">The keep alive interval.</param>
        </member>
        <member name="T:FM.LiveSwitch.Ice.TransportState">
            <summary>
            <see cref="T:FM.LiveSwitch.Ice.Transport"/> states.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.TransportState.New">
            <summary>
            Indicates that the <see cref="T:FM.LiveSwitch.Ice.Transport"/> has been created and is not yet started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.TransportState.Checking">
            <summary>
            Indicates that the <see cref="T:FM.LiveSwitch.Ice.Transport"/> has been started and is looking for successful
            candidate pairs, but none have succeeded yet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.TransportState.Connected">
            <summary>
            Indicates that the <see cref="T:FM.LiveSwitch.Ice.Transport"/> has found a successful candidate pair, but is
            still checking other candidate pairs to look for a better connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.TransportState.Disconnected">
            <summary>
            Indicates that the <see cref="T:FM.LiveSwitch.Ice.Transport"/> was at some point Connected, is currently disconnected but may regain connectivity later.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.TransportState.Closed">
            <summary>
            Indicates that the <see cref="T:FM.LiveSwitch.Ice.Transport"/> has been closed intentionally via a call to <see cref="M:FM.LiveSwitch.Ice.Transport.Stop"/>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ice.TransportState.Failed">
            <summary>
            Indicates that the <see cref="T:FM.LiveSwitch.Ice.Transport"/> encountered unrecovarable problems. In part, this may be due to losing connectivity for substantial
            periods of time. Error property of this transport may contain further information.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ice.ValidList">
            <summary>
            ICE valid list.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.ValidList.AddCandidatePair(FM.LiveSwitch.Ice.CandidatePair)">
            <summary>
            Adds a candidate pair.
            </summary>
            <param name="candidatePair">The candidate pair to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ice.ValidList.RemoveCandidatePair(FM.LiveSwitch.Ice.CandidatePair)">
            <summary>
            Removes a candidate pair.
            </summary>
            <param name="candidatePair">The candidate pair to remove.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.Ice.ValidList.CandidatePairs">
            <summary>
            Gets the candidate pairs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.ValidList.PurgePairs">
            <summary>
            Deletes failed pairs from the Valid List
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.ValidList.NominatedPairWithHighestPriority">
            <summary>
            Gets the nominated pair with the highest priority
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ice.ValidList.HasNominatedSucceededPair">
            <summary>
            Gets a value indicating whether the valid list has nominated a candidate pair.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ice.ValidList.FindMatchingCandidatePair(FM.LiveSwitch.Ice.Candidate,FM.LiveSwitch.Ice.Candidate)">
            <summary>
            Finds a matching candidate pair.
            </summary>
            <param name="local"></param>
            <param name="remote"></param>
        </member>
        <member name="T:FM.LiveSwitch.IdentityAudioPipe">
            <summary>
            An audio pipe whose output matches its input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IdentityAudioPipe.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IdentityAudioPipe.CanPauseBitrate">
            <summary>
            Gets whether this pipe can pause the output bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IdentityAudioPipe.CanChangeBitrate">
            <summary>
            Gets whether this pipe can change the output bitrate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new <see cref="T:FM.LiveSwitch.IdentityAudioPipe"/>.
            </summary>
            <param name="format">The input/output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.UpdateMinInputBitrate(System.Int32)">
            <summary>
            Sets the minimum allowed input bitrate, in kbps.
            A value of -1 indicates unset, in which case the
            minimum input bitrate becomes the maximum of all
            output minimum input bitrates.
            </summary>
            <param name="minInputBitrate">The minimum allowed input bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.UpdateMaxInputBitrate(System.Int32)">
            <summary>
            Sets the maximum allowed input bitrate, in kbps.
            A value of -1 indicates unset, in which case the
            maximum input bitrate becomes the minimum of all
            output maximum input bitrates.
            </summary>
            <param name="maxInputBitrate">The maximum allowed input bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.UpdateMinOutputBitrate(System.Int32)">
            <summary>
            Sets the minimum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minOutputBitrate">The minimum allowed output bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.UpdateMaxOutputBitrate(System.Int32)">
            <summary>
            Sets the maximum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxOutputBitrate">The maximum allowed output bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.UpdateTargetOutputBitrate(System.Int32)">
            <summary>
            Sets the target output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="targetOutputBitrate">The target output bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.UpdateMinInputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the minimum allowed input encoding.
            A value of null indicates unset (no minimum).
            </summary>
            <param name="minInputEncoding">The minimum allowed input encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.UpdateMaxInputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the maximum allowed input encoding.
            A value of null indicates unset (no maximum).
            </summary>
            <param name="maxInputEncoding">The maximum allowed input encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.UpdateMinOutputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the minimum allowed output encoding.
            A value of null indicates unset (no minimum).
            </summary>
            <param name="minOutputEncoding">The minimum allowed output encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.UpdateMaxOutputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the maximum allowed output encoding.
            A value of null indicates unset (no maximum).
            </summary>
            <param name="maxOutputEncoding">The maximum allowed output encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.UpdateTargetOutputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the target output encoding.
            A value of null indicates unset (no target).
            </summary>
            <param name="targetOutputEncoding">The target output encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.UpdateCanPauseBitrate(System.Boolean)">
            <summary>
            Sets whether this pipe can pause the output bitrate. 
            </summary>
            <param name="canPauseBitrate">Whether this pipe can pause the output bitrate.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.UpdateCanChangeBitrate(System.Boolean)">
            <summary>
            Sets whether this pipe can change the output bitrate. 
            </summary>
            <param name="canChangeBitrate">Whether this pipe can change the output bitrate.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityAudioPipe.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IdentityVideoPipe">
            <summary>
            A video pipe whose output matches its input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IdentityVideoPipe.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IdentityVideoPipe.CanPauseBitrate">
            <summary>
            Gets whether this pipe can pause the output bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IdentityVideoPipe.CanChangeBitrate">
            <summary>
            Gets whether this pipe can change the output bitrate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new <see cref="T:FM.LiveSwitch.IdentityVideoPipe"/>.
            </summary>
            <param name="format">The input/output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMinInputBitrate(System.Int32)">
            <summary>
            Sets the minimum allowed input bitrate, in kbps.
            A value of -1 indicates unset, in which case the
            minimum input bitrate becomes the maximum of all
            output minimum input bitrates.
            </summary>
            <param name="minInputBitrate">The minimum allowed input bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMaxInputBitrate(System.Int32)">
            <summary>
            Sets the maximum allowed input bitrate, in kbps.
            A value of -1 indicates unset, in which case the
            maximum input bitrate becomes the minimum of all
            output maximum input bitrates.
            </summary>
            <param name="maxInputBitrate">The maximum allowed input bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMinOutputBitrate(System.Int32)">
            <summary>
            Sets the minimum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minOutputBitrate">The minimum allowed output bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMaxOutputBitrate(System.Int32)">
            <summary>
            Sets the maximum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxOutputBitrate">The maximum allowed output bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateTargetOutputBitrate(System.Int32)">
            <summary>
            Sets the target output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="targetOutputBitrate">The target output bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMinInputScale(System.Double)">
            <summary>
            Sets the minimum allowed input scale.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minInputScale">The minimum allowed input scale.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMaxInputScale(System.Double)">
            <summary>
            Sets the maximum allowed input scale.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxInputScale">The maximum allowed input scale.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMinOutputScale(System.Double)">
            <summary>
            Sets the minimum allowed output scale.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minOutputScale">The minimum allowed output scale.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMaxOutputScale(System.Double)">
            <summary>
            Sets the maximum allowed output scale.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxOutputScale">The maximum allowed output scale.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateTargetOutputScale(System.Double)">
            <summary>
            Sets the target output scale.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="targetOutputScale">The target output scale.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMinInputFrameRate(System.Double)">
            <summary>
            Sets the minimum allowed input frame-rate.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minInputFrameRate">The minimum allowed input frame-rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMaxInputFrameRate(System.Double)">
            <summary>
            Sets the maximum allowed input frame-rate.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxInputFrameRate">The maximum allowed input frame-rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMinOutputFrameRate(System.Double)">
            <summary>
            Sets the minimum allowed output frame-rate.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minOutputFrameRate">The minimum allowed output frame-rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMaxOutputFrameRate(System.Double)">
            <summary>
            Sets the maximum allowed output frame-rate.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxOutputFrameRate">The maximum allowed output frame-rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateTargetOutputFrameRate(System.Double)">
            <summary>
            Sets the target output frame-rate.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="targetOutputFrameRate">The target output frame-rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMinInputSize(FM.LiveSwitch.Size)">
            <summary>
            Sets the minimum allowed input size.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minInputSize">The minimum allowed input size.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMaxInputSize(FM.LiveSwitch.Size)">
            <summary>
            Sets the maximum allowed input size.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxInputSize">The maximum allowed input size.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMinOutputSize(FM.LiveSwitch.Size)">
            <summary>
            Sets the minimum allowed output size.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minOutputSize">The minimum allowed output size.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMaxOutputSize(FM.LiveSwitch.Size)">
            <summary>
            Sets the maximum allowed output size.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxOutputSize">The maximum allowed output size.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateTargetOutputSize(FM.LiveSwitch.Size)">
            <summary>
            Sets the target output size.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="targetOutputSize">The target output size.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMinInputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the minimum allowed input encoding.
            A value of null indicates unset (no minimum).
            </summary>
            <param name="minInputEncoding">The minimum allowed input encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMaxInputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the maximum allowed input encoding.
            A value of null indicates unset (no maximum).
            </summary>
            <param name="maxInputEncoding">The maximum allowed input encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMinOutputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the minimum allowed output encoding.
            A value of null indicates unset (no minimum).
            </summary>
            <param name="minOutputEncoding">The minimum allowed output encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateMaxOutputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the maximum allowed output encoding.
            A value of null indicates unset (no maximum).
            </summary>
            <param name="maxOutputEncoding">The maximum allowed output encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateTargetOutputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the target output encoding.
            A value of null indicates unset (no target).
            </summary>
            <param name="targetOutputEncoding">The target output encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateCanPauseBitrate(System.Boolean)">
            <summary>
            Sets whether this pipe can pause the output bitrate. 
            </summary>
            <param name="canPauseBitrate">Whether this pipe can pause the output bitrate.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateCanChangeBitrate(System.Boolean)">
            <summary>
            Sets whether this pipe can change the output bitrate. 
            </summary>
            <param name="canChangeBitrate">Whether this pipe can change the output bitrate.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.UpdateVideoType(FM.LiveSwitch.VideoType)">
            <summary>
            Sets the video type.
            </summary>
            <param name="videoType">The video type.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.IdentityVideoPipe.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.NullViewSink`1">
            <summary>
            A video view sink that does nothing.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:FM.LiveSwitch.NullViewSink`1.View">
            <summary>
            Gets the view.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullViewSink`1.ViewScale">
            <summary>
            Gets or sets the view scale.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullViewSink`1.ViewMirror">
            <summary>
            Gets or sets a value indicating whether the view is mirrored.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullViewSink`1.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullViewSink`1.UpdateMinInputBitrate(System.Int32)">
            <summary>
            Sets the minimum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minInputBitrate">The minimum allowed input bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullViewSink`1.UpdateMaxInputBitrate(System.Int32)">
            <summary>
            Sets the maximum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxInputBitrate">The maximum allowed input bitrate, in kbps.</param>
        </member>
        <member name="P:FM.LiveSwitch.NullViewSink`1.FrameCount">
            <summary>
            Gets the current frame count.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullViewSink`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.NullViewSink`1" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullViewSink`1.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.NullViewSink`1" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullViewSink`1.RenderBuffer(FM.LiveSwitch.VideoBuffer)">
            <summary>
            Renders a video buffer.
            </summary>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullViewSink`1.RenderedFrames(System.Int64)">
            <summary>
            Creates a future that resolves when the specified
            number of frames have been processed.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.StreamStateMachine">
            <summary>
            A state machine for stream states.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamStateMachine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.StreamStateMachine"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamStateMachine.StateToValue(FM.LiveSwitch.StreamState)">
            <summary>
            Converts a state to an integer value.
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamStateMachine.ValueToState(System.Int32)">
            <summary>
            Converts an integer value to a state.
            </summary>
            <param name="value">The integer value.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.ConnectionStateMachine">
            <summary>
            A state machine for connection states.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStateMachine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ConnectionStateMachine"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStateMachine.StateToValue(FM.LiveSwitch.ConnectionState)">
            <summary>
            Converts a state to an integer value.
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStateMachine.ValueToState(System.Int32)">
            <summary>
            Converts an integer value to a state.
            </summary>
            <param name="value">The integer value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CoreTransport.CreateComplementaryCoreTransport(FM.LiveSwitch.DtlsCertificate[],FM.LiveSwitch.DtlsCipherSuite[],FM.LiveSwitch.DtlsProtocolVersion,FM.LiveSwitch.DtlsProtocolVersion,FM.LiveSwitch.DtlsProtocolVersion,FM.LiveSwitch.DtlsRole)">
            <summary>
            Creates the complementary core transport for RTCP. This transport may only be created when this Gatherer is in the New state.
            Complementary Gatherer may only be started once this transport has assigned sockets to the complementary transport (signalled by moving into the Gathering state).
            Dtls transport is prepared given supplied Dtls parameters.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CoreTransport.CreateComplementaryCoreTransport">
            <summary>
            Creates the complementary core transport for RTCP. This transport may only be created when this Gatherer is in the New state.
            Complementary Gatherer may only be started once this transport has assigned sockets to the complementary transport (signalled by moving into the Gathering state).
            Dtls transport is not prepared.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataChannel">
            <summary>
            A data channel.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataChannel"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannel.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataChannel"/> class.
            </summary>
            <param name="label">The label.</param>
            <param name="ordered">if set to <c>true</c> [ordered].</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannel.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataChannel"/> class.
            </summary>
            <param name="label">The label.</param>
            <param name="ordered">Whether messages will be delivered in the order they are sent.</param>
            <param name="subprotocol">The subprotocol.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannel.#ctor(FM.LiveSwitch.Reliable.Channel,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataChannel"/> class.
            </summary>
            <param name="innerChannel">Inner reliable channel.</param>
            <param name="stateLock">Data Stream lock.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannel.ProcessStateLockChange">
            <summary>
            Processes a state lock change.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannel.Instance">
            <summary>
            Gets the current instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataChannel.SendDataMessage(FM.LiveSwitch.DataMessage)">
            <summary>
            Sends a data message.
            </summary>
            <param name="dataMessage">The data message.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannel.SendDataString(System.String)">
            <summary>
            Sends a string.
            </summary>
            <param name="dataString">The data string.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannel.SendDataBytes(FM.LiveSwitch.DataBuffer)">
            <summary>
            Sends bytes.
            </summary>
            <param name="dataBytes">The data bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannel.PromisedSendDataString(System.String,System.Int32,FM.LiveSwitch.Promise{System.Object})">
            <summary>
            Sends a string.
            </summary>
            <param name="dataString">The data string.</param>
            <param name="dataLength">The data length.</param>
            <param name="promise">Promise indicating message status delivery.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannel.PromisedSendDataBytes(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.Promise{System.Object})">
            <summary>
            Sends bytes.
            </summary>
            <param name="dataBytes">The data bytes.</param>
            <param name="dataLength">The data length.</param>
            <param name="promise">Promise indicating message status delivery.</param>
        </member>
        <member name="T:FM.LiveSwitch.DataChannelBase`1">
            <summary>
            Data channel base properties/methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.StreamId">
            <summary>
            Gets the stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.ConnectionId">
            <summary>
            Gets the connection identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.Label">
            <summary>
            Gets the label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.Ordered">
            <summary>
            Gets a value indicating whether messages will be delivered in the order they are sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.Subprotocol">
            <summary>
            Gets the subprotocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.OnReceive">
            <summary>
            Gets or sets the callback to execute when a message is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.StateLock">
            <summary>
            Gets or sets the state lock, shared with the data stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelBase`1.ProcessStateLockChange">
            <summary>
            Processes a state lock change.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.DataChannelBase`1.OnStateChange">
            <summary>
            Raised when the data channel state changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.IsTerminating">
            <summary>
            Gets a value indicating whether the data channel is currently closing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.IsTerminated">
            <summary>
            Gets a value indicating whether the data channel is currently closed or failed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.IsTerminatingOrTerminated">
            <summary>
            Gets a value indicating whether the data channel is currently closing, closed, or failed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelBase`1.ProcessStateChange">
            <summary>
            Processes a state change.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelBase`1.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataChannelBase`1"/> class.
            </summary>
            <param name="label">The label.</param>
            <param name="ordered">Whether messages will be delivered in the order they are sent.</param>
            <param name="subprotocol">The subprotocol.</param>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.Instance">
            <summary>
            Gets the current instance.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.MessagesSent">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.MessagesReceived">
            <summary>
            Gets the number of messages received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.BytesSent">
            <summary>
            Gets the number of bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.BytesReceived">
            <summary>
            Gets the number of bytes received.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.DataChannelBase`1.OnDataSent">
            <summary>
            Raised when data is sent.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.DataChannelBase`1.OnDataReceived">
            <summary>
            Raised when data is received.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelBase`1.RegisterDataSent(System.Int32)">
            <summary>
            Registers that a data has been sent.
            </summary>
            <param name="dataLength">The data length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelBase`1.RegisterDataReceived(System.Int32)">
            <summary>
            Registers that a data has been sent.
            </summary>
            <param name="dataLength">The data length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelBase`1.SendDataString(System.String)">
            <summary>
            Sends a string.
            </summary>
            <param name="dataString">The data string.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelBase`1.SendDataBytes(FM.LiveSwitch.DataBuffer)">
            <summary>
            Sends some bytes.
            </summary>
            <param name="dataBytes">The data bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelBase`1.RaiseDataBytes(FM.LiveSwitch.DataBuffer)">
            <summary>
            Raises the OnReceive callback with data bytes.
            </summary>
            <param name="dataBytes">The data bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelBase`1.RaiseDataString(System.String)">
            <summary>
            Raises the OnReceive callback with a data string.
            </summary>
            <param name="dataString">The data string.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelBase`1.PrepareAndSendMessage(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.Promise{System.Object})">
            <summary>
            Converts a data buffer to a data message and serialises the message.
            </summary>
            <param name="buffer">The DataBuffer.</param>
            <param name="promise">Promise indicating message status delivery.</param>
            <returns>Serialised message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelBase`1.PrepareAndSendMessage(System.String,FM.LiveSwitch.Promise{System.Object})">
            <summary>
            Converts a string to a data message and serialises the message.
            </summary>
            <param name="msg">The string.</param>
            <param name="promise">Promise indicating message status delivery.</param>
            <returns>Serialised message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelBase`1.PromisedSendDataString(System.String,System.Int32,FM.LiveSwitch.Promise{System.Object})">
            <summary>
            Sends a string.
            </summary>
            <param name="dataString">The data string.</param>
            <param name="dataLength">The data length.</param>
            <param name="promise">Promise indicating message status delivery.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelBase`1.PromisedSendDataBytes(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.Promise{System.Object})">
            <summary>
            Sends bytes.
            </summary>
            <param name="dataBytes">The data bytes.</param>
            <param name="dataLength">The data length.</param>
            <param name="promise">Promise indicating message status delivery.</param>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelBase`1.Info">
            <summary>
            Gets the data channel info.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataChannelCollection">
            <summary>
            A collection of data channels.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelCollection.ArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.DataChannel})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataChannelCollection.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.DataChannelReceiveArgs">
            <summary>
            Arguments for the data channel receive event.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelReceiveArgs.DataString">
            <summary>
            Gets or sets the data string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelReceiveArgs.DataBytes">
            <summary>
            Gets or sets the data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelReceiveArgs.DataMessage">
            <summary>
            Gets or sets the data message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelReceiveArgs.RemoteConnectionInfo">
            <summary>
            Gets the remote connection info.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataStream">
            <summary>
            A data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStream.MaxMessageSize">
            <summary>
            Gets or sets maximum message size that this client is willing to receive over this stream in bytes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataStream"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStream.UseSdes">
            <summary>
            Gets or sets a value indicating whether SDES encryption is in use for this stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStream.TransportInfo">
            <summary>
            Gets transport information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStream.#ctor(FM.LiveSwitch.DataChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataStream"/> class.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStream.#ctor(FM.LiveSwitch.DataChannel[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataStream"/> class.
            </summary>
            <param name="channels">The channels.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStream.ProcessBundledStateChanged(System.Boolean)">
            <summary>
            Processes bundled state change of this stream.
            </summary>
            <param name="bundled"></param>
        </member>
        <member name="M:FM.LiveSwitch.DataStream.Close">
            <summary>
            Resets local encryption and ICE parameters for this stream.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.DataStream.OnChannel">
            <summary>
            Invoked when a new Data Channel has being created in response to a remote WebRTC DCEP Data Channel Open request (rather than created and passed to this DataStream in a constructor).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStream.Channels">
            <summary>
            Gets the channels.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStream.MediaDescriptionManager">
            <summary>
            Gets MediaDescriptionManager.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStream.ProcessCachedSettings">
            <summary>
            Process the cached settings.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStream.CreateSdpMediaDescription(FM.LiveSwitch.Sdp.Message,System.Boolean,System.Boolean,System.Boolean,FM.LiveSwitch.BundlePolicy)">
            <summary>
            Generates SDP media description for data stream.
            </summary>
            <param name="sdpMessage">The SDP message.</param>
            <param name="supportSdes">if set to <c>true</c> Sdp message will contain SDES crypto attibutes.</param>
            <param name="isOffer">if set to <c>true</c> Sdp media description is a part of an Sdp offer.</param>
            <param name="isRenegotiation">Indicates whether media description generation is a part of the SDP renegotiation attempt.</param>
            <param name="bundlePolicy">Bundle policy on the connection.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStream.ProcessSdpMediaDescription(FM.LiveSwitch.Sdp.Message,FM.LiveSwitch.Sdp.MediaDescription,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Processes an SDP description.
            </summary>
            <param name="sdpMessage">The SDP message.</param>
            <param name="sdpMediaDescription">The SDP media description.</param>
            <param name="index">The SDP media description index.</param>
            <param name="isLocalDescription">Indicates whether description is local or not.</param>
            <param name="isOffer">Indicates whether this description is an offer.</param>
            <param name="isRenegotiation">Flag indicating whether SDP renegotiation is currently in progress.</param>
        </member>
        <member name="P:FM.LiveSwitch.DataStream.SctpPort">
            <summary>
            Gets or sets the SCTP port.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataStreamBase`1">
            <summary>
            Data stream base properties/methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamBase`1.GetRemoteConnectionInfo">
            <summary>
            Gets or sets a reference to the function that obtains RemoteConnectionInfo,
            which can be used by this DataStream's channels to populate ConnectionInfo 
            property of arriving messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamBase`1.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamBase`1.CanonicalName">
            <summary>
            Gets the canonical name.
            Getting the value of DataStream.CanonicalName is deprecated and will be removed in a future release.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamBase`1.Direction">
            <summary>
            Gets the current direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamBase`1.LocalDirection">
            <summary>
            Gets or sets the current direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamBase`1.RemoteDirection">
            <summary>
            Gets or sets the current direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamBase`1.DirectionCapabilities">
            <summary>
            Gets the direction capabilities of this stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamBase`1.ChangeDirection(FM.LiveSwitch.StreamDirection)">
            <summary>
            Changes this stream's direction
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamBase`1.Channels">
            <summary>
            Gets the channels.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamBase`1.MessagesSent">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamBase`1.MessagesReceived">
            <summary>
            Gets the number of messages received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamBase`1.BytesSent">
            <summary>
            Gets the number of bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamBase`1.BytesReceived">
            <summary>
            Gets the number of bytes received.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamBase`1.RegisterDataSent(System.Int32)">
            <summary>
            Registers that a data has been received.
            </summary>
            <param name="dataLength">The data length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamBase`1.RegisterDataReceived(System.Int32)">
            <summary>
            Registers that a data has been received.
            </summary>
            <param name="dataLength">The data length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamBase`1.ProcessStateLockChange">
            <summary>
            Processes a state lock change.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamBase`1.AttachToChannel(`0)">
            <summary>
            Attaches a data channel to this stream (events and IDs).
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamBase`1.ProcessStateChange">
            <summary>
            Processes a state change.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataStreamBase`1"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamBase`1.Info">
            <summary>
            Gets the data stream info.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DtlsCipherSuite">
            <summary>
            A cipher suite.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DtlsCipherSuite.RsaAes128Sha">
            <summary>
            Indicates TLS_RSA_WITH_AES_128_CBC_SHA.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DtlsCipherSuite.EcdheRsaAes128Sha">
            <summary>
            Indicates TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DtlsCipherSuite.EcdheEcdsaAes128Sha">
            <summary>
            Indicates TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DtlsCipherSuite.RsaAes128GcmSha256">
            <summary>
            Indicates TLS_RSA_WITH_AES_128_GCM_SHA256.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DtlsCipherSuite.EcdheRsaAes128GcmSha256">
            <summary>
            Indicates TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DtlsCipherSuite.EcdheEcdsaAes128GcmSha256">
            <summary>
            Indicates TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DtlsCipherSuite.RsaAes128CbcSha256">
            <summary>
            Indicates TLS_RSA_WITH_AES_128_CBC_SHA256.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DtlsCipherSuite.EcdheRsaAes128CbcSha256">
            <summary>
            Indicates TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DtlsCipherSuite.EcdheEcdsaAes128CbcSha256">
            <summary>
            Indicates TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DtlsParameters">
            <summary>
            A set of DTLS parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DtlsParameters.Role">
            <summary>
            Gets or sets the role.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DtlsParameters.PreferredRole">
            <summary>
            Gets or sets the preferred role.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DtlsParameters.Fingerprint">
            <summary>
            Gets or sets the fingerprint.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DtlsParameters.Fingerprints">
            <summary>
            Gets or sets the fingerprints.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DtlsParameters.#ctor(FM.LiveSwitch.DtlsRole,FM.LiveSwitch.DtlsFingerprint[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DtlsParameters"/> class.
            </summary>
            <param name="role">The role.</param>
            <param name="fingerprints">The fingerprints.</param>
        </member>
        <member name="M:FM.LiveSwitch.DtlsParameters.#ctor(FM.LiveSwitch.DtlsRole,FM.LiveSwitch.DtlsFingerprint[],FM.LiveSwitch.DtlsRole)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DtlsParameters"/> class.
            </summary>
            <param name="role">The role.</param>
            <param name="fingerprints">The fingerprints.</param>
            <param name="preferredRole">The preferred role.</param>
        </member>
        <member name="M:FM.LiveSwitch.DtlsParameters.Negotiate(FM.LiveSwitch.DtlsRole)">
            <summary>
            Negotiates the <see cref="P:FM.LiveSwitch.DtlsParameters.Role"/> based on a remote role.
            </summary>
            <param name="remoteRole">The remote role.</param>
            <returns>The updated remote role.</returns>
        </member>
        <member name="T:FM.LiveSwitch.DtlsProtocolVersion">
            <summary>
            DTLS protocol versions.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DtlsProtocolVersion.Dtls10">
            <summary>
            Indicates DTLS 1.0.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DtlsProtocolVersion.Dtls12">
            <summary>
            Indicates DTLS 1.2.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DtlsRole">
            <summary>
            A DTLS role.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DtlsRole.Auto">
            <summary>
            Indicates a negotiated role.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DtlsRole.Client">
            <summary>
            Indicates a client role.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DtlsRole.Server">
            <summary>
            Indicates a server role.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.EncryptionPolicy">
            <summary>
            Indicates encryption policy for a connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EncryptionPolicy.Required">
            <summary>
            Encryption is required. If encryption is not supported by peer, connection must fail.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EncryptionPolicy.Negotiated">
            <summary>
            Encryption is preferred but not required. If the other peer does not support encryption, connection will be established without encryption.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EncryptionPolicy.Disabled">
            <summary>
            Encryption will not be available for the given connection.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.FakeAudioSource">
            <summary>
            A fake audio source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FakeAudioSource.Frequency">
            <summary>
            Gets the output frequency.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FakeAudioSource.Amplitude">
            <summary>
            Gets the output amplitude.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FakeAudioSource.Latency">
            <summary>
            Gets the initial latency.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FakeAudioSource.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FakeAudioSource.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FakeAudioSource" /> class.
            </summary>
            <param name="config">The output configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.FakeAudioSource.#ctor(FM.LiveSwitch.AudioConfig,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FakeAudioSource" /> class.
            </summary>
            <param name="config">The output configuration.</param>
            <param name="frequency">The output frequency.</param>
        </member>
        <member name="M:FM.LiveSwitch.FakeAudioSource.#ctor(FM.LiveSwitch.AudioConfig,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FakeAudioSource" /> class.
            </summary>
            <param name="config">The output configuration.</param>
            <param name="frequency">The output frequency.</param>
            <param name="amplitude">The output amplitude</param>
        </member>
        <member name="M:FM.LiveSwitch.FakeAudioSource.#ctor(FM.LiveSwitch.AudioConfig,System.Single,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FakeAudioSource" /> class.
            </summary>
            <param name="config">The output configuration.</param>
            <param name="frequency">The output frequency.</param>
            <param name="amplitude">The output amplitude.</param>
            <param name="latency">The initial latency.</param>
        </member>
        <member name="M:FM.LiveSwitch.FakeAudioSource.DoStart">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FakeAudioSource.DoStop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.FakeVideoSource">
            <summary>
            A fake video source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FakeVideoSource.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FakeVideoSource.#ctor(FM.LiveSwitch.VideoConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FakeAudioSource" /> class.
            </summary>
            <param name="config">The output configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.FakeVideoSource.#ctor(FM.LiveSwitch.VideoConfig,FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FakeAudioSource" /> class.
            </summary>
            <param name="config">The output configuration.</param>
            <param name="format">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.FakeVideoSource.DoStart">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FakeVideoSource.DoStop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.FecMaskType">
            <summary>
            Forward error correction mask types.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.FecMaskType.Random">
            <summary>
            Indicates a random FEC mask type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.FecMaskType.Bursty">
            <summary>
            Indicates a bursty FEC mask type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.FecProtectionParameters">
            <summary>
            FEC protection parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FecProtectionParameters.Rate">
            <summary>
            Gets or sets the FEC rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FecProtectionParameters.UseUepProtection">
            <summary>
            Gets or sets whether UEP protection should be used.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FecProtectionParameters.MaxFrames">
            <summary>
            Gets or sets the maximum FEC frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FecProtectionParameters.MaskType">
            <summary>
            Gets or sets the type of the FEC mask.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FecProtectionParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FecProtectionParameters"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Feedback">
            <summary>
            Control frame feedback.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Feedback.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Feedback.Parameter">
            <summary>
            Gets the parameter.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Feedback.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Feedback"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="T:FM.LiveSwitch.FeedbackControlFrame">
            <summary>
            An RTCP Feedback packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FeedbackControlFrame.FixedPayloadHeaderLength">
            <summary>
            Gets the fixed payload header length of a Feedback Control packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FeedbackControlFrame.FeedbackMessageType">
            <summary>
            Gets or sets the feedback message type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FeedbackControlFrame.PacketSenderSynchronizationSource">
            <summary>
            Gets or sets the SSRC of the packet sender - the synchronization source 
            identifier for the originator of this packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FeedbackControlFrame.MediaSourceSynchronizationSource">
            <summary>
            Gets or sets the SSRC of the media source that this
            piece of feedback information is related to.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FeedbackControlFrame.FeedbackControlInformationOffset">
            <summary>
            Gets the feedback control information offset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FeedbackControlFrame.FeedbackControlInformation">
            <summary>
            Gets or sets the Feedback Control Information field.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FeedbackControlFrame.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FeedbackControlFrame" /> class.
            </summary>
            <param name="feedbackMessageType">Type of the feedback message.</param>
            <param name="payloadType">Type of the payload.</param>
        </member>
        <member name="M:FM.LiveSwitch.FeedbackControlFrame.#ctor(System.Int32,System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FeedbackControlFrame" /> class.
            </summary>
            <param name="feedbackMessageType">The feedback message type.</param>
            <param name="payloadType">Payload type.</param>
            <param name="buffer">The backing data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.FeedbackControlFrame.#ctor(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FeedbackControlFrame"/> class.
            </summary>
            <param name="feedbackMessageType">Type of the feedback message.</param>
            <param name="payloadType">Type of the payload.</param>
            <param name="senderSynchronizationSource">The sender synchronization source.</param>
            <param name="mediaSynchronizationSource">The media synchronization source.</param>
        </member>
        <member name="M:FM.LiveSwitch.FeedbackControlFrame.#ctor(System.Int32,System.Int32,System.Int64,System.Int64,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FeedbackControlFrame"/> class.
            </summary>
            <param name="feedbackMessageType">Type of the feedback message.</param>
            <param name="payloadType">Type of the payload.</param>
            <param name="senderSynchronizationSource">The sender synchronization source.</param>
            <param name="mediaSynchronizationSource">The media synchronization source.</param>
            <param name="feedbackControlInformation">The feedback control information.</param>
        </member>
        <member name="T:FM.LiveSwitch.FirEntry">
            <summary>
            An RTCP full intra request (FIR) packet entry.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FirEntry.FixedPayloadLength">
            <summary>
            Gets or sets the fixed length of an FIR entry.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FirEntry.DataBuffer">
            <summary>
            Gets or sets the backing data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FirEntry.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FirEntry.SequenceNumber">
            <summary>
            Gets or sets the sequence number.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FirEntry.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FirEntry"/> class.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.FirEntry.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FirEntry"/> class.
            </summary>
            <param name="sequenceNumber">The sequence number.</param>
        </member>
        <member name="M:FM.LiveSwitch.FirEntry.GetSequenceNumberDelta(System.Int32,System.Int32)">
            <summary>
            Gets the delta between sequence numbers, adjusted for overflow.
            </summary>
            <param name="sequenceNumber">The current sequence number.</param>
            <param name="lastSequenceNumber">The last sequence number.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.FirControlFrame">
            <summary>
            An RTCP full intra request (FIR) packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FirControlFrame.RegisteredFeedbackMessageType">
            <summary>
            Gets the type of the registered feedback message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FirControlFrame.Entry">
            <summary>
            Gets or sets the entry.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FirControlFrame.Entries">
            <summary>
            Gets or sets the entries.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FirControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FirControlFrame"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.FirControlFrame.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FirControlFrame" /> class.
            </summary>
            <param name="sequenceNumber">The sequence number.</param>
        </member>
        <member name="M:FM.LiveSwitch.FirControlFrame.#ctor(FM.LiveSwitch.FirEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FirControlFrame" /> class.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:FM.LiveSwitch.FirControlFrame.#ctor(FM.LiveSwitch.FirEntry[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FirControlFrame" /> class.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="T:FM.LiveSwitch.G711.Format">
            <summary>
            A G.711 format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.G711.Format.DefaultClockRate">
            <summary>
            Gets the default clock rate (8000).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.G711.Format.DefaultChannelCount">
            <summary>
            Gets the default clock rate (1).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.G711.Format.DefaultConfig">
            <summary>
            Gets the default configuration (8000/1).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.G711.Format.MinBitrate">
            <summary>
            Gets the minimum bitrate supported by this format, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.G711.Format.MaxBitrate">
            <summary>
            Gets the maximum bitrate supported by this format, in kbps.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.G711.Format.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.G711.Format" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="T:FM.LiveSwitch.GenericNack">
            <summary>
            A Generic NACK feedback message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.FixedPayloadLength">
            <summary>
            Gets the length of the registered fixed payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.DataBuffer">
            <summary>
            Gets the data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.PacketId">
            <summary>
            Gets or sets the RTP sequence number of the lost packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.BitmaskOfLostPackets">
            <summary>
            Gets or sets the bitmask of lost packets.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus1">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 1 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus2">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 2 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus3">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 3 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus4">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 4 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus5">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 5 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus6">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 6 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus7">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 7 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus8">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 8 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus9">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 9 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus10">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 10 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus11">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 11 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus12">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 12 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus13">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 13 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus14">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 14 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus15">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 15 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus16">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 16 was lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlusLength">
            <summary>
            Gets the length of the lost packet identifier plus.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.GenericNack.GetLostPacketIdPlus(System.Int32)">
            <summary>
            Gets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + value was lost.
            </summary>
            <param name="value">The value.</param>
            <returns>Whether the packet was lost.</returns>
        </member>
        <member name="M:FM.LiveSwitch.GenericNack.SetLostPacketIdPlus(System.Int32,System.Boolean)">
            <summary>
            Sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + value was lost.
            </summary>
            <param name="value">The value.</param>
            <param name="lost">Whether the packet was lost.</param>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.PacketIdHandled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus1Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 1 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus2Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 2 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus3Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 3 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus4Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 4 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus5Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 5 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus6Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 6 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus7Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 7 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus8Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 8 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus9Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 9 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus10Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 10 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus11Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 11 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus12Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 12 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus13Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 13 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus14Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 14 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus15Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 15 was retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.LostPacketIdPlus16Handled">
            <summary>
            Gets or sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + 16 was retransmitted.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.GenericNack.GetLostPacketIdPlusHandled(System.Int32)">
            <summary>
            Gets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + value was retransmitted.
            </summary>
            <param name="value">The value.</param>
            <returns>Whether the packet was retransmitted.</returns>
        </member>
        <member name="M:FM.LiveSwitch.GenericNack.SetLostPacketIdPlusHandled(System.Int32,System.Boolean)">
            <summary>
            Sets whether the packet with ID <see cref="P:FM.LiveSwitch.GenericNack.PacketId"/> + value was retransmitted.
            </summary>
            <param name="value">The value.</param>
            <param name="handled">Whether the packet was retransmitted.</param>
        </member>
        <member name="P:FM.LiveSwitch.GenericNack.Handled">
            <summary>
            Gets a value indicating whether all lost packets were retransmitted.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.GenericNack.Flush">
            <summary>
            Updates this instance to reflect only the lost packets that
            were not retransmitted.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.GenericNack.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.GenericNack" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.GenericNack.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.GenericNack" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.GenericNackControlFrame">
            <summary>
            An RTCP Feedback RTP-Generic NACK packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNackControlFrame.RegisteredFeedbackMessageType">
            <summary>
            Gets the type of the registered feedback message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNackControlFrame.GenericNack">
            <summary>
            Gets or sets the generic nack.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.GenericNackControlFrame.GenericNacks">
            <summary>
            Gets the set of generic NACKs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.GenericNackControlFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RtpControlFrame"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.GenericNackControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.GenericNackControlFrame"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.GenericNackControlFrame.#ctor(FM.LiveSwitch.GenericNack)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.GenericNackControlFrame"/> class.
            </summary>
            <param name="nack">The nack.</param>
        </member>
        <member name="M:FM.LiveSwitch.GenericNackControlFrame.#ctor(FM.LiveSwitch.GenericNack[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.GenericNackControlFrame"/> class.
            </summary>
            <param name="nacks">The nacks.</param>
        </member>
        <member name="T:FM.LiveSwitch.H264.Depacketizer">
            <summary>
            An H.264 depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Depacketizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Depacketizer.PacketizationMode">
            <summary>
            Gets the packetization mode.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.Depacketizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Depacketizer"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.Depacketizer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Depacketizer"/> class.
            </summary>
            <param name="packetizationMode">The packetization mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Depacketizer.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Depacketizer"/> class.
            </summary>
            <param name="profile">The profile.</param>
            <param name="level">The level.</param>
            <param name="packetizationMode">The packetization mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Depacketizer.#ctor(FM.LiveSwitch.H264.ProfileLevelId,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Depacketizer"/> class.
            </summary>
            <param name="profileLevelId">The profile level ID.</param>
            <param name="packetizationMode">The packetization mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Depacketizer.#ctor(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Depacketizer"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Depacketizer.DoCreateFragment(FM.LiveSwitch.RtpPacketHeader,FM.LiveSwitch.DataBuffer)">
            <summary>
            Creates a fragment from a data buffer.
            </summary>
            <param name="header">The rtp header for this packet.</param>
            <param name="dataBuffer">The data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Depacketizer.IsKeyFrame(FM.LiveSwitch.DataBuffer)">
            <summary>
            Checks if the databuffer contains a keyframe.
            </summary>
            <param name="inputBuffer">VideoBuffer containing video data.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Depacketizer.RaiseFrame(FM.LiveSwitch.VideoFrame)">
            <summary>
            Raises a frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Depacketizer.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.H264.Format">
            <summary>
            An H.264 format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Format.MinBitrate">
            <summary>
            Gets the minimum bitrate supported by this format, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Format.MaxBitrate">
            <summary>
            Gets the maximum bitrate supported by this format, in kbps.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.Format.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Format"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.Format.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Format"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Format.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Format"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
            <param name="packetizationMode">The packetization mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Format.#ctor(System.Int32,FM.LiveSwitch.H264.ProfileLevelId,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Format"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
            <param name="profileLevelId">The profile level ID.</param>
            <param name="packetizationMode">The packetization mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Format.#ctor(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Format"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
            <param name="profile">The profile.</param>
            <param name="level">The level.</param>
            <param name="packetizationMode">The packetization mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Format.#ctor(FM.LiveSwitch.H264.ProfileLevelId)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Format"/> class.
            </summary>
            <param name="profileLevelId">The profile level ID.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Format.#ctor(FM.LiveSwitch.H264.ProfileLevelId,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Format"/> class.
            </summary>
            <param name="profileLevelId">The profile level ID.</param>
            <param name="packetizationMode">The packetization mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Format.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Format"/> class.
            </summary>
            <param name="profile">The profile.</param>
            <param name="level">The level.</param>
            <param name="packetizationMode">The packetization mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Format.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.H264.Fragment">
            <summary>
            An H.264 packet fragment.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.Fragment.#ctor(FM.LiveSwitch.RtpPacketHeader,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Fragment" /> class.
            </summary>
            <param name="header">The rtp packet header.</param>
            <param name="dataBuffer">The data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Fragment.Destroy">
            <summary>
            Destroys this fragment.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.H264.Nalu">
            <summary>
            An H264 Network Abstraction Layer Unit.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.StartCode">
            <summary>
            Gets the 4-byte NALU start code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.Buffer">
            <summary>
            Gets the backing DataBuffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.Header">
            <summary>
            Gets the NAL header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.Payload">
            <summary>
            Gets or sets the NAL payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.FBitMask">
            <summary>
            Gets the forbidden zero bit mask.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.NriMask">
            <summary>
            Gets the nal_ref_idc mask.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.TypeMask">
            <summary>
            Gets the NAL Unit Type mask.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.FBit">
            <summary>
            Gets the forbidden Zero Bit. The H.264 specification declares a
            value of 1 as a syntax violation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.NalRefIdc">
            <summary>
            Gets the NRI: 2bits otherwise known as nal_ref_idc.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.Type">
            <summary>
            Gets the NAL Unit Type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.ShortLength">
            <summary>
            Gets the size of the NAL Unit (including NAL header) in two octets stored in
            the returned byte array. Useful for creating certain types of H264 such as STAP.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.H264.Nalu.SliceTypeDefs">
            <summary>
            Slice Type Definitions.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.Nalu.SliceTypeDefs.P">
            <summary>
            P-slice.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.Nalu.SliceTypeDefs.B">
            <summary>
            B-slice.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.Nalu.SliceTypeDefs.I">
            <summary>
            I-slice.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.Nalu.SliceTypeDefs.SP">
            <summary>
            SP-slice.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.Nalu.SliceTypeDefs.SI">
            <summary>
            SI-slice.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.Nalu.SliceTypeDefs.PNonVcl">
            <summary>
            P-slice.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.Nalu.SliceTypeDefs.BNonVcl">
            <summary>
            B-slice.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.Nalu.SliceTypeDefs.INonVcl">
            <summary>
            I-slice.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.Nalu.SliceTypeDefs.SPNonVcl">
            <summary>
            SP-slice.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.Nalu.SliceTypeDefs.SINonVcl">
            <summary>
            SI-slice.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.FrameNum">
            <summary>
            Gets the frame_num: The Frame Number is used as an identifier for pictures and shall be represented 
            by log2_max_frame_num_minus4 + 4 bits in the bitstream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.PpsId">
            <summary>
            Gets the Picture Parameter Set specifies the picture parameter set in use. The 
            value of pic_parameter_set_id shall be in the range of 0 to 255, inclusive.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.SpsId">
            <summary>
            Gets the Sequence Parameter Set this NAL references.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.IdrPicId">
            <summary>
            Gets the idr_pic_id: The values of idr_pic_id in all the slices 
            of an IDR picture shall remain unchanged. When two consecutive access units in 
            decoding order are both IDR access units, the value of idr_pic_id in the slices of 
            the first such IDR access unit shall differ from the idr_pic_id in the second such 
            IDR access unit. The value of idr_pic_id shall be in the range of 0 to 65535, inclusive.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.FieldPicFlag">
            <summary>
            Gets the field_pic_flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.BottomFieldFlag">
            <summary>
            Gets the bottom_field_flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.PicOrderCntType">
            <summary>
            Gets the pic_order_cnt_type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.IdrPicFlag">
            <summary>
            Gets the idr_pic_flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.SliceType">
            <summary>
            Gets the type of Slice contained in this NAL.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.FirstMbInSlice">
            <summary>
            Gets the first_mb_in_slice specifies the address of the first macroblock in the slice. When 
            arbitrary slice order is not allowed as specified in Annex A, the value of first_mb_in_slice 
            is constrained as follows:
               – If separate_colour_plane_flag is equal to 0, the value of first_mb_in_slice shall not 
                 be less than the value of first_mb_in_slice for any other slice of the current picture 
                 that precedes the current slice in decoding order.
               – Otherwise (separate_colour_plane_flag is equal to 1), the value of first_mb_in_slice 
                 shall not be less than the value of first_mb_in_slice for any other slice of the current 
                 picture that precedes the current slice in decoding order and has the same value of 
                 colour_plane_id.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.PicOrderCntLsb">
            <summary>
            Gets the pic_order_cnt_lsb.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Nalu.DeltaPicOrderCnt">
            <summary>
            Gets the pic_order_cnt_lsb
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.Nalu.#ctor">
            <summary>
            Creates an empty NAL Unit.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.Nalu.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Creates a NAL Unit from a byte array.
            </summary>
            <param name="naluBytes">The NALU bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Nalu.GetBytes">
            <summary>
            Gets the NAL Unit as a byte array that can be passed
            to an encoder (includes Start Code).
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.H264.Nalu.GetNalu(FM.LiveSwitch.DataBuffer)">
            <summary>
            Returns the first NAL unit after nalStart.
            </summary>
            <param name="encodedData">The byte array to search.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.H264.Nalu.GetNalu(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32@)">
            <summary>
            Returns the first NAL unit after nalStart.
            </summary>
            <param name="encodedData">The byte array to search.</param>
            <param name="nalStart">The start index of the NAL.</param>
            /// <param name="nextStartCodeLength">OUT The length of the next the NAL startcode.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Nalu.FindNalu(FM.LiveSwitch.DataBuffer)">
            <summary>
            Scans for the index of the first NAL Unit after start.
            </summary>
            <param name="encodedData">The stream to search.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.H264.Nalu.FindNextNalu(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Scans for the index of the first NAL Unit after start.
            </summary>
            <param name="encodedData">The stream to search.</param>
            <param name="start">The index to start searching from.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.H264.Nalu.GetNaluKey">
            <summary>
            Not currently used.
            
            Gets a unique key to help identify the packet. This can be used as   
            a Dictionary key to group VCL NALUs of primary coded pictures for coded video sequences  
            that conform to one or more of the profiles specified in Annex A, and that can be decoded  
            using the parameters and clauses found in 7.4.1.2.4 of the ITU-T H.264 spec.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.H264.NaluType">
            <summary>
            H264 NAL Unit Type defs and helpers.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.NaluType.Unknown">
            <summary>
            Unknown or Reserved.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.NaluType.Slice">
            <summary>
            Slice.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.NaluType.Idr">
            <summary>
            Instantaneous decoding refresh.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.NaluType.Sei">
            <summary>
            Supplemental enhancement information.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.NaluType.Sps">
            <summary>
            Sequence parameter set.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.NaluType.Pps">
            <summary>
            Picture parameter set.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.NaluType.Aud">
            <summary>
            Access unit delimiter.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.NaluType.StapA">
            <summary>
            Single-time aggregation packet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.NaluType.StapB">
            <summary>
            Single-time aggregation packet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.NaluType.Mtap16">
            <summary>
            Multi-time aggregation packet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.NaluType.Mtap24">
            <summary>
            Single-time aggregation packet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.NaluType.FuA">
            <summary>
            Fragmentation unit.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.H264.NaluType.FuB">
            <summary>
            Fragmentation unit.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.NaluType.GetNaluType(System.Int32)">
            <summary>
            Gets the NAL unit type.
            </summary>
            <param name="type">The type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.H264.NaluType.IsSingleNalu(System.Int32)">
            <summary>
            Determines if a NAL unit type is a single NAL unit packet.
            </summary>
            <param name="type">The type.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.H264.Packet">
            <summary>
            An H.264 packet for RTP.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Packet.MaxPacketSize">
            <summary>
            Gets the maximum packet size (affects packetization).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Packet.NaluType">
            <summary>
            Gets the type of Payload that is in this packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Packet.FragmentStart">
            <summary>
            Gets if this is the start of a Fragmented Unit.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Packet.FragmentEnd">
            <summary>
            Gets if this is the end of a Fragmented Unit.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Packet.SequenceNumber">
            <summary>
            Gets or sets the RTP sequence number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Packet.Last">
            <summary>
            Gets or sets whether this is the last nalu in the sequence (i.e. RTP Marker).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Packet.Buffer">
            <summary>
            Gets the Packet as a DataBuffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Packet.Nalus">
            <summary>
            Gets or sets the NAL Units.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Packet.FuSBitMask">
            <summary>
            Gets the start bit.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Packet.FuEBitMask">
            <summary>
            Gets the end bit.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Packet.FuRBitMask">
            <summary>
            Gets the reserved bit.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.Packet.Wrap(FM.LiveSwitch.DataBuffer)">
            <summary>
            Parses the specified packet bytes.
            </summary>
            <param name="buffer">The packet bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.H264.Packet.#ctor">
            <summary>
            Default constuctor.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.Packet.#ctor(FM.LiveSwitch.H264.Nalu)">
            <summary>
            Single NAL Unit Mode constructor.
            </summary>
            <param name="nalu">The nalu.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Packet.Packetize(FM.LiveSwitch.DataBuffer)">
            <summary>
            Packetizes a single encoded data frame into multiple H264 packets.
            Note: Only STAP-A and Single NALU are supported right now.
            Uses packetization mode 0.
            </summary>
            <param name="encodedData">The encoded data.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.H264.Packet.Packetize(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Packetizes a single encoded data frame into multiple H264 packets.
            Note: Only STAP-A and Single NALU are supported right now.
            </summary>
            <param name="encodedData">The encoded data.</param>
            <param name="packetizationMode">The packetizationMode.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.H264.Packet.FlushNaluAccumulator(FM.LiveSwitch.H264.Nalu[])">
            <summary>
            Flushes any NALUs accumulated during the hopeful process of creating
            an aggregation packet.
            
            During packetization, the order of the NALUs must remain intact and 
            so before any packet is created, due to the fact that some NALUs may
            have been accumulated for an STAP-A packet, they must be flushed
            prior to a new packet being created.
            </summary>
            <param name="nalus">The NALUs accumulated.</param>
            <returns>Either null or an H264Packet of type STAP-A or Single NALU.</returns>
        </member>
        <member name="M:FM.LiveSwitch.H264.Packet.Depacketize(FM.LiveSwitch.H264.Packet[])">
            <summary>
            Depacketizes multiple H264Packets into a single encoded frame.
            Uses packetization mode 0.
            </summary>
            <param name="packets">The packets.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.H264.Packet.Depacketize(FM.LiveSwitch.H264.Packet[],System.Int32)">
            <summary>
            Depacketizes multiple H264Packets into a single encoded frame.
            </summary>
            <param name="packets">The packets.</param>
            <param name="packetizationMode">The packetizationMode.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.H264.PacketizationMode">
            <summary>
            H.264 packetization modes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.PacketizationMode.Default">
            <summary>
            Gets non-interleaved mode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.PacketizationMode.SingleNal">
            <summary>
            Gets single NAL mode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.PacketizationMode.NonInterleaved">
            <summary>
            Gets non-interleaved mode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.PacketizationMode.Interleaved">
            <summary>
            Gets interleaved mode.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.H264.Packetizer">
            <summary>
            An H.264 packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Packetizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Packetizer.PacketizationMode">
            <summary>
            Gets the packetization mode.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.Packetizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Packetizer"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.Packetizer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Packetizer"/> class.
            </summary>
            <param name="packetizationMode">The packetization mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Packetizer.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Packetizer"/> class.
            </summary>
            <param name="profile">The profile.</param>
            <param name="level">The level.</param>
            <param name="packetizationMode">The packetization mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Packetizer.#ctor(FM.LiveSwitch.H264.ProfileLevelId,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Packetizer"/> class.
            </summary>
            <param name="profileLevelId">The profile level ID.</param>
            <param name="packetizationMode">The packetization mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Packetizer.#ctor(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.Packetizer"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Packetizer.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="P:FM.LiveSwitch.H264.Packetizer.MaxPacketSize">
            <summary>
            Gets the maximum packet size (affects packetization).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.Packetizer.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.H264.ProfileIdc">
            <summary>
            Profile IDs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileIdc.Baseline">
            <summary>
            Gets the value indicating baseline.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileIdc.Main">
            <summary>
            Gets the value indicating main.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileIdc.ScalableBaseline">
            <summary>
            Gets the value indicating scalable baseline.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileIdc.ScalableHigh">
            <summary>
            Gets the value indicating scalable high.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileIdc.Extended">
            <summary>
            Gets the value indicating extended.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileIdc.High">
            <summary>
            Gets the value indicating high.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileIdc.High10">
            <summary>
            Gets the value indicating high 10.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileIdc.High422">
            <summary>
            Gets the value indicating high 4:2:2.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileIdc.High444">
            <summary>
            Gets the value indicating high 4:4:4.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileIdc.Cavlc444">
            <summary>
            Gets the value indicating CAVLV 4:4:4.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.H264.ProfileIop">
            <summary>
            An H.264 Profile IOP.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileIop.ConstraintSet0">
            <summary>
            Gets or sets a value indicating whether constraint 0 is set.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileIop.ConstraintSet1">
            <summary>
            Gets or sets a value indicating whether constraint 1 is set.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileIop.ConstraintSet2">
            <summary>
            Gets or sets a value indicating whether constraint 2 is set.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileIop.DataBuffer">
            <summary>
            Gets the backing data buffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.ProfileIop.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.ProfileIop"/> class.
            </summary>
            <param name="profileIop">The profile IOP.</param>
        </member>
        <member name="T:FM.LiveSwitch.H264.ProfileLevelId">
            <summary>
            An H.264 Profile Level ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileLevelId.Default">
            <summary>
            Gets <see cref="P:FM.LiveSwitch.H264.ProfileLevelId.ConstrainedBaselineLevel31" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileLevelId.BaselineLevel10">
            <summary>
            Gets baseline profile level 1.0.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileLevelId.BaselineLevel31">
            <summary>
            Gets baseline profile level 3.1.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileLevelId.ConstrainedBaselineLevel10">
            <summary>
            Gets constrained baseline profile level 1.0.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileLevelId.ConstrainedBaselineLevel31">
            <summary>
            Gets constrained baseline profile level 3.1.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileLevelId.MainLevel50">
            <summary>
            Gets main profile level 5.0.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileLevelId.HighLevel50">
            <summary>
            Gets high profile level 5.0.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileLevelId.ProfileIdc">
            <summary>
            Gets or sets the profile ID Code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileLevelId.ProfileIop">
            <summary>
            Gets or sets the profile constraints.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileLevelId.LevelIdc">
            <summary>
            Gets or sets the level ID code.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.ProfileLevelId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.ProfileLevelId"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.ProfileLevelId.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.ProfileLevelId"/> class.
            </summary>
            <param name="profile">The profile.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.ProfileLevelId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.ProfileLevelId"/> class.
            </summary>
            <param name="profileLevelId">The profile level identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.ProfileLevelId.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.H264.ProfileLevelId"/> class.
            </summary>
            <param name="profileIdc">The profile ID code.</param>
            <param name="profileIop">The profile constraints.</param>
            <param name="levelIdc">The level ID code.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.ProfileLevelId.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileLevelId.Profile">
            <summary>
            Gets the profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.ProfileLevelId.Level">
            <summary>
            Gets the level.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.ProfileLevelId.GetMaxEncoding">
            <summary>
            Gets the max encoding info value for the given level.
            </summary>
            <returns>EncodingInfo relating to the h264 profile level</returns>
        </member>
        <member name="T:FM.LiveSwitch.H264.Utility">
            <summary>
            Utility methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Utility.SupportedPacketizationModes">
            <summary>
            Gets the supported packetization modes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.H264.Utility.SupportedProfileIdcs">
            <summary>
            Gets the supported profile ID codes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.IsKeyFrame(FM.LiveSwitch.DataBuffer)">
            <summary>
            Determines whether the encoded frame starts with a keyframe (IDR, PPS, or SPS).
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.IsIdr(FM.LiveSwitch.DataBuffer)">
            <summary>
            Determines whether the encoded frame starts with an IDR NALU.
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.IsIdr(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Determines whether the encoded frame starts with an IDR NALU.
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
            <param name="offset">The offset into the encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.IsSps(FM.LiveSwitch.DataBuffer)">
            <summary>
            Determines whether the encoded frame starts with an SPS NALU.
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.IsSps(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Determines whether the encoded frame starts with an SPS NALU.
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
            <param name="offset">The offset into the encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.IsPps(FM.LiveSwitch.DataBuffer)">
            <summary>
            Determines whether the encoded frame starts with a PPS NALU.
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.IsPps(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Determines whether the encoded frame starts with a PPS NALU.
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
            <param name="offset">The offset into the encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.IsAud(FM.LiveSwitch.DataBuffer)">
            <summary>
            Determines whether the encoded frame starts with an AUD NALU.
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.IsAud(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Determines whether the encoded frame starts with an AUD NALU.
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
            <param name="offset">The offset into the encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.IsNaluType(System.Int32,FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Determines whether the encoded frame starts with a given NALU type.
            </summary>
            <param name="naluType">The NALU type.</param>
            <param name="encodedFrame">The encoded frame.</param>
            <param name="offset">The offset into the encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.GetNaluType(FM.LiveSwitch.DataBuffer)">
            <summary>
            Gets the NALU type.
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.GetNaluType(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Gets the NALU type at the specified offset.
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
            <param name="offset">The offset into the encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.GetNaluTypes(FM.LiveSwitch.DataBuffer)">
            <summary>
            Gets the NALU types.
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.GetNaluLength(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Gets the NALU length at the specified offset.
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
            <param name="offset">The offset into the encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.GetStartCodeLength(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Gets the start code length at the specified offset.
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
            <param name="offset">The offset into the encoded frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.TrimAud(FM.LiveSwitch.DataBuffer)">
            <summary>
            Trims an AUD NALU from the start of the encoded frame, if one exists.
            </summary>
            <param name="encodedFrame">The encoded frame.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.GetPacketizationMode(FM.LiveSwitch.Sdp.Rtp.MapAttribute)">
            <summary>
            Gets the packetization mode from the related format parameters attribute
            of an H.264 RTP map attribute.
            </summary>
            <param name="rtpMapAttribute">The RTP map attribute.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.GetPacketizationMode(FM.LiveSwitch.Sdp.FormatParametersAttribute)">
            <summary>
            Gets the packetization mode from an H.264 format parameters attribute.
            </summary>
            <param name="formatParametersAttribute">The format parameters attribute.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.GetProfileLevelId(FM.LiveSwitch.Sdp.Rtp.MapAttribute)">
            <summary>
            Gets the profile level id from the related format parameters attribute
            of an H.264 RTP map attribute.
            </summary>
            <param name="rtpMapAttribute">The RTP map attribute.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.H264.Utility.GetProfileLevelId(FM.LiveSwitch.Sdp.FormatParametersAttribute)">
            <summary>
            Gets the prolfile level id from an H.264 format parameters attribute.
            </summary>
            <param name="formatParametersAttribute">The format parameters attribute.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.IAudioElement">
            <summary>
            An audio element.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IAudioInput">
            <summary>
            An audio input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IAudioInput.Config">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IAudioInput.Gain">
            <summary>
            Gets or sets a value indicating the gain
            (input amplification) of this sink.
            Any value greater than or equal to 0.0
            is acceptable.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IAudioInputCollection">
            <summary>
            A collection of audio inputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IAudioInputCollection.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IAudioInputCollection"/> class.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.IAudioInputCollection.ArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.IAudioInput})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.IAudioInputCollection.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.IAudioOutput">
            <summary>
            An audio output.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IAudioOutput.Config">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IAudioOutput.Volume">
            <summary>
            Gets or sets a value indicating the volume
            (output resistance) of this source.
            Valid value range is 0.0 to 1.0, inclusive.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IAudioOutputCollection">
            <summary>
            A collection of audio outputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IAudioOutputCollection.#ctor(FM.LiveSwitch.IAudioInput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IAudioOutputCollection"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.IAudioOutputCollection.ArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.IAudioOutput})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.IAudioOutputCollection.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.IAudioStream">
            <summary>
            Audio stream interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IAudioStream.OpusDisabled">
            <summary>
            Gets or sets whether Opus is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IAudioStream.G722Disabled">
            <summary>
            Gets or sets whether G.722 is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IAudioStream.PcmuDisabled">
            <summary>
            Gets or sets whether PCMU is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IAudioStream.PcmaDisabled">
            <summary>
            Gets or sets whether PCMA is disabled.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IAudioStream.OnReceiveDtmfTone">
            <summary>
            Raised when a DTMF tone is received.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IAudioStream.OnReceiveDtmfToneChange">
            <summary>
            Raised when the received DTMF tone changes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IAudioStream.OnSendDtmfTone">
            <summary>
            Raised when a DTMF tone is sent.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IAudioStream.OnSendDtmfToneChange">
            <summary>
            Raised when the sent DTMF tone changes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IAudioStream.InsertDtmfTone(FM.LiveSwitch.Dtmf.Tone)">
            <summary>
            Inserts a DTMF tone.
            </summary>
            <param name="dtmfTone">The DTMF tone.</param>
        </member>
        <member name="M:FM.LiveSwitch.IAudioStream.InsertDtmfTones(FM.LiveSwitch.Dtmf.Tone[])">
            <summary>
            Inserts DTMF tones.
            </summary>
            <param name="dtmfTones">The DTMF tones.</param>
        </member>
        <member name="T:FM.LiveSwitch.IAudioTrack">
            <summary>
            Audio track interface.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IAudioTrack.OnLevel">
            <summary>
            Raised whenever the level of
            this track is calculated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IAudioTrack.Gain">
            <summary>
            Gets or sets a value indicating the gain
            (input amplification) of this track.
            Any value greater than or equal to 0.0
            is acceptable.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IAudioTrack.Volume">
            <summary>
            Gets or sets a value indicating the volume
            (output resistance) of this track.
            Valid value range is 0.0 to 1.0, inclusive.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IceConnectionState">
            <summary>
            The state of an ICE gatherer.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceConnectionState.New">
            <summary>
            Indicates that the ICE agent(s) is(are) gathering addresses or is(are) waiting to be given remote candidates (or both)..
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceConnectionState.Checking">
            <summary>
            Indicates that the ICE agent(s) has(ve) been given one or more remote candidates and is(are) checking pairs of local and remote candidates against one another to try to find a compatible match, but has(ve) not yet found a pair which will allow the peer connection to be made. It's possible that gathering of candidates is also still underway.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceConnectionState.Connected">
            <summary>
            Indicates that a usable pairing of local and remote candidates has been found for all components of the connection, and the connection has been established. It's possible that gathering is still underway, and it's also possible that the ICE agent is still checking candidates against one another looking for a better connection to use.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceConnectionState.Completed">
            <summary>
            Indicates that the ICE agent has finished gathering candidates, has checked all pairs against one another, and has found a connection for all components.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceConnectionState.Failed">
            <summary>
            Indicates that the ICE candidate has checked all candidates pairs against one another and has failed to find compatible matches for all components of the connection. It is, however, possible that the ICE agent did find compatible connections for some components.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceConnectionState.Disconnected">
            <summary>
            Indicates that checks to ensure that components are still connected failed for at least one component of the RTCPeerConnection. This is a less stringent test than "failed" and may trigger intermittently and resolve just as spontaneously on less reliable networks, or during temporary disconnections. When the problem resolves, the connection may return to the "Connected" state.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceConnectionState.Closed">
            <summary>
            The ICE agent(s) for this RTCPeerConnection has shut down and is no longer handling requests
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IceGatheringState">
            <summary>
            The state of an ICE gatherer.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceGatheringState.New">
            <summary>
            Indicates that the gatherer has been created and no gathering has occurred yet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceGatheringState.Gathering">
            <summary>
            Indicates that the gatherer is in the process of gathering candidates.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceGatheringState.Complete">
            <summary>
            Indicates that the gatherer has completed gathering candidates.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceGatheringState.Closing">
            <summary>
            Indicates that the gatherer has started closing intentionally via a call to stop.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceGatheringState.Closed">
            <summary>
            Indicates that the gatherer has been closed intentionally via a call to stop.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceGatheringState.Failed">
            <summary>
            Indicates that the gatherer failed due to an error.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IceGatherPolicy">
            <summary>
            The local policy for gathering candidates.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceGatherPolicy.All">
            <summary>
            All candidates (host, reflexive, and relay) will be gathered.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceGatherPolicy.NoHost">
            <summary>
            Only reflexive and relay candidates will be gathered.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceGatherPolicy.Relay">
            <summary>
            Only relay candidates will be gathered.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IceParameters">
            <summary>
            A set of ICE parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceParameters.UsernameFragment">
            <summary>
            Gets or sets the username fragment.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceParameters.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IceParameters.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IceParameters"/> class.
            </summary>
            <param name="usernameFragment">The username fragment.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:FM.LiveSwitch.IceParameters.Equals(FM.LiveSwitch.IceParameters)">
            <summary>
            Compares IceParameter objects.
            </summary>
            <param name="otherParameters">The other parameters.</param>
        </member>
        <member name="T:FM.LiveSwitch.IcePolicy">
            <summary>
            Policy indicating whether ICE connectivity checks are required (and enabled) or disabled (and not required for a Connection)
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IcePolicy.Required">
            <summary>
            Indicates that ICE connectivity checks are enabled and required on a Connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IcePolicy.Disabled">
            <summary>
            Indicates that ICE is disabled on a Connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IcePolicy.Negotiated">
            <summary>
            Indicates that ICE connectivity checks will be conducted only if supported by the other party.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IcePortRange">
            <summary>
            An ICE port range.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IcePortRange.Minimum">
            <summary>
            Gets the minimum port value.
            Defaults to 49152.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IcePortRange.Maximum">
            <summary>
            Gets the maximum port value.
            Defaults to 65535.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IcePortRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IcePortRange"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IcePortRange.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IcePortRange"/> class.
            </summary>
            <param name="minimum">The minimum port value.</param>
        </member>
        <member name="M:FM.LiveSwitch.IcePortRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IcePortRange"/> class.
            </summary>
            <param name="minimum">The minimum port value.</param>
            <param name="maximum">The maximum port value.</param>
        </member>
        <member name="T:FM.LiveSwitch.IceRole">
            <summary>
            An ICE role.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceRole.Controlling">
            <summary>
            Indicates a controlling role.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.IceRole.Controlled">
            <summary>
            Indicates a controlled role.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IceServer">
            <summary>
            An ICE server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.IPAddresses">
            <summary>
            Gets or sets the IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.IPAddress">
            <summary>
            Gets or sets the IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IceServer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IceServer"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:FM.LiveSwitch.IceServer.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IceServer" /> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.IsStun">
            <summary>
            Gets a value indicating whether this represents a STUN server.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.IceServer.IsTurn">
            <summary>
            Gets a value indicating whether this represents a TURN server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.IsSecure">
            <summary>
            Gets a value indicating whether this represents a secure STUN or TURN server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.IsUdp">
            <summary>
            Gets a value indicating whether this represents a UDP server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.IsTcp">
            <summary>
            Gets a value indicating whether this represents a TCP server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.Host">
            <summary>
            Gets the host.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.Port">
            <summary>
            Gets the port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.DefaultPort">
            <summary>
            Gets the default non-secure port (in use for STUN and TURN).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.DefaultStunsPort">
            <summary>
            Gets the default STUNS port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.DefaultTurnsPort">
            <summary>
            Gets the default TURNS port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.DefaultStunPort">
            <summary>
            Gets the default STUN port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServer.DefaultTurnPort">
            <summary>
            Gets the default TURN port.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IceServer.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.IceServer.ToJson(FM.LiveSwitch.IceServer)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="iceServer">The ICE server.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.IceServer.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="iceServerJson">The JSON to deserialize.</param>
            <returns>The deserialized ICE server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.IceServer.ToJsonArray(FM.LiveSwitch.IceServer[])">
            <summary>
            Serializes an array of instances to JSON.
            </summary>
            <param name="iceServers">The ICE servers.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.IceServer.FromJsonArray(System.String)">
            <summary>
            Deserializes an array of instances from JSON.
            </summary>
            <param name="iceServersJson">The JSON to deserialize.</param>
            <returns>The deserialized ICE server array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.IceServerCollection">
            <summary>
            An ICE server collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IceServerCollection.ArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.IceServer})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.IceServerCollection.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.IceServerTest">
            <summary>
            An ICE server test.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServerTest.IceServer">
            <summary>
            Gets the ICE server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServerTest.IcePortRange">
            <summary>
            Gets the ICE port range.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServerTest.IceAddressTypes">
            <summary>
            Gets the ICE address types.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IceServerTest.#ctor(FM.LiveSwitch.IceServer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IceServerTest"/> class.
            </summary>
            <param name="iceServer">The ICE server.</param>
        </member>
        <member name="M:FM.LiveSwitch.IceServerTest.#ctor(FM.LiveSwitch.IceServer,FM.LiveSwitch.IcePortRange)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IceServerTest"/> class.
            </summary>
            <param name="iceServer">The ICE server.</param>
            <param name="icePortRange">The ICE port range.</param>
        </member>
        <member name="M:FM.LiveSwitch.IceServerTest.#ctor(FM.LiveSwitch.IceServer,FM.LiveSwitch.IcePortRange,FM.LiveSwitch.AddressType[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IceServerTest"/> class.
            </summary>
            <param name="iceServer">The ICE server.</param>
            <param name="icePortRange">The ICE port range.</param>
            <param name="iceAddressTypes">The ICE address types.</param>
        </member>
        <member name="M:FM.LiveSwitch.IceServerTest.Run">
            <summary>
            Runs the test.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.IceServerTestResult">
            <summary>
            An ICE server test result.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServerTestResult.Candidates">
            <summary>
            Gets the candidates.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IceServerTestResult.#ctor(FM.LiveSwitch.Candidate[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IceServerTestResult"/> class.
            </summary>
            <param name="candidates">The candidates.</param>
        </member>
        <member name="P:FM.LiveSwitch.IceServerTestResult.HostCandidates">
            <summary>
            Gets the host candidates.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServerTestResult.PeerReflexiveCandidates">
            <summary>
            Gets the peer reflexive candidates.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServerTestResult.ServerReflexiveCandidates">
            <summary>
            Gets the server reflexive candidates.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IceServerTestResult.RelayedCandidates">
            <summary>
            Gets the relayed candidates.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IceServerTestResult.GetServerAddresses(System.Int32)">
            <summary>
            Gets the server addresses from the <see cref="P:FM.LiveSwitch.IceServerTestResult.Candidates" /> and a
            given port. The IP addresses will be taken from the server-reflexive
            candidates, if available.
            </summary>
            <param name="port">The port.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.IceServerTestResult.GetServerAddresses(System.Int32,System.String)">
            <summary>
            Gets the server addresses from the <see cref="P:FM.LiveSwitch.IceServerTestResult.Candidates" /> and a
            given port. The IP addresses will be taken from the server-reflexive
            candidates, if available, or the host candidates, if a public IP
            address is supplied.
            </summary>
            <param name="port">The port.</param>
            <param name="publicIPAddress">The public IP address, if known.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.IConnection`5">
            <summary>
            Connection interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.CanonicalName">
            <summary>
            Gets the canonical name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.ExternalId">
            <summary>
            Gets or sets the external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.TieBreaker">
            <summary>
            Gets or sets the tie breaker.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.Timeout">
            <summary>
            Gets or sets the amount of time (in milliseconds)
            to wait for a connection to establish before
            giving up and closing it. Defaults to 30,000.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.DeadStreamTimeout">
            <summary>
            Gets or sets the amount of time (in milliseconds)
            to wait for connectivity checks to re-establish
            after they start to fail on a live connection.
            Defaults to 10,000.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.IceGatherPolicy">
            <summary>
            Gets or sets the ICE gather policy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.TrickleIcePolicy">
            <summary>
            Gets or sets the trickle ICE policy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.BundlePolicy">
            <summary>
            Gets or sets the bundle policy for this connection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.Error">
            <summary>
            Gets or sets the error.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.State">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.SignallingState">
            <summary>
            Gets the current signalling state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IConnection`5.GetStats">
            <summary>
            Gets connection stats.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IConnection`5.OnIceConnectionStateChange">
            <summary>
            Raised when the Ice connection state changes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IConnection`5.OnGatheringStateChange">
            <summary>
            Raised when the gathering state changes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IConnection`5.OnExternalIdChange">
            <summary>
            Raised when external connection Id changes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IConnection`5.OnLocalDescription">
            <summary>
            Raised when a local description is set.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IConnection`5.OnRemoteDescription">
            <summary>
            Raised when a remote description is set.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IConnection`5.OnLocalCandidate">
            <summary>
            Raised when a local candidate is added.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IConnection`5.OnRemoteCandidate">
            <summary>
            Raised when a remote candidate is added.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IConnection`5.OnStateChange">
            <summary>
            Raised when the connection state changes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IConnection`5.OnSignallingStateChange">
            <summary>
            Raised when the signalling state changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.IceServer">
            <summary>
            Gets or sets the ICE server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.IceServers">
            <summary>
            Gets or sets the ICE servers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IConnection`5.AddIceServer(FM.LiveSwitch.IceServer)">
            <summary>
            Adds an ICE server.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IConnection`5.RemoveIceServer(FM.LiveSwitch.IceServer)">
            <summary>
            Removes an ICE server.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IConnection`5.AddIceServers(FM.LiveSwitch.IceServer[])">
            <summary>
            Adds some ICE servers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IConnection`5.RemoveIceServers(FM.LiveSwitch.IceServer[])">
            <summary>
            Removes some ICE servers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.Streams">
            <summary>
            Gets the streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.HasAudio">
            <summary>
            Gets whether this connection has an audio stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.HasVideo">
            <summary>
            Gets whether this connection has a video stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.HasData">
            <summary>
            Gets whether this connection has a data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.AudioStream">
            <summary>
            Gets the first audio stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.AudioStreams">
            <summary>
            Gets the audio streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.VideoStream">
            <summary>
            Gets the first video stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.VideoStreams">
            <summary>
            Gets the video streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.DataStream">
            <summary>
            Gets the first data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.DataStreams">
            <summary>
            Gets the data streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.LegacyTimeout">
            <summary>
            Gets or sets a value indicating whether legacy Connection.Timeout should be used.
            When disabled, Connection.Timeout only accounts for the time spent trying to establish 
            connectivity (i.e. time it takes to transition from the Connecting to the Connected state;
            from the time point when both offer and answer had been set to the connection 
            being fully established).
            When enabled, Connection.Timeout accounts for the time spent from receiving an offer (or creating an
            offer) to establishing connectivity (i.e. time it takes to transition from Initializing to Connected
            state).
            By default, LegacyTimeout is set to true, so that existing behavior is preserved. However, in the future
            default will be updated to false. This means that IL will not account for any signalling delays that may
            occur while establishing connectivity. This option will be later deprecated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.GatheringState">
            <summary>
            Gets or sets the ICE gathering state.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.IceConnectionState">
            <summary>
            Gets or sets the ICE connection state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.IConnection`5.CreateOffer">
            <summary>
            Creates an offer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IConnection`5.CreateAnswer">
            <summary>
            Creates an answer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IConnection`5.AddRemoteCandidate(FM.LiveSwitch.Candidate)">
            <summary>
            Adds the remote candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.LocalDescription">
            <summary>
            Gets the local description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IConnection`5.SetLocalDescription(FM.LiveSwitch.SessionDescription)">
            <summary>
            Sets the local description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IConnection`5.RemoteDescription">
            <summary>
            Gets the remote description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IConnection`5.SetRemoteDescription(FM.LiveSwitch.SessionDescription)">
            <summary>
            Sets the remote description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IConnection`5.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IDataChannel`1">
            <summary>
            Data channel interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IDataChannel`1.Label">
            <summary>
            Gets the label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IDataChannel`1.Ordered">
            <summary>
            Gets a value indicating whether messages will be delivered in the order they are sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IDataChannel`1.Subprotocol">
            <summary>
            Gets the subprotocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IDataChannel`1.OnReceive">
            <summary>
            Gets or sets the callback to execute when a message is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IDataChannel`1.Id">
            <summary>
            Gets the data channel identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IDataChannel`1.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IDataChannel`1.OnStateChange">
            <summary>
            Raised when the state changes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IDataChannel`1.SendDataString(System.String)">
            <summary>
            Sends a string.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IDataChannel`1.SendDataBytes(FM.LiveSwitch.DataBuffer)">
            <summary>
            Sends a byte array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IDataChannel`1.Info">
            <summary>
            Gets the data channel info.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IDataStream`1">
            <summary>
            Data stream interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IDataStream`1.Channels">
            <summary>
            Gets the channels.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IDataStream`1.Info">
            <summary>
            Gets the data stream info.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IElement">
            <summary>
            An element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IElement.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IElement.ExternalId">
            <summary>
            Gets or sets the external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IElement.PipelineJson">
            <summary>
            Gets the pipeline JSON with this as the central point.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IInput`6">
            <summary>
            An input.
            </summary>
            <typeparam name="TIOutput">The type of the output interface.</typeparam>
            <typeparam name="TIInput">The type of the input interface.</typeparam>
            <typeparam name="TFrame">The type of the frame.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.IInput`6.InputFormat">
            <summary>
            Gets the input format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IInput`6.Input">
            <summary>
            Gets the input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IInput`6.Inputs">
            <summary>
            Gets the inputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IInput`6.AddInput(`0)">
            <summary>
            Adds an input.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.IInput`6.AddInputs(`0[])">
            <summary>
            Adds some inputs.
            </summary>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.IInput`6.RemoveInput(`0)">
            <summary>
            Removes an input.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.IInput`6.RemoveInputs(`0[])">
            <summary>
            Removes some inputs.
            </summary>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.IInput`6.RemoveInputs">
            <summary>
            Removes all inputs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IInput`6.PipelineJsonFromInput">
            <summary>
            Gets the pipeline JSON from an input.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ILocalMedia`3">
            <summary>
            Local media interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.State">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ILocalMedia`3.GetAudioSourceInputs">
            <summary>
            Gets the available audio source inputs
            of the first audio track.
            </summary>
            <returns>A future with an array of audio source inputs.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ILocalMedia`3.GetVideoSourceInputs">
            <summary>
            Gets the available video source inputs
            of the first video track.
            </summary>
            <returns>A future with an array of video source inputs.</returns>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.AudioSourceInput">
            <summary>
            Gets or sets the current audio source input
            of the first audio track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.VideoSourceInput">
            <summary>
            Gets or sets the current video source input
            of the first video track.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ILocalMedia`3.ChangeAudioSourceInput(FM.LiveSwitch.SourceInput)">
            <summary>
            Changes the audio source input of the first
            audio track while the media is active.
            </summary>
            <param name="audioSourceInput">The audio source input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ILocalMedia`3.ChangeVideoSourceInput(FM.LiveSwitch.SourceInput)">
            <summary>
            Changes the video source input of the first
            video track while the media is active.
            </summary>
            <param name="videoSourceInput">The video source input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ILocalMedia`3.Start">
            <summary>
            Starts the media track sources.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ILocalMedia`3.Stop">
            <summary>
            Stops the media track sources.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ILocalMedia`3.OnAudioStarted">
            <summary>
            Raised when the audio track is started.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ILocalMedia`3.OnVideoStarted">
            <summary>
            Raised when the video track is started.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ILocalMedia`3.OnAudioStopped">
            <summary>
            Raised when the audio track is stopped.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ILocalMedia`3.OnVideoStopped">
            <summary>
            Raised when the video track is stopped.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.AudioEncoding">
            <summary>
            Gets the first (primary) local audio encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.AudioEncodings">
            <summary>
            Gets or sets the local audio encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.VideoEncoding">
            <summary>
            Gets the first (primary) local video encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.VideoEncodings">
            <summary>
            Gets or sets the local video encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.AudioSimulcastDisabled">
            <summary>
            Gets or sets whether audio simulcast is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.AudioSimulcastEncodingCount">
            <summary>
            Gets or sets the number of audio simulcast encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.AudioSimulcastPreferredBitrate">
            <summary>
            Gets or sets the preferred audio simulcast bitrate, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.VideoSimulcastDisabled">
            <summary>
            Gets or sets whether video simulcast is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.VideoSimulcastEncodingCount">
            <summary>
            Gets or sets the number of video simulcast encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.VideoSimulcastPreferredBitrate">
            <summary>
            Gets or sets the preferred video simulcast bitrate, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.VideoSimulcastBitsPerPixel">
            <summary>
            Gets or sets the desired video simulcast bits-per-pixel (bpp).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILocalMedia`3.VideoSimulcastDegradationPreference">
            <summary>
            Gets or sets the video simulcast degradation preference.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IViewSinkableMedia`2">
            <summary>
            Viewable media interface with a view sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IViewSinkableMedia`2.ViewSink">
            <summary>
            Gets the view sink.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IViewableMedia`1">
            <summary>
            Viewable media interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IViewableMedia`1.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IViewableMedia`1.View">
            <summary>
            Gets the view.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IMedia`2">
            <summary>
            Media interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMedia`2.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMedia`2.AudioTrack">
            <summary>
            Gets the first audio track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMedia`2.AudioTracks">
            <summary>
            Gets the audio tracks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMedia`2.VideoTrack">
            <summary>
            Gets the first video track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMedia`2.VideoTracks">
            <summary>
            Gets the video tracks.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMedia`2.OnAudioLevel">
            <summary>
            Raised whenever the level of
            the first audio track is calculated.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMedia`2.OnVideoSize">
            <summary>
            Raised whenever the size of
            the first video track is calculated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMedia`2.AudioGain">
            <summary>
            Gets or sets a value indicating the gain
            (input amplification) of the first audio track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMedia`2.AudioVolume">
            <summary>
            Gets or sets a value indicating the volume
            (output resistance) of the first audio track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMedia`2.AudioMuted">
            <summary>
            Gets or sets a value indicating whether the
            first audio track is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMedia`2.VideoMuted">
            <summary>
            Gets or sets a value indicating whether the
            first video track is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMedia`2.VideoSize">
            <summary>
            Gets the size of the first video track.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMedia`2.GrabVideoFrame">
            <summary>
            Grabs a frame from the first video track.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.IMedia`2.Destroy">
            <summary>
            Destroys this media.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMedia`2.OnAudioDestroyed">
            <summary>
            Raised when the first audio track is destroyed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMedia`2.OnVideoDestroyed">
            <summary>
            Raised when the first video track is destroyed.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IMediaElement">
            <summary>
            A media element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaElement.Persistent">
            <summary>
            Gets a value indicating whether this instance is persistent.
            If <c>true</c>, this element will not be destroyed unless
            <see cref="M:FM.LiveSwitch.IMediaElement.Destroy"/> is called explicitly on this instance.
            It will survive destruction of any parent elements that are
            being destroyed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaElement.Deactivated">
            <summary>
            Gets or sets a value indicating whether this instance is deactivated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaElement.Disabled">
            <summary>
            Gets a value indicating whether this instance is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaElement.Paused">
            <summary>
            Gets a value indicating whether this instance is paused.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaElement.Label">
            <summary>
            Gets a label that identifies this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaElement.Muted">
            <summary>
            Gets or sets a value indicating whether this instance is muted.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaElement.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IMediaInput`6">
            <summary>
            A media input.
            </summary>
            <typeparam name="TIOutput">The type of the output interface.</typeparam>
            <typeparam name="TIInput">The type of the input interface.</typeparam>
            <typeparam name="TFrame">The type of the frame.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.IMediaInput`6.ProcessFramePolicy">
            <summary>
            Gets or sets the ProcessFramePolicy for this media input.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaInput`6.OnRaiseControlFrames">
            <summary>
            Raised when control frames are raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaInput`6.OnProcessFrame">
            <summary>
            Raised when a frame is processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaInput`6.OnProcessControlFrameResponses">
            <summary>
            Raised when control frame responses are processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaInput`6.OnDisabledChange">
            <summary>
            Raised when the Disabled property changes state.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaInput`6.OnPausedChange">
            <summary>
            Raised when the Paused property changes state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaInput`6.ProcessFrame(`2)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.IMediaInput`6.ProcessControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frame responses.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="M:FM.LiveSwitch.IMediaInput`6.ProcessSdpMediaDescriptionFromInput(FM.LiveSwitch.Sdp.MediaDescription,System.Boolean,System.Boolean)">
            <summary>
            Processes a local SDP media description from an input.
            </summary>
            <param name="mediaDescription">The media description.</param>
            <param name="isOffer">if set to <c>true</c> [is offer].</param>
            <param name="isLocalDescription">if set to <c>true</c> [is local description].</param>
            
        </member>
        <member name="M:FM.LiveSwitch.IMediaInput`6.ProcessTrackStatsFromInput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes track stats from an input.
            </summary>
            <param name="trackStats">The stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.IMediaInput`6.ProcessSinkStatsFromInput(FM.LiveSwitch.MediaSinkStats)">
            <summary>
            Processes sink stats from an input.
            </summary>
            <param name="sinkStats">The stats.</param>
        </member>
        <member name="P:FM.LiveSwitch.IMediaInput`6.InputMuted">
            <summary>
            Gets whether input is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaInput`6.InputSynchronizationSource">
            <summary>
            Gets or sets the input synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaInput`6.InputRtpStreamId">
            <summary>
            Gets or sets the input RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaInput`6.InputDeactivated">
            <summary>
            Gets whether input is deactivated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaInput`6.MinInputBitrate">
            <summary>
            Gets the minimum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaInput`6.MaxInputBitrate">
            <summary>
            Gets the maximum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaInput`6.MinInputEncoding">
            <summary>
            Gets the minimum allowed input encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaInput`6.MaxInputEncoding">
            <summary>
            Gets the maximum allowed input encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaInput`6.SystemDelay">
            <summary>
            Gets the system delay in ticks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaInput`6.GetPipelineSystemDelay(`5)">
            <summary>
            Gets the total pipeline system delay in ticks for a given media format.
            </summary>
            <param name="outputFormat">The output format.</param>
            <returns>The total pipeline system delay in ticks.</returns>
        </member>
        <member name="T:FM.LiveSwitch.IMediaInputCollection`7">
            <summary>
            A media input collection.
            </summary>
            <typeparam name="TIOutput">The type of the output interface.</typeparam>
            <typeparam name="TIInput">The type of the input interface.</typeparam>
            <typeparam name="TFrame">The type of the frame.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <typeparam name="TMediaInputCollection">The type of the media input collection.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.IMediaInputCollection`7.Output">
            <summary>
            Gets or sets the output.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaInputCollection`7.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IMediaInputCollection`7"/> class.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.IMediaInputCollection`7.Destroy">
            <summary>
            Removes all items and sets the <see cref="P:FM.LiveSwitch.IMediaInputCollection`7.Output"/> to null.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaInputCollection`7.AddSuccessNoLock(`1)">
            <summary>
            Invoked after an element is added to the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.IMediaInputCollection`7.RemoveSuccessNoLock(`1)">
            <summary>
            Invoked after an element is removed from the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.IMediaOutput`6">
            <summary>
            A media output.
            </summary>
            <typeparam name="TIOutput">The type of the output interface.</typeparam>
            <typeparam name="TIInput">The type of the input interface.</typeparam>
            <typeparam name="TFrame">The type of the frame.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="E:FM.LiveSwitch.IMediaOutput`6.OnRaiseFrame">
            <summary>
            Raised when a frame is raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaOutput`6.OnRaiseControlFrameResponses">
            <summary>
            Raised when a control frame response is raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaOutput`6.OnProcessControlFrames">
            <summary>
            Raised when control frames are processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaOutput`6.OnDisabledChange">
            <summary>
            Raised when the Disabled property changes state.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaOutput`6.OnPausedChange">
            <summary>
            Raised when the Paused property changes state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaOutput`6.ProcessControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.IMediaOutput`6.ProcessSdpMediaDescriptionFromOutput(FM.LiveSwitch.Sdp.MediaDescription,System.Boolean,System.Boolean)">
            <summary>
            Processes a local SDP media description from an output.
            </summary>
            <param name="mediaDescription">The media description.</param>
            <param name="isOffer">if set to <c>true</c> [is offer].</param>
            <param name="isLocalDescription">if set to <c>true</c> [is local description].</param>
            
        </member>
        <member name="M:FM.LiveSwitch.IMediaOutput`6.IncrementCcmSequenceNumber">
            <summary>
            Increments the CCM sequence number.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaOutput`6.GetCcmSequenceNumber">
            <summary>
            Gets the CCM sequence number.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaOutput`6.ProcessTrackStatsFromOutput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes track stats from an output.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.IMediaOutput`6.ProcessSourceStatsFromOutput(FM.LiveSwitch.MediaSourceStats)">
            <summary>
            Processes source stats from an output.
            </summary>
            <param name="sourceStats">The source stats.</param>
        </member>
        <member name="P:FM.LiveSwitch.IMediaOutput`6.OutputMuted">
            <summary>
            Gets whether output is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaOutput`6.OutputSynchronizationSource">
            <summary>
            Gets the output synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaOutput`6.OutputRtpStreamId">
            <summary>
            Gets the output RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaOutput`6.OutputDeactivated">
            <summary>
            Gets whether output is deactivated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaOutput`6.OutputSynchronizable">
            <summary>
            Gets whether output is synchronizable.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaOutput`6.MinOutputBitrate">
            <summary>
            Gets the minimum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaOutput`6.MaxOutputBitrate">
            <summary>
            Gets the maximum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaOutput`6.TargetOutputBitrate">
            <summary>
            Gets the target output bitrate, in kbps.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaOutput`6.MinOutputEncoding">
            <summary>
            Gets the minimum allowed output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaOutput`6.MaxOutputEncoding">
            <summary>
            Gets the maximum allowed output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaOutput`6.TargetOutputEncoding">
            <summary>
            Gets the target output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaOutput`6.SystemDelay">
            <summary>
            Gets the system delay in ticks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaOutput`6.GetPipelineSystemDelay(`5)">
            <summary>
            Gets the total pipeline system delay in ticks for a given media format.
            </summary>
            <param name="outputFormat">The output format.</param>
            <returns>The total pipeline system delay in ticks.</returns>
        </member>
        <member name="T:FM.LiveSwitch.IMediaOutputCollection`7">
            <summary>
            A media output collection.
            </summary>
            <typeparam name="TIOutput">The type of the output interface.</typeparam>
            <typeparam name="TIInput">The type of the input interface.</typeparam>
            <typeparam name="TFrame">The type of the frame.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <typeparam name="TMediaOutputCollection">The type of the media output collection.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.IMediaOutputCollection`7.Input">
            <summary>
            Gets or sets the input.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaOutputCollection`7.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IMediaInputCollection`7" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.IMediaOutputCollection`7.Destroy">
            <summary>
            Removes all items and sets the <see cref="P:FM.LiveSwitch.IMediaOutputCollection`7.Input"/> to null.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaOutputCollection`7.AddSuccessNoLock(`0)">
            <summary>
            Invoked after an element is added to the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.IMediaOutputCollection`7.RemoveSuccessNoLock(`0)">
            <summary>
            Invoked after an element is removed from the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.IMediaStream">
            <summary>
            Media stream interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaStream.LocalBandwidth">
            <summary>
            Gets or sets the local bandwidth, in kbps.
            This value is signalled in the local session description sent
            to the remote endpoint so it can limit its outbound media bitrate.
            Use <see cref="P:FM.LiveSwitch.IMediaStream.MaxReceiveBitrate"/> to control inbound media
            bitrate once the session has been negotiated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaStream.RemoteBandwidth">
            <summary>
            Gets the remote bandwidth, in kbps.
            This value is signalled in the remote session description received
            from the remote endpoint so we can limit our outbound media bitrate.
            Use <see cref="P:FM.LiveSwitch.IMediaStream.MaxSendBitrate"/> to control outbound media
            bitrate once the session has been negotiated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaStream.MaxSendBitrate">
            <summary>
            Gets or sets the maximum desired send bitrate, in kbps.
            This value must be less than or equal to <see cref="P:FM.LiveSwitch.IMediaStream.RemoteBandwidth"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaStream.MaxReceiveBitrate">
            <summary>
            Gets or sets the maximum desired receive bitrate, in kbps.
            This value must be less than or equal to <see cref="P:FM.LiveSwitch.IMediaStream.LocalBandwidth"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaStream.LocalCanonicalName">
            <summary>
            Gets the local canonical name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaStream.RemoteCanonicalName">
            <summary>
            Gets the remote canonical name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaStream.InputMuted">
            <summary>
            Gets or sets whether the input track is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaStream.OutputMuted">
            <summary>
            Gets or sets whether the output track is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaStream.PreferredCodecs">
            <summary>
            Gets or sets any preferred codecs, in order of preference.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaStream.GetCodecDisabled(System.String)">
            <summary>
            Gets whether a codec is disabled.
            </summary>
            <param name="name">The codec name.</param>
            <returns>Whether the codec is disabled.</returns>
        </member>
        <member name="M:FM.LiveSwitch.IMediaStream.SetCodecDisabled(System.String,System.Boolean)">
            <summary>
            Sets whether a codec is disabled.
            </summary>
            <param name="name">The codec name.</param>
            <param name="disabled">Whether to disable the codec.</param>
        </member>
        <member name="P:FM.LiveSwitch.IMediaStream.RemoteEncoding">
            <summary>
            Gets or sets the remote encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaStream.SimulcastMode">
            <summary>
            Gets or sets the simulcast mode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaStream.Info">
            <summary>
            Gets the media stream info.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaStream.ControlTransportInfo">
            <summary>
            Gets the media stream control transport info.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaStream.OnLocalEncodingDisabled">
            <summary>
            Raised when a local encoding is disabled.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaStream.OnLocalEncodingEnabled">
            <summary>
            Raised when a local encoding is enabled.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaStream.OnDiscardBitrateRequest">
            <summary>
            Raised when a bitrate request is discarded due to policy
            restrictions or lack of support by the remote endpoint.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaStream.OnDiscardBitrateNotification">
            <summary>
            Raised when a bitrate notification is discarded due to policy
            restrictions or lack of support by the remote endpoint.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaStream.RaiseBitrateRequest(FM.LiveSwitch.BitrateRequest)">
            <summary>
            Raises a bitrate request to the local track.
            </summary>
            <param name="bitrateRequest">The bitrate request.</param>
        </member>
        <member name="M:FM.LiveSwitch.IMediaStream.RaiseBitrateNotification(FM.LiveSwitch.BitrateNotification)">
            <summary>
            Raises a bitrate notification to the remote track.
            </summary>
            <param name="bitrateNotification">The bitrate notification.</param>
        </member>
        <member name="T:FM.LiveSwitch.IMediaTrack">
            <summary>
            Media track interface.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaTrack.OnStarted">
            <summary>
            Raised when the track is started.
            Only applicable for local media tracks.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaTrack.OnStopped">
            <summary>
            Raised when the track is stopped.
            Only applicable for local media tracks.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IMediaTrack.OnDestroyed">
            <summary>
            Raised when the track is destroyed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaTrack.GetSourceInputs">
            <summary>
            Gets the available source inputs.
            </summary>
            <returns>
            A future with an array of source inputs.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.IMediaTrack.GetSinkOutputs">
            <summary>
            Gets the available sink outputs.
            </summary>
            <returns>
            A future with an array of sink outputs.
            </returns>
        </member>
        <member name="P:FM.LiveSwitch.IMediaTrack.SourceInput">
            <summary>
            Gets or sets the current source input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IMediaTrack.SinkOutput">
            <summary>
            Gets or sets the current sink output.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaTrack.ChangeSourceInput(FM.LiveSwitch.SourceInput)">
            <summary>
            Changes the source input while the media track is active.
            </summary>
            <param name="sourceInput">The source input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.IMediaTrack.ChangeSinkOutput(FM.LiveSwitch.SinkOutput)">
            <summary>
            Changes the sink output while the media track is active.
            </summary>
            <param name="sinkOutput">The sink output.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.IMediaTrack.Muted">
            <summary>
            Gets or sets a value indicating whether this
            track is muted.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IMediaTrack.Destroy">
            <summary>
            Destroys this media track.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IOutput`6">
            <summary>
            An output.
            </summary>
            <typeparam name="TIOutput">The type of the output interface.</typeparam>
            <typeparam name="TIInput">The type of the input interface.</typeparam>
            <typeparam name="TFrame">The type of the frame.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.IOutput`6.OutputFormat">
            <summary>
            Gets the output format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IOutput`6.Output">
            <summary>
            Gets the output.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IOutput`6.Outputs">
            <summary>
            Gets the outputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IOutput`6.AddOutput(`1)">
            <summary>
            Adds an output.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.IOutput`6.AddOutputs(`1[])">
            <summary>
            Adds some outputs.
            </summary>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.IOutput`6.RemoveOutput(`1)">
            <summary>
            Removes an output.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.IOutput`6.RemoveOutputs(`1[])">
            <summary>
            Removes some outputs.
            </summary>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.IOutput`6.RemoveOutputs">
            <summary>
            Removes all outputs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IOutput`6.PipelineJsonFromOutput">
            <summary>
            Gets the pipeline JSON from an output.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IRemoteMedia`2">
            <summary>
            Remote media interface.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IRemoteMedia`2.GetAudioSinkOutputs">
            <summary>
            Gets the available audio sink outputs
            of the first audio track.
            </summary>
            <returns>A future with an array of audio sink outputs.</returns>
        </member>
        <member name="M:FM.LiveSwitch.IRemoteMedia`2.GetVideoSinkOutputs">
            <summary>
            Gets the available video sink outputs
            of the first video track.
            </summary>
            <returns>A future with an array of video sink outputs.</returns>
        </member>
        <member name="P:FM.LiveSwitch.IRemoteMedia`2.AudioSinkOutput">
            <summary>
            Gets or sets the current audio sink output
            of the first audio track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IRemoteMedia`2.VideoSinkOutput">
            <summary>
            Gets or sets the current video sink output
            of the first video track.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IRemoteMedia`2.ChangeAudioSinkOutput(FM.LiveSwitch.SinkOutput)">
            <summary>
            Changes the audio sink output of the first
            audio track while the media is active.
            </summary>
            <param name="audioSinkOutput">The audio sink output.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.IRemoteMedia`2.ChangeVideoSinkOutput(FM.LiveSwitch.SinkOutput)">
            <summary>
            Changes the video sink output of the first
            video track while the media is active.
            </summary>
            <param name="videoSinkOutput">The video sink output.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.IStream">
            <summary>
            Stream interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.ExternalId">
            <summary>
            Gets or sets the external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.MediaDescriptionId">
            <summary>
            Gets the media description identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.Tag">
            <summary>
            Gets or sets optional data to associate with this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.Direction">
            <summary>
            Gets the current direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.LocalDirection">
            <summary>
            Gets or sets current direction indicated by the local description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.RemoteDirection">
            <summary>
            Gets the current direction indicated by the remote description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IStream.ChangeDirection(FM.LiveSwitch.StreamDirection)">
            <summary>
            Changes this stream's direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IStream.OnDirectionChange">
            <summary>
            Raised when the signalling state changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.LocalSend">
            <summary>
            Gets or sets a value indicating whether sending media is supported by the local peer on this stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.LocalReceive">
            <summary>
            Gets or sets a value indicating whether receiving media is supported by the local peer on this stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.RemoteSend">
            <summary>
            Gets a value indicating whether sending media is supported by the remote peer on this stream. Returns false if the remote stream direction has not been received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.RemoteReceive">
            <summary>
            Gets or sets a value indicating whether receiving media is supported by the local peer on this stream. Returns false if the remote stream direction has not been received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.State">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IStream.OnStateChange">
            <summary>
            Raised when the stream state changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IStream.TransportInfo">
            <summary>
            Gets the stream transport info.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ivf.VideoRecorder">
            <summary>
            An IVF video recorder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ivf.VideoRecorder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Ivf.VideoRecorder"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ivf.VideoRecorder.DoWriteHeader">
            <summary>
            Writes the file header.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ivf.VideoRecorder.DoUpdateHeader">
            <summary>
            Updates the file header.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ivf.VideoRecorder.DoWrite(FM.LiveSwitch.VideoBuffer,System.Int64)">
            <summary>
            Write an encoded video frame.
            </summary>
            <param name="buffer">The encoded buffer.</param>
            <param name="presentationTimestamp">The presentation timestamp.</param>
            <returns>
              <c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Ivf.VideoSink">
            <summary>
            An IVF-file-based video sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ivf.VideoSink.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ivf.VideoSink.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Ivf.VideoSink.OnFileOpen">
            <summary>
            Raised when a new file is opened in response to
            this sink being activated and processing a frame.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Ivf.VideoSink.OnFileClose">
            <summary>
            Raised when an existing file is close in response to
            this sink being deactivated or destroyed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ivf.VideoSink.OpenFilePath">
            <summary>
            Gets the currently open file path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ivf.VideoSink.LastFilePath">
            <summary>
            Gets the last known file path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ivf.VideoSink.BaseTimestamp">
            <summary>
            Gets the base timestamp - the timestamp of the first frame
            processed by the recorder after being activated. This timestamp
            will change each time a new file is created in response to the
            sink being activated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ivf.VideoSink.LastTimestamp">
            <summary>
            Gets the last timestamp processed by the recorder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ivf.VideoSink.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Ivf.VideoSink"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ivf.VideoSink.#ctor(System.String,FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Ivf.VideoSink" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ivf.VideoSink.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ivf.VideoSink.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IVideoElement">
            <summary>
            A video element.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IVideoInput">
            <summary>
            A video input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoInput.MinInputScale">
            <summary>
            Gets the minimum allowed input scale.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoInput.MaxInputScale">
            <summary>
            Gets the maximum allowed input scale.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoInput.MinInputFrameRate">
            <summary>
            Gets the minimum allowed input frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoInput.MaxInputFrameRate">
            <summary>
            Gets the maximum allowed input frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoInput.MinInputSize">
            <summary>
            Gets the minimum allowed input size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoInput.MaxInputSize">
            <summary>
            Gets the maximum allowed input size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoInput.MinInputWidth">
            <summary>
            Gets the minimum allowed input width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoInput.MaxInputWidth">
            <summary>
            Gets the maximum allowed input width.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoInput.MinInputHeight">
            <summary>
            Gets the minimum allowed input height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoInput.MaxInputHeight">
            <summary>
            Gets the maximum allowed input height.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IVideoInputCollection">
            <summary>
            A collection of video inputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IVideoInputCollection.#ctor(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IVideoInputCollection"/> class.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.IVideoInputCollection.ArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.IVideoInput})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.IVideoInputCollection.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.IVideoOutput">
            <summary>
            A video output.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.MinOutputScale">
            <summary>
            Gets the minimum allowed output scale.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.MaxOutputScale">
            <summary>
            Gets the maximum allowed output scale.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.TargetOutputScale">
            <summary>
            Gets the target output scale.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.MinOutputFrameRate">
            <summary>
            Gets the minimum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.MaxOutputFrameRate">
            <summary>
            Gets the maximum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.TargetOutputFrameRate">
            <summary>
            Gets the target output frame-rate, in fps.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.MinOutputSize">
            <summary>
            Gets the minimum allowed output size.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.MaxOutputSize">
            <summary>
            Gets the maximum allowed output size.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.TargetOutputSize">
            <summary>
            Gets the target output size.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.MinOutputWidth">
            <summary>
            Gets the minimum allowed output width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.MaxOutputWidth">
            <summary>
            Gets the maximum allowed output width.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.TargetOutputWidth">
            <summary>
            Gets the target output width.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.MinOutputHeight">
            <summary>
            Gets the minimum allowed output height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.MaxOutputHeight">
            <summary>
            Gets the maximum allowed output height.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.TargetOutputHeight">
            <summary>
            Gets the target output height.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoOutput.VideoType">
            <summary>
            Gets the video type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IVideoOutputCollection">
            <summary>
            A collection of video outputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IVideoOutputCollection.#ctor(FM.LiveSwitch.IVideoInput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IVideoOutputCollection"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.IVideoOutputCollection.ArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.IVideoOutput})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.IVideoOutputCollection.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.IVideoStream">
            <summary>
            Video stream interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoStream.Vp8Disabled">
            <summary>
            Gets or sets whether VP8 is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoStream.Vp9Disabled">
            <summary>
            Gets or sets whether VP9 is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoStream.H264Disabled">
            <summary>
            Gets or sets whether H.264 is disabled.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IVideoStream.OnDiscardKeyFrameRequest">
            <summary>
            Raised when a keyframe request is discarded due to policy
            restrictions or lack of support by the remote endpoint.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IVideoStream.RaiseKeyFrameRequest(System.Int64[])">
            <summary>
            Raises a keyframe request to the local track.
            </summary>
            <param name="synchronizationSources">The synchronization sources.</param>
        </member>
        <member name="T:FM.LiveSwitch.IVideoTrack">
            <summary>
            Video track interface.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.IVideoTrack.OnSize">
            <summary>
            Raised whenever the size of
            this track is calculated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IVideoTrack.Size">
            <summary>
            Gets the size of this track.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IVideoTrack.GrabFrame">
            <summary>
            Grabs the next frame once it's rendered.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IViewSink`1">
            <summary>
            View sink interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IViewSink`1.View">
            <summary>
            Gets the view.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IViewSink`1.ViewScale">
            <summary>
            Gets or sets the view scale.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IViewSink`1.ViewMirror">
            <summary>
            Gets or sets a value indicating whether the view is mirrored.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.JitterConfig">
            <summary>
            A Jitter config.
            
            JitterConfig is for configuring the jitter buffer. 
            The jitter buffer helps to eliminate the effects of varying network delay and 
            delivery times by holding packets for a brief period of time before releasing them to the playout track. 
            The jitter buffer holds on to the packets so that any out of order arriving packets can be released in the correct order.
            You can modify the buffer size, but it will increase latency, and should generally be left with default values. 
            The option to set these values will most likely be removed in a future release as our adaptive algorithms improve.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.JitterConfig.DisableBuffering">
            <summary>
            Gets or sets a value indicating whether
            the jitter buffer should be disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.JitterConfig.BufferLength">
            <summary>
            Gets or sets the initial jitter buffer length in milliseconds.
            Defaults to 100 (ms).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JitterConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.JitterConfig"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JitterConfig.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.JitterConfig"/> class.
            </summary>
            <param name="bufferLength">Length of the buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.Jitter.Buffer`4">
            <summary>
            A jitter buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Jitter.Buffer`4.ClockRate">
            <summary>
            Gets the clock rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Jitter.Buffer`4.OnFrame">
            <summary>
            Gets or sets the frame callback.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Jitter.Buffer`4.Length">
            <summary>
            Gets or sets the length of the buffer in milliseconds.
            Defaults to 100ms.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Jitter.Buffer`4.GetSystemTimestamp">
            <summary>
            Gets or sets the system timestamp callback.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Jitter.Buffer`4.#ctor(System.Int32,FM.LiveSwitch.Action1{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Jitter.Buffer`4"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
            <param name="onFrame">The callback executed when a frame is available.</param>
        </member>
        <member name="M:FM.LiveSwitch.Jitter.Buffer`4.Push(`0)">
            <summary>
            Pushes the specified frame.
            </summary>
            <param name="frame">The frame.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.JitterAudioPipe">
            <summary>
            An audio pipe that wraps a jitter buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.JitterAudioPipe.Label">
            <summary>
            Gets the label of the pipe.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JitterAudioPipe.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.JitterAudioPipe"/> class
            with a 100ms length.
            </summary>
            <param name="format">The input/output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.JitterAudioPipe.#ctor(FM.LiveSwitch.AudioFormat,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.JitterAudioPipe"/> class.
            </summary>
            <param name="format">The input/output format.</param>
            <param name="length">The length of the jitter buffer, in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.JitterAudioPipe.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JitterAudioPipe.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Pushes the frame to the jitter buffer and raises any frames that are ready.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.JitterVideoPipe">
            <summary>
            A video pipe that wraps a jitter buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.JitterVideoPipe.Label">
            <summary>
            Gets the label of the pipe.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JitterVideoPipe.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.JitterVideoPipe"/> class
            with a 100ms length.
            </summary>
            <param name="format">The input/output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.JitterVideoPipe.#ctor(FM.LiveSwitch.VideoFormat,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.JitterVideoPipe"/> class.
            </summary>
            <param name="format">The input/output format.</param>
            <param name="length">The length of the jitter buffer, in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.JitterVideoPipe.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JitterVideoPipe.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Pushes the frame to the jitter buffer and raises any frames that are ready.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.Layout">
            <summary>
            A layout definition, including local
            and remote frame definitions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Layout.Width">
            <summary>
            Gets or sets the layout width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Layout.Height">
            <summary>
            Gets or sets the layout height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Layout.Origin">
            <summary>
            Gets or sets the layout origin.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Layout.LocalFrame">
            <summary>
            Gets or sets the local frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Layout.RemoteFrames">
            <summary>
            Gets or sets the remote frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Layout.AllFrames">
            <summary>
            Gets or sets all frames (local and remote).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Layout.SwapLocalFrame(System.Int32)">
            <summary>
            Swaps the local frame with a remote frame.
            </summary>
            <param name="remoteFrameIndex">The index of the remote frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.Layout.SwapRemoteFrames(System.Int32,System.Int32)">
            <summary>
            Swaps two remote frames.
            </summary>
            <param name="remoteFrameIndex1">The index of the first remote frame.</param>
            <param name="remoteFrameIndex2">The index of the second remote frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.Layout.SwapFrames(FM.LiveSwitch.LayoutFrame,FM.LiveSwitch.LayoutFrame)">
            <summary>
            Swaps the properties of two frames.
            </summary>
            <param name="frame1">The first frame.</param>
            <param name="frame2">The second frame.</param>
        </member>
        <member name="T:FM.LiveSwitch.LayoutAlignment">
            <summary>
            A layout alignment definition.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutAlignment.TopLeft">
            <summary>
            Indicates a top-left alignment.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutAlignment.Top">
            <summary>
            Indicates a top-center alignment.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutAlignment.TopRight">
            <summary>
            Indicates a top-right alignment.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutAlignment.Left">
            <summary>
            Indicates a center-left alignment.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutAlignment.Center">
            <summary>
            Indicates a center-center alignment.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutAlignment.Right">
            <summary>
            Indicates a center-right alignment.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutAlignment.BottomLeft">
            <summary>
            Indicates a bottom-left alignment.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutAlignment.Bottom">
            <summary>
            Indicates a bottom-center alignment.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutAlignment.BottomRight">
            <summary>
            Indicates a bottom-right alignment.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.LayoutDirection">
            <summary>
            Specifies the direction of the layout flow.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutDirection.Horizontal">
            <summary>
            Indicates that the layout should flow
            horizontally, filling rows as needed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutDirection.Vertical">
            <summary>
            Indicates that the layout should flow
            vertically, filling columns as needed.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.LayoutManager`1">
            <summary>
            A class that supplies simple video frame layout management.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutManager`1.LayoutOrigin">
            <summary>
            Gets or sets the layout origin.
            Defaults to TopLeft.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.LayoutManager`1.OnLayout">
            <summary>
            Raised when a layout is calculated.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LayoutManager`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.#ctor(FM.LiveSwitch.LayoutPreset)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LayoutManager`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.GetLayout(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a video frame layout.
            </summary>
            <param name="layoutWidth">The total width of the layout.</param>
            <param name="layoutHeight">The total height of the layout.</param>
            <param name="remoteCount">The number of remote frames.</param>
            <returns>The video frame layout.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.GetLayout(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Gets a video frame layout.
            </summary>
            <param name="layoutWidth">The total width of the layout.</param>
            <param name="layoutHeight">The total height of the layout.</param>
            <param name="local">Whether a local frame is needed.</param>
            <param name="remoteCount">The number of remote frames.</param>
            <returns>The video frame layout.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.GetLayout(System.Int32,System.Int32,System.Int32,System.String[])">
            <summary>
            Gets a video frame layout.
            </summary>
            <param name="layoutWidth">The total width of the layout.</param>
            <param name="layoutHeight">The total height of the layout.</param>
            <param name="remoteCount">The number of remote frames.</param>
            <param name="remoteViewIds">The remote view IDs.</param>
            <returns>The video frame layout.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.GetLayout(System.Int32,System.Int32,System.Boolean,System.Int32,System.String[])">
            <summary>
            Gets a video frame layout.
            </summary>
            <param name="layoutWidth">The total width of the layout.</param>
            <param name="layoutHeight">The total height of the layout.</param>
            <param name="local">Whether a local frame is needed.</param>
            <param name="remoteCount">The number of remote frames.</param>
            <param name="remoteViewIds">The remote view IDs.</param>
            <returns>The video frame layout.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.GetLayout(System.Int32,System.Int32,System.Boolean,System.Int32,System.String[],FM.LiveSwitch.Size,FM.LiveSwitch.Size[])">
            <summary>
            Gets a video frame layout.
            </summary>
            <param name="layoutWidth">The total width of the layout.</param>
            <param name="layoutHeight">The total height of the layout.</param>
            <param name="local">Whether a local frame is needed.</param>
            <param name="remoteCount">The number of remote frames.</param>
            <param name="remoteViewIds">The remote view IDs.</param>
            <param name="localVideoSize">The local video size.</param>
            <param name="remoteVideoSizes">The remote video sizes.</param>
            <returns>The video frame layout.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.DoGetRemoteViews(System.String)">
            <summary>
            Gets the remote views for a given remote view ID.
            </summary>
            <param name="id">The remote view ID.</param>
            <returns>The remote views.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.DoGetRemoteViewsIds">
            <summary>
            Gets the remote view IDs.
            </summary>
            <returns>The remote view IDs.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.DoGetLocalView">
            <summary>
            Gets the local view.
            </summary>
            <returns>The local view.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.GetLocalView">
            <summary>
            Gets the local view from the layout.
            </summary>
            <returns>The local view.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.SetLocalMedia(FM.LiveSwitch.IViewableMedia{`0})">
            <summary>
            Adds the local media to the layout.
            </summary>
            <param name="localMedia">The local media.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.SetLocalView(`0)">
            <summary>
            Adds the local view to the layout.
            </summary>
            <param name="view">The local view.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>. Check the logs for additional information.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.UnsetLocalView">
            <summary>
            Removes the local view from the layout.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>. Check the logs for additional information.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.GetRemoteView(System.String)">
            <summary>
            Gets a remote view from the layout.
            </summary>
            <param name="id">The remote view ID.</param>
            <returns>The remote view.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.AddRemoteMedia(FM.LiveSwitch.IViewableMedia{`0})">
            <summary>
            Adds remote media to the layout.
            </summary>
            <param name="remoteMedia">The remote media.</param>
            <returns>
              <c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.AddRemoteView(System.String,`0)">
            <summary>
            Adds a remote view to the layout.
            </summary>
            <param name="id">The remote view ID.</param>
            <param name="view">The remote view.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>. Check the logs for additional information.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.RemoveRemoteMedia(FM.LiveSwitch.IViewableMedia{`0})">
            <summary>
            Removes remote media from the layout.
            </summary>
            <param name="remoteMedia">The remote media.</param>
            <returns>
              <c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.RemoveRemoteView(System.String)">
            <summary>
            Removes a remote view from the layout.
            </summary>
            <param name="id">The remote view ID.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>. Check the logs for additional information.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.SwapRemoteMedia(FM.LiveSwitch.IViewableMedia{`0},FM.LiveSwitch.IViewableMedia{`0})">
            <summary>
            Swaps remote media in the layout.
            </summary>
            <param name="remoteMediaToRemove">The remote media to remove.</param>
            <param name="remoteMediaToAdd">The remote media to add.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.SwapRemoteView(System.String,System.String,`0)">
            <summary>
            Swaps a remote view in the layout.
            </summary>
            <param name="idToRemove">The remote view ID to remove.</param>
            <param name="idToAdd">The remote view ID to add.</param>
            <param name="viewToAdd">The remote view to add.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.GetRemoteViews(System.String[])">
            <summary>
            Gets remote views from the layout.
            </summary>
            <param name="ids">The remote view IDs.</param>
            <returns>The remote views.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.AddRemoteViews(System.String[],`0[])">
            <summary>
            Adds remote views to the layout.
            </summary>
            <param name="ids">The remote view IDs.</param>
            <param name="views">The remote views.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>. Check the logs for additional information.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.RemoveRemoteViews(System.String[])">
            <summary>
            Removes remote views from the layout.
            </summary>
            <param name="ids">The remote view IDs.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>. Check the logs for additional information.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.SwapRemoteViews(System.String[],System.String[],`0[])">
            <summary>
            Swaps remote views in the layout.
            </summary>
            <param name="idsToRemove">The remote view IDs to remove.</param>
            <param name="idsToAdd">The remote view IDs to add.</param>
            <param name="viewsToAdd">The remote views to add.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>. Check the logs for additional information.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.GetRemoteViewIds">
            <summary>
            Gets the IDs of the remote views in the layout.
            </summary>
            <returns>The remote view IDs.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.GetRemoteViews">
            <summary>
            Gets all remote views from the layout.
            </summary>
            <returns>The remote views.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.RemoveRemoteViews">
            <summary>
            Removes all remote views from the layout.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.Reset">
            <summary>
            Removes all remote views from the layout,
            then removes the local view from the layout.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.LayoutOnMainThread">
            <summary>
            Positions the local and remote views within the layout
            after dispatching to the main thread.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.AddView(`0)">
            <summary>
            Adds a view to the container.
            </summary>
            <param name="view">The view to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.RemoveView(`0)">
            <summary>
            Removes a view from the container.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.DispatchToMainThread(FM.LiveSwitch.Action2{System.Object,System.Object},System.Object,System.Object)">
            <summary>
            Dispatches an action to the main thread.
            </summary>
            <param name="action">The action to invoke.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutManager`1.Layout">
            <summary>
            Positions the local and remote views within the layout.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.LayoutMode">
            <summary>
            Specifies the layout mode that should be used.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutMode.FloatLocal">
            <summary>
            Indicates that the local video feed should be displayed as
            a floating element above the remote video feeds.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutMode.FloatRemote">
            <summary>
            Indicates that the remote video feeds should be displayed as
            floating elements above the local video feed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutMode.Block">
            <summary>
            Indicates that the video feed should be displayed as a block
            element on its own row/column, separate from other video feeds.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutMode.Inline">
            <summary>
            Indicates that the video feed should be displayed as an inline
            element that shares a row/column with other video feeds.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutMode.InlineOverflow">
            <summary>
            Indicates that the video feed should be displayed as an inline
            element that shares a row/column with other video feeds,
            allowing container overflow as needed.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.LayoutOrigin">
            <summary>
            A layout origin definition.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutOrigin.TopLeft">
            <summary>
            Indicates an origin where 0,0 is in the top-left corner.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutOrigin.TopRight">
            <summary>
            Indicates an origin where 0,0 is in the top-right corner.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutOrigin.BottomRight">
            <summary>
            Indicates an origin where 0,0 is in the bottom-right corner.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutOrigin.BottomLeft">
            <summary>
            Indicates an origin where 0,0 is in the bottom-left corner.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.LayoutPreset">
            <summary>
            A layout preset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.Mode">
            <summary>
            Gets or sets the mode used by the layout engine.
            Defaults to <see cref="F:FM.LiveSwitch.LayoutMode.FloatLocal"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.Direction">
            <summary>
            Gets or sets the direction of the layout flow.
            Defaults to <see cref="F:FM.LiveSwitch.LayoutDirection.Horizontal"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.Alignment">
            <summary>
            Gets or sets the alignment of the layout.
            Defaults to <see cref="F:FM.LiveSwitch.LayoutAlignment.BottomRight"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.FloatWidthPercent">
            <summary>
            Gets or sets the width of floating elements as a percent
            of the container width between 0.0 and 1.0.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.FloatWidth"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.FloatHeightPercent">
            <summary>
            Gets or sets the height of floating elements as a percent
            of the container height between 0.0 and 1.0.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.FloatHeight"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.FloatMarginXPercent">
            <summary>
            Gets or sets the X-margin between floating elements and the layout
            edge as a percent of the container width between 0.0 and 1.0.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.FloatMarginX"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.FloatMarginYPercent">
            <summary>
            Gets or sets the Y-margin between floating elements and the layout
            edge as a percent of the container height between 0.0 and 1.0.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.FloatMarginY"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.FloatWidth">
            <summary>
            Gets or sets the width of floating elements in pixels.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.FloatWidthPercent"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.FloatHeight">
            <summary>
            Gets or sets the height of floating elements in pixels.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.FloatHeightPercent"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.FloatMarginX">
            <summary>
            Gets or sets the X-margin between floating elements and the layout
            edge in pixels.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.FloatMarginXPercent"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.FloatMarginY">
            <summary>
            Gets or sets the Y-margin between floating elements and the layout
            edge in pixels.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.FloatMarginYPercent"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.BlockWidthPercent">
            <summary>
            Gets or sets the width of block elements as a percent
            of the container width between 0.0 and 1.0.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.BlockWidth"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.BlockHeightPercent">
            <summary>
            Gets or sets the height of block elements as a percent
            of the container height between 0.0 and 1.0.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.BlockHeight"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.BlockMarginXPercent">
            <summary>
            Gets or sets the X-margin between block elements and the layout
            edge as a percent of the container width between 0.0 and 1.0.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.BlockMarginX"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.BlockMarginYPercent">
            <summary>
            Gets or sets the Y-margin between block elements and the layout
            edge as a percent of the container height between 0.0 and 1.0.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.BlockMarginY"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.BlockWidth">
            <summary>
            Gets or sets the width of block elements in pixels.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.BlockWidthPercent"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.BlockHeight">
            <summary>
            Gets or sets the height of block elements in pixels.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.BlockHeightPercent"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.BlockMarginX">
            <summary>
            Gets or sets the X-margin between block elements and the layout
            edge in pixels.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.BlockMarginXPercent"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.BlockMarginY">
            <summary>
            Gets or sets the Y-margin between block elements and the layout
            edge in pixels.
            Overrides <see cref="P:FM.LiveSwitch.LayoutPreset.BlockMarginYPercent"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.InlineMargin">
            <summary>
            Gets or sets the size of the margin in pixels to use
            between inline elements.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutPreset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LayoutPreset"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutPreset.CopyToPreset(FM.LiveSwitch.LayoutPreset)">
            <summary>
            Copies this preset's properties to another preset.
            </summary>
            <param name="preset">The target preset.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutPreset.ApplyPreset(FM.LiveSwitch.LayoutPreset)">
            <summary>
            Applies a preset.
            </summary>
            <param name="preset">The preset to apply.</param>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.Skype">
            <summary>
            Gets a Skype-style layout preset.
            Note that this will present differently
            on mobile devices.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.GoogleHangouts">
            <summary>
            Gets a Google Hangouts-style layout preset.
            Note that this will present differently
            on mobile devices.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutPreset.Facetime">
            <summary>
            Gets a Facetime-style layout preset.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutPreset.CalculateLayout(System.Int32,System.Int32,System.Int32,FM.LiveSwitch.LayoutOrigin)">
            <summary>
            Gets a video frame layout.
            </summary>
            <param name="layoutWidth">The total width of the layout.</param>
            <param name="layoutHeight">The total height of the layout.</param>
            <param name="remoteCount">The number of remote frames.</param>
            <param name="origin">The layout origin.</param>
            <returns>The video frame layout.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LayoutPreset.CalculateLayout(System.Int32,System.Int32,System.Boolean,System.Int32,FM.LiveSwitch.LayoutOrigin,FM.LiveSwitch.Size,FM.LiveSwitch.Size[])">
            <summary>
            Gets a video frame layout.
            </summary>
            <param name="layoutWidth">The total width of the layout.</param>
            <param name="layoutHeight">The total height of the layout.</param>
            <param name="local">Whether a local frame is needed.</param>
            <param name="remoteCount">The number of remote frames.</param>
            <param name="origin">The layout origin.</param>
            <param name="localVideoSize">The local video size.</param>
            <param name="remoteVideoSizes">The remote video sizes.</param>
            <returns>The video frame layout.</returns>
        </member>
        <member name="T:FM.LiveSwitch.LayoutTable">
            <summary>
            Defines the results of a layout calculation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutTable.ColumnCount">
            <summary>
            Gets or sets the column count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutTable.RowCount">
            <summary>
            Gets or sets the row count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutTable.CellWidth">
            <summary>
            Gets or sets the width of each cell.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutTable.CellHeight">
            <summary>
            Gets or sets the height of each cell.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutTable.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LayoutTable"/> class.
            </summary>
            <param name="columnCount">The column count.</param>
            <param name="rowCount">The row count.</param>
            <param name="cellWidth">The width of each cell.</param>
            <param name="cellHeight">The height of each cell.</param>
        </member>
        <member name="T:FM.LiveSwitch.LocalMedia">
            <summary>
            A collection of local audio/video tracks.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.LocalMedia.OnAudioStarted">
            <summary>
            Raised when the first audio track is started.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.LocalMedia.OnVideoStarted">
            <summary>
            Raised when the first video track is started.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.LocalMedia.OnAudioStopped">
            <summary>
            Raised when the first audio track is stopped.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.LocalMedia.OnVideoStopped">
            <summary>
            Raised when the first video track is stopped.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.AddAudioTrack(FM.LiveSwitch.AudioTrack)">
            <summary>
            Adds the audio track.
            </summary>
            <param name="audioTrack">The audio track.</param>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.RemoveAudioTrack(FM.LiveSwitch.AudioTrack)">
            <summary>
            Removes the audio track.
            </summary>
            <param name="audioTrack">The audio track.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.AddVideoTrack(FM.LiveSwitch.VideoTrack)">
            <summary>
            Adds the video track.
            </summary>
            <param name="videoTrack">The video track.</param>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.RemoveVideoTrack(FM.LiveSwitch.VideoTrack)">
            <summary>
            Removes the video track.
            </summary>
            <param name="videoTrack">The video track.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.GetAudioSourceInputs">
            <summary>
            Gets the available audio source inputs
            of the first audio track.
            </summary>
            <returns>
            A future with an array of audio source inputs.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.GetVideoSourceInputs">
            <summary>
            Gets the available video source inputs
            of the first video track.
            </summary>
            <returns>
            A future with an array of video source inputs.
            </returns>
        </member>
        <member name="P:FM.LiveSwitch.LocalMedia.AudioSourceInput">
            <summary>
            Gets or sets the current audio source input
            of the first audio track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMedia.VideoSourceInput">
            <summary>
            Gets or sets the current video source input
            of the first video track.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.ChangeAudioSourceInput(FM.LiveSwitch.SourceInput)">
            <summary>
            Changes the audio source input of the first
            audio track while the media is active.
            </summary>
            <param name="audioSourceInput">The audio source input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.ChangeVideoSourceInput(FM.LiveSwitch.SourceInput)">
            <summary>
            Changes the video source input of the first
            video track while the media is active.
            </summary>
            <param name="videoSourceInput">The video source input.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.LocalMedia.AudioSource">
            <summary>
            Gets the audio source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMedia.AudioSources">
            <summary>
            Gets the audio sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMedia.VideoSource">
            <summary>
            Gets the video source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMedia.VideoSources">
            <summary>
            Gets the video sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMedia.MediaSources">
            <summary>
            Gets the audio/video sources.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.DoGetAudioEncodings">
            <summary>
            Gets the local audio encodings.
            </summary>
            <returns>The local audio encodings.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.DoSetAudioEncodings(FM.LiveSwitch.AudioEncodingConfig[])">
            <summary>
            Sets the local audio encodings.
            </summary>
            <param name="encodings">The local audio encodings.</param>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.DoGetVideoEncodings">
            <summary>
            Gets the local video encodings.
            </summary>
            <returns>The local video encodings.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.DoSetVideoEncodings(FM.LiveSwitch.VideoEncodingConfig[])">
            <summary>
            Sets the local video encodings.
            </summary>
            <param name="encodings">The local video encodings.</param>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.DoStart">
            <summary>
            Starts the local media.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.DoStop">
            <summary>
            Stops the local media.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.CreateAudioTrackCollection">
            <summary>
            Creates an audio track collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.CreateVideoTrackCollection">
            <summary>
            Creates a video track collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.ArrayFromAudioTracks(System.Collections.Generic.List{FM.LiveSwitch.AudioTrack})">
            <summary>
            Creates an array of tracks from a list of audio tracks.
            </summary>
            <param name="tracks">The list of tracks.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LocalMedia.ArrayFromVideoTracks(System.Collections.Generic.List{FM.LiveSwitch.VideoTrack})">
            <summary>
            Creates an array of tracks from a list of video tracks.
            </summary>
            <param name="tracks">The list of tracks.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.LocalMediaBase`3">
            <summary>
            A collection of local audio/video track base methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMediaBase`3.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMediaBase`3.AudioEncoding">
            <summary>
            Gets the first (primary) local audio encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMediaBase`3.AudioEncodings">
            <summary>
            Gets or sets the local audio encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMediaBase`3.VideoEncoding">
            <summary>
            Gets the first (primary) local video encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMediaBase`3.VideoEncodings">
            <summary>
            Gets or sets the local video encodings.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LocalMediaBase`3.DoGetAudioEncodings">
            <summary>
            Gets the local audio encodings.
            </summary>
            <returns>The local audio encodings.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalMediaBase`3.DoSetAudioEncodings(FM.LiveSwitch.AudioEncodingConfig[])">
            <summary>
            Sets the local audio encodings.
            </summary>
            <param name="encodings">The local audio encodings.</param>
        </member>
        <member name="M:FM.LiveSwitch.LocalMediaBase`3.DoGetVideoEncodings">
            <summary>
            Gets the local video encodings.
            </summary>
            <returns>The local video encodings.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalMediaBase`3.DoSetVideoEncodings(FM.LiveSwitch.VideoEncodingConfig[])">
            <summary>
            Sets the local video encodings.
            </summary>
            <param name="encodings">The local video encodings.</param>
        </member>
        <member name="M:FM.LiveSwitch.LocalMediaBase`3.LockAudioEncodings">
            <summary>
            Locks the audio encodings in prior to initialization.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LocalMediaBase`3.LockVideoEncodings">
            <summary>
            Locks the video encodings in prior to initialization.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LocalMediaBase`3.LockVideoEncodings(FM.LiveSwitch.VideoType)">
            <summary>
            Locks the video encodings in prior to initialization.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LocalMediaBase`3.LockVideoEncodings(FM.LiveSwitch.VideoType,System.Int32,System.Int32,System.Double)">
            <summary>
            Locks the video encodings in prior to initialization.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMediaBase`3.AudioSimulcastDisabled">
            <summary>
            Gets or sets whether audio simulcast is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMediaBase`3.AudioSimulcastEncodingCount">
            <summary>
            Gets or sets the number of audio simulcast encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMediaBase`3.AudioSimulcastPreferredBitrate">
            <summary>
            Gets or sets the preferred audio simulcast bitrate, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMediaBase`3.VideoSimulcastDisabled">
            <summary>
            Gets or sets whether video simulcast is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMediaBase`3.VideoSimulcastEncodingCount">
            <summary>
            Gets or sets the number of video simulcast encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMediaBase`3.VideoSimulcastPreferredBitrate">
            <summary>
            Gets or sets the preferred video simulcast bitrate, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMediaBase`3.VideoSimulcastBitsPerPixel">
            <summary>
            Gets or sets the desired video simulcast bits-per-pixel (bpp).
            If this value is set and the video source has
            declared a target width, height, and frame-rate,
            encoding bitrates will be automatically calculated
            using this value instad of using preferred bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMediaBase`3.VideoSimulcastDegradationPreference">
            <summary>
            Gets or sets the video simulcast degradation preference.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LocalMediaBase`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LocalMediaBase`3"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalMediaBase`3.DefaultVideoBitsPerPixel">
            <summary>
            Gets or sets the default bits-per-pixel for video.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LocalMediaBase`3.Start">
            <summary>
            Starts the media track sources.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.LocalMediaBase`3.DoStart">
            <summary>
            Starts the local media.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalMediaBase`3.Stop">
            <summary>
            Stops the media track sources.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.LocalMediaBase`3.DoStop">
            <summary>
            Stops the local media.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalMediaBase`3.AbortStart(FM.LiveSwitch.Promise{`0},System.Exception)">
            <summary>
            Aborts the start.
            </summary>
            <param name="promise">The promise.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:FM.LiveSwitch.LocalMediaState">
            <summary>
            The state of local media.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LocalMediaState.New">
            <summary>
            Indicates that the local media has not been started yet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LocalMediaState.Starting">
            <summary>
            Indicates that the local media is starting.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LocalMediaState.Started">
            <summary>
            Indicates that the local media has started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LocalMediaState.Stopping">
            <summary>
            Indicates that the local media is stopping.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LocalMediaState.Stopped">
            <summary>
            Indicates that the local media has stopped.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LocalMediaState.Destroying">
            <summary>
            Indicates that the local media is being destroyed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LocalMediaState.Destroyed">
            <summary>
            Indicates that the local media has been destroyed.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Media`2">
            <summary>
            A collection of audio/video tracks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Media`2.AudioTracks">
            <summary>
            Gets the audio tracks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Media`2.VideoTracks">
            <summary>
            Gets the video tracks.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Media`2.OnAudioLevel">
            <summary>
            Raised whenever the level of
            the first audio track is calculated.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Media`2.OnVideoSize">
            <summary>
            Raised whenever the size of
            the first video track is calculated.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Media`2.OnAudioDestroyed">
            <summary>
            Raised when the first audio track is destroyed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Media`2.OnVideoDestroyed">
            <summary>
            Raised when the first video track is destroyed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Media`2.AddAudioTrack(`0)">
            <summary>
            Adds an audio track.
            </summary>
            <param name="audioTrack">The audio track.</param>
        </member>
        <member name="M:FM.LiveSwitch.Media`2.RemoveAudioTrack(`0)">
            <summary>
            Removes an audio track.
            </summary>
            <param name="audioTrack">The audio track.</param>
        </member>
        <member name="M:FM.LiveSwitch.Media`2.AddVideoTrack(`1)">
            <summary>
            Adds a video track.
            </summary>
            <param name="videoTrack">The video track.</param>
        </member>
        <member name="M:FM.LiveSwitch.Media`2.RemoveVideoTrack(`1)">
            <summary>
            Removes a video track.
            </summary>
            <param name="videoTrack">The video track.</param>
        </member>
        <member name="P:FM.LiveSwitch.Media`2.IsRecordingAudio">
            <summary>
            Gets or sets a value indicating whether audio is being recorded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Media`2.IsRecordingVideo">
            <summary>
            Gets or sets a value indicating whether video is being recorded.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Media`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Media`2"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Media`2.VideoSize">
            <summary>
            Gets the size of the first video track.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Media`2.GrabVideoFrame">
            <summary>
            Grabs the next frame from the first video track, once it's rendered.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Media`2.Destroy">
            <summary>
            Destroys this media.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Media`2.CreateAudioTrackCollection">
            <summary>
            Creates an audio track collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Media`2.CreateVideoTrackCollection">
            <summary>
            Creates a video track collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Media`2.ArrayFromAudioTracks(System.Collections.Generic.List{`0})">
            <summary>
            Creates an array of tracks from a list of audio tracks.
            </summary>
            <param name="tracks">The list of tracks.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Media`2.ArrayFromVideoTracks(System.Collections.Generic.List{`1})">
            <summary>
            Creates an array of tracks from a list of video tracks.
            </summary>
            <param name="tracks">The list of tracks.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.MediaBase`2">
            <summary>
            A collection of audio/video track base methods/properties.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBase`2.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBase`2.AudioTrack">
            <summary>
            Gets the first audio track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBase`2.AudioTracks">
            <summary>
            Gets the audio tracks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBase`2.VideoTrack">
            <summary>
            Gets the first video track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBase`2.VideoTracks">
            <summary>
            Gets the video tracks.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaBase`2.OnAudioLevel">
            <summary>
            Raised whenever the level of
            the first audio track is calculated.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaBase`2.OnVideoSize">
            <summary>
            Raised whenever the size of
            the first video track is calculated.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaBase`2.OnAudioDestroyed">
            <summary>
            Raised when the first audio track is destroyed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaBase`2.OnVideoDestroyed">
            <summary>
            Raised when the first video track is destroyed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBase`2.AudioGain">
            <summary>
            Gets or sets a value indicating the gain
            (input amplification) of the first audio track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBase`2.AudioVolume">
            <summary>
            Gets or sets a value indicating the volume
            (output resistance) of the first audio track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBase`2.AudioMuted">
            <summary>
            Gets or sets a value indicating whether the
            first audio track is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBase`2.VideoMuted">
            <summary>
            Gets or sets a value indicating whether the
            first video track is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBase`2.VideoSize">
            <summary>
            Gets the size of the first video track.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaBase`2"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaBase`2.GrabVideoFrame">
            <summary>
            Grabs a frame from the first video track.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaBase`2.Destroy">
            <summary>
            Destroys this media.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaBuffer`2">
            <summary>
            A media buffer.
            </summary>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.IsPacketized">
            <summary>
            Gets if this is a packetized media buffer or not.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.RtpHeader">
            <summary>
            Gets or sets the Rtp Packet Header for this media buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.RtpHeaders">
            <summary>
            Gets or sets the RTP Packet Headers for this media buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.SourceId">
            <summary>
            Gets or sets the source identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.Footprint">
            <summary>
            Gets the approximate footprint of this media buffer
            by returning the sum of its data buffer lengths.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.DataBuffer">
            <summary>
            Gets or sets the data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.DataBuffers">
            <summary>
            Gets or sets the data buffers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.SequenceNumber">
            <summary>
            Gets or sets the sequence number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.LastSequenceNumber">
            <summary>
            Gets or sets the last sequence number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.SequenceNumbers">
            <summary>
            Gets or sets the sequence numbers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.RtpSequenceNumber">
            <summary>
            Gets or sets the RTP sequence number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.RtpSequenceNumbers">
            <summary>
            Gets or sets the RTP sequence numbers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.IsMuted">
            <summary>
            Gets a value indicating whether this instance has been muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBuffer`2.RecoveredByFec">
            <summary>
            Gets or sets a value indicating whether this buffer contains
            data recovered by forward error correction (FEC).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaBuffer`2.Mute">
            <summary>
            Mutes this instance. This is a one-way operation that clears
            the underlying data buffer. If the buffer has an unsupported
            format, this method will return <c>false</c>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaBuffer`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaBuffer`2"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaBuffer`2.#ctor(FM.LiveSwitch.DataBuffer,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaBuffer`2"/> class.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaBuffer`2.#ctor(FM.LiveSwitch.DataBuffer[],`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaBuffer`2"/> class.
            </summary>
            <param name="dataBuffers">The data buffers.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaBuffer`2.Clone">
            <summary>
            Clones this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaBuffer`2.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaBuffer`2.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaBuffer`2.Keep">
            <summary>
            Keeps the data buffers referenced by this instance.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaBuffer`2.TryKeep">
            <summary>
            Attempts to keep the data buffers referenced by this instance.
            </summary>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaBuffer`2.Free">
            <summary>
            Frees the data buffers referenced by this instance.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaBufferCollection`3">
            <summary>
            A media buffer collection.
            </summary>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="T:FM.LiveSwitch.MediaHeaderExtensionPolicy">
            <summary>
            RTP packet header Extension support policies.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaHeaderExtensionPolicy.Negotiated">
            <summary>
            Indicates a policy where support for a particular RTP header extension is negotiated. It will be enabled if the other peer also supports it.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaHeaderExtensionPolicy.Disabled">
            <summary>
            Indicates a policy where a particular RTP header extension will be disabled regardless of support indicated by the other peer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.NullAudioSource">
            <summary>
            An audio source that raises nothing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullAudioSource.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullAudioSource.CanPauseBitrate">
            <summary>
            Gets whether this source can pause the output bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullAudioSource.CanChangeBitrate">
            <summary>
            Gets whether this source can change the output bitrate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.UpdateMinOutputBitrate(System.Int32)">
            <summary>
            Sets the minimum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minOutputBitrate">The minimum allowed output bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.UpdateMaxOutputBitrate(System.Int32)">
            <summary>
            Sets the maximum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxOutputBitrate">The maximum allowed output bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.UpdateTargetOutputBitrate(System.Int32)">
            <summary>
            Sets the target output bitrate, in kbps.
            A value of -1 indicates unset (no target).
            </summary>
            <param name="targetOutputBitrate">The target output bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.UpdateMinOutputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the minimum allowed output encoding.
            A value of null indicates unset (no minimum).
            </summary>
            <param name="minOutputEncoding">The minimum allowed output encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.UpdateMaxOutputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the maximum allowed output encoding.
            A value of null indicates unset (no maximum).
            </summary>
            <param name="maxOutputEncoding">The maximum allowed output encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.UpdateTargetOutputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the target output encoding.
            A value of null indicates unset (no target).
            </summary>
            <param name="targetOutputEncoding">The target output encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.UpdateSystemDelay(System.Int64)">
            <summary>
            Sets the system delay in ticks.
            </summary>
            <param name="systemDelay">The system delay.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.UpdateOutputSynchronizable(System.Boolean)">
            <summary>
            Sets whether output is synchronizable.
            </summary>
            <param name="outputSynchronizable">Whether output is synchronizable.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.UpdateCanPauseBitrate(System.Boolean)">
            <summary>
            Sets whether this source can pause the output bitrate. 
            </summary>
            <param name="canPauseBitrate">Whether this source can pause the output bitrate.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.UpdateCanChangeBitrate(System.Boolean)">
            <summary>
            Sets whether this source can change the output bitrate. 
            </summary>
            <param name="canChangeBitrate">Whether this source can change the output bitrate.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new <see cref="T:FM.LiveSwitch.NullAudioSource"/>.
            </summary>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.ProcessFrame(FM.LiveSwitch.AudioFrame)">
            <summary>
            Processes a frame by raising it.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.ProcessControlFrameResponse(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Processes a control frame response by raising it.
            </summary>
            <param name="controlFrameResponse">The control frame response.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.ProcessControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frame responses by raising them.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.GenerateAndProcessPcmFrame">
            <summary>
            Generates and processes a 20ms PCM frame.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.GenerateAndProcessPcmFrame(System.Int32)">
            <summary>
            Generates and processes a PCM frame.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.DoStart">
            <summary>
            Starts the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.DoStop">
            <summary>
            Stops the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSource.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullAudioSource.InputSynchronizationSource">
            <summary>
            Gets or sets the input synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullAudioSource.InputRtpStreamId">
            <summary>
            Gets or sets the input RTP stream identifier.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.NullVideoSource">
            <summary>
            A video source that raises nothing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.MinSupportedSize">
            <summary>
            Gets the minimum supported size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.MaxSupportedSize">
            <summary>
            Gets the maximum supported size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.StaticOutputSize">
            <summary>
            Gets or sets whether <see cref="P:FM.LiveSwitch.NullVideoSource.MinOutputSize"/> and
            <see cref="P:FM.LiveSwitch.NullVideoSource.MaxOutputSize"/> should return
            <see cref="P:FM.LiveSwitch.NullVideoSource.MinSupportedSize"/> and
            <see cref="P:FM.LiveSwitch.NullVideoSource.MaxSupportedSize"/>, respectively, or
            response to changes in <see cref="P:FM.LiveSwitch.NullVideoSource.MinSize"/> and
            <see cref="P:FM.LiveSwitch.NullVideoSource.MaxSize"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.MinOutputSize">
            <summary>
            Gets or sets the minimum allowed output size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.MinSize">
            <summary>
            Gets or sets the minimum size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.MaxOutputSize">
            <summary>
            Gets or sets the maximum allowed output size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.MaxSize">
            <summary>
            Gets or sets the maximum output size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.TargetOutputSize">
            <summary>
            Gets or sets the target output size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.TargetSize">
            <summary>
            Gets or sets the target size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.Size">
            <summary>
            Gets or sets the current size.
            A value of null indicates unset, and will
            default to the target size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.MinSupportedFrameRate">
            <summary>
            Gets the minimum supported frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.MaxSupportedFrameRate">
            <summary>
            Gets the maximum supported frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.StaticOutputFrameRate">
            <summary>
            Gets or sets whether <see cref="P:FM.LiveSwitch.NullVideoSource.MinOutputFrameRate"/> and
            <see cref="P:FM.LiveSwitch.NullVideoSource.MaxOutputFrameRate"/> should return
            <see cref="P:FM.LiveSwitch.NullVideoSource.MinSupportedFrameRate"/> and
            <see cref="P:FM.LiveSwitch.NullVideoSource.MaxSupportedFrameRate"/>, respectively, or
            response to changes in <see cref="P:FM.LiveSwitch.NullVideoSource.MinFrameRate"/> and
            <see cref="P:FM.LiveSwitch.NullVideoSource.MaxFrameRate"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.MinOutputFrameRate">
            <summary>
            Gets or sets the minimum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.MinFrameRate">
            <summary>
            Gets or sets the minimum frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.MaxOutputFrameRate">
            <summary>
            Gets or sets the maximum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.MaxFrameRate">
            <summary>
            Gets or sets the maximum output frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.TargetOutputFrameRate">
            <summary>
            Gets or sets the target output frame-rate, in fps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.TargetFrameRate">
            <summary>
            Gets or sets the target frame-rate, in fps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.FrameRate">
            <summary>
            Gets or sets the current frame-rate, in fps.
            A value of -1 indicates unset, and will
            default to the target frame-rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.TargetConfig">
            <summary>
            Gets or sets the target config.
            A value of null indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.Config">
            <summary>
            Gets or sets the current config.
            A value of null indicates unset (pass-through).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.CanPauseBitrate">
            <summary>
            Gets whether this source can pause the output bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.CanChangeBitrate">
            <summary>
            Gets whether this source can change the output bitrate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateMinOutputBitrate(System.Int32)">
            <summary>
            Sets the minimum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minOutputBitrate">The minimum allowed output bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateMaxOutputBitrate(System.Int32)">
            <summary>
            Sets the maximum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxOutputBitrate">The maximum allowed output bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateTargetOutputBitrate(System.Int32)">
            <summary>
            Sets the target output bitrate, in kbps.
            A value of -1 indicates unset (no target).
            </summary>
            <param name="targetOutputBitrate">The target output bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateMinOutputScale(System.Double)">
            <summary>
            Sets the minimum allowed output scale.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minOutputScale">The minimum allowed output scale.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateMaxOutputScale(System.Double)">
            <summary>
            Sets the maximum allowed output scale.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxOutputScale">The maximum allowed output scale.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateTargetOutputScale(System.Double)">
            <summary>
            Sets the target output scale.
            A value of -1 indicates unset (no target).
            </summary>
            <param name="targetOutputScale">The target output scale.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateMinOutputFrameRate(System.Double)">
            <summary>
            Sets the minimum allowed output frame-rate.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minOutputFrameRate">The minimum allowed output frame-rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateMaxOutputFrameRate(System.Double)">
            <summary>
            Sets the maximum allowed output frame-rate.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxOutputFrameRate">The maximum allowed output frame-rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateTargetOutputFrameRate(System.Double)">
            <summary>
            Sets the target output frame-rate.
            A value of -1 indicates unset (no target).
            </summary>
            <param name="targetOutputFrameRate">The target output frame-rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateMinOutputSize(FM.LiveSwitch.Size)">
            <summary>
            Sets the minimum allowed output size.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minOutputSize">The minimum allowed output size.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateMaxOutputSize(FM.LiveSwitch.Size)">
            <summary>
            Sets the maximum allowed output size.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxOutputSize">The maximum allowed output size.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateTargetOutputSize(FM.LiveSwitch.Size)">
            <summary>
            Sets the target output size.
            A value of -1 indicates unset (no target).
            </summary>
            <param name="targetOutputSize">The target output size.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateMinOutputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the minimum allowed output encoding.
            A value of null indicates unset (no minimum).
            </summary>
            <param name="minOutputEncoding">The minimum allowed output encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateMaxOutputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the maximum allowed output encoding.
            A value of null indicates unset (no maximum).
            </summary>
            <param name="maxOutputEncoding">The maximum allowed output encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateTargetOutputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the target output encoding.
            A value of null indicates unset (no target).
            </summary>
            <param name="targetOutputEncoding">The target output encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateSystemDelay(System.Int64)">
            <summary>
            Sets the system delay in ticks.
            </summary>
            <param name="systemDelay">The system delay.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateOutputSynchronizable(System.Boolean)">
            <summary>
            Sets whether output is synchronizable.
            </summary>
            <param name="outputSynchronizable">Whether output is synchronizable.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateCanPauseBitrate(System.Boolean)">
            <summary>
            Sets whether this source can pause the output bitrate. 
            </summary>
            <param name="canPauseBitrate">Whether this source can pause the output bitrate.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateCanChangeBitrate(System.Boolean)">
            <summary>
            Sets whether this source can change the output bitrate. 
            </summary>
            <param name="canChangeBitrate">Whether this source can change the output bitrate.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.UpdateVideoType(FM.LiveSwitch.VideoType)">
            <summary>
            Sets the video type.
            </summary>
            <param name="videoType">The video type.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new <see cref="T:FM.LiveSwitch.NullVideoSource"/>.
            </summary>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.#ctor(FM.LiveSwitch.VideoFormat,FM.LiveSwitch.VideoConfig)">
            <summary>
            Initializes a new <see cref="T:FM.LiveSwitch.NullVideoSource"/>.
            </summary>
            <param name="outputFormat">The output format.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.ProcessFrame(FM.LiveSwitch.VideoFrame)">
            <summary>
            Processes a frame by raising it.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.ProcessControlFrameResponse(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Processes a control frame response by raising it.
            </summary>
            <param name="controlFrameResponse">The control frame response.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.ProcessControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frame responses by raising them.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.GenerateAndProcessRawFrame">
            <summary>
            Generates and processes a raw frame.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.DoStart">
            <summary>
            Starts the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.DoStop">
            <summary>
            Stops the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSource.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.InputSynchronizationSource">
            <summary>
            Gets or sets the input synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSource.InputRtpStreamId">
            <summary>
            Gets or sets the input RTP stream identifier.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.NullVideoSink">
            <summary>
            A video sink that discards frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSink.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.UpdateMinInputBitrate(System.Int32)">
            <summary>
            Sets the minimum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minInputBitrate">The minimum allowed input bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.UpdateMaxInputBitrate(System.Int32)">
            <summary>
            Sets the maximum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxInputBitrate">The maximum allowed input bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.UpdateMinInputScale(System.Double)">
            <summary>
            Sets the minimum allowed input scale.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minInputScale">The minimum allowed input scale.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.UpdateMaxInputScale(System.Double)">
            <summary>
            Sets the maximum allowed input scale.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxInputScale">The maximum allowed input scale.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.UpdateMinInputFrameRate(System.Double)">
            <summary>
            Sets the minimum allowed input frame-rate.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minInputFrameRate">The minimum allowed input frame-rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.UpdateMaxInputFrameRate(System.Double)">
            <summary>
            Sets the maximum allowed input frame-rate.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxInputFrameRate">The maximum allowed input frame-rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.UpdateMinInputSize(FM.LiveSwitch.Size)">
            <summary>
            Sets the minimum allowed input size.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minInputSize">The minimum allowed input size.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.UpdateMaxInputSize(FM.LiveSwitch.Size)">
            <summary>
            Sets the maximum allowed input size.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxInputSize">The maximum allowed input size.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.UpdateMinInputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the minimum allowed input encoding.
            A value of null indicates unset (no minimum).
            </summary>
            <param name="minInputEncoding">The minimum allowed input encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.UpdateMaxInputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the maximum allowed input encoding.
            A value of null indicates unset (no maximum).
            </summary>
            <param name="maxInputEncoding">The maximum allowed input encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.UpdateSystemDelay(System.Int64)">
            <summary>
            Sets the system delay in ticks.
            </summary>
            <param name="systemDelay">The system delay.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.UpdateVideoType(FM.LiveSwitch.VideoType)">
            <summary>
            Sets the video type.
            </summary>
            <param name="videoType">The video type.</param>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSink.FrameCount">
            <summary>
            Gets the current frame count.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.#ctor">
            <summary>
            Initializes a new <see cref="T:FM.LiveSwitch.NullVideoSink"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new <see cref="T:FM.LiveSwitch.NullVideoSink"/>.
            </summary>
            <param name="inputFormat">The input format.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.ProcessControlFrame(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Processes a control frame by raising it.
            </summary>
            <param name="controlFrame">The control frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.ProcessControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frames by raising them.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullVideoSink.ProcessedFrames(System.Int64)">
            <summary>
            Creates a future that resolves when the specified
            number of frames have been processed.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSink.OutputSynchronizationSource">
            <summary>
            Gets or sets the output synchronization source.
            If the output synchronization source is -1 (unset),
            then getting this property returns the InputSynchronizationSource.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullVideoSink.OutputRtpStreamId">
            <summary>
            Gets or sets the output RTP stream identifier.
            If the output RTP stream identifier is null (unset),
            then getting this property returns the InputRtpStreamId.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.NullAudioSink">
            <summary>
            An audio sink that discards frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullAudioSink.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSink.UpdateMinInputBitrate(System.Int32)">
            <summary>
            Sets the minimum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
            <param name="minInputBitrate">The minimum allowed input bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSink.UpdateMaxInputBitrate(System.Int32)">
            <summary>
            Sets the maximum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
            <param name="maxInputBitrate">The maximum allowed input bitrate, in kbps.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSink.UpdateMinInputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the minimum allowed input encoding.
            A value of null indicates unset (no minimum).
            </summary>
            <param name="minInputEncoding">The minimum allowed input encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSink.UpdateMaxInputEncoding(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Sets the maximum allowed input encoding.
            A value of null indicates unset (no maximum).
            </summary>
            <param name="maxInputEncoding">The maximum allowed input encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSink.UpdateSystemDelay(System.Int64)">
            <summary>
            Sets the system delay in ticks.
            </summary>
            <param name="systemDelay">The system delay.</param>
        </member>
        <member name="P:FM.LiveSwitch.NullAudioSink.FrameCount">
            <summary>
            Gets the current frame count.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSink.#ctor">
            <summary>
            Initializes a new <see cref="T:FM.LiveSwitch.NullAudioSink"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSink.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new <see cref="T:FM.LiveSwitch.NullAudioSink"/>.
            </summary>
            <param name="inputFormat">The input format.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSink.ProcessControlFrame(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Processes a control frame by raising it.
            </summary>
            <param name="controlFrame">The control frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSink.ProcessControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frames by raising them.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSink.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSink.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullAudioSink.ProcessedFrames(System.Int64)">
            <summary>
            Creates a future that resolves when the specified
            number of frames have been processed.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.NullAudioSink.OutputSynchronizationSource">
            <summary>
            Gets or sets the output synchronization source.
            If the output synchronization source is -1 (unset),
            then getting this property returns the InputSynchronizationSource.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NullAudioSink.OutputRtpStreamId">
            <summary>
            Gets or sets the output RTP stream identifier.
            If the output RTP stream identifier is null (unset),
            then getting this property returns the InputRtpStreamId.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.PacketizedAudioBuffer">
            <summary>
            A AudioBuffer containing an RtpHeader.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PacketizedAudioBuffer.#ctor(FM.LiveSwitch.DataBuffer[],FM.LiveSwitch.AudioFormat,FM.LiveSwitch.RtpPacketHeader[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioBuffer" /> class.
            </summary>
            <param name="dataBuffers">The data buffers.</param>
            <param name="format">The format.</param>
            <param name="rtpHeaders">The RTP headers.</param>
        </member>
        <member name="M:FM.LiveSwitch.PacketizedAudioBuffer.#ctor(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.AudioFormat,FM.LiveSwitch.RtpPacketHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioBuffer" /> class.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
            <param name="format">The format.</param>
            <param name="rtpHeader">The RTP header.</param>
        </member>
        <member name="M:FM.LiveSwitch.PacketizedAudioBuffer.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.PacketizedVideoBuffer">
            <summary>
            A VideoBuffer containing an RtpHeader.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PacketizedVideoBuffer.#ctor(System.Int32,System.Int32,FM.LiveSwitch.DataBuffer[],FM.LiveSwitch.VideoFormat,FM.LiveSwitch.RtpPacketHeader[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.PacketizedVideoBuffer" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="dataBuffers">The data buffers.</param>
            <param name="format">The format.</param>
            <param name="rtpHeaders">The RTP headers.</param>
        </member>
        <member name="M:FM.LiveSwitch.PacketizedVideoBuffer.#ctor(System.Int32,System.Int32,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.VideoFormat,FM.LiveSwitch.RtpPacketHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.PacketizedVideoBuffer" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="dataBuffer">The data buffer.</param>
            <param name="format">The format.</param>
            <param name="rtpHeader">The RTP header.</param>
        </member>
        <member name="M:FM.LiveSwitch.PacketizedVideoBuffer.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ProcessFramePolicy">
            <summary>
            The policy on how a media input should process the frame.
            
            ProcessFramePolicy affects how media packets move from one processing element to the next in a media track. 
            The default behaviour is synchronous, which is recommended for almost all applications. 
            There are a few niche use cases (generally server-side) where a media track includes a branch with hundreds or thousands of leaves, 
            in which case processing asynchronously (with accompanying thread-pool tuning) 
            can eliminate the effects of favoritism in processing time towards the first leaves.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ProcessFramePolicy.Synchronous">
            <summary>
            The media input will process the frame synchronously.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ProcessFramePolicy.Asynchronous">
            <summary>
            The media input will process the frame asynchronously.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Reliable.ChannelType">
            <summary>
            Identifies the type of data channel requested in the DCEP message.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.ChannelType.Reliable">
            <summary>
            Indicates that the data channel provides a reliable in-order bi-directional communication
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.ChannelType.ReliableUnordered">
            <summary>
            Indicates that the data channel provides a reliable unordered bi-directional communication
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.ChannelType.PartialReliableREXMIT">
            <summary>
            Indicates that the data channel provides a partially-reliable in-order bi-directional communication.  User messages will not be retransmitted more times than specified in the Reliability Parameter.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.ChannelType.PartialReliableREXMITUnordered">
            <summary>
            Indicates that the data channel provides a partial reliable unordered bi-directional communication.  User messages will not be retransmitted more times than specified in the Reliability Parameter.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.ChannelType.PartialReliableTimed">
            <summary>
            Indicates that the data channel provides a partial reliable in-order bi-directional communication.  
            User messages might not be transmitted or retransmitted after a specified life-time given in milliseconds in the Reliability Parameter.
            This life-time starts when providing the user message to the protocol stack.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.ChannelType.PartialReliableTimedUnordered">
            <summary>
            Indicates that the data channel provides a partial reliable unordered bi-directional communication.  
            User messages might not be transmitted or retransmitted after a specified life-time given in milliseconds in the Reliability Parameter.  
            This life-time starts when providing the user message to the protocol stack.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Reliable.ChannelPriority">
            <summary>
            The reliable channel priority.
            These priorities are interpreted as weighted-fair-queuing scheduling priorities
            per the definition of the corresponding stream scheduler supporting interleaving
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Reliable.SctpPayloadProtocolIdentifier">
            <summary>
            SCTP Payload Protocol Identifiers used by WebRTC assigned by IANA (refer to www.iana.org/assignments/sctp-parameters/sctp-parameters.xhtml#sctp-parameters-25)
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.SctpPayloadProtocolIdentifier.WebRtcDcep">
            <summary>
            WebRTC Data Channel Establishment Protocol http://www.iana.org/go/draft-ietf-rtcweb-data-protocol-09
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.SctpPayloadProtocolIdentifier.WebRtcString">
            <summary>
            WebRTC Data Channel String Message http://tools.ietf.org/html/draft-ietf-rtcweb-data-channel-13
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.SctpPayloadProtocolIdentifier.WebRtcBinary">
            <summary>
            WebRTC Data Channel Binary Message http://tools.ietf.org/html/draft-ietf-rtcweb-data-channel-13
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.SctpPayloadProtocolIdentifier.WebRtcEmptyString">
            <summary>
            WebRTC Data Channel Empty String Message http://tools.ietf.org/html/draft-ietf-rtcweb-data-channel-13
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.SctpPayloadProtocolIdentifier.WebRtcEmptyBinary">
            <summary>
            WebRTC Data Channel Empty Binary Message http://tools.ietf.org/html/draft-ietf-rtcweb-data-channel-13
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Reliable.Rtc.DcepMessageType">
            <summary>
            Identifies the type of information contained in the DCEP Message Type field.
            It takes a value from 0x00 to 0xff. The value of 0xff is reserved for future use as an extension field.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.Rtc.DcepMessageType.DataChannelOpen">
            <summary>
            Open Data channel request
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.Rtc.DcepMessageType.DataChannelAck">
            <summary>
            Confirmation of Data Channel opening
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelAck">
            <summary>
            This message is sent in response to a DATA_CHANNEL_OPEN message on the stream used for user messages using the Data Channel.
            Reception of this message tells the opener that the Data Channel setup handshake is complete.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |  Message Type |
            +-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelAck.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelAck"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelAck.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelAck.GetBytes(FM.LiveSwitch.Reliable.Rtc.DcepDataChannelAck)">
            <summary>
            Gets the bytes.
            </summary>
            <param name="message">The message.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelAck.ParseBytes(FM.LiveSwitch.DataBuffer)">
            <summary>
            Converts a byte array to a WebRTC DCEP message.
            </summary>
            <param name="bytes">The byte array.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen">
            <summary>
            This message is sent initially on the Stream used for user messages using the Data Channel.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |  Message Type |  Channel Type |            Priority           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                    Reliability Parameter                      |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |         Label Length          |       Protocol Length         |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            \                                                               /
            |                              Label                             |
            /                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            \                                                               /
            |                            Protocol                           |
            /                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen.SubProtocol">
            <summary>
            Gets the channel sub protocol. Currently, empty string is used to indicate that the protocol is unspecified.
            Future values come from https://www.iana.org/assignments/websocket/websocket.xml#subprotocol-name and RFC6455
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen.ChannelType">
            <summary>
            Gets or sets the type of the message (<see cref="T:FM.LiveSwitch.Reliable.ChannelType"/>)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen.Label">
            <summary>
            Gets or sets the channel label as a UTF-8 encoded string. May be an empty string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen.ReliabilityParameter">
            <summary>
            Gets the reliability parameter. (NOT YET IN USE. WILL BE IN USED ONCE PARTIAL RELIABILITY IS ALLOWED )
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen.ChannelPriority">
            <summary>
            Gets the channel priority. (NOT YET IN USE; ALL CHANNELS GET NORMAL PRIORITY)
            A priority (values range between 0 and 65535).  These priorities are interpreted as weighted-fair-queuing scheduling priorities
            per the definition of the corresponding stream scheduler
            supporting interleaving in [I-D.ietf-tsvwg-sctp-ndata].  
            For use in WebRTC, the values used SHOULD be one of 128 ("below normal"), 256 ("normal"), 512 ("high") or 1024 ("extra high").
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen.GetBytes(FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen)">
            <summary>
            Gets the bytes.
            </summary>
            <param name="message">The message.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen.ParseBytes(FM.LiveSwitch.DataBuffer)">
            <summary>
            Converts a byte array to a WebRTC DCEP message.
            </summary>
            <param name="buffer">The byte array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen.#ctor(FM.LiveSwitch.Reliable.ChannelType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen.#ctor(FM.LiveSwitch.Reliable.ChannelType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Reliable.Rtc.DcepMessage">
            <summary>
            Data Channel Establishment Protocol message to establish data exchange over WebRTC channels.
            Ref. https://tools.ietf.org/html/draft-ietf-rtcweb-data-protocol-09
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Reliable.Rtc.DcepMessage.MessageType">
            <summary>
            Gets or sets the type of the message.
            </summary>
            <value>
            This field identifies the type of information contained in the DCEP message. 
            It takes a value from 0x00 to 0xff. The value of 0xff is reserved for future use as an extension field.
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Rtc.DcepMessage.GetBytes">
            <summary>
            Gets the bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Rtc.DcepMessage.ParseBytes(FM.LiveSwitch.DataBuffer)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="buffer">The buffer.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Rtc.DcepMessage.ParseChannelTypeByte(System.Int32)">
            <summary>
            Parses the channel type byte.
            </summary>
            <param name="typeByte">The type byte.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Rtc.DcepMessage.GetByteFromChannelType(FM.LiveSwitch.Reliable.ChannelType)">
            <summary>
            Parses the channel type byte.
            </summary>
            <param name="type">The type.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Reliable.Channel">
            <summary>
            A reliable (SCTP-based) WebRTC data channel implementation.
            Follows https://tools.ietf.org/html/draft-ietf-mmusic-data-channel-sdpneg-08
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Reliable.Channel.InnerTransportStreamId">
            <summary>
            Gets or sets the related SCTP stream index.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Reliable.Channel.Label">
            <summary>
            Gets or sets the channel label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Reliable.Channel.Ordered">
            <summary>
            Gets or sets a value indicating whether to allow messages to be delivered out-of-order.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Reliable.Channel.SubProtocol">
            <summary>
            Gets or sets the channel sub-protocol.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Channel.Open">
            <summary>
            Generates a channel open request and sets the channel into connecting state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Channel.RespondToOpenRequest(FM.LiveSwitch.Reliable.Rtc.DcepDataChannelOpen)">
            <summary>
            Opens the channel on incoming open request and generates an acknowledgement message.
            </summary>
            <param name="channelOpenRequest">The channel open request.</param>
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Channel.ProcessChannelOpenAck(FM.LiveSwitch.Reliable.Rtc.DcepDataChannelAck)">
            <summary>
            Processes the channel open acknowledgement and moves this channel into the open state.
            </summary>
            <param name="ack">The ack.</param>
        </member>
        <member name="T:FM.LiveSwitch.Reliable.ChannelState">
            <summary>
            <see cref="T:FM.LiveSwitch.Reliable.Channel"/> states.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.ChannelState.New">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Reliable.Channel"/> has been created and has not started opening yet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.ChannelState.Opening">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Reliable.Channel"/> is attempting to establish the underlying data transport.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.ChannelState.Open">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Reliable.Channel"/> is open and communication is possible.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.ChannelState.Closing">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Reliable.Channel"/> is in the process of closing as a result of a call to <see cref="M:FM.LiveSwitch.Reliable.Channel.Close"/>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.ChannelState.Closed">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Reliable.Channel"/> has been closed intentionally via a call to <see cref="M:FM.LiveSwitch.Reliable.Channel.Close"/>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.ChannelState.Failed">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Reliable.Channel"/> has been closed as the result of an error.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Reliable.Transport._LegacyMatching">
            <summary>
            Gets or sets a value indicateing whether data channel matching is should be label based (where DataChannel.Label acts as a unique 
            identifier of a channel) as opposed to using channel index as an identifier.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Reliable.Transport.OnDataChannel">
            <summary>
            Invoked when a new Data Channel has being created in response to a remote WebRTC DCEP Data Channel Open request (rather than created and passed to the Transport by the local peer).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Transport.Stop">
            <summary>
            Stops this reliable data transport 
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Transport.Start(System.Boolean,System.Boolean)">
            <summary>
            Starts Reliable Data Transport
            </summary>
            <param name="isDtlsServer">Value indicating whether this Connection assumed the role of server</param>
            <param name="isOfferer">Value indicating whether this Connection is the offerer</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Reliable.Transport.OpenChannel(FM.LiveSwitch.Reliable.Channel)">
            <summary>
            Generates a channel open request and sets the channel into the opening (requested) state.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="T:FM.LiveSwitch.Reliable.TransportState">
            <summary>
            <see cref="T:FM.LiveSwitch.Reliable.Transport"/> states.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.TransportState.New">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Reliable.Transport"/> has been created and has not started opening yet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.TransportState.Opening">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Reliable.Transport"/> is attempting to open Reliable Data Channels for communications.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.TransportState.Connected">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Reliable.Transport"/> has successfully open all channels and is ready for communication.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.TransportState.Closing">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Reliable.Transport"/> is in the process of closing as a result of a call to <see cref="M:FM.LiveSwitch.Reliable.Transport.Stop"/>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.TransportState.Closed">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Reliable.Transport"/> has been closed intentionally via a call to <see cref="M:FM.LiveSwitch.Reliable.Transport.Stop"/>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Reliable.TransportState.Failed">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Reliable.Transport"/> has been closed as the result of an error.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.RemoteMediaCollection">
            <summary>
            A collection of remote medias.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RemoteMediaCollection.GetById(System.String)">
            <summary>
            Gets a media by ID.
            </summary>
            <param name="id">The identifier.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RemoteMediaCollection.AddSuccess(FM.LiveSwitch.RemoteMedia)">
            <summary>
            Invoked when an element is added to the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.RemoteMediaCollection.RemoveSuccess(FM.LiveSwitch.RemoteMedia)">
            <summary>
            Invoked when an element is removed from the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.RemoteMediaCollection.ArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.RemoteMedia})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RemoteMediaCollection.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.MediaCollection">
            <summary>
            A collection of remote medias.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaControlFrame">
            <summary>
            A media control frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaControlFrame.StreamId">
            <summary>
            Gets the stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaControlFrame.FixedHeaderLength">
            <summary>
            Gets the length of the fixed header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaControlFrame.DataBuffer">
            <summary>
            Gets or sets the buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaControlFrame.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaControlFrame.Byte1Last5Bits">
            <summary>
            Gets or sets the last 5 bits of the first byte.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaControlFrame.PayloadType">
            <summary>
            Gets or sets the payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaControlFrame.Payload">
            <summary>
            Gets or sets the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaControlFrame.PayloadLengthWithPadding">
            <summary>
            Gets or sets the length of the payload, in bytes, with padding.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaControlFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaControlFrame"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaControlFrame"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaControlFrame.Parse(FM.LiveSwitch.DataBuffer)">
            <summary>
            Parses a data buffer into an array of control frames.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaControlFrame.AddControlFrame(FM.LiveSwitch.MediaControlFrame[],FM.LiveSwitch.MediaControlFrame,System.Int32)">
            <summary>
            Adds a control frame to an array.
            </summary>
            <param name="controlFrames">The control frames.</param>
            <param name="addControlFrame">The control frame to add.</param>
            <param name="index">The insert index.</param>
            <returns>A new control frame array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaControlFrame.AddControlFrames(FM.LiveSwitch.MediaControlFrame[],FM.LiveSwitch.MediaControlFrame[],System.Int32)">
            <summary>
            Adds control frames to an array.
            </summary>
            <param name="controlFrames">The control frames.</param>
            <param name="addControlFrames">The control frames to add.</param>
            <param name="index">The insert index.</param>
            <returns>A new control frame array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaControlFrame.RemoveControlFrame(FM.LiveSwitch.MediaControlFrame[],System.Int32)">
            <summary>
            Removes a control frame from an array.
            </summary>
            <param name="controlFrames">The control frames.</param>
            <param name="index">The delete index.</param>
            <returns>A new control frame array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaFormat`1">
            <summary>
            A media format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.RedName">
            <summary>
            Gets the name of the RED media format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.UlpFecName">
            <summary>
            Gets the name of the ULPFEC media format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.ClockRate">
            <summary>
            Gets or sets the clock rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.IsCompressed">
            <summary>
            Gets whether this is a compressed format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.IsPacketized">
            <summary>
            Gets or sets a value indicating whether the data is packetized.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.PacketizationMode">
            <summary>
            Gets or sets the packetization mode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.Profile">
            <summary>
            Gets or sets the profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.Level">
            <summary>
            Gets or sets the level.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.LevelIsStrict">
            <summary>
            Gets or sets a value indicating whether the level is strict.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.IsEncrypted">
            <summary>
            Gets or sets a value indicating that the data is encrypted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.IsInjected">
            <summary>
            Gets or sets a value indicating that the data is injected
            into the primary media stream (e.g. DTMF).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.IsFixedBitrate">
            <summary>
            Gets or sets a value indicating whether a format only supports fixed bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.FullName">
            <summary>
            Gets the full name, including clock rate and encoding parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.StaticPayloadType">
            <summary>
            Gets or sets the static payload type, if this format
            has a static payload type registered with IANA.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.Info">
            <summary>
            Gets this format as an info object.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.MinBitrate">
            <summary>
            Gets the minimum bitrate supported by this format, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFormat`1.MaxBitrate">
            <summary>
            Gets the maximum bitrate supported by this format, in kbps.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaFormat`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaFormat`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaFormat`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="level">The media format level.</param>
            <param name="profile">The media format profile.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaFormat`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="packetizationMode">The packetization mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaFormat`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="level">The media format level</param>
            <param name="profile">The media format profile</param>
            <param name="packetizationMode">The packetization mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.IsEquivalent(`0)">
            <summary>
            Determines whether the specified format is equivalent.
            </summary>
            <param name="format">The format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.IsEquivalent(`0,System.Boolean)">
            <summary>
            Determines whether the specified format is equivalent.
            </summary>
            <param name="format">The format.</param>
            <param name="ignoreIsPacketized">Whether to ignore if the two formats differ in whether they are packetized.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.IsCompatible(`0)">
            <summary>
            Determines whether the specified format is compatible.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.IsProfileCompatible(System.String)">
            <summary>
            Gets whether a profile is compatible.
            </summary>
            <param name="profile">The profile.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.IsLevelCompatible(System.String)">
            <summary>
            Gets whether a level is compatible.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.UpdateProfileToCompatible(`0)">
            <summary>
            Updates the profile to a compatible value.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.UpdateLevelToCompatible(`0)">
            <summary>
            Updates the level to a compatible value.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.UpdateLevelIsStrictToCompatible(`0)">
            <summary>
            Updates the level-is-strict flag to a compatible value.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.GetMinLevel(System.String,System.String)">
            <summary>
            Gets the minimum level.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The minimum level.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.GetMaxLevel(System.String,System.String)">
            <summary>
            Gets the maximum level.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The maximum level.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormat`1.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaFormatCollection`2">
            <summary>
            A media format collection.
            </summary>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <typeparam name="TFormatCollection">The type of the format collection.</typeparam>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormatCollection`2.CachePayloadType(System.String,`0)">
            <summary>
            Caches a format by payloadType.
            </summary>
            <param name="payloadType">The payloadType.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormatCollection`2.UncachePayloadType(System.String)">
            <summary>
            Uncaches a format by payloadType.
            </summary>
            <param name="payloadType">The payloadType.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormatCollection`2.HasEquivalent(`0)">
            <summary>
            Determines if the collection has an equivalent format.
            </summary>
            <param name="format">The format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFormatCollection`2.HasCompatible(`0)">
            <summary>
            Determines if the collection has a compatible format.
            </summary>
            <param name="format">The format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFormatCollection`2.GetEquivalent(`0)">
            <summary>
            Gets a format by equivalence to another format.
            </summary>
            <param name="format">The format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFormatCollection`2.GetCompatible(`0)">
            <summary>
            Gets a format by compatibility to another format.
            </summary>
            <param name="format">The format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFormatCollection`2.GetCompatibles(`0)">
            <summary>
            Gets a format by compatibility to another format.
            </summary>
            <param name="format">The format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFormatCollection`2.GetEquivalent(`0,System.Boolean)">
            <summary>
            Gets a format by equivalence to another format, ignoring whether the format is packetized.
            </summary>
            <param name="format">The format.</param>
            <param name="ignoreIsPacketized">if set to <c>true</c> [ignore <c>IsPacketized</c>].</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFormatCollection`2.AddSuccess(`0)">
            <summary>
            Invoked when an element is added to the collection.
            </summary>
            <param name="value">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFormatCollection`2.RemoveSuccess(`0)">
            <summary>
            Invoked when an element is removed from the collection.
            </summary>
            <param name="value">The format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaFrame`4">
            <summary>
            A  media frame.
            </summary>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <typeparam name="TFrame">The type of the frame.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.Mid">
            <summary>
            Gets or sets the MID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.RtpStreamId">
            <summary>
            Gets or sets the RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.RepairedRtpStreamId">
            <summary>
            Gets or sets the repaired RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.ContributingSources">
            <summary>
            Gets or sets the contributing sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.SystemTimestamp">
            <summary>
            Gets or sets the system timestamp matching
            <see cref="P:FM.LiveSwitch.MediaFrame`4.Timestamp" /> but measured in system ticks.
            For local frames, this value uses the same
            clock as <see cref="T:FM.LiveSwitch.ManagedStopwatch"/>.
            For remote frames, this value uses a clock
            known only to the remote sender.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.NtpTimestampTicks">
            <summary>
            Gets or sets the NTP timestamp ticks matching
            <see cref="P:FM.LiveSwitch.MediaFrame`4.Timestamp"/>, set by RTP receivers
            for synchronization of inbound media streams.
            Deprecated. Use <see cref="P:FM.LiveSwitch.MediaFrame`4.SystemTimestamp"/> instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.Timestamp">
            <summary>
            Gets or sets the timestamp, measured according
            to the last buffer format's clock rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.NetworkSystemTimestamp">
            <summary>
            Gets or sets the network system timestamp. For
            inbound media, this value is calculated in the
            network layer as soon as the packet payload is
            determined to contain media.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.TransportSystemTimestamp">
            <summary>
            Gets or sets the transport system timestamp. For
            inbound media, this value is calculated after the
            network layer in the transport layer when the
            packet payload is picked up for processing
            (decryption, dejitter, track routing, etc.).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.RtpTimestamp">
            <summary>
            Gets or sets the RTP timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.SequenceNumber">
            <summary>
            Gets or sets the sequence number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.RtpSequenceNumber">
            <summary>
            Gets or sets the RTP sequence number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.Synchronized">
            <summary>
            Gets or sets whether this frame has a
            <see cref="P:FM.LiveSwitch.MediaFrame`4.SystemTimestamp"/> that is
            actively synchronized with other streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.Footprint">
            <summary>
            Gets the approximate footprint of this media frame
            by returning the sum of its media buffer footprints.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.Discard">
            <summary>
            Gets or sets whether this frame should be discarded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.DurationSample">
            <summary>
            Gets or sets the active duration sample.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaFrame`4" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaFrame`4" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaFrame`4" /> class.
            </summary>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.CreateMediaBufferCollection">
            <summary>
            Creates a media buffer collection.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.Buffers">
            <summary>
            Gets or sets the buffers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.Buffer">
            <summary>
            Gets or sets the buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaFrame`4.LastBuffer">
            <summary>
            Gets the most recent buffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.AddBuffer(`0)">
            <summary>
            Adds a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.RemoveBuffer(`0)">
            <summary>
            Removes a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.AddBuffers(`0[])">
            <summary>
            Adds some buffers.
            </summary>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.RemoveBuffers(`0[])">
            <summary>
            Removes some buffers.
            </summary>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.RemoveBuffers">
            <summary>
            Removes all buffers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.GetBuffer(System.String)">
            <summary>
            Gets the last buffer whose format name matches the specified format name.
            </summary>
            <param name="formatName">The format name.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.GetBuffer(`2)">
            <summary>
            Gets the last buffer whose format is compatible with the specified format.
            </summary>
            <param name="format">The format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.GetBuffer(`2,System.String)">
            <summary>
            Gets the last buffer whose format is compatible with the specified format
            and whose source ID matches the specified source ID.
            </summary>
            <param name="format">The format.</param>
            <param name="sourceId">The source identifier.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.GetBuffer(System.Boolean)">
            <summary>
            Gets the last buffer whose format packetization flag matches the specified flag.
            </summary>
            <param name="isPacketized">Whether the buffer is packetized.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.GetBuffer(System.Boolean,System.Boolean)">
            <summary>
            Gets the last buffer whose format packetization and encryption flags
            matches the specified flags.
            </summary>
            <param name="isPacketized">Whether the buffer is packetized.</param>
            <param name="isEncrypted">Whether the buffer is encrypted.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.HasBuffer(`2)">
            <summary>
            Checks if a buffer exists with format equivalence.
            </summary>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if the buffer exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.HasBuffer(`2,System.String)">
            <summary>
            Checks if a buffer exists with format equivalence and source ID.
            </summary>
            <param name="format">The format.</param>
            <param name="sourceId">The source identifier.</param>
            <returns>
              <c>true</c> if the buffer exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.Keep">
            <summary>
            Keeps the buffers referenced by this instance.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.Free">
            <summary>
            Frees the buffers referenced by this instance.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.UpdateTimestamp(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            Updates the timestamp to match resampling.
            </summary>
            <param name="baseTimestamp">The base timestamp, captured once for the first frame.</param>
            <param name="baseRtpTimestamp">The base RTP timestamp, captured once for the first frame.</param>
            <param name="inputClockRate">The input clock rate.</param>
            <param name="outputClockRate">The output clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.CalculateSystemTimestamp(System.Int64,System.Int64,System.Int32,System.Int64)">
            <summary>
            Calculates a system timestamp given a base system timestamp,
            the current timestamp, a clock rate, and a base timestamp.
            </summary>
            <param name="baseSystemTimestamp">The base system timestamp (offset).</param>
            <param name="timestamp">The current timestamp.</param>
            <param name="clockRate">The clock rate of the media.</param>
            <param name="baseTimestamp">The base timestamp (offset).</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.CalculateTimestamp(System.Int64,System.Int64,System.Int32)">
            <summary>
            Calculates a timestamp given a base system timestamp,
            the current system timestamp, and a clock rate. This
            method assumes the base timestamp is zero.
            </summary>
            <param name="baseSystemTimestamp">The base system timestamp (offset).</param>
            <param name="systemTimestamp">The current system timestamp.</param>
            <param name="clockRate">The clock rate of the media.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaFrame`4.CalculateTimestamp(System.Int64,System.Int64,System.Int32,System.Int64)">
            <summary>
            Calculates a timestamp given a base system timestamp,
            the current system timestamp, a clock rate, and a base
            timestamp.
            </summary>
            <param name="baseSystemTimestamp">The base system timestamp (offset).</param>
            <param name="systemTimestamp">The current system timestamp.</param>
            <param name="clockRate">The clock rate of the media.</param>
            <param name="baseTimestamp">The base timestamp (offset).</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaPipeState">
            <summary>
            The state of a media pipe.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaPipeState.Initialized">
            <summary>
            Indicates that the media sink has been initialized.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaPipeState.Destroying">
            <summary>
            Indicates that the media pipe is being destroyed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaPipeState.Destroyed">
            <summary>
            Indicates that the media pipe has been destroyed.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaRecorder`2">
            <summary>
            A recorder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaRecorder`2.File">
            <summary>
            Gets or sets the file.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaRecorder`2.FileStream">
            <summary>
            Gets or sets the recorder stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaRecorder`2.WasOpened">
            <summary>
            Gets or sets a value indicating whether the file was opened.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaRecorder`2.Opened">
            <summary>
            Gets whether the recorder has been opened or not.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaRecorder`2.DoWrite(`0,System.Int64)">
            <summary>
            Write an encoded video frame.
            </summary>
            <param name="buffer">The encoded buffer.</param>
            <param name="presentationTimestamp">The presentation timestamp.</param>
            <returns>
              <c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaRecorder`2.DoWriteHeader">
            <summary>
            Writes the file header.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaRecorder`2.DoUpdateHeader">
            <summary>
            Updates the file header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaRecorder`2.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaRecorder`2.OpenPath">
            <summary>
            Gets the currently open path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaRecorder`2.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaRecorder`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaRecorder`2"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaRecorder`2.Open">
            <summary>
            Opens the file and writes the initial header.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaRecorder`2.Close">
            <summary>
            Updates the header and closes the file.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaRecorder`2.Write(`0,System.Int64)">
            <summary>
            Write an encoded video frame using the width
            and height parameters from the first keyframe.
            This method will discard non-keyframes until
            the first keyframe arrives.
            </summary>
            <param name="buffer">The encoded buffer.</param>
            <param name="presentationTimestamp">The presentation timestamp.</param>
            <returns>
              <c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaSinkBase">
            <summary>
            Media sink base properties/methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkBase.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkBase.ExternalId">
            <summary>
            Gets or sets the external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkBase.Tag">
            <summary>
            Gets or sets optional data to associate with this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaSinkState">
            <summary>
            The state of a media sink.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaSinkState.Initialized">
            <summary>
            Indicates that the media sink has been initialized.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaSinkState.Destroying">
            <summary>
            Indicates that the media sink is being destroyed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaSinkState.Destroyed">
            <summary>
            Indicates that the media sink has been destroyed.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaSourceBase">
            <summary>
            Media source base properties/methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceBase.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceBase.ExternalId">
            <summary>
            Gets or sets the external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceBase.Tag">
            <summary>
            Gets or sets optional data to associate with this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceBase.Start">
            <summary>
            Starts this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceBase.Stop">
            <summary>
            Stops this instance.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.MediaSourceState">
            <summary>
            The state of a media source.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaSourceState.New">
            <summary>
            Indicates that the media source has not been started yet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaSourceState.Starting">
            <summary>
            Indicates that the media source is starting.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaSourceState.Started">
            <summary>
            Indicates that the media source has started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaSourceState.Stopping">
            <summary>
            Indicates that the media source is stopping.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaSourceState.Stopped">
            <summary>
            Indicates that the media source has stopped.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaSourceState.Destroying">
            <summary>
            Indicates that the media source is being destroyed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaSourceState.Destroyed">
            <summary>
            Indicates that the media source has been destroyed.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaStream`15">
            <summary>
            A media stream.
            </summary>
            <typeparam name="TIOutput">The type of the output interface.</typeparam>
            <typeparam name="TIOutputCollection">The type of the output interface collection.</typeparam>
            <typeparam name="TIInput">The type of the input interface.</typeparam>
            <typeparam name="TIInputCollection">The type of the input interface collection.</typeparam>
            <typeparam name="TIElement">The type of the element interface</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TSink">The type of the sink.</typeparam>
            <typeparam name="TPipe">The type of the pipe.</typeparam>
            <typeparam name="TTrack">The type of the track.</typeparam>
            <typeparam name="TBranch">The type of the branch.</typeparam>
            <typeparam name="TFrame">The type of the frame.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <typeparam name="TFormatCollection">The type of the format collection.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.SimulcastMode">
            <summary>
            Gets or sets the simulcast mode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.ProcessFramePolicy">
            <summary>
            Gets or sets the ProcessFramePolicy for this media input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.BandwidthAdaptationPolicy">
            <summary>
            Gets or sets bandwidth adapation policy for this stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.Paused">
            <summary>
            Gets a value indicating whether this stream is paused.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.Persistent">
            <summary>
            Gets a value indicating whether this instance is persistent.
            Always returns <c>false</c>.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnProcessFrame">
            <summary>
            Raised when a frame is being processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnProcessedFrame">
            <summary>
            Raised when a frame has been processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnSendFrame">
            <summary>
            Raised when a frame is sent.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnReceiveFrame">
            <summary>
            Raised when a frame is received.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnRaiseFrame">
            <summary>
            Raised when a frame is being raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnRaisedFrame">
            <summary>
            Raised when a frame has been raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnProcessControlFrames">
            <summary>
            Raised when control frames are processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnProcessControlFrameResponses">
            <summary>
            Raised when control frame responses are processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnRaiseControlFrames">
            <summary>
            Raised when control frames are raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnRaiseControlFrameResponses">
            <summary>
            Raised when control frame responses are raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnPausedChange">
            <summary>
            Raised when the Paused property changes state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.LocalMedia">
            <summary>
            Gets or sets the local media, if one was specified.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.RemoteMedia">
            <summary>
            Gets or sets the remote media, if one was specified.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.LocalTrack">
            <summary>
            Gets or sets the local track, if one was specified.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.RemoteTrack">
            <summary>
            Gets or sets the remote track, if one was specified.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.LocalDescriptionMediaId">
            <summary>
            Gets or sets the local description media identifier.
            If not set, defaults to the <see cref="P:FM.LiveSwitch.MediaStream`15.LocalMedia"/>
            identifier, if one exists.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.RemoteDescriptionMediaId">
            <summary>
            Gets the remote description media identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.LocalDescriptionTrackId">
            <summary>
            Gets or sets the local description track identifier.
            If not set, defaults to the <see cref="P:FM.LiveSwitch.MediaStream`15.LocalTrack"/>
            identifier, if one exists.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.RemoteDescriptionTrackId">
            <summary>
            Gets the remote description track identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InputSynchronizationDisabled">
            <summary>
            Gets or sets whether input synchronization is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OutputSynchronizationDisabled">
            <summary>
            Gets or sets whether output synchronization is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.RtpTransport">
            <summary>
            Gets or sets the RTP transport.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.PreferredFormat">
            <summary>
            Gets the negotiated formats.
            </summary>
            <value>
            The negotiated formats.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.RtpParameters">
            <summary>
            Gets the RTP parameters.
            </summary>
            <value>
            The RTP parameters.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.Multiplexed">
            <summary>
            Gets a value indicating whether Rtp and Rtcp components for this stream are multiplexed on the same port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.MultiplexingSupported">
            <summary>
            Gets a value indicating whether so far negotiation with the peer indicates that Rtp and Rtcp component multiplexing on the same port is supported.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InputFormat">
            <summary>
            Gets the current input format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InputFormats">
            <summary>
            Gets the available input formats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.DisabledInputFormats">
            <summary>
            Gets the disabled input formats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.FormatArrayFromList(System.Collections.Generic.List{`13})">
            <summary>
            Creates a format array from a format list.
            </summary>
            <param name="formatList">The format list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.InputArrayFromList(System.Collections.Generic.List{`2})">
            <summary>
            Creates an input array from an input list.
            </summary>
            <param name="inputList">The input list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.OutputArrayFromList(System.Collections.Generic.List{`0})">
            <summary>
            Creates an output array from an output list.
            </summary>
            <param name="outputList">The output list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ChangeInputFormat(`13)">
            <summary>
            Changes the current input format (switches codecs).
            </summary>
            <param name="inputFormat">The input format.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.DisableInputFormat(`13)">
            <summary>
            Disables an input format. This will trigger a codec
            switch if disabling the current input format. This
            may disable the stream 
            </summary>
            <param name="inputFormat">The input format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.EnableInputFormat(`13)">
            <summary>
            Enables an input format. This will NOT trigger a
            codec switch.
            </summary>
            <param name="inputFormat">The input format.</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OutputFormat">
            <summary>
            Gets or sets the output format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.RedFecPolicy">
            <summary>
            Gets or sets the Fec Policy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.RedFecConfig">
            <summary>
            Gets Fec Config.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.RedFecEnabled">
            <summary>
            Gets True if Red Fec is negotiated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.NackPolicy">
            <summary>
            Gets or sets the NACK Policy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.NackPliPolicy">
            <summary>
            Gets or sets the NACK PLI Policy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.CcmFirPolicy">
            <summary>
            Gets or sets the CCM FIR Policy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.CcmLrrPolicy">
            <summary>
            Gets or sets the CCM LRR Policy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.CcmTmmbrPolicy">
            <summary>
            Gets or sets the CCM TMMBR Policy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.CcmTmmbnPolicy">
            <summary>
            Gets or sets the CCM TMMBR Policy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.NackConfig">
            <summary>
            Gets Nack config.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.NackEnabled">
            <summary>
            Gets whether NACKs are allowed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.NackPliEnabled">
            <summary>
            Gets whether NACK PLIs are allowed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.CcmFirEnabled">
            <summary>
            Gets whether CCM FIRs are allowed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.CcmLrrEnabled">
            <summary>
            Gets whether CCM LRRs are allowed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.CcmTmmbrEnabled">
            <summary>
            Gets whether CCM TMMBRs are allowed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.CcmTmmbnEnabled">
            <summary>
            Gets whether CCM TMMBNs are allowed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.RembPolicy">
            <summary>
            Gets or sets the goog-remb policy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.RembEnabled">
            <summary>
            Gets True if goog-remb is negotiated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.JitterConfig">
            <summary>
            Gets the jitter configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.LegacyReceiver">
            <summary>
            Gets or sets whether to use legacy receiver processing.
            Legacy receiver processing uses a fixed-size jitter buffer
            and processes forward error correction pre-jitter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.DisableAutomaticReports">
            <summary>
            Gets or sets a value indicating whether to disable automatic RTCP sender/receiver reports.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OutputMaxInputBitrate">
            <summary>
            Gets the sum of the bitrates from <see cref="P:FM.LiveSwitch.MediaStream`15.OutputMaxInputEncodings"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OutputMinInputBitrate">
            <summary>
            Gets the sum of the bitrates from <see cref="P:FM.LiveSwitch.MediaStream`15.OutputMinInputEncodings"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InputMaxOutputBitrate">
            <summary>
            Gets the sum of the bitrates from <see cref="P:FM.LiveSwitch.MediaStream`15.InputMaxOutputEncodings"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InputMinOutputBitrate">
            <summary>
            Gets the sum of the bitrates from <see cref="P:FM.LiveSwitch.MediaStream`15.InputMinOutputEncodings"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InputTargetOutputBitrate">
            <summary>
            Gets the sum of the bitrates from <see cref="P:FM.LiveSwitch.MediaStream`15.InputTargetOutputEncodings"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.#ctor(FM.LiveSwitch.StreamType,FM.LiveSwitch.JitterConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaStream`15" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="jitterConfig">The jitter configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.CreateInputCollection(`0)">
            <summary>
            Creates an input collection.
            </summary>
            <param name="output">The output.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.CreateOutputCollection(`2)">
            <summary>
            Creates an output collection.
            </summary>
            <param name="input">The input.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.CreateMediaFormatCollection">
            <summary>
            Creates a media format collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.CreateRedFormat">
            <summary>
            Creates a RED format.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.CreateUlpFecFormat">
            <summary>
            Creates a ulpfec format.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InjectionAllowed">
            <summary>
            Gets whether at least one frame has
            been successfully processed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessFrame(`10)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessUpdateToMediaStreamIdentification(System.String)">
            <summary>
            Process update to the MediaDescription Identificiation.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnMasterSynchronizeContextReady">
            <summary>
            Raised by master streams when the synchronize context is ready.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.Synchronize(System.Boolean)">
            <summary>
            Initializes synchronization.
            </summary>
            <param name="master">Whether this is a master stream.</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.SynchronizeContext">
            <summary>
            Gets or sets the synchronize context.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.Synchronizers">
            <summary>
            Gets all synchronizers in the stream output tracks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.RaiseFrame(`10)">
            <summary>
            Raises a frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessControlFrame(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Processes a control frame.
            </summary>
            <param name="controlFrame">The control frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessControlFrameResponse(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Processes a control frame response.
            </summary>
            <param name="controlFrameResponse">The control frame response.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frame responses.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnDiscardOutboundControlFrame">
            <summary>
            Raised when an outbound control frame is discarded due to policy
            restrictions or lack of support by the remote endpoint.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.RaiseControlFrame(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Raises a control frame.
            </summary>
            <param name="controlFrame">The control frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.RaiseControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Raises control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.RaiseControlFrameResponse(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Raises a control frame response.
            </summary>
            <param name="controlFrameResponse">The control frame response.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.RaiseControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Raises control frame responses.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.Output">
            <summary>
            Gets the output.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.Outputs">
            <summary>
            Gets the outputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.AddOutput(`2)">
            <summary>
            Adds an output.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.AddOutputs(`2[])">
            <summary>
            Adds some outputs.
            </summary>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.RemoveOutput(`2)">
            <summary>
            Removes an output.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.RemoveOutputs(`2[])">
            <summary>
            Removes some outputs.
            </summary>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.RemoveOutputs">
            <summary>
            Removes all outputs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.Input">
            <summary>
            Gets the input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.Inputs">
            <summary>
            Gets the inputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.AddInput(`0)">
            <summary>
            Adds an input.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.AddInputs(`0[])">
            <summary>
            Adds some inputs.
            </summary>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.RemoveInput(`0)">
            <summary>
            Removes an input.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.RemoveInputs(`0[])">
            <summary>
            Removes some inputs.
            </summary>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.RemoveInputs">
            <summary>
            Removes all inputs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.DirectionCapabilities">
            <summary>
            Gets the direction capabilities of this stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessSdpMediaDescriptionFromOutput(FM.LiveSwitch.Sdp.MediaDescription,System.Boolean,System.Boolean)">
            <summary>
            Processes a local SDP media description from an output.
            </summary>
            <param name="mediaDescription">The media description.</param>
            <param name="isOffer">if set to <c>true</c> [is offer].</param>
            <param name="isLocalDescription">if set to <c>true</c> [is local description].</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessSdpMediaDescriptionFromInput(FM.LiveSwitch.Sdp.MediaDescription,System.Boolean,System.Boolean)">
            <summary>
            Processes a local SDP media description from an input.
            </summary>
            <param name="mediaDescription">The media description.</param>
            <param name="isOffer">if set to <c>true</c> [is offer].</param>
            <param name="isLocalDescription">if set to <c>true</c> [is local description].</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.MediaDescriptionManager">
            <summary>
            Gets MediaDescriptionManager.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.CreateSdpMediaDescription(FM.LiveSwitch.Sdp.Message,System.Boolean,System.Boolean,System.Boolean,FM.LiveSwitch.BundlePolicy)">
            <summary>
            Generates SDP media description for data stream.
            </summary>
            <param name="sdpMessage">The SDP message.</param>
            <param name="supportSdes">if set to <c>true</c> Sdp message will contain SDES crypto attibutes.</param>
            <param name="isOffer">if set to <c>true</c> Sdp media description is a part of an Sdp offer.</param>
            <param name="isRenegotiation">Indicates whether media description generation is a part of the SDP renegotiation attempt.</param>
            <param name="bundlePolicy">Bundle policy on this connection.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.RegisterPayloadTypes">
            <summary>
            Registers the payload types for the first time using the union of output formats and input formats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.AddLocalFormat(`13)">
            <summary>
            Adds a local format, overriding its payload type with any prior registered
            remote format payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessCachedSettings">
            <summary>
            Processes cached settings.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessSdpMediaDescription(FM.LiveSwitch.Sdp.Message,FM.LiveSwitch.Sdp.MediaDescription,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Processes an SDP description.
            </summary>
            <param name="sdpMessage">The SDP message.</param>
            <param name="sdpMediaDescription">The SDP media description.</param>
            <param name="index">The SDP media description index.</param>
            <param name="isLocalDescription">Indicates whether description is local or not.</param>
            <param name="isOffer">Indicates whether this description is an offer.</param>
            <param name="isRenegotiation">Flag indicating whether SDP renegotiation is currently in progress.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.CreateFormat(FM.LiveSwitch.Sdp.Rtp.MapAttribute,FM.LiveSwitch.Sdp.FormatParametersAttribute)">
            <summary>
            Creates a format.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="formatParametersAttribute">The format parameters attribute.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.CreateFormat(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates a format.
            </summary>
            <param name="name">The format name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="parameters">The parameters.</param>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.GetLocalSynchronizationSource(System.String)">
            <summary>
            Gets the local synchronization source for a given local RTP stream identifier.
            </summary>
            <param name="rtpStreamId">The RTP stream identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.GetLocalRtpStreamId(System.Int64)">
            <summary>
            Gets the local RTP stream identifier for a given local synchronization source.
            </summary>
            <param name="localSynchronizationSource">The local synchronization source.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.GetRemoteSynchronizationSource(System.String)">
            <summary>
            Gets the remote synchronization source for a given remote RTP stream identifier.
            </summary>
            <param name="rtpStreamId">The RTP stream identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.GetRemoteRtpStreamId(System.Int64)">
            <summary>
            Gets the remote RTP stream identifier for a given remote synchronization source.
            </summary>
            <param name="remoteSynchronizationSource">The remote synchronization source.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.PipelineJsonFromInput">
            <summary>
            Gets the pipeline JSON from an input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.PipelineJsonFromOutput">
            <summary>
            Gets the pipeline JSON from an output.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.PipelineJson">
            <summary>
            Gets the pipeline JSON with this as the central point.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InputMuted">
            <summary>
            Gets or sets whether the input track is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OutputMuted">
            <summary>
            Gets or sets whether the output track is muted.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.GetInputSourceMuted(`0[])">
            <summary>
            Gets whether an input source is muted.
            </summary>
            <param name="inputs">The inputs.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.SetInputSourceMuted(`0[],System.Boolean)">
            <summary>
            Sets whether an input source is muted.
            </summary>
            <param name="inputs">The inputs.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.GetOutputSinkMuted(`2[])">
            <summary>
            Gets whether an output sink is muted.
            </summary>
            <param name="outputs">The outputs.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.SetOutputSinkMuted(`2[],System.Boolean)">
            <summary>
            Sets whether an output sink is muted.
            </summary>
            <param name="outputs">The outputs.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.GetInputSourceMuted(`0)">
            <summary>
            Gets whether an input source is muted.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.SetInputSourceMuted(`0,System.Boolean)">
            <summary>
            Sets whether an input source is muted.
            </summary>
            <param name="input">The input.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.GetOutputSinkMuted(`2)">
            <summary>
            Gets whether an output source is muted.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.SetOutputSinkMuted(`2,System.Boolean)">
            <summary>
            Sets whether an output source is muted.
            </summary>
            <param name="output">The output.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.IncrementCcmSequenceNumber">
            <summary>
            Increments the FIR sequence number.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.GetCcmSequenceNumber">
            <summary>
            Gets the FIR sequence number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessTrackStatsFromInput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes stats from an input.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessTrackStatsFromOutput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes stats from an output.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessSinkStatsFromInput(FM.LiveSwitch.MediaSinkStats)">
            <summary>
            Processes sink stats from an input.
            </summary>
            <param name="sinkStats">The sink stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessSourceStatsFromOutput(FM.LiveSwitch.MediaSourceStats)">
            <summary>
            Processes source stats from an output.
            </summary>
            <param name="sourceStats">The source stats.</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OutputSynchronizationSource">
            <summary>
            Gets -1 to satisfy interface requirements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InputSynchronizationSource">
            <summary>
            Gets or sets -1 to satisfy interface requirements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OutputSynchronizationSources">
            <summary>
            Gets the output synchronization sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InputSynchronizationSources">
            <summary>
            Gets the input synchronization sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OutputRtpStreamId">
            <summary>
            Gets null to satisfy interface requirements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InputRtpStreamId">
            <summary>
            Gets or sets null to satisfy interface requirements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InputDeactivated">
            <summary>
            Gets whether input is deactivated.
            Input is deactivated if the stream direction is unset, inactive, or recvonly.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OutputDeactivated">
            <summary>
            Gets whether output is deactivated.
            Output is deactivated if the stream direction is unset, inactive, or sendonly.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OverConstrained">
            <summary>
            Gets whether this stream is over-constrained.
            A stream is over-constrained if either it's
            input or output is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OverConstrainedInput">
            <summary>
            Gets whether the input is over-contrained.
            An input is over-constrained if it's
            input bitrate is over-contrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OverConstrainedOutput">
            <summary>
            Gets whether the output is over-constrained.
            An output is over-constrained if it's
            output bitrate is over-contrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.MaxReceiveBitrate">
            <summary>
            Gets or sets the maximum desired receive bitrate, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OverConstrainedBitrate">
            <summary>
            Gets whether the stream bitrate is over-constrained.
            A stream bitrate is over-constrained if the input
            bitrate or output bitrate is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OverConstrainedInputBitrate">
            <summary>
            Gets whether the minimum allowed input bitrate exceeds the maximum allowed input bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OverConstrainedOutputBitrate">
            <summary>
            Gets whether the minimum allowed output bitrate exceeds the maximum allowed output bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.MinInputBitrate">
            <summary>
            Gets the minimum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.MaxInputBitrate">
            <summary>
            Gets the maximum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.MinOutputBitrate">
            <summary>
            Gets the minimum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.MaxOutputBitrate">
            <summary>
            Gets the maximum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.TargetOutputBitrate">
            <summary>
            Gets the target output bitrate, in kbps.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.RemoteEncoding">
            <summary>
            Gets or sets the remote encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.MinInputEncoding">
            <summary>
            Gets the min input encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.MaxInputEncoding">
            <summary>
            Gets the max input encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.MinOutputEncoding">
            <summary>
            Gets the min output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.MaxOutputEncoding">
            <summary>
            Gets the max output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.TargetOutputEncoding">
            <summary>
            Gets the target output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OutputMinInputEncodings">
            <summary>
            Gets the outputs' minimum allowed input encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OutputMaxInputEncodings">
            <summary>
            Gets the outputs' maximum allowed input encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InputMinOutputEncodings">
            <summary>
            Gets the inputs' minimum allowed output encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InputMaxOutputEncodings">
            <summary>
            Gets the inputs' maximum allowed output encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.InputTargetOutputEncodings">
            <summary>
            Gets the inputs' target output encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.SystemDelay">
            <summary>
            Gets or sets the system delay in ticks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.GetPipelineSystemDelay(`13)">
            <summary>
            Gets the total pipeline system delay in ticks for a given output format.
            </summary>
            <param name="outputFormat">The output format.</param>
            <returns>The total pipeline system delay in ticks.</returns>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.OutputSynchronizable">
            <summary>
            Gets whether output is synchronizable.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.TransportInfo">
            <summary>
            Gets transport information.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.ControlTransportInfo">
            <summary>
            Gets control transport information.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.AbsoluteSenderTimePolicy">
            <summary>
            Gets or sets a value of the policy indicating support for the RTP Header Extension for Absolute Sender Time. See https://webrtc.org/experiments/rtp-hdrext/abs-send-time/ .
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.SdesMidPolicy">
            <summary>
            Gets or sets a value of the policy indicating support for SDES MID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.SdesRtpStreamIdPolicy">
            <summary>
            Gets or sets a value of the policy indicating support for SDES RTP Stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.SdesRepairedRtpStreamIdPolicy">
            <summary>
            Gets or sets a value of the policy indicating support for SDES Repaired Stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.AbsoluteSenderTimeLocalDirection">
            <summary>
            Gets the current local direction for the RTP Header Extension for Absolute Sender Time. See https://webrtc.org/experiments/rtp-hdrext/abs-send-time/ .
            If the remote capability has not yet been received, only local requirements are taken into consideration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.AbsoluteSenderTimeRemoteDirection">
            <summary>
            Gets the current remote direction for the RTP Header Extension for Absolute Sender Time. See https://webrtc.org/experiments/rtp-hdrext/abs-send-time/ .
            If the remote capability has not yet been receieved, only local requirements are taken into consideration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.AbsoluteSenderTimeDirection">
            <summary>
            Gets the current direction for the RTP Header Extension for Absolute Sender Time. See https://webrtc.org/experiments/rtp-hdrext/abs-send-time/ .
            If the remote capability has not yet been receieved, only local requirements are taken into consideration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStream`15.DefaultLocalSynchronizationSource">
            <summary>
            Gets default local synchronization source (SSRC) associated with a local sender.
            If the local SDP offer or answer has not yet been set on the Connection, this will return -1.
            Please wait till the local description has been set on the Connection before accessing this value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.Destroy">
            <summary>
            Destroys this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.PopulateInfo(FM.LiveSwitch.MediaStreamInfo)">
            <summary>
            Populates the media stream info.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.ProcessBundledStateChanged(System.Boolean)">
            <summary>
            Processes bundled state change of this stream.
            </summary>
            <param name="bundled"></param>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnDiscardBitrateRequest">
            <summary>
            Raised when a bitrate request is discarded due to policy
            restrictions or lack of support by the remote endpoint.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaStream`15.OnDiscardBitrateNotification">
            <summary>
            Raised when a bitrate notification is discarded due to policy
            restrictions or lack of support by the remote endpoint.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.RaiseBitrateRequest(FM.LiveSwitch.BitrateRequest)">
            <summary>
            Raises a bitrate request to the local track.
            </summary>
            <param name="bitrateRequest">The bitrate request.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStream`15.RaiseBitrateNotification(FM.LiveSwitch.BitrateNotification)">
            <summary>
            Raises a bitrate notification to the remote track.
            </summary>
            <param name="bitrateNotification">The bitrate notification.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaStreamBase">
            <summary>
            Media stream base properties/methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamBase.ExtractCanonicalName(FM.LiveSwitch.Sdp.MediaDescription,System.Boolean)">
            <summary>
            Extracts Canonical Name from SDP and sets it to the appropreate Stream property.
            </summary>
            <param name="mediaDescription">Media description to process.</param>
            <param name="isLocalDescription">Flag indicating if this description is local.</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.LocalCanonicalName">
            <summary>
            Gets the local canonical name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.RemoteCanonicalName">
            <summary>
            Gets the remote canonical name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.LocalBandwidth">
            <summary>
            Gets or sets the local bandwidth, in kbps.
            This value is signalled in the local session description sent
            to the remote endpoint so it can limit its outbound media bitrate.
            Use <see cref="P:FM.LiveSwitch.MediaStreamBase.MaxReceiveBitrate"/> to control inbound media
            bitrate once the session has been negotiated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.RemoteBandwidth">
            <summary>
            Gets or sets the remote bandwidth, in kbps.
            This value is signalled in the remote session description received
            from the remote endpoint so we can limit our outbound media bitrate.
            Use <see cref="P:FM.LiveSwitch.MediaStreamBase.MaxSendBitrate"/> to control outbound media
            bitrate once the session has been negotiated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.MaxSendBitrate">
            <summary>
            Gets or sets the maximum desired send bitrate, in kbps.
            This value must be less than or equal to <see cref="P:FM.LiveSwitch.MediaStreamBase.RemoteBandwidth"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.MaxReceiveBitrate">
            <summary>
            Gets or sets the maximum desired receive bitrate, in kbps.
            This value must be less than or equal to <see cref="P:FM.LiveSwitch.MediaStreamBase.LocalBandwidth"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.Muted">
            <summary>
            Gets or sets whether the input track is muted.
            Alias for <see cref="P:FM.LiveSwitch.MediaStreamBase.InputMuted"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.InputMuted">
            <summary>
            Gets or sets whether the input track is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.OutputMuted">
            <summary>
            Gets or sets whether the output track is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.RemoteEncoding">
            <summary>
            Gets or sets the remote encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.ControlTransportInfo">
            <summary>
            Gets control transport info.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.PendingLocalDirection">
            <summary>
            Gets or sets the pending local direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.Direction">
            <summary>
            Gets the direction.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamBase.ChangeDirection(FM.LiveSwitch.StreamDirection)">
            <summary>
            Records the pending direction of this stream. The LocalDirection of this stream will be updated when the connection renegotiation commences.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.RenegotiationPending">
            <summary>
            Gets or sets whether there exist changes that are pending SDP renegotiation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.LocalDirection">
            <summary>
            Gets or sets current direction indicated by the local description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.RemoteDirection">
            <summary>
            Gets or sets current direction indicated by the remote description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.CanonicalName">
            <summary>
            Gets the canonical name.
            Getting the value of MediaStream.CanonicalName is deprecated. Get the value of MediaStream.LocalCanonicalName instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.SimulcastMode">
            <summary>
            Gets or sets the simulcast mode.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamBase.#ctor(FM.LiveSwitch.StreamType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaStreamBase" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.PreferredCodecs">
            <summary>
            Gets or sets any preferred codecs, in order of preference.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamBase.GetCodecDisabled(System.String)">
            <summary>
            Gets whether a codec is disabled.
            </summary>
            <param name="name">The codec name.</param>
            <returns>Whether the codec is disabled.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamBase.SetCodecDisabled(System.String,System.Boolean)">
            <summary>
            Sets whether a codec is disabled.
            </summary>
            <param name="name">The codec name.</param>
            <param name="disabled">Whether to disable the codec.</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamBase.Info">
            <summary>
            Gets the media stream info.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamBase.PopulateInfo(FM.LiveSwitch.MediaStreamInfo)">
            <summary>
            Populates the media stream info.
            </summary>
            <param name="info"></param>
        </member>
        <member name="E:FM.LiveSwitch.MediaStreamBase.OnLocalEncodingDisabled">
            <summary>
            Raised when a local encoding is disabled.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaStreamBase.OnLocalEncodingEnabled">
            <summary>
            Raised when a local encoding is enabled.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamBase.RaiseLocalEncodingDisabled(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Raises the OnLocalEncodingDisabled event.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamBase.RaiseLocalEncodingEnabled(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Raises the OnLocalEncodingEnabled event.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaTrackBase">
            <summary>
            Media track base properties/methods.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaTrackBase.OnStarted">
            <summary>
            Raised when the track is started.
            Only applicable for local media tracks.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaTrackBase.OnStopped">
            <summary>
            Raised when the track is stopped.
            Only applicable for local media tracks.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaTrackBase.OnDestroyed">
            <summary>
            Raised when the track is destroyed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackBase.GetSourceInputs">
            <summary>
            Gets the available source inputs.
            </summary>
            <returns>
            A future with an array of source inputs.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackBase.GetSinkOutputs">
            <summary>
            Gets the available sink outputs.
            </summary>
            <returns>
            A future with an array of sink outputs.
            </returns>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackBase.SourceInput">
            <summary>
            Gets or sets the current source input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackBase.SinkOutput">
            <summary>
            Gets or sets the current sink output.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackBase.ChangeSourceInput(FM.LiveSwitch.SourceInput)">
            <summary>
            Changes the source input while the media track is active.
            </summary>
            <param name="sourceInput">The source input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackBase.ChangeSinkOutput(FM.LiveSwitch.SinkOutput)">
            <summary>
            Changes the sink output while the media track is active.
            </summary>
            <param name="sinkOutput">The sink output.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackBase.Muted">
            <summary>
            Gets or sets a value indicating whether this
            track is muted.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackBase.Destroy">
            <summary>
            Destroys this media track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTransport`5.ConnectionId">
            <summary>
            Gets or sets the Connection ID, to which this Media Transport belongs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTransport`5.MediaStreamType">
            <summary>
            Gets or sets the type of the media stream serviced by this media transport.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTransport`5.StreamId">
            <summary>
            Gets or sets the stream ID serviced by this media transport.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaTransport`5.OnStateChange">
            <summary>
            Raised when the state changes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaTransport`5.OnReceiveFrame">
            <summary>
            Raised when a frame is received.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaTransport`5.OnReceiveControlFrames">
            <summary>
            Raised when control frames are received.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaTransport`5.OnReceiveControlFrameResponses">
            <summary>
            Raised when control frame responses are received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTransport`5.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTransport`5.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTransport`5.Start">
            <summary>
            Starts this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaTransport`5.DoStart">
            <summary>
            Starts this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaTransport`5.Stop">
            <summary>
            Stops this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaTransport`5.DoStop">
            <summary>
            Stops this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaTransport`5.SendFrame(`0)">
            <summary>
            Sends a frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTransport`5.DoSendFrame(`0)">
            <summary>
            Sends a frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTransport`5.ReceiveFrame(`0)">
            <summary>
            Receives a frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTransport`5.SendControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Sends control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTransport`5.DoSendControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Sends control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTransport`5.ReceiveControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Receives control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTransport`5.SendControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Sends the control frame responses.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTransport`5.DoSendControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Sends the control frame responses.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTransport`5.RaiseControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Raises the receive control frame responses.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTransport`5.HasRemoteSynchronizationSource(System.Int64)">
            <summary>
            Determines whether this transport has this remote synchronization source.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
        </member>
        <member name="F:FM.LiveSwitch.MediaTransportState.New">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Transport"/> has been created and has not been started yet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaTransportState.Started">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Transport"/> has been started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaTransportState.Starting">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Transport"/> has been started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaTransportState.Stopped">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Transport"/> has been stopped.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaTransportState.Stopping">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Transport"/> is stopping.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MediaTransportState.Failed">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Transport"/> has failed.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MultiplexPolicy">
            <summary>
            The local policy for RTP/RTCP multiplex negotation.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MultiplexPolicy.Negotiated">
            <summary>
            Indicates that multiplexing will be used only if the remote end supports it.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MultiplexPolicy.Required">
            <summary>
            Indicates that multiplexing will be required. The connection will fail if the remote end does not support multiplexing.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.NackConfig">
            <summary>
            A NACK Config.
            
            NackConfig is for enabling/configuring negative acknowledgement. 
            Negative acknowledgements are used by media receivers to request that a media sender retransmit a packet. 
            It is highly effective for video in low-latency networks since video is stateful and the cost of losing a packet is high. 
            It is far less effective for audio, where any delay is especially harmful and the cost of losing a packet is not significant. Because of this, 
            it is enabled by default for video and disabled by default for audio. You can modify the buffer size using NackConfig, but generally, 
            it should be left with default values. The option to set these values will most likely be removed in a future release as our adaptive algorithms improve.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NackConfig.DisableBuffering">
            <summary>
            Gets or sets a value indicating whether to disable support for Generic NACKs.
            </summary>
            <value>
              <c>true</c> if disable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.NackConfig.SendBufferLength">
            <summary>
            Gets or sets the length of the send buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NackConfig.ReceiveBufferLength">
            <summary>
            Gets or sets the number of packets to hold in the generic
            NACK buffer awaiting an earlier packet before releasing them.
            Defaults to 128.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NackConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.NackConfig"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NackConfig.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.NackConfig"/> class.
            </summary>
            <param name="sendBufferLength">Length of the send buffer.</param>
            <param name="receiveBufferLength">Length of the receive buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.NackPolicy">
            <summary>
            The local policy for the use of generic RTP Negative Acknowledgements (NACK).
            Cf. https://tools.ietf.org/html/draft-ietf-rtcweb-rtp-usage-26
            
            NackPolicy is for enabling/configuring negative acknowledgement. 
            Negative acknowledgements are used by media receivers to request that a media sender retransmit a packet. 
            It is highly effective for video in low-latency networks since video is stateful and the cost of losing a packet is high. 
            It is far less effective for audio, where any delay is especially harmful and the cost of losing a packet is not significant. Because of this, 
            it is enabled by default for video and disabled by default for audio. You can modify the buffer size using NackConfig, but generally, 
            it should be left with default values. The option to set these values will most likely be removed in a future release as our adaptive algorithms improve.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.NackPolicy.Disabled">
            <summary>
            The usage of generic NACKs is disabled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.NackPolicy.Negotiated">
            <summary>
            The usage of generic NACKs is negotiated with the peer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Nack.Buffer`4">
            <summary>
            A NACK buffer.
            </summary>
            <typeparam name="TFrame">The type of the frame.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.Nack.Buffer`4.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Nack.Buffer`4.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Nack.Buffer`4.RetransmissionTimeout">
            <summary>
            Gets or sets the retransmission timeout (in ms).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Nack.Buffer`4.#ctor(System.String,System.Int32,FM.LiveSwitch.Function1{System.Int32,`0[]})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Nack.Buffer`4" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="size">The size.</param>
            <param name="createArrayCallback">The create array callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.Nack.Buffer`4.Write(`0)">
            <summary>
            Writes the specified frame.
            A return value of -2 indicates that the frame is stale.
            A return value of -1 indicates that the frame is a duplicate.
            A return value of 0 indicates that the frame was written.
            </summary>
            <param name="frame">The frame.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Nack.Buffer`4.Read(System.Int64,System.Int32,System.Int64,System.Int64,FM.LiveSwitch.Action1{`0},FM.LiveSwitch.Action1{FM.LiveSwitch.GenericNack})">
            <summary>
            Reads the specified sequence number. If the sequence number cannot be found, and it does not have
            the highest sequenceNumber written to this Buffer, a GenericNackControlFrame is set.
            </summary>
            <param name="sequenceNumber">The sequence number.</param>
            <param name="rtpSequenceNumber">The RTP sequence number.</param>
            <param name="lastWrittenTimestamp">The last written timestamp.</param>
            <param name="systemTimestamp">The system timestamp.</param>
            <param name="frameCallback">The frame callback.</param>
            <param name="nackCallback">The nack callback.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Ogg.AudioRecorder">
            <summary>
            An Ogg audio recorder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.AudioRecorder.Vendor">
            <summary>
            Gets or sets the file vendor.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.AudioRecorder.Title">
            <summary>
            Gets or sets the file title.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.AudioRecorder.Artist">
            <summary>
            Gets or sets the file artist.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ogg.AudioRecorder.#ctor(System.String,FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Ogg.AudioRecorder" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="inputFormat">The input format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ogg.AudioRecorder.DoWrite(FM.LiveSwitch.AudioBuffer,System.Int64)">
            <summary>
            Write an encoded video frame.
            </summary>
            <param name="buffer">The encoded buffer.</param>
            <param name="presentationTimestamp">The presentation timestamp.</param>
            <returns>
              <c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Ogg.AudioRecorder.DoWriteHeader">
            <summary>
            Writes the file header.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ogg.AudioRecorder.DoUpdateHeader">
            <summary>
            Updates the file header.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ogg.AudioSink">
            <summary>
            An Ogg-file-based audio sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.AudioSink.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.AudioSink.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Ogg.AudioSink.OnFileOpen">
            <summary>
            Raised when a new file is opened in response to
            this sink being activated and processing a frame.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Ogg.AudioSink.OnFileClose">
            <summary>
            Raised when an existing file is close in response to
            this sink being deactivated or destroyed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.AudioSink.OpenFilePath">
            <summary>
            Gets the currently open file path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.AudioSink.LastFilePath">
            <summary>
            Gets the last known file path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.AudioSink.BaseTimestamp">
            <summary>
            Gets the base timestamp - the timestamp of the first frame
            processed by the recorder after being activated. This timestamp
            will change each time a new file is created in response to the
            sink being activated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.AudioSink.LastTimestamp">
            <summary>
            Gets the last timestamp processed by the recorder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ogg.AudioSink.#ctor(System.String,FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Ogg.AudioSink" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ogg.AudioSink.#ctor(System.String,FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Ogg.AudioSink" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ogg.AudioSink.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Ogg.AudioSink.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ogg.Page">
            <summary>
            An Ogg page.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ogg.Page.MaxSegmentCount">
            <summary>
            Maximum number of segments in an <see cref="T:FM.LiveSwitch.Ogg.Page"/>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Ogg.Page.MaxSegmentLength">
            <summary>
            Maximum length of an <see cref="T:FM.LiveSwitch.Ogg.Page"/> segment.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.Page.ContinuedPacket">
            <summary>
            Gets or sets whether this page is a continued (not fresh) packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.Page.BeginningOfStream">
            <summary>
            Gets or sets whether this page is the first page of the bitstream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.Page.EndOfStream">
            <summary>
            Gets or sets whether this page is the last page of the bitstream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.Page.AbsoluteGranulePosition">
            <summary>
            Gets or sets the absolute granule position.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.Page.StreamSerialNumber">
            <summary>
            Gets or sets the stream serial number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.Page.SequenceNumber">
            <summary>
            Gets or sets the page sequence number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.Page.Payload">
            <summary>
            Gets or sets the data payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ogg.Page.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Ogg.Page"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ogg.Page.GetBytes">
            <summary>
            Gets the page as a byte array.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Ogg.PageHeaderType">
            <summary>
            Header type flags for an <see cref="T:FM.LiveSwitch.Ogg.Page"/>. Can be set in the 5th byte of each page.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.PageHeaderType.None">
            <summary>
            Gets or sets a value indicating an empty value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.PageHeaderType.IsContinued">
            <summary>
            Gets or sets a value indicating whether or not the page is a continuation of a previous page.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.PageHeaderType.FirstPage">
            <summary>
            Gets or sets a value indicating whether or not this is the first page in the bitstream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.PageHeaderType.LastPage">
            <summary>
            Gets or sets a value indicating whether or not this is the last page in the bitstream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Ogg.PageHeaderType.All">
            <summary>
            Gets or sets a value indicating that all values are set.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Opus.Depacketizer">
            <summary>
            An Opus depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Opus.Depacketizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Opus.Depacketizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Opus.Depacketizer" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Opus.Depacketizer.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Opus.Depacketizer" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Opus.Depacketizer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Opus.Depacketizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:FM.LiveSwitch.Opus.Format">
            <summary>
            An Opus format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Opus.Format.DefaultClockRate">
            <summary>
            Gets the default clock rate (48000).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Opus.Format.DefaultChannelCount">
            <summary>
            Gets the default clock rate (2).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Opus.Format.DefaultConfig">
            <summary>
            Gets the default configuration (48000/2).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Opus.Format.MinBitrate">
            <summary>
            Gets the minimum bitrate supported by this format, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Opus.Format.MaxBitrate">
            <summary>
            Gets the maximum bitrate supported by this format, in kbps.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Opus.Format.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Opus.Format" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Opus.Format.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Opus.Format" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Opus.Format.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Opus.Format"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="M:FM.LiveSwitch.Opus.Format.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Opus.Packetizer">
            <summary>
            An Opus packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Opus.Packetizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Opus.Packetizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Opus.Packetizer" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Opus.Packetizer.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Opus.Packetizer" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Opus.Packetizer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Opus.Packetizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:FM.LiveSwitch.PayloadSpecificControlFrame">
            <summary>
            An RTCP Feedback PS packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PayloadSpecificControlFrame.RegisteredPayloadType">
            <summary>
            Gets the payload-specific payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PayloadSpecificControlFrame.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.PayloadSpecificControlFrame"/> class.
            </summary>
            <param name="feedbackMessageType">The feedback message type.</param>
        </member>
        <member name="M:FM.LiveSwitch.PayloadSpecificControlFrame.#ctor(System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.PayloadSpecificControlFrame"/> class.
            </summary>
            <param name="buffer">The backing data buffer.</param>
            <param name="feedbackMessageType">The feedback message type.</param>
        </member>
        <member name="M:FM.LiveSwitch.PayloadSpecificControlFrame.#ctor(System.Int32,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FeedbackControlFrame"/> class.
            </summary>
            <param name="feedbackMessageType">Type of the feedback message.</param>
            <param name="senderSynchronizationSource">The sender synchronization source.</param>
            <param name="mediaSynchronizationSource">The media synchronization source.</param>
        </member>
        <member name="M:FM.LiveSwitch.PayloadSpecificControlFrame.#ctor(System.Int32,System.Int64,System.Int64,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FeedbackControlFrame"/> class.
            </summary>
            <param name="feedbackMessageType">Type of the feedback message.</param>
            <param name="senderSynchronizationSource">The sender synchronization source.</param>
            <param name="mediaSynchronizationSource">The media synchronization source.</param>
            <param name="feedbackControlInformation">The feedback control information.</param>
        </member>
        <member name="T:FM.LiveSwitch.Pcma.Decoder">
            <summary>
            A PCMA (G.711a) decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pcma.Decoder.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Decoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Decoder" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Decoder.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Decoder" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Decoder.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Decoder" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Decoder.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Decoder.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Pcma.Depacketizer">
            <summary>
            A PCMA (G.711a) depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pcma.Depacketizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Depacketizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Depacketizer" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Depacketizer.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Depacketizer" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Depacketizer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Depacketizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:FM.LiveSwitch.Pcma.Encoder">
            <summary>
            A PCMA (G.711a) encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pcma.Encoder.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Encoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Encoder" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Encoder.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Encoder" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Encoder.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Encoder" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Encoder.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Encoder.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Pcma.Format">
            <summary>
            A PCMA (G.711a) format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Format.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Format" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Format.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Format" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Format.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Format"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Format.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Pcma.Packetizer">
            <summary>
            A PCMA (G.711a) packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pcma.Packetizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Packetizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Packetizer" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Packetizer.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Packetizer" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcma.Packetizer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcma.Packetizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:FM.LiveSwitch.Pcmu.Decoder">
            <summary>
            A PCMU (G.711u) decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pcmu.Decoder.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Decoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Decoder" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Decoder.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Decoder" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Decoder.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Decoder" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Decoder.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Decoder.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Pcmu.Depacketizer">
            <summary>
            A PCMA (G.711u) depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pcmu.Depacketizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Depacketizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Depacketizer" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Depacketizer.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Depacketizer" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Depacketizer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Depacketizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:FM.LiveSwitch.Pcmu.Encoder">
            <summary>
            A PCMU (G.711u) encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pcmu.Encoder.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Encoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Encoder" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Encoder.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Encoder" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Encoder.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Encoder" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Encoder.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Encoder.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Pcmu.Format">
            <summary>
            A PCMU (G.711u) format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Format.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Format" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Format.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Format" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Format.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Format"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Format.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Pcmu.Packetizer">
            <summary>
            A PCMU (G.711u) packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pcmu.Packetizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Packetizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Packetizer" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Packetizer.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Packetizer" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcmu.Packetizer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcmu.Packetizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:FM.LiveSwitch.Pcm.Depacketizer">
            <summary>
            A PCM depacketizer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcm.Depacketizer.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcm.Depacketizer" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcm.Depacketizer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcm.Depacketizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:FM.LiveSwitch.Pcm.Format">
            <summary>
            A PCM format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcm.Format.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcm.Format" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcm.Format.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcm.Format"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="T:FM.LiveSwitch.Pcm.Packetizer">
            <summary>
            A PCM packetizer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pcm.Packetizer.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcm.Packetizer" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pcm.Packetizer.#ctor(FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pcm.Packetizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:FM.LiveSwitch.PliControlFrame">
            <summary>
            An RTCP Feedback PS-PLI packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PliControlFrame.RegisteredFeedbackMessageType">
            <summary>
            Gets the type of the registered feedback message.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PliControlFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.PliControlFrame"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PliControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.PliControlFrame"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.RedFecConfig">
            <summary>
            RED Forward error correction (FEC) config.
            RedFecConfig is for enabling/configuring forward error correction. 
            Forward error correction adds redundancy to the media stream (increased bandwidth) 
            with the intention that media receivers can recover from packet loss without requiring the media server to retransmit anything. 
            It is a last resort for high latency networks. 
            It is disabled by default and not currently supported as it does not have sufficient test coverage.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RedFecConfig.ActivationThreshold">
            <summary>
            Gets or sets the FEC activation threshold. FEC is activated when the RTCP receiver reports indicate that more than this threshold value of packets were lost (but only if supported by the remote peer); 
            when this value diminishes blow the threshold, FEC is deactivated.
            The value is denoted in percentage points (between 0 and 100). Affects encoded data only.
            Defaults to 5.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RedFecConfig.Disabled">
            <summary>
            Gets or sets a value indicating whether RED Forward Error Correction (FEC) is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RedFecConfig.Bursty">
            <summary>
            Gets or sets a value indicating whether to
            use algorithms tuned for bursty packet loss.
            Bursty packet loss is more common on wireless
            networks.
            Defaults to false on desktop platforms and true
            on mobile platforms.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RedFecConfig.KeyFrameParameters">
            <summary>
            Gets or sets the parameters used to protect key-frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RedFecConfig.DeltaParameters">
            <summary>
            Gets or sets the parameters used to protect delta frames.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RedFecConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RedFecConfig"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.RedFecPolicy">
            <summary>
            The local policy for the RED Forward Error Correction support.
            Cf. https://tools.ietf.org/html/draft-ietf-rtcweb-fec-04
            
            RedFecPolicy is for enabling/configuring forward error correction. 
            Forward error correction adds redundancy to the media stream (increased bandwidth) 
            with the intention that media receivers can recover from packet loss without requiring the media server to retransmit anything. 
            It is a last resort for high latency networks. 
            It is disabled by default and not currently supported as it does not have sufficient test coverage.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.RedFecPolicy.Disabled">
            <summary>
            The usage of RED FEC is disabled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.RedFecPolicy.Negotiated">
            <summary>
            The usage of RED FEC is negotiated with the peer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.RembControlFrame">
            <summary>
            An RTCP receiver estimated maximum bitrate (REMB) packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RembControlFrame.RegisteredFeedbackMessageType">
            <summary>
            Gets the type of the receiver estimated maximum bitrate message.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RembControlFrame.#ctor(System.Int64,System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RembControlFrame"/> class.
            </summary>
            <param name="bitrate">Bitrate in bps.</param>
            <param name="ssrcEntries">SSRC entries, for which this feedback is applicable.</param>
        </member>
        <member name="M:FM.LiveSwitch.RembControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RembControlFrame"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:FM.LiveSwitch.RembControlFrame.Bitrate">
            <summary>
            Gets the bitrate calculated in bps obtained from BitrateExponent and BitrateMantissa of this packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RembControlFrame.BitrateExponent">
            <summary>
            Gets or sets the bitrate exponent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RembControlFrame.BitrateMantissa">
            <summary>
            Gets or sets the bitrate mantissa, in bits per second (bps).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RembControlFrame.SsrcEntries">
            <summary>
            Gets or sets the SSRC entries that this message applies to.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RembControlFrame.ToString">
            <summary>
            Returns a string representation of this REMB Control Frame
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.RembPolicy">
            <summary>
            The local policy for the use of Receiver Estimated Maximum Bitrates (goog-remb).
            Cf. https://tools.ietf.org/html/draft-alvestrand-rmcat-remb-03
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.RembPolicy.Disabled">
            <summary>
            The usage of goog-rembs is disabled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.RembPolicy.Negotiated">
            <summary>
            The usage of goog-rembs is negotiated with the peer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.RemoteMedia">
            <summary>
            A collection of remote audio/video tracks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RemoteMedia.GetAudioSinkOutputs">
            <summary>
            Gets the available audio sink outputs
            of the first audio track.
            </summary>
            <returns>
            A future with an array of audio sink outputs.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RemoteMedia.GetVideoSinkOutputs">
            <summary>
            Gets the available video sink outputs
            of the first video track.
            </summary>
            <returns>
            A future with an array of video sink outputs.
            </returns>
        </member>
        <member name="P:FM.LiveSwitch.RemoteMedia.AudioSinkOutput">
            <summary>
            Gets or sets the current audio sink output
            of the first audio track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RemoteMedia.VideoSinkOutput">
            <summary>
            Gets or sets the current video sink output
            of the first video track.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RemoteMedia.ChangeAudioSinkOutput(FM.LiveSwitch.SinkOutput)">
            <summary>
            Changes the audio sink output of the first
            audio track while the media is active.
            </summary>
            <param name="audioSinkOutput">The audio sink output.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.RemoteMedia.ChangeVideoSinkOutput(FM.LiveSwitch.SinkOutput)">
            <summary>
            Changes the video sink output of the first
            video track while the media is active.
            </summary>
            <param name="videoSinkOutput">The video sink output.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.RemoteMedia.AudioSink">
            <summary>
            Gets the first audio sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RemoteMedia.AudioSinks">
            <summary>
            Gets the audio sinks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RemoteMedia.VideoSink">
            <summary>
            Gets the first video sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RemoteMedia.VideoSinks">
            <summary>
            Gets the video sinks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RemoteMedia.MediaSinks">
            <summary>
            Gets the audio/video sinks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RemoteMedia.CreateAudioTrackCollection">
            <summary>
            Creates an audio track collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.RemoteMedia.CreateVideoTrackCollection">
            <summary>
            Creates a video track collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.RemoteMedia.ArrayFromAudioTracks(System.Collections.Generic.List{FM.LiveSwitch.AudioTrack})">
            <summary>
            Creates an array of tracks from a list of audio tracks.
            </summary>
            <param name="tracks">The list of tracks.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RemoteMedia.ArrayFromVideoTracks(System.Collections.Generic.List{FM.LiveSwitch.VideoTrack})">
            <summary>
            Creates an array of tracks from a list of video tracks.
            </summary>
            <param name="tracks">The list of tracks.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.ReportBlock">
            <summary>
            An RTCP report block.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportBlock.FixedPayloadLength">
            <summary>
            Gets or sets the fixed length of a report block.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportBlock.DataBuffer">
            <summary>
            Gets or sets the backing data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportBlock.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportBlock.FractionLost">
            <summary>
            Gets or sets the fraction lost according to RFC 1889.
            The value has a range of 0 (no packet loss) to 255 (all packets lost).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportBlock.PercentLost">
            <summary>
            Gets or sets the percentage of lost packets.
            The value has a range of 0.0 (no packet loss) to 1.0 (all packets lost).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportBlock.CumulativeNumberOfPacketsLost">
            <summary>
            Gets or sets the cumulative number of packets lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportBlock.ExtendedHighestSequenceNumberReceived">
            <summary>
            Gets or sets the extended highest sequence number received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportBlock.InterarrivalJitter">
            <summary>
            Gets or sets the interarrival jitter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportBlock.LastSenderReportTimestamp">
            <summary>
            Gets or sets the last sender report timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportBlock.DelaySinceLastSenderReport">
            <summary>
            Gets or sets the delay since last sender report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ReportBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ReportBlock"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ReportBlock.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ReportBlock"/> class.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.ReportBlock.#ctor(System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ReportBlock"/> class.
            </summary>
            <param name="fractionLost">The fraction lost.</param>
            <param name="cumulativeNumberOfPacketsLost">The cumulative number of packets lost.</param>
            <param name="extendedHighestSequenceNumberReceived">The extended highest sequence number received.</param>
            <param name="interarrivalJitter">The interarrival jitter.</param>
            <param name="lastSenderReportTimestamp">The last sender report timestamp.</param>
            <param name="delaySinceLastSenderReport">The delay since last sender report.</param>
        </member>
        <member name="M:FM.LiveSwitch.ReportBlock.#ctor(System.Int64,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ReportBlock"/> class.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="fractionLost">The fraction lost.</param>
            <param name="cumulativeNumberOfPacketsLost">The cumulative number of packets lost.</param>
            <param name="extendedHighestSequenceNumberReceived">The extended highest sequence number received.</param>
            <param name="interarrivalJitter">The interarrival jitter.</param>
            <param name="lastSenderReportTimestamp">The last sender report timestamp.</param>
            <param name="delaySinceLastSenderReport">The delay since last sender report.</param>
        </member>
        <member name="M:FM.LiveSwitch.ReportBlock.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ReportControlFrame">
            <summary>
            An RTCP Sender or Receiver Report control frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportControlFrame.FixedPayloadHeaderLength">
            <summary>
            Gets the report control frame fixed payload header length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportControlFrame.ReceptionReportCount">
            <summary>
            Gets or sets the feedback message type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportControlFrame.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportControlFrame.ReportBlock">
            <summary>
            Gets or sets the report block.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ReportControlFrame.ReportBlocks">
            <summary>
            Gets or sets the report blocks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ReportControlFrame.#ctor(System.Int32,System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ReportControlFrame"/> class.
            </summary>
            <param name="payloadType">The payload type.</param>
            <param name="reportBlockOffset">The offset of the report block.</param>
            <param name="buffer">The backing data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.ReportControlFrame.#ctor(System.Int32,FM.LiveSwitch.ReportBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ReportControlFrame" /> class.
            </summary>
            <param name="payloadType">Type of the payload.</param>
            <param name="reportBlock">The report block.</param>
        </member>
        <member name="M:FM.LiveSwitch.ReportControlFrame.#ctor(System.Int32,FM.LiveSwitch.ReportBlock[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ReportControlFrame" /> class.
            </summary>
            <param name="payloadType">Type of the payload.</param>
            <param name="reportBlocks">The report blocks.</param>
        </member>
        <member name="M:FM.LiveSwitch.ReportControlFrame.#ctor(System.Int32,FM.LiveSwitch.ReportBlock,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ReportControlFrame" /> class.
            </summary>
            <param name="payloadType">Type of the payload.</param>
            <param name="reportBlock">The report block.</param>
            <param name="reportBlockOffset">The report block offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.ReportControlFrame.#ctor(System.Int32,FM.LiveSwitch.ReportBlock[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ReportControlFrame" /> class.
            </summary>
            <param name="payloadType">Type of the payload.</param>
            <param name="reportBlocks">The report blocks.</param>
            <param name="reportBlockOffset">The report block offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.ReportControlFrame.#ctor(System.Int32,System.Int64,FM.LiveSwitch.ReportBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ReportControlFrame" /> class.
            </summary>
            <param name="payloadType">Type of the payload.</param>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="reportBlock">The report block.</param>
        </member>
        <member name="M:FM.LiveSwitch.ReportControlFrame.#ctor(System.Int32,System.Int64,FM.LiveSwitch.ReportBlock[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ReportControlFrame" /> class.
            </summary>
            <param name="payloadType">Type of the payload.</param>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="reportBlocks">The report blocks.</param>
        </member>
        <member name="M:FM.LiveSwitch.ReportControlFrame.#ctor(System.Int32,System.Int64,FM.LiveSwitch.ReportBlock,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ReportControlFrame" /> class.
            </summary>
            <param name="payloadType">Type of the payload.</param>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="reportBlock">The report block.</param>
            <param name="reportBlockOffset">The report block offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.ReportControlFrame.#ctor(System.Int32,System.Int64,FM.LiveSwitch.ReportBlock[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ReportControlFrame" /> class.
            </summary>
            <param name="payloadType">Type of the payload.</param>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="reportBlocks">The report blocks.</param>
            <param name="reportBlockOffset">The report block offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.ReportControlFrame.GetReportBlock(System.Int64)">
            <summary>
            Gets the report block.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Resampler">
            <summary>
            Utility class for resampling audio data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Resampler.Factor">
            <summary>
            Gets the resampling factor.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Resampler.DefaultLowPassOrder">
            <summary>
            Gets or sets the default low pass order.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Resampler.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Resampler"/> class.
            </summary>
            <param name="sourceClockRate">The source clock rate.</param>
            <param name="targetClockRate">The target clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Resampler.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Resampler"/> class.
            </summary>
            <param name="factor">The resampling factor.</param>
        </member>
        <member name="M:FM.LiveSwitch.Resampler.GetOutputLength(FM.LiveSwitch.DataBuffer)">
            <summary>
            Gets the length of the output given an input set.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Resampler.Resample(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            Resamples the given audio buffer.
            </summary>
            <param name="input">The input to resample.</param>
            <param name="output">The output to target.</param>
        </member>
        <member name="M:FM.LiveSwitch.Resampler.Resample(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer,System.Boolean)">
            <summary>
            Resamples the given audio buffer.
            </summary>
            <param name="input">The input to resample.</param>
            <param name="output">The output to target.</param>
            <param name="lastBatch">Whether or not this is the last batch. If <c>true</c>, input will be read to the end.</param>
            <returns><c>true</c> if the resampling operation was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Resampler.WritePcmShort(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Writes a PCM short value to a byte array.
            </summary>
            <param name="input">The short value to write.</param>
            <param name="output">The target byte array.</param>
            <param name="index">The target index in the byte array.</param>
        </member>
        <member name="M:FM.LiveSwitch.Resampler.ShortFromFloat(System.Single)">
            <summary>
            Converts a floating-point value to a short value.
            </summary>
            <param name="value">The floating-point value.</param>
            <returns>The short value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Resampler.FloatFromShort(System.Int16)">
            <summary>
            Converts a short value to a floating-point value.
            </summary>
            <param name="value">The short value.</param>
            <returns>The floating-point value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Resampler.ReadPcmShort(System.Byte[],System.Int32)">
            <summary>
            Reads a PCM short value from a byte array.
            </summary>
            <param name="input">The source byte array.</param>
            <param name="index">The source index in the byte array.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Rpsi">
            <summary>
            An RTCP reference picture selection indication.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rpsi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rpsi"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.RpsiControlFrame">
            <summary>
            An RTCP Feedback PS-RPSI Control Frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RpsiControlFrame.FeedbackMessageTypeByte">
            <summary>
            Gets the feedback message type byte.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RpsiControlFrame.ReferencePictureSelectionIndication">
            <summary>
            Gets or sets the reference picture selection indication.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RpsiControlFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RpsiControlFrame"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.RRControlFrame">
            <summary>
            A receiver report control frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RRControlFrame.RegisteredPayloadType">
            <summary>
            Gets the receiver report payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RRControlFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RRControlFrame"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RRControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RRControlFrame" /> class.
            </summary>
            <param name="buffer">An data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.RRControlFrame.#ctor(FM.LiveSwitch.ReportBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RRControlFrame" /> class.
            </summary>
            <param name="reportBlock">The report block.</param>
        </member>
        <member name="M:FM.LiveSwitch.RRControlFrame.#ctor(FM.LiveSwitch.ReportBlock[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RRControlFrame" /> class.
            </summary>
            <param name="reportBlocks">The report blocks.</param>
        </member>
        <member name="M:FM.LiveSwitch.RRControlFrame.#ctor(System.Int64,FM.LiveSwitch.ReportBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RRControlFrame" /> class.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="reportBlock">The report block.</param>
        </member>
        <member name="M:FM.LiveSwitch.RRControlFrame.#ctor(System.Int64,FM.LiveSwitch.ReportBlock[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RRControlFrame" /> class.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="reportBlocks">The report blocks.</param>
        </member>
        <member name="T:FM.LiveSwitch.RtcLocalMedia`1">
            <summary>
            A WebRTC/ORTC-compatible collection of local audio/video tracks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.AudioDisabled">
            <summary>
            Gets a value indicating whether audio is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.VideoDisabled">
            <summary>
            Gets a value indicating whether video is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.AecContext">
            <summary>
            Gets the acoustic echo cancellation context.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.AecDisabled">
            <summary>
            Gets a value indicating whether acoustic echo cancellation is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.ViewSink">
            <summary>
            Gets the video view sink, if video is not disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.View">
            <summary>
            Gets the video view, if video is not disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.AudioOutputs">
            <summary>
            Gets the audio outputs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.VideoOutputs">
            <summary>
            Gets the video outputs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.OpusDisabled">
            <summary>
            Gets whether the Opus codec is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.G722Disabled">
            <summary>
            Gets whether the G.722 codec is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.PcmuDisabled">
            <summary>
            Gets whether the PCMU codec is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.PcmaDisabled">
            <summary>
            Gets whether the PCMA codec is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp8Disabled">
            <summary>
            Gets whether the VP8 codec is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp9Disabled">
            <summary>
            Gets whether the VP9 codec is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.H264Disabled">
            <summary>
            Gets whether the H.264 codec is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.OpusConverter">
            <summary>
            Gets the first Opus converter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.OpusConverters">
            <summary>
            Gets the Opus converters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.OpusEncoder">
            <summary>
            Gets the first Opus encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.OpusEncoders">
            <summary>
            Gets the Opus encoders.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.OpusPacketizer">
            <summary>
            Gets the first Opus packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.OpusPacketizers">
            <summary>
            Gets the Opus packetizers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.G722Converter">
            <summary>
            Gets the G.722 converter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.G722Encoder">
            <summary>
            Gets the G.722 encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.G722Packetizer">
            <summary>
            Gets the G.722 packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.PcmuConverter">
            <summary>
            Gets the PCMU converter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.PcmuEncoder">
            <summary>
            Gets the PCMU encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.PcmuPacketizer">
            <summary>
            Gets the PCMU packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.PcmaConverter">
            <summary>
            Gets the PCMA converter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.PcmaEncoder">
            <summary>
            Gets the PCMA encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.PcmaPacketizer">
            <summary>
            Gets the PCMA packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp8Controller">
            <summary>
            Gets the first VP8 controller.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp8Controllers">
            <summary>
            Gets the VP8 controllers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp8Converter">
            <summary>
            Gets the first VP8 converter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp8Converters">
            <summary>
            Gets the VP8 converters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp8Encoder">
            <summary>
            Gets the first VP8 encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp8Encoders">
            <summary>
            Gets the VP8 encoders.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp8Packetizer">
            <summary>
            Gets the first VP8 packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp8Packetizers">
            <summary>
            Gets the VP8 packetizers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.H264Controller">
            <summary>
            Gets the first H.264 controller.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.H264Controllers">
            <summary>
            Gets the H.264 controllers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.H264Converter">
            <summary>
            Gets the first H.264 converter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.H264Converters">
            <summary>
            Gets the H.264 converters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.H264ConvertersArray">
            <summary>
            Gets the H.264 converters array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.H264Encoder">
            <summary>
            Gets the first H.264 encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.H264Encoders">
            <summary>
            Gets the first H.264 encoders.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.H264EncodersArray">
            <summary>
            Gets the H.264 encoders array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.H264Packetizer">
            <summary>
            Gets the first H.264 packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.H264Packetizers">
            <summary>
            Gets the first H.264 packetizers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.H264PacketizersArray">
            <summary>
            Gets the first H.264 packetizers array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.H264PacketizersArrayArray">
            <summary>
            Gets the H.264 packetizers array array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp9Controller">
            <summary>
            Gets the first VP9 controller.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp9Controllers">
            <summary>
            Gets the VP9 controllers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp9Converter">
            <summary>
            Gets the first VP9 converter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp9Converters">
            <summary>
            Gets the VP9 converters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp9Encoder">
            <summary>
            Gets the first VP9 encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp9Encoders">
            <summary>
            Gets the VP9 encoders.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp9Packetizer">
            <summary>
            Gets the first VP9 packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.Vp9Packetizers">
            <summary>
            Gets the VP9 packetizers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.ActiveAudioConverter">
            <summary>
            Gets the active audio converter.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcLocalMedia`1.OnActiveAudioConverterChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcLocalMedia`1.ActiveAudioConverter"/> changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.ActiveAudioEncoder">
            <summary>
            Gets the active audio encoder.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcLocalMedia`1.OnActiveAudioEncoderChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcLocalMedia`1.ActiveAudioEncoder"/> changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.ActiveAudioPacketizer">
            <summary>
            Gets the active audio packetizer.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcLocalMedia`1.OnActiveAudioPacketizerChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcLocalMedia`1.ActiveAudioPacketizer"/> changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.ActiveVideoController">
            <summary>
            Gets the active video controller.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcLocalMedia`1.OnActiveVideoControllerChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcLocalMedia`1.ActiveVideoController"/> changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.ActiveVideoConverter">
            <summary>
            Gets the active video converter.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcLocalMedia`1.OnActiveVideoConverterChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcLocalMedia`1.ActiveVideoConverter"/> changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.ActiveVideoEncoder">
            <summary>
            Gets the active video encoder.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcLocalMedia`1.OnActiveVideoEncoderChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcLocalMedia`1.ActiveVideoEncoder"/> changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.ActiveVideoPacketizer">
            <summary>
            Gets the active video packetizer.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcLocalMedia`1.OnActiveVideoPacketizerChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcLocalMedia`1.ActiveVideoPacketizer"/> changes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.DoGetAudioEncodings">
            <summary>
            Gets the local audio encodings.
            </summary>
            <returns>The local audio encodings.</returns>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.DoSetAudioEncodings(FM.LiveSwitch.AudioEncodingConfig[])">
            <summary>
            Sets the local audio encodings.
            </summary>
            <param name="encodings">The local audio encodings.</param>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.DoGetVideoEncodings">
            <summary>
            Gets the local video encodings.
            </summary>
            <returns>The local video encodings.</returns>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.DoSetVideoEncodings(FM.LiveSwitch.VideoEncodingConfig[])">
            <summary>
            Sets the local video encodings.
            </summary>
            <param name="encodings">The local video encodings.</param>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.VideoDegradationPreference">
            <summary>
            Gets or sets the video degradation preference when bitrate
            constraints require a compromise on frame-rate and/or resolution.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.VideoBitsPerPixel">
            <summary>
            Gets or sets the video degradation preference when bitrate
            constraints require a compromise on frame-rate and/or resolution.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcLocalMedia`1.AutomaticVideoDegradation">
            <summary>
            Gets or sets whether to automatically degrade video based on
            <see cref="P:FM.LiveSwitch.RtcLocalMedia`1.VideoBitsPerPixel"/> and <see cref="P:FM.LiveSwitch.RtcLocalMedia`1.VideoDegradationPreference"/>
            when bitrate constraints are applied to the local encoders.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RtcLocalMedia`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RtcLocalMedia`1"/> class.
            </summary>
            <param name="disableAudio">Whether to disable audio.</param>
            <param name="disableVideo">Whether to disable video.</param>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.#ctor(System.Boolean,System.Boolean,FM.LiveSwitch.AecContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RtcLocalMedia`1" /> class.
            </summary>
            <param name="disableAudio">Whether to disable audio.</param>
            <param name="disableVideo">Whether to disable video.</param>
            <param name="aecContext">The acoustic echo cancellation context.</param>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.Initialize">
            <summary>
            Initializes this instance. Must be called before being used.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.Initialize(FM.LiveSwitch.RtcAudioTrackConfig,FM.LiveSwitch.RtcVideoTrackConfig)">
            <summary>
            Initializes this instance. Must be called before being used.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateAudioSource(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates an audio source.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateVideoSource">
            <summary>
            Creates a video source.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateViewSink">
            <summary>
            Creates a view sink.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateG722Encoder(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a G.722 encoder.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateG722Packetizer(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a G.722 packetizer.
            </summary>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreatePcmuEncoder(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a PCMU encoder.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreatePcmuPacketizer(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a PCMU packetizer.
            </summary>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreatePcmaEncoder(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a PCMA encoder.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreatePcmaPacketizer(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a PCMA packetizer.
            </summary>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateOpusEncoder(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates an Opus encoder.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateOpusPacketizer(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates an Opus packetizer.
            </summary>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateVp8Encoder">
            <summary>
            Creates a VP8 encoder.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateVp8Packetizer">
            <summary>
            Creates a VP8 packetizer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateVp9Encoder">
            <summary>
            Creates a VP9 encoder.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateVp9Packetizer">
            <summary>
            Creates a VP9 packetizer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateH264Encoder">
            <summary>
            Creates an H.264 encoder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateH264Encoders">
            <summary>
            Creates H.264 encoders.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateH264Packetizer">
            <summary>
            Creates an H.264 packetizer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateH264Packetizers">
            <summary>
            Creates H.264 packetizers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateSoundConverter(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a sound converter.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateFrameRateController(FM.LiveSwitch.VideoFormat)">
            <summary>
            Creates a frame-rate controller.
            </summary>
            <param name="outputFormat">The video output format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateImageConverter(FM.LiveSwitch.VideoFormat)">
            <summary>
            Creates an image converter.
            </summary>
            <param name="outputFormat">The video output format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateAudioRecorder(FM.LiveSwitch.AudioFormat)">
            <summary>
            Creates an audio recorder.
            </summary>
            <param name="inputFormat">The input format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.CreateVideoRecorder(FM.LiveSwitch.VideoFormat)">
            <summary>
            Creates a video recorder.
            </summary>
            <param name="inputFormat">The output format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.Destroy">
            <summary>
            Destroys all media tracks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.ToggleAudioRecording">
            <summary>
            Toggles audio recording.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcLocalMedia`1.ToggleVideoRecording">
            <summary>
            Toggles video recording.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Rtcp.Packet">
            <summary>
            An RTCP packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.Packet.Buffer">
            <summary>
            Gets or sets the buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.Packet.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.Packet.Padding">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FM.LiveSwitch.Rtcp.Packet"/> is padded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.Packet.Byte1Last5Bits">
            <summary>
            Gets or sets the last 5 bits of the first byte.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.Packet.PayloadType">
            <summary>
            Gets or sets the payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.Packet.PayloadLength">
            <summary>
            Gets the length of the payload, in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.Packet.PayloadLengthWithPadding">
            <summary>
            Gets or sets the length of the payload, in bytes, with padding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.Packet.PaddingLength">
            <summary>
            Gets or sets the padding length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.Packet.Payload">
            <summary>
            Gets or sets the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.Packet.Length">
            <summary>
            Gets the total the length of this RTCP packet, in bytes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtcp.Packet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rtcp.Packet"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtcp.Packet.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rtcp.Packet"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtcp.Packet.NextLength(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Reads the length of the next attribute from a data buffer, including header and padding.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Rtcp.Packet.Parse(FM.LiveSwitch.DataBuffer)">
            <summary>
            Parses the specified buffer containing RTCP packets.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.Rtcp.ReportPacketHeader">
            <summary>
            An RTCP report packet header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.ReportPacketHeader.FixedHeaderLength">
            <summary>
            Gets the length of the fixed header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.ReportPacketHeader.Version">
            <summary>
            Gets or sets the version of the packet. Should be 2.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.ReportPacketHeader.Padding">
            <summary>
            Gets or sets if the packet has padding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.ReportPacketHeader.ReportBlockCount">
            <summary>
            Gets or sets the number of report blocks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.ReportPacketHeader.PayloadType">
            <summary>
            Gets or sets the payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.ReportPacketHeader.Length">
            <summary>
            Gets or sets the length in words following the first word.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rtcp.ReportPacketHeader.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtcp.ReportPacketHeader.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:FM.LiveSwitch.Rtcp.ReportPacketHeader"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtcp.ReportPacketHeader.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rtcp.ReportPacketHeader.WriteTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes this header to a buffer starting at the offset.
            </summary>
            <param name="buffer">The target buffer.</param>
            <param name="offset">The starting offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rtcp.ReportPacketHeader.ReadFrom(FM.LiveSwitch.DataBuffer)">
            <summary>
            Reads a header from a buffer.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.RtcRemoteMedia`1">
            <summary>
            A WebRTC/ORTC-compatible collection of remote audio/video tracks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.AudioDisabled">
            <summary>
            Gets a value indicating whether audio is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.VideoDisabled">
            <summary>
            Gets a value indicating whether video is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.AecContext">
            <summary>
            Gets the acoustic echo cancellation context.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.AecDisabled">
            <summary>
            Gets a value indicating whether acoustic echo cancellation is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.ViewSink">
            <summary>
            Gets the video view sink, if video is not disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.View">
            <summary>
            Gets the video view, if video is not disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.AudioInputs">
            <summary>
            Gets the audio inputs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.VideoInputs">
            <summary>
            Gets the video inputs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.OpusDisabled">
            <summary>
            Gets whether the Opus codec is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.G722Disabled">
            <summary>
            Gets whether the G.722 codec is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.PcmuDisabled">
            <summary>
            Gets whether the PCMU codec is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.PcmaDisabled">
            <summary>
            Gets whether the PCMA codec is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.Vp8Disabled">
            <summary>
            Gets whether the VP8 codec is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.Vp9Disabled">
            <summary>
            Gets whether the VP9 codec is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.H264Disabled">
            <summary>
            Gets whether the H.264 codec is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.OpusDepacketizer">
            <summary>
            Gets the Opus depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.OpusDecoder">
            <summary>
            Gets the Opus decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.OpusConverter">
            <summary>
            Gets the Opus converter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.OpusSynchronizer">
            <summary>
            Gets the Opus synchronizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.OpusSink">
            <summary>
            Gets the Opus sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.G722Depacketizer">
            <summary>
            Gets the G.722 depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.G722Decoder">
            <summary>
            Gets the G.722 decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.G722Converter">
            <summary>
            Gets the G.722 converter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.G722Synchronizer">
            <summary>
            Gets the G.722 synchronizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.G722Sink">
            <summary>
            Gets the G.722 sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.PcmuDepacketizer">
            <summary>
            Gets the PCMU depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.PcmuDecoder">
            <summary>
            Gets the PCMU decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.PcmuConverter">
            <summary>
            Gets the PCMU converter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.PcmuSynchronizer">
            <summary>
            Gets the PCMU synchronizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.PcmuSink">
            <summary>
            Gets the PCMU sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.PcmaDepacketizer">
            <summary>
            Gets the PCMA depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.PcmaDecoder">
            <summary>
            Gets the PCMA decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.PcmaConverter">
            <summary>
            Gets the PCMA converter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.PcmaSynchronizer">
            <summary>
            Gets the PCMA synchronizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.PcmaSink">
            <summary>
            Gets the PCMA sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.Vp8Depacketizer">
            <summary>
            Gets the VP8 depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.Vp8Decoder">
            <summary>
            Gets the VP8 decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.Vp8Converter">
            <summary>
            Gets the VP8 converter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.Vp8Synchronizer">
            <summary>
            Gets the VP8 synchronizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.H264Depacketizer">
            <summary>
            Gets the first H.264 depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.H264Depacketizers">
            <summary>
            Gets the first H.264 depacketizers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.H264DepacketizersArray">
            <summary>
            Gets the H.264 depacketizers array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.H264Decoder">
            <summary>
            Gets first the H.264 decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.H264Decoders">
            <summary>
            Gets the H.264 decoders.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.H264Converter">
            <summary>
            Gets the H.264 converter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.H264Converters">
            <summary>
            Gets the H.264 converters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.H264Synchronizer">
            <summary>
            Gets the H.264 synchronizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.H264Synchronizers">
            <summary>
            Gets the H.264 synchronizers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.Vp9Depacketizer">
            <summary>
            Gets the VP9 depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.Vp9Decoder">
            <summary>
            Gets the VP9 decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.Vp9Converter">
            <summary>
            Gets the VP9 converter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.Vp9Synchronizer">
            <summary>
            Gets the VP9 synchronizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveAudioDepacketizer">
            <summary>
            Gets the active audio depacketizer.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcRemoteMedia`1.OnActiveAudioDepacketizerChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveAudioDepacketizer"/> changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveAudioDecoder">
            <summary>
            Gets the active audio decoder.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcRemoteMedia`1.OnActiveAudioDecoderChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveAudioDecoder"/> changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveAudioSynchronizer">
            <summary>
            Gets the active audio synchronizer.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcRemoteMedia`1.OnActiveAudioSynchronizerChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveAudioSynchronizer"/> changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveAudioConverter">
            <summary>
            Gets the active audio converter.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcRemoteMedia`1.OnActiveAudioConverterChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveAudioConverter"/> changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveAudioSink">
            <summary>
            Gets the active audio sink.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcRemoteMedia`1.OnActiveAudioSinkChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveAudioSink"/> changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveVideoDepacketizer">
            <summary>
            Gets the active video depacketizer.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcRemoteMedia`1.OnActiveVideoDepacketizerChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveVideoDepacketizer"/> changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveVideoDecoder">
            <summary>
            Gets the active video decoder.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcRemoteMedia`1.OnActiveVideoDecoderChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveVideoDecoder"/> changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveVideoSynchronizer">
            <summary>
            Gets the active video synchronizer.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcRemoteMedia`1.OnActiveVideoSynchronizerChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveVideoSynchronizer"/> changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveVideoConverter">
            <summary>
            Gets the active video converter.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.RtcRemoteMedia`1.OnActiveVideoConverterChange">
            <summary>
            Raised when the <see cref="P:FM.LiveSwitch.RtcRemoteMedia`1.ActiveVideoConverter"/> changes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RtcRemoteMedia`1"/> class.
            </summary>
            <param name="disableAudio">Whether to disable audio.</param>
            <param name="disableVideo">Whether to disable video.</param>
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.#ctor(System.Boolean,System.Boolean,FM.LiveSwitch.AecContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RtcRemoteMedia`1" /> class.
            </summary>
            <param name="disableAudio">Whether to disable audio.</param>
            <param name="disableVideo">Whether to disable video.</param>
            <param name="aecContext">The acoustic echo cancellation context.</param>
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.Initialize">
            <summary>
            Initializes this instance. Must be called before being used.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.Initialize(FM.LiveSwitch.RtcAudioTrackConfig,FM.LiveSwitch.RtcVideoTrackConfig)">
            <summary>
            Initializes this instance. Must be called before being used.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateAudioSink(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates an audio sink.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateViewSink">
            <summary>
            Creates a view sink.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateG722Depacketizer(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a G.722 depacketizer.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateG722Decoder(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a G.722 decoder.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreatePcmuDepacketizer(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a PCMU depacketizer.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreatePcmuDecoder(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a PCMU decoder.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreatePcmaDepacketizer(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a PCMA depacketizer.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreatePcmaDecoder(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a PCMA decoder.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateOpusDepacketizer(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates an Opus depacketizer.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateOpusDecoder(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates an Opus decoder.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateVp8Depacketizer">
            <summary>
            Creates a VP8 depacketizer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateVp8Decoder">
            <summary>
            Creates a VP8 decoder.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateVp9Depacketizer">
            <summary>
            Creates a VP9 depacketizer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateVp9Decoder">
            <summary>
            Creates a VP9 decoder.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateH264Depacketizer">
            <summary>
            Creates an H.264 depacketizer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateH264Depacketizers">
            <summary>
            Creates H.264 depacketizers.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateH264Decoder">
            <summary>
            Creates an H.264 decoder.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateH264Decoders">
            <summary>
            Creates H.264 decoders.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateSoundConverter(FM.LiveSwitch.AudioConfig)">
            <summary>
            Creates a sound converter.
            </summary>
            <param name="config">The configuration.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateImageConverter(FM.LiveSwitch.VideoFormat)">
            <summary>
            Creates an image converter.
            </summary>
            <param name="outputFormat">The output format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateAudioSynchronizer(FM.LiveSwitch.AudioFormat)">
            <summary>
            Creates an audio synchronizer.
            </summary>
            <param name="format">The format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateVideoSynchronizer(FM.LiveSwitch.VideoFormat)">
            <summary>
            Creates a video synchronizer.
            </summary>
            <param name="format">The format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateAudioRecorder(FM.LiveSwitch.AudioFormat)">
            <summary>
            Creates an audio recorder.
            </summary>
            <param name="inputFormat">The input format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.CreateVideoRecorder(FM.LiveSwitch.VideoFormat)">
            <summary>
            Creates a video recorder.
            </summary>
            <param name="inputFormat">The output format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.ToggleAudioRecording">
            <summary>
            Toggles audio recording.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.ToggleVideoRecording">
            <summary>
            Toggles video recording.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RtcRemoteMedia`1.Destroy">
            <summary>
            Destroys all media tracks.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.RtpControlFrame">
            <summary>
            An RTCP Feedback RTP control frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpControlFrame.RegisteredPayloadType">
            <summary>
            Gets the RTP payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtpControlFrame.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RtpControlFrame"/> class.
            </summary>
            <param name="feedbackMessageType">The feedback message type.</param>
        </member>
        <member name="M:FM.LiveSwitch.RtpControlFrame.#ctor(System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RtpControlFrame"/> class.
            </summary>
            <param name="feedbackMessageType">The feedback message type.</param>
            <param name="buffer">The backing data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.RtpControlFrame.#ctor(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RtpControlFrame"/> class.
            </summary>
            <param name="feedbackMessageType">Type of the feedback message.</param>
            <param name="payloadType">Type of the payload.</param>
            <param name="senderSynchronizationSource">The sender synchronization source.</param>
            <param name="mediaSynchronizationSource">The media synchronization source.</param>
        </member>
        <member name="M:FM.LiveSwitch.RtpControlFrame.#ctor(System.Int32,System.Int32,System.Int64,System.Int64,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RtpControlFrame"/> class.
            </summary>
            <param name="feedbackMessageType">Type of the feedback message.</param>
            <param name="payloadType">Type of the payload.</param>
            <param name="senderSynchronizationSource">The sender synchronization source.</param>
            <param name="mediaSynchronizationSource">The media synchronization source.</param>
            <param name="feedbackControlInformation">The feedback control information.</param>
        </member>
        <member name="T:FM.LiveSwitch.RtpPacket">
            <summary>
            An RTP packet.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtpPacket.ObtainAbsSendTime24(FM.LiveSwitch.Rtp.HeaderExtensionRegistry)">
            <summary>
            Gets abs-send-time-24 ( = (ntp_timestamp_64 » 14) AND 0x00ffffff ; NTP timestamp is 32 bits for whole seconds, 32 bits fraction of second.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.FixedHeaderLength">
            <summary>
            Gets the length of the fixed header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.Buffer">
            <summary>
            Gets the buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.Version">
            <summary>
            Gets or sets the version.
            This field identifies the version of RTP.  The version defined by
            this specification is two(2).  (The value 1 is used by the first
            draft version of RTP and the value 0 is used by the protocol
            initially implemented in the "vat" audio tool.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.Padding">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FM.LiveSwitch.RtpPacket"/> is padded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.PaddingLength">
            <summary>
            Gets or sets the padding length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.Extension">
            <summary>
            Gets a value indicating whether this <see cref="T:FM.LiveSwitch.RtpPacket"/> has a header extension.
            If the extension bit is set, the fixed header MUST be followed by exactly one header extension.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.ContributingSourceCount">
            <summary>
            Gets the number of <see cref="P:FM.LiveSwitch.RtpPacket.ContributingSources"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.Marker">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FM.LiveSwitch.RtpPacket"/> has the marker flag set.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.PayloadType">
            <summary>
            Gets or sets the payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.SequenceNumber">
            <summary>
            Gets or sets the sequence number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.Timestamp">
            <summary>
            Gets or sets the timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.ContributingSourcesOffset">
            <summary>
            Gets the offset of the <see cref="P:FM.LiveSwitch.RtpPacket.ContributingSources"/> array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.ContributingSourcesLength">
            <summary>
            Gets the length of the <see cref="P:FM.LiveSwitch.RtpPacket.ContributingSources"/> in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.ContributingSources">
            <summary>
            Gets or sets the contributing sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.HeaderExtensionOffset">
            <summary>
            Gets the offset of the <see cref="P:FM.LiveSwitch.RtpPacket.HeaderExtensionId"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.HeaderExtensionId">
            <summary>
            Gets or sets the header extension ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.HeaderExtensionLength">
            <summary>
            Gets the length of the <see cref="P:FM.LiveSwitch.RtpPacket.HeaderExtension"/> in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.HeaderExtension">
            <summary>
            Gets or sets the header extension.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.VariableHeaderLength">
            <summary>
            Gets the length of the variable header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.HeaderLength">
            <summary>
            Gets the length of the fixed and variable headers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.Header">
            <summary>
            Gets the header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.PayloadOffset">
            <summary>
            Gets the offset of the <see cref="P:FM.LiveSwitch.RtpPacket.Payload"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.PayloadLength">
            <summary>
            Gets the length of the <see cref="P:FM.LiveSwitch.RtpPacket.Payload"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacket.Payload">
            <summary>
            Gets or sets the packet payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtpPacket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RtpPacket"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtpPacket.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.RtpPacket"/> class.
            </summary>
            <param name="payload">The payload for the RTP packet.</param>
        </member>
        <member name="M:FM.LiveSwitch.RtpPacket.GetSequenceNumberDelta(System.Int32,System.Int32)">
            <summary>
            Retrieves the difference between two sequence numbers
            while accounting for overflow rollover.
            </summary>
            <param name="sequenceNumber">The current sequence number.</param>
            <param name="lastSequenceNumber">The last (previous) sequence number.</param>
            <returns>The difference between the two sequence numbers.</returns>
        </member>
        <member name="M:FM.LiveSwitch.RtpPacket.Wrap(FM.LiveSwitch.DataBuffer)">
            <summary>
            Parses the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>Rtp.Packet</returns>
        </member>
        <member name="T:FM.LiveSwitch.RtpPacketHeader">
            <summary>
            An RTP packet header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacketHeader.FixedHeaderLength">
            <summary>
            Gets the length of the fixed header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacketHeader.Version">
            <summary>
            Gets or sets the version of the packet. Should be 2.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacketHeader.Padding">
            <summary>
            Gets or sets if the packet has padding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacketHeader.PaddingLength">
            <summary>
            Gets the number of bytes of padding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacketHeader.Extension">
            <summary>
            Gets or sets if there is an extension.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacketHeader.ContributingSourceCount">
            <summary>
            Gets or sets the number of contributing sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacketHeader.Marker">
            <summary>
            Gets or sets if the marker bit is set.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacketHeader.PayloadType">
            <summary>
            Gets or sets the payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacketHeader.SequenceNumber">
            <summary>
            Gets or sets the sequence number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacketHeader.Timestamp">
            <summary>
            Gets or sets the timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacketHeader.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacketHeader.ContributingSources">
            <summary>
            Gets or sets the contributing sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtpPacketHeader.HeaderExtension">
            <summary>
            Gets or sets the header extension.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtpPacketHeader.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:FM.LiveSwitch.RtpPacketHeader"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtpPacketHeader.CalculateHeaderLength">
            <summary>
            Calculates the length of the header. At least 12 bytes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtpPacketHeader.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RtpPacketHeader.WriteTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes this header to a buffer starting at the offset.
            </summary>
            <param name="buffer">The target buffer.</param>
            <param name="offset">The starting offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.RtpPacketHeader.ReadFrom(FM.LiveSwitch.DataBuffer)">
            <summary>
            Reads a header from a buffer. If padding exists, also calculates the padding length.
            </summary>
            <param name="buffer">The source buffer</param>
        </member>
        <member name="T:FM.LiveSwitch.IRtpHeaderExtension">
            <summary>
            The interface that all rtp header extensions must implement.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IRtpHeaderExtension.Id">
            <summary>
            Gets the header extension ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IRtpHeaderExtension.Length">
            <summary>
            Gets the length of the header extension in 32-bit words.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IRtpHeaderExtension.FillBuffer(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Serialize the header extension to a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset to start writing at.</param>
        </member>
        <member name="M:FM.LiveSwitch.ScheduledItem.GetInvocationTime(System.Int32)">
            <summary>
            Gets the invocation time of the specified attempt of this item. If not available, returns -1.
            </summary>
            <param name="attempt">Invocation attempt.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ScheduledItem.SetInvocationTime(System.Int32,System.Int64)">
            <summary>
            Sets the invocation time of the specified attempt of this item.
            </summary>
            <param name="attempt">Invocation attempt.</param>
            <param name="time">Time of invocation.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.RecordDetailedInvocationTimes">
            <summary>
            Gets or sets a flag indicating whether Scheduler needs to record invocation times for each invocation attempt of this item.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.TimeoutCallback">
            <summary>
            Gets or sets the timeout callback. If set, this callback is executed if this item's 
            InvocationLifetimeLimit is set and had been reached.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.LastDefaultInvocationOccurred">
            <summary>
            Gets a value indicating whether the last invocation of the default callback of this item has occurred.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.Delay">
            <summary>
            Gets or sets the delay in ms. The first invocation will occur after this <see cref="P:FM.LiveSwitch.ScheduledItem.Delay"/>.
            Subsequent invocations will occur with the value given by <see cref="P:FM.LiveSwitch.ScheduledItem.Interval"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.Id">
            <summary>
            Gets or sets this scheduled item's identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.DefaultCallback">
            <summary>
            Gets or sets the default callback to be invoked.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.State">
            <summary>
            Gets or sets the state object.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.Interval">
            <summary>
            Gets or sets the interval between executions in ms after the original invocation.
            Use <see cref="P:FM.LiveSwitch.ScheduledItem.Delay"/> to specify delay prior to the initial invocation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.IntervalBackoffMultiplier">
            <summary>
            Gets or sets the interval backoff multiplier. Every time the item is rescheduled, the interval will be multiplied by this value.
            Set this value to 1 for 
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.NextInvocationTime">
            <summary>
            Gets or sets the next invocation time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.LastInvocationTime">
            <summary>
            Gets or sets the last invocation time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.OriginalInvocationTime">
            <summary>
            Gets or sets the original invocation time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.InvocationCountLimit">
            <summary>
            Gets or sets the limit to the total number of invocations. Use ScheduledItem.Unset to indicate no limit.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.InvocationLifetimeLimit">
            <summary>
            Gets or sets the rescheduling lifetime limit. After this time has elapsed, the item will not be rescheduled. Use ScheduledItem.Unset to indicate no limit.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.InvocationCount">
            <summary>
            Gets the number of times callback associated with this time has been invoked.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.Suspended">
            <summary>
            Gets or sets a value indicating whether execution of this <see cref="T:FM.LiveSwitch.ScheduledItem"/> is suspended.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.OnSuspendStatusChanged">
            <summary>
            Gets or sets callback that is invoked when an item execution resumes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ScheduledItem.#ctor(FM.LiveSwitch.Action1{FM.LiveSwitch.ScheduledItem},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScheduledItem" /> class with recurring invocations at regular intervals subject to limits.
            </summary>
            <param name="defaultCallback">The default callback.</param>
            <param name="delay">The delay (in ms) prior to the first invocation.</param>
            <param name="interval">The interval (in ms) between invocations. Use IntervalBackoffMultiplier property to lengthen or shorten interval after every invocation.</param>
            <param name="lifetimeLimit">The time limit, within which recurring invocations will occur with regular intervals (use ScheduledItem.Unset for no limit).</param>
            <param name="invocationCountLimit">Limit to the number of invocations (use ScheduledItem.Unset for no limit).</param>
        </member>
        <member name="M:FM.LiveSwitch.ScheduledItem.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScheduledItem.Unset">
            <summary>
            Indicates that a specific value is not set.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Scheduler">
            <summary>
            Manages a queue of scheduled items; singleton.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Scheduler.Start">
            <summary>
            Starts this scheduler.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Scheduler.Stop">
            <summary>
            Stops this scheduler.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Scheduler.Trigger(FM.LiveSwitch.ScheduledItem)">
            <summary>
            Causes a given ScheduledItem to be executed immediately.
            If the item had previously been scheduled to be executed at a later time,
            that execution is cancelled. However, the item will be rescheduled if
            needed after the current execution
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FM.LiveSwitch.Scheduler.Add(FM.LiveSwitch.ScheduledItem)">
            <summary>
            Adds the scheduled item to the queue.
            </summary>
            <param name="item">The item.</param>
            <returns>Item Id</returns>
        </member>
        <member name="M:FM.LiveSwitch.Scheduler.ItemIsScheduled(FM.LiveSwitch.ScheduledItem)">
            <summary>
            Returns a value indicating if an item is currently scheduled (regadless of whether it has been suspended)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:FM.LiveSwitch.Scheduler.Remove(FM.LiveSwitch.ScheduledItem)">
            <summary>
            Removes the item with a given id.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>Value indicating whether the scheduled item has been successfully found and deleted from the queue.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Scheduler.GetCurrentTime">
            <summary>
            Gets the current time in milliseconds since 01.01.1970.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.AbortChunk">
            <summary>
            The ABORT chunk is sent to the peer of an association to close the
            association. The ABORT chunk may contain Cause Parameters to inform
            the receiver about the reason of the abort. DATA chunks MUST NOT be
            Bundled with ABORT. Control chunks (except for INIT, INIT ACK, and
            SHUTDOWN COMPLETE) MAY be bundled with an ABORT, but they MUST be
            placed before the ABORT in the SCTP packet or they will be ignored by
            the receiver.
            If an endpoint receives an ABORT with a format error or no SCTPAssociationStateArgs is
            found, it MUST silently discard it. Moreover, under any
            circumstances, an endpoint that receives an ABORT MUST NOT respond to
            that ABORT by sending an ABORT of its own.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |   Type = 6    |    Reserved |T|              Length           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            \                                                               \
            /                zero or more Error Causes                      /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            Refer to RFC 4960 3.3.7 for details
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.AbortChunk.VerificationTagReflected">
            <summary>
            Indicates whether Verification Tag is reflected (same as received).
            </summary>
            <value>
            <c>true</c> if the verification tag is reflected (returned same as received);
            <c>false</c> if the sender filled in the verification tag expected by the peer
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.AbortChunk.ErrorCauses">
            <summary>
            Gets or sets the error causes.
            </summary>
            <value>
            Errors.
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.AbortChunk.#ctor(System.Boolean,FM.LiveSwitch.Sctp.ErrorCause[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.AbortChunk" /> class.
            </summary>
            <param name="verificationTagReflected"><c>true</c> if the verification tag is reflected (returned same as received);
            <c>false</c> if the sender filled in the verification tag expected by the peer.</param>
            <param name="errorCauses">Error causes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.AbortChunk.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.AbortChunk" /> class.
            </summary>
            <param name="verificationTagReflected"><c>true</c> if the verification tag is reflected (returned same as received);
            <c>false</c> if the sender filled in the verification tag expected by the peer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.AbortChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.AbortChunk.GetBytes(FM.LiveSwitch.Sctp.AbortChunk)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.AbortChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a packet.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Capabilities.RequestedOutboundStreams">
            <summary>
            Gets the requested outbound streams. 
            Defines the number of outbound streams application wishes to create in this association. 
            The value of 0 MUST NOT be used.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Capabilities.MaxIncomingStreams">
            <summary>
            Gets the maximum incoming channels this association can support.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Capabilities.AdvertisedReceiverWindow">
            <summary>
            Gets the advertised receiver window (a_rwnd). This value represents the dedicated buffer space, in number of bytes, 
            the sender of the INIT has reserved in association with this window. During the life of the association, 
            this buffer space SHOULD NOT be lessened (i.e., dedicated buffers taken away from this association); 
            however, an endpoint MAY change the value of a_rwnd it sends in SACK chunks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Capabilities.#ctor(System.Int32,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.Capabilities"/> class.
            </summary>
            <param name="requestedOutboundStreams">Defines the number of outbound streams application wishes to create in this association. 
            The value of 0 MUST NOT be used.</param>
            <param name="maxIncomingStreams">Maximum incoming channels this association can support.</param>
            <param name="advertisedReceiverWindow">Advertised Receiver Window Credit (a_rwnd)
            This value represents the dedicated buffer space, in number of bytes, the sender of the INIT has reserved
            in association with this window. During the life of the association, this buffer space SHOULD NOT be lessened
            (i.e., dedicated buffers taken away from this association); however, an endpoint MAY change the value of a_rwnd
            it sends in SACK chunks.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.ParameterType">
            <summary>
            Identifies the type of information contained in the Parameter Value field.
            It takes a value from 0 to 65534. 
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.InnerSctpTransport">
            <summary>
            Used as inner transport for SctpTransports for testing purposes.
            Depending on the mode, this transport can drop or delay particular or random SCTP packets.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.UnrecognizedParameterChunkParameter">
            <summary>
            Unrecognized Parameter (8)
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |        Type = 8              |           Length               |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                           Unrecognized Parameters             /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+
            Refer to RFC 4960 3.3.2.1 for details
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.UnrecognizedParameterChunkParameter.UnrecognizedParameters">
            <summary>
            This parameter value MUST contain all the necessary state and
            parameter information required for the sender of this INIT ACK to
            create the association, along with a Message Authentication Code (MAC).
            </summary>
            <value>
            Unrecognized Parameters.
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnrecognizedParameterChunkParameter.#ctor(FM.LiveSwitch.Sctp.TlvParameter[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.UnrecognizedParameterChunkParameter" /> class.
            </summary>
            <param name="chunkParameter">The chunk parameter.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnrecognizedParameterChunkParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnrecognizedParameterChunkParameter.GetBytes(FM.LiveSwitch.Sctp.UnrecognizedParameterChunkParameter)">
            <summary>
            Converts a parameter to a byte array.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnrecognizedParameterChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.GenericChunkParameter">
            <summary>
            Generic Chunk parameter to store unrecognized and unsupported parameters
            Not specified in SCTP RFCs
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |      Parameter Type           |           Parameter Length    |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            \                                                               \
            /                          Parameter Value                      /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            Parameter Length does not include padding, while parameter value does
            include padding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.GenericChunkParameter.MeaningfulData">
            <summary>
            Gets or sets the meaningful data  of this chunk parameter (excluding padding).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.GenericChunkParameter.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.GenericChunkParameter" /> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.GenericChunkParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.GenericChunkParameter.GetBytes(FM.LiveSwitch.Sctp.GenericChunkParameter)">
            <summary>
            Converts a parameter to a byte array.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.GenericChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.GenericChunkParameter.ToGenericParameter(FM.LiveSwitch.Sctp.TlvParameter)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.StateCookieChunkParameter">
            <summary>
            State Cookie (7)
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |         Type = 7              |           Length              |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                           Parameter                           /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+
            Refer to RFC 4960 5.1.3 for details
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.StateCookieChunkParameter.StateCookie">
            <summary>
            This parameter value MUST contain all the necessary state and
            parameter information required for the sender of this INIT ACK to
            create the association, along with a Message Authentication Code (MAC).
            </summary>
            <value>
            SCTP State Cookie.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.StateCookieChunkParameter.StateCookieBytes">
            <summary>
            This parameter holds SCTP State Cookie bytes received in INIT_ACK.
            </summary>
            <value>
            SCTP State Cookie.
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StateCookieChunkParameter.#ctor(FM.LiveSwitch.Sctp.StateCookie)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.StateCookieChunkParameter" /> class.
            </summary>
            <param name="stateCookie">The state cookie.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StateCookieChunkParameter.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.StateCookieChunkParameter" /> class.
            </summary>
            <param name="stateCookieBytes">The state cookie bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StateCookieChunkParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StateCookieChunkParameter.GetBytes(FM.LiveSwitch.Sctp.StateCookieChunkParameter)">
            <summary>
            Converts a parameter to a byte array.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StateCookieChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StateCookieChunkParameter.ParseBytes(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.SupportedAddressTypesChunkParameter">
            <summary>
            Supported Address Types (12)
            The sender of INIT uses this parameter to list all the address types
            it can support.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |        Type = 12              |           Length              |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |               Address Type #1 |       Address Type #2         |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                            ......                             |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+
            Refer to RFC 4960 3.3.2.1 for details
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.SupportedAddressTypesChunkParameter.AddressTypes">
            <summary>
            This is filled with the type value of the corresponding address
            TLV (e.g., IPv4 = 5, IPv6 = 6, Host name = 11).
            </summary>
            <value>
            Address Types.
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SupportedAddressTypesChunkParameter.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.SupportedAddressTypesChunkParameter" /> class.
            </summary>
            <param name="addressTypes">Suppoerted address types.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SupportedAddressTypesChunkParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SupportedAddressTypesChunkParameter.GetBytes(FM.LiveSwitch.Sctp.SupportedAddressTypesChunkParameter)">
            <summary>
            Converts a parameter to a byte array.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SupportedAddressTypesChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.HostNameAddressChunkParameter">
            <summary>
            Host Name Address (11)
            The sender of INIT uses this parameter to pass its Host Name (in
            place of its IP addresses) to its peer. The peer is responsible for
            resolving the name. Using this parameter might make it more likely
            for the association to work across a NAT box.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |           Type = 11           |           Length              |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                           Host Name                           /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            Refer to RFC 4960 3.3.2.1 for details
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.HostNameAddressChunkParameter.HostName">
            <summary>
            Gets or sets the SHost Name: variable length
            This field contains a host name in "host name syntax" per RFC 1123
            </summary>
            <value>
            Host Name.
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HostNameAddressChunkParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.HostNameAddressChunkParameter" /> class.
            </summary>
            <param name="hostName">The host name.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HostNameAddressChunkParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HostNameAddressChunkParameter.GetBytes(FM.LiveSwitch.Sctp.HostNameAddressChunkParameter)">
            <summary>
            Converts a parameter to a byte array.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HostNameAddressChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.CookiePreservativeChunkParameter">
            <summary>
            Cookie Preservative (9)
            The sender of the INIT shall use this parameter to suggest to the
            receiver of the INIT for a longer life-span of the State Cookie.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |               Type = 9        |            Length = 8         |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |        Suggested Cookie Life-Span Increment (msec.)           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            Refer to RFC 4960 3.3.2.1 for details
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.CookiePreservativeChunkParameter.SuggestedCookieLifeSpanIncrement">
            <summary>
            Gets or sets the Suggested Cookie Life-Span Increment (32 bits unsigned integer)
            </summary>
            <value>
            Suggested Cookie Life-Span Increment.
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookiePreservativeChunkParameter.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.CookiePreservativeChunkParameter" /> class.
            </summary>
            <param name="cookieIncrement">The cookie increment (milliseconds).</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookiePreservativeChunkParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookiePreservativeChunkParameter.GetBytes(FM.LiveSwitch.Sctp.CookiePreservativeChunkParameter)">
            <summary>
            Converts a parameter to a byte array.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookiePreservativeChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.SupportedExtensionsChunkParameter">
            <summary>
            Supported Extensions Parameter (32776) defined in RFC 5061. May only appear in INIT or INIT_ACK
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |     Parameter Type = 0x8008   |      Parameter Length         |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            | CHUNK TYPE 1  |  CHUNK TYPE 2 |  CHUNK TYPE 3 |  CHUNK TYPE 4 |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                             ....                              |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            | CHUNK TYPE N  |      PAD      |      PAD      |      PAD      |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.SupportedExtensionsChunkParameter.SupportedChunkExtensions">
            <summary>
            Gets or sets the supported chunk extensions.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SupportedExtensionsChunkParameter.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.SupportedExtensionsChunkParameter" /> class.
            </summary>
            <param name="extensions">The extensions.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SupportedExtensionsChunkParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SupportedExtensionsChunkParameter.GetBytes(FM.LiveSwitch.Sctp.SupportedExtensionsChunkParameter)">
            <summary>
            Converts a parameter to a byte array.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SupportedExtensionsChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.ForwardTsnSupportedChunkParameter">
            <summary>
            Forward-TSN-Supported Parameter For INIT and INIT ACK (49152) defined in RFC 3758
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |     Parameter Type = 0xC000   |       Parameter Length = 4    |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ForwardTsnSupportedChunkParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.ForwardTsnSupportedChunkParameter" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ForwardTsnSupportedChunkParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ForwardTsnSupportedChunkParameter.GetBytes(FM.LiveSwitch.Sctp.ForwardTsnSupportedChunkParameter)">
            <summary>
            Converts a parameter to a byte array.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ForwardTsnSupportedChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.PadChunkParameter">
            <summary>
            PAD Parameter (32773) defined in RFC 4820
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |     Parameter Type = 0x8005   |       Parameter Length        |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                                                               /
            \                          Padding Data                         \
            /                                                               /
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.PadChunkParameter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.PadChunkParameter" /> class.
            </summary>
            <param name="length">Required size of padding chunk. Valid range: 4 to 65536 bytes in
            increments of 4 bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.PadChunkParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.PadChunkParameter.GetBytes(FM.LiveSwitch.Sctp.PadChunkParameter)">
            <summary>
            Converts a parameter to a byte array.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.PadChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.ChunkType">
            <summary>
            Identifies the type of information contained in the Chunk Value field.
            It takes a value from 0 to 254. The value of 255 is reserved for future use as an extension field.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.Data">
            <summary>
            Payload Data
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.Initiation">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.InitiationAck">
            <summary>
            Initiation Acknowledgement
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.Sack">
            <summary>
            Selective Acknowledgement
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.Heartbeat">
            <summary>
            Heartbeat Request
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.HeartbeatAck">
            <summary>
            Heartbeat Acknowledgement
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.Abort">
            <summary>
            Abort
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.Shutdown">
            <summary>
            Shutdown
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.ShutdownAck">
            <summary>
            Shutdown Acknowledgement 
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.Error">
            <summary>
            Operation Error
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.CookieEcho">
            <summary>
            State Cookie
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.CookieAck">
            <summary>
            Cookie Acknowledgement 
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.Ecne">
            <summary>
            Explicit Congestion Notification Echo
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.Cwr">
            <summary>
            Congestion Window Reduced
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.ShutdownComplete">
            <summary>
            Shutdown Complete
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.Auth">
            <summary>
            Authentication Chunk
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.AsConfAck">
            <summary>
            Gets Address Configuration Acknowledgment (ASCONF-ACK).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.ReConfig">
            <summary>
            Re-configuration Chunk (RE-CONFIG).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.Pad">
            <summary>
            Padding
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.ForwardCumulativeTSN">
            <summary>
            Forward Cumulative TSN
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkType.AsConf">
            <summary>
            Address Configuration Change Chunk (ASCONF)
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.ErrorCauseCode.InvalidStreamIdentifier">
            <summary>
            Indicates an invalid stream identifier.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.ErrorCauseCode.MissingMandatoryParameter">
            <summary>
            Indicates a missing mandatory parameter.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.ErrorCauseCode.StaleCookieError">
            <summary>
            Indicates a stale cookie.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.ErrorCauseCode.OutOfResource">
            <summary>
            Indicates a resource exhaustion.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.ErrorCauseCode.UnresolvableAddress">
            <summary>
            Indicates an unresolvable address.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.ErrorCauseCode.UnrecognizedChunkType">
            <summary>
            Indicates an unrecognized chunk type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.ErrorCauseCode.InvalidMandatoryParameter">
            <summary>
            Indicates an invalid mandatory parameter.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.ErrorCauseCode.UnrecognizedParameters">
            <summary>
            Indicates unrecognized parameters.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.ErrorCauseCode.NoUserData">
            <summary>
            Indicates that there is no user data.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.ErrorCauseCode.CookieReceivedWhileShuttingDown">
            <summary>
            Indicates that a cookie was received while shutting down.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.ErrorCauseCode.RestartOfAnAssociationWithNewAddresses">
            <summary>
            Indicates a restart of an association with new addresses.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.ErrorCauseCode.UserInitiatedAbort">
            <summary>
            Indicates a user initiated abort.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.ErrorCauseCode.ProtocolViolation">
            <summary>
            Indicates a protocol violation.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.ChunkListChunkParameter">
            <summary>
            Chunk List Parameter (32772) defined in RFC 4895
            This parameter is used to specify which chunk types are required to
            be authenticated before being sent by the peer.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |     Parameter Type = 0x8003   |       Parameter Length        |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            | Chunk Type 1  | Chunk Type 2  | Chunk Type 3  | Chunk Type 4  |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                                                               /
            \                              ...                              \
            /                                                               /
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            | Chunk Type n  |                   Padding                     |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ChunkListChunkParameter.ChunkList">
            <summary>
            Gets or sets the chunk list.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ChunkListChunkParameter.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.ChunkListChunkParameter" /> class.
            </summary>
            <param name="chunkList">The chunk list.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ChunkListChunkParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ChunkListChunkParameter.GetBytes(FM.LiveSwitch.Sctp.ChunkListChunkParameter)">
            <summary>
            Converts a parameter to a byte array.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ChunkListChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.RequestedHmacAlgorithmChunkParameter">
            <summary>
            Requested HMAC Algorithm Parameter (HMAC-ALGO) (32772) defined in RFC 4895
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |     Parameter Type = 0x8004   |       Parameter Length        |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |          HMAC Identifier 1    |      HMAC Identifier 2        |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                                                               /
            \                              ...                              \
            /                                                               /
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |        HMAC Identifier n      |           Padding             |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.RequestedHmacAlgorithmChunkParameter.HmacIdentifiers">
            <summary>
            Gets or sets the HMAC identifiers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.RequestedHmacAlgorithmChunkParameter.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.PadChunkParameter" /> class.
            </summary>
            <param name="hmacIdentifiers">The hmac identifiers.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.RequestedHmacAlgorithmChunkParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.RequestedHmacAlgorithmChunkParameter.GetBytes(FM.LiveSwitch.Sctp.RequestedHmacAlgorithmChunkParameter)">
            <summary>
            Converts a parameter to a byte array.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.RequestedHmacAlgorithmChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.RandomChunkParameter">
            <summary>
            Random Parameter (32770) defined in RFC 4895
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |     Parameter Type = 0x8002   |       Parameter Length        |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                                                               |
            \                          Random Number                        /
            /                               +-------------------------------\
            |                               |           Padding             |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.RandomChunkParameter.RandomNumber">
            <summary>
            Gets or sets the random number.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.RandomChunkParameter.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.PadChunkParameter" /> class.
            </summary>
            <param name="randomNumber">The random number.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.RandomChunkParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.RandomChunkParameter.GetBytes(FM.LiveSwitch.Sctp.RandomChunkParameter)">
            <summary>
            Converts a parameter to a byte array.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.RandomChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.IPv4ChunkParameter">
            <summary>
            IPv4 Address Parameter (5)
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |           Type = 5            |           Length = 8          |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                           IPv4 Address                        |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            Refer to RFC 4960 3.3.2.1 for details
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.IPv4ChunkParameter.IPv4Address">
            <summary>
            Gets or sets the IPv4 address (32 bits unsigned integer)
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.IPv4ChunkParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.IPv4ChunkParameter" /> class.
            </summary>
            <param name="ipv4Address">The ipv4 address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.IPv4ChunkParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.IPv4ChunkParameter.GetBytes(FM.LiveSwitch.Sctp.IPv4ChunkParameter)">
            <summary>
            Converts a parameter to a byte array.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.IPv4ChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.ProtocolViolation">
            <summary>
            This error cause MAY be included in ABORT chunks that are sent
            because an SCTP endpoint detects a protocol violation of the peer
            that is not covered by other error causes. An implementation MAY provide additional
            information specifying what kind of protocol violation has been
            detected.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |            Cause Code=13      |       Cause Length=Variable   |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                    Additional Information                     /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ProtocolViolation.AdditionalInfo">
            <summary>
            Gets or sets the additional information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ProtocolViolation.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.ProtocolViolation" /> class.
            </summary>
            <param name="additionalInfo">The additional information.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ProtocolViolation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.ProtocolViolation" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ProtocolViolation.GetBytes">
            <summary>
            Gets the byte representation of this error cause.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ProtocolViolation.GetBytes(FM.LiveSwitch.Sctp.ProtocolViolation)">
            <summary>
            Converts an error cause to a byte array.
            </summary>
            <param name="cause">The error cause.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ProtocolViolation.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.GapAckBlock">
            <summary>
            Represents a Gap Ack Block (with a GAP ACK Block start and end)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.GapAckBlock.AbsoluteGapAckBlockStart">
            <summary>
            Gets or sets the gap ack block start.
            Gap Ack Block Start: 16 bits (unsigned integer)
            This is absolute tsn value (not the offset).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.GapAckBlock.AbsoluteGapAckBlockEnd">
            <summary>
            Gets or sets the gap ack block end.
            Gap Ack Block Start: 16 bits (unsigned integer)
            This is absolute tsn value (not the offset).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.GapAckBlock.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.GapAckBlock" /> class.
            This consists of two Properties: start and end of ACK block.
            All DATA chunks with TSNs greater than or equal to Absolute Gap Ack Block
            Start and less than or equal to Absolute Gap Ack Block End of each
            Gap Ack Block are assumed to have been received correctly.
            </summary>
            <param name="start">The Gap Ack Block Start.</param>
            <param name="end">The Gap Ack Block End.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.GapAckBlock.GetBytes(System.Int64)">
            <summary>
            Converts this instance to a byte array.
            </summary>
            <param name="cumulativeTsn">Cumulative TSN.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.GapAckBlock.GetBytes(FM.LiveSwitch.Sctp.GapAckBlock,System.Int64)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            <param name="cumulativeTsn">Cumulative TSN.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.GapAckBlock.ParseBytes(System.Byte[],System.Int32,System.Int64,System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="cumulativeTsn">Cumulative Tsn.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.StreamCollection">
            <summary>
            A collection of SCTP streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.StreamCollection.Count">
            <summary>
            Gets the number of streams.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StreamCollection.GetStream(System.Int32)">
            <summary>
            Returns the specified stream.
            </summary>
            <param name="streamId">The stream identifier.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StreamCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.StreamCollection"/> class.
            </summary>
            <param name="numStreams">The number streams.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.HeartbeatInfoChunkParameter">
            <summary>
            Heartbeat Info Parameter (1)
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |    Heartbeat Info Type=1      |         HB Info Length        |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                  Sender-Specific Heartbeat Info               /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            Refer to RFC 4960 3.3.5 for details
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.HeartbeatInfoChunkParameter.SenderSpecificHeartbeatInfo">
            <summary>
            Gets or sets the sender specific heartbeat information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HeartbeatInfoChunkParameter.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.HeartbeatInfoChunkParameter" /> class.
            </summary>
            <param name="senderSpecificHeartbeatInfo">The sender specific heartbeat information.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HeartbeatInfoChunkParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HeartbeatInfoChunkParameter.GetBytes(FM.LiveSwitch.Sctp.HeartbeatInfoChunkParameter)">
            <summary>
            Converts a parameter to a byte array.
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HeartbeatInfoChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.UserInitiatedAbort">
            <summary>
            This error cause MAY be included in ABORT chunks that are sent
            because of an upper-layer request. The upper layer can specify an
            Upper Layer Abort Reason that is transported by SCTP transparently
            and MAY be delivered to the upper-layer protocol at the peer.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |              Cause Code=12    |      Cause Length=Variable    |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                  Upper Layer Abort Reason                     /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.UserInitiatedAbort.UpperLayerAbortReason">
            <summary>
            Gets or sets the upper layer abort reason.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UserInitiatedAbort.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.UserInitiatedAbort" /> class.
            </summary>
            <param name="abortReason">The abort reason. Optional.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UserInitiatedAbort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.UserInitiatedAbort" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UserInitiatedAbort.GetBytes">
            <summary>
            Gets the byte representation of this error cause.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UserInitiatedAbort.GetBytes(FM.LiveSwitch.Sctp.UserInitiatedAbort)">
            <summary>
            Converts an error cause to a byte array.
            </summary>
            <param name="cause">The error cause.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UserInitiatedAbort.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.RestartOfAnAssociationWithNewAddresses">
            <summary>
            Restart of an association with new addresses: An INIT was received on
            an existing association. But the INIT added addresses to the
            association that were previously NOT part of the association. The
            new addresses are listed in the error code. This ERROR is normally
            sent as part of an ABORT refusing the INIT (see Section 5.2 of RFC 4960).
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |            Cause Code=11      |         Cause Length=Variable |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                           New Address TLVs                    /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            Note: Each New Address TLV is an exact copy of the TLV that was found
            in the INIT chunk that was new, including the Parameter Type and the
            Parameter Length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.RestartOfAnAssociationWithNewAddresses.Addresses">
            <summary>
            Gets or sets the IPv4 or host name addresses.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.RestartOfAnAssociationWithNewAddresses.#ctor(FM.LiveSwitch.Sctp.TlvParameter[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.RestartOfAnAssociationWithNewAddresses" /> class.
            </summary>
            <param name="addresses">The new addresses.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.RestartOfAnAssociationWithNewAddresses.GetBytes">
            <summary>
            Gets the byte representation of this error cause.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.RestartOfAnAssociationWithNewAddresses.GetBytes(FM.LiveSwitch.Sctp.RestartOfAnAssociationWithNewAddresses)">
            <summary>
            Converts an error cause to a byte array.
            </summary>
            <param name="cause">The error cause.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.RestartOfAnAssociationWithNewAddresses.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.CookieReceivedWhileShuttingDown">
            <summary>
            Cookie Received While Shutting Down: A COOKIE ECHO was received while
            the endpoint was in the SHUTDOWN-ACK-SENT state. This error is
            usually returned in an ERROR chunk bundled with the retransmitted
            SHUTDOWN ACK.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |          Cause Code=10        |  Cause Length=4               |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookieReceivedWhileShuttingDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.CookieReceivedWhileShuttingDown"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookieReceivedWhileShuttingDown.GetBytes">
            <summary>
            Gets the byte representation of this error cause.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookieReceivedWhileShuttingDown.GetBytes(FM.LiveSwitch.Sctp.CookieReceivedWhileShuttingDown)">
            <summary>
            Converts an error cause to a byte array.
            </summary>
            <param name="cause">The error cause.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookieReceivedWhileShuttingDown.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.NoUserData">
            <summary>
            Cause of error
            ---------------
            No User Data: This error cause is returned to the originator of a
            DATA chunk if a received DATA chunk has no user data.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                  Cause Code=9 |              Cause Length=8   |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                      TSN value                                |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.NoUserData.Tsn">
            <summary>
            Gets or sets the TSN of the DATA chunk received
            with no user data field.
            </summary>
            <value>
            TSN.
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.NoUserData.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.NoUserData" /> class.
            </summary>
            <param name="tsn">The TSN value field contains the TSN of the DATA chunk received
            with no user data field.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.NoUserData.GetBytes">
            <summary>
            Gets the byte representation of this error cause.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.NoUserData.GetBytes(FM.LiveSwitch.Sctp.NoUserData)">
            <summary>
            Converts an error cause to a byte array.
            </summary>
            <param name="cause">The error cause.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.NoUserData.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.UnrecognizedParameters">
            <summary>
            Cause of error
            ---------------
            Unrecognized Parameters: This error cause is returned to the
            originator of the INIT ACK chunk if the receiver does not recognize
            one or more Optional TLV parameters in the INIT ACK chunk.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                  Cause Code=8 |      Cause Length             |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                   Unrecognized Parameters                     /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.UnrecognizedParameters.Parameters">
            <summary>
            Gets or sets the unrecognized
            parameters copied from the INIT ACK chunk complete with TLV. This
            error cause is normally contained in an ERROR chunk bundled with
            the COOKIE ECHO chunk when responding to the INIT ACK, when the
            sender of the COOKIE ECHO chunk wishes to report unrecognized
            parameters.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnrecognizedParameters.#ctor(FM.LiveSwitch.Sctp.TlvParameter[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.UnrecognizedParameters" /> class.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnrecognizedParameters.GetBytes">
            <summary>
            Gets the byte representation of this error cause.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnrecognizedParameters.GetBytes(FM.LiveSwitch.Sctp.UnrecognizedParameters)">
            <summary>
            Converts an error cause to a byte array.
            </summary>
            <param name="cause">The error cause.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnrecognizedParameters.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.InvalidMandatoryParameter">
            <summary>
            Invalid Mandatory Parameter: This error cause is returned to the
            originator of an INIT or INIT ACK chunk when one of the mandatory
            parameters is set to an invalid value.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                  Cause Code=7 |     Cause Length=4            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InvalidMandatoryParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.InvalidMandatoryParameter" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InvalidMandatoryParameter.GetBytes">
            <summary>
            Gets the byte representation of this error cause.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InvalidMandatoryParameter.GetBytes(FM.LiveSwitch.Sctp.InvalidMandatoryParameter)">
            <summary>
            Converts an error cause to a byte array.
            </summary>
            <param name="cause">The error cause.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InvalidMandatoryParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.UnrecognizedChunkType">
            <summary>
            Unrecognized Chunk Type: This error cause is returned to the
            originator of the chunk if the receiver does not understand the chunk
            and the upper bits of the ’Chunk Type’ are set to 01 or 11.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                  Cause Code=6 |     Cause Length              |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                    Unrecognized Chunk                         /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.UnrecognizedChunkType.UnrecognizedChunk">
            <summary>
            Gets or sets the unrecognized chunk from
            the SCTP packet complete with Chunk Type, Chunk Flags, and Chunk
            Length.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnrecognizedChunkType.#ctor(FM.LiveSwitch.Sctp.Chunk)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.UnrecognizedChunkType" /> class.
            </summary>
            <param name="unrecognizedChunk">The unrecognized chunk.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnrecognizedChunkType.GetBytes">
            <summary>
            Gets the byte representation of this error cause.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnrecognizedChunkType.GetBytes(FM.LiveSwitch.Sctp.UnrecognizedChunkType)">
            <summary>
            Converts an error cause to a byte array.
            </summary>
            <param name="cause">The error cause.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnrecognizedChunkType.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.UnresolvableAddress">
            <summary>
            Unresolvable Address: Indicates that the sender is not able to
            resolve the specified address parameter (e.g., type of address is not
            supported by the sender). This is usually sent in combination with
            or within an ABORT.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                 Cause Code=5  |     Cause Length              |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                       Unresolvable Address                    /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.UnresolvableAddress.Address">
            <summary>
            Gets or sets the complete Type, Length,
            and Value of the ipv4 address parameter (or Host Name parameter) that
            contains the unresolvable address or host name.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnresolvableAddress.#ctor(FM.LiveSwitch.Sctp.TlvParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.UnresolvableAddress" /> class.
            </summary>
            <param name="address">The actual unresolvable address (host name or ipv4 address).</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnresolvableAddress.GetBytes">
            <summary>
            Gets the byte representation of this error cause.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnresolvableAddress.GetBytes(FM.LiveSwitch.Sctp.UnresolvableAddress)">
            <summary>
            Converts an error cause to a byte array.
            </summary>
            <param name="cause">The error cause.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.UnresolvableAddress.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.OutOfResource">
            <summary>
            Out of Resource: Indicates that the sender is out of resource. This
            is usually sent in combination with or within an ABORT.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                  Cause Code=4 | Cause Length=4                |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.OutOfResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.OutOfResource" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.OutOfResource.GetBytes">
            <summary>
            Gets the byte representation of this error cause.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.OutOfResource.GetBytes(FM.LiveSwitch.Sctp.OutOfResource)">
            <summary>
            Converts an error cause to a byte array.
            </summary>
            <param name="cause">The error cause.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.OutOfResource.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.StaleCookieError">
            <summary>
            Stale Cookie Error: Indicates the receipt of a valid State Cookie
            that has expired.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                  Cause Code=3 |     Cause Length=8            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                    Measure of Staleness (usec.)               |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.StaleCookieError.MeasureOfStaleness">
            <summary>
            Gets or sets the difference, in milliseconds, between the
            current time and the time the State Cookie expired.
            The sender of this error cause MAY choose to report how long past
            expiration the State Cookie is by including a non-zero value in
            the Measure of Staleness field. If the sender does not wish to
            provide this information, it should set the Measure of Staleness
            field to the value of zero.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StaleCookieError.#ctor(System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.StaleCookieError" /> class.
            </summary>
            <param name="staleTime">This field contains the difference, in milliseconds, between the
            current time and the time the State Cookie expired.Optional.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StaleCookieError.GetBytes">
            <summary>
            Gets the byte representation of this error cause.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StaleCookieError.GetBytes(FM.LiveSwitch.Sctp.StaleCookieError)">
            <summary>
            Converts an error cause to a byte array.
            </summary>
            <param name="cause">The error cause.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StaleCookieError.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.MissingMandatoryParameter">
            <summary>
            Missing Mandatory Parameter: Indicates that one or more mandatory TLV
            parameters are missing in a received INIT or INIT ACK.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                  Cause Code=2 |            Cause Length=8+N*2 |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                    Number of missing params=N                 |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            | Missing Param Type #1           | Missing Param Type #2       |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            | Missing Param Type #N-1         | Missing Param Type #N       |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.MissingMandatoryParameter.MissingParameters">
            <summary>
            Contains the Stream Identifier of the DATA chunk received in error.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.MissingMandatoryParameter.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.InvalidStreamIdentifier" /> class.
            </summary>
            <param name="missingParameters">The missing parameters.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.MissingMandatoryParameter.GetBytes">
            <summary>
            Gets the byte representation of this error cause.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.MissingMandatoryParameter.GetBytes(FM.LiveSwitch.Sctp.MissingMandatoryParameter)">
            <summary>
            Converts an error cause to a byte array.
            </summary>
            <param name="cause">The error cause.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.MissingMandatoryParameter.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.InvalidStreamIdentifier">
            <summary>
            Invalid Stream Identifier: Indicates endpoint received a DATA chunk
            sent to a nonexistent stream.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                  Cause Code=1 |   Cause Length=8              |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |           Stream Identifier     |            (Reserved)       |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InvalidStreamIdentifier.StreamIdentifier">
            <summary>
            Contains the Stream Identifier of the DATA chunk received in error.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InvalidStreamIdentifier.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.InvalidStreamIdentifier" /> class.
            </summary>
            <param name="streamIdentifier">The stream identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InvalidStreamIdentifier.GetBytes">
            <summary>
            Gets the byte representation of this error cause.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InvalidStreamIdentifier.GetBytes(FM.LiveSwitch.Sctp.InvalidStreamIdentifier)">
            <summary>
            Converts an error cause to a byte array.
            </summary>
            <param name="cause">The error cause.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InvalidStreamIdentifier.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.ErrorCause">
            <summary>
            Error causes are defined as variable-length parameters using the
            format described in Section 3.2.1, that is:
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |              Cause Code       |      Cause Length             |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                  Cause-Specific Information                   /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ErrorCause.CauseCode">
            <summary>
            Defines the type of error conditions being reported.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ErrorCause.GetBytes">
            <summary>
            Gets the byte representation of this error cause.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ErrorCause.ParseBytes(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Return ErrorCause object represented by a given byte[].
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.GenericChunk">
            <summary>
            Stores all the SCTP chunk information. Mostly used when an unrecognized chunk needs to be transmitted back to the sender.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.GenericChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.GenericChunk.GetBytes(FM.LiveSwitch.Sctp.GenericChunk)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.Chunk">
            <summary>
            Units that can be bundled into a packet.
            Multiple chunks can be bundled into one SCTP packet up to the MTU
            size, except for the INIT, INIT_ACK, and SHUTDOWN_COMPLETE chunks.
            These chunks MUST NOT be bundled with any other chunk in a packet.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |    Chunk Type |  Chunk Flags  |       Chunk Length            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            \                                                               \
            /                       Chunk Value                             /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Chunk.Type">
            <summary>
            Gets or sets the type of the chunk.
            </summary>
            <value>
            This field identifies the type of information contained in the Chunk Value field.
            It takes a value from 0 to 254. The value of 255 is reserved for future use as an extension field.
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Chunk.GetBytes">
            <summary>
            Gets the bytes.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Chunk.Unrecognized">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FM.LiveSwitch.Sctp.Chunk"/> is unrecognized.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Chunk.ResendScheduledItem">
            <summary>
            Gets or sets the scheduled item containing information to resend this chunk
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Chunk.ParseBytes(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Chunk.CalculatePaddingBytes(System.Int32)">
            <summary>
            Pads an sctp chunk parameter or an sctp chunk bytes if necessary
            (to ensure that the number of bytes is a multiple of 4)
            </summary>
            <param name="len">The non-padded (payload + header) length of the chunk.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Chunk.AddPadding(FM.LiveSwitch.ByteCollection)">
            <summary>
            Calculates the number of padded bytes in a given chunk. 
            These are not included in the chunk length parameter.
            </summary>
            <param name="bytes">The byte array to be padded.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.CommonHeader">
            <summary>
            SCTP Common Header Field Descriptions
            SCTP Common Header Format
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            | Source Port Number            |     Destination Port Number   |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                     Verification Tag                          |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                            Checksum                           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.CommonHeader.SourcePortNumber">
            <summary>
            Gets or sets the source port number.
            </summary>
            <value>
            This is the SCTP sender's port number. It can be used by the
            receiver in combination with the source IP address, the SCTP
            destination port, and possibly the destination IP address to
            identify the association to which this packet belongs. The port
            number 0 MUST NOT be used.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.CommonHeader.DestinationPortNumber">
            <summary>
            Gets or sets the destination port number.
            </summary>
            <value>
            This is the SCTP port number to which this packet is destined.
            The receiving host will use this port number to de-multiplex the
            SCTP packet to the correct receiving endpoint/application. The
            port number 0 MUST NOT be used.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.CommonHeader.VerificationTag">
            <summary>
            Gets or sets the verification tag.
            </summary>
            <value>
            The receiver of this packet uses the Verification Tag to validate
            the sender of this SCTP packet. On transmit, the value of this
            Verification Tag MUST be set to the value of the Initiate Tag
            received from the peer endpoint during the association
            initialization, with the following exceptions:
            - A packet containing an INIT chunk MUST have a zero Verification
            Tag.
            - A packet containing a SHUTDOWN COMPLETE chunk with the T bit
            set MUST have the Verification Tag copied from the packet with
            the SHUTDOWN ACK chunk.
            - A packet containing an ABORT chunk may have the verification
            tag copied from the packet that caused the ABORT to be sent.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.CommonHeader.Checksum">
            <summary>
            Gets or sets checksum
            </summary>
            <value>
            This field contains the checksum of this SCTP packet.
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CommonHeader.#ctor(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.CommonHeader" /> class.
            </summary>
            <param name="sourcePort">The source port.</param>
            <param name="destionationPort">The destionation port.</param>
            <param name="vTag">The verification tag.</param>
            <param name="checksum">The checksum.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CommonHeader.#ctor(System.Int32,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.CommonHeader" /> class.
            This constructor sets the checksum value to 0.
            </summary>
            <param name="sourcePort">The source port.</param>
            <param name="destionationPort">The destionation port.</param>
            <param name="vTag">The verification tag.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CommonHeader.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CommonHeader.GetBytes(FM.LiveSwitch.Sctp.CommonHeader)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="header">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CommonHeader.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a packet.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.ControlChunk">
            <summary>
            SCTP Control Chunk properties and methods
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ControlChunk.CanBundleWithDataAndSackChunks">
            <summary>
            Indicates whether this control chunk can be bundled with DATA chunks in an SCTP packet
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.CookieAckChunk">
            <summary>
            Cookie Acknowledgement (COOKIE ACK) (11)
            This chunk is used only during the initialization of an association.
            It is used to acknowledge the receipt of a COOKIE ECHO chunk. This
            chunk MUST precede any DATA or SACK chunk sent within the
            association, but MAY be bundled with one or more DATA chunks or SACK
            chunk’s in the same SCTP packet.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |     Type = 11 |   Chunk Flags |            Length = 4         |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookieAckChunk.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.CookieAckChunk" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookieAckChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookieAckChunk.GetBytes(FM.LiveSwitch.Sctp.CookieAckChunk)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookieAckChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.CookieEchoChunk">
            <summary>
            This chunk is used only during the initialization of an association.
            It is sent by the initiator of an association to its peer to complete
            the initialization process. This chunk MUST precede any DATA chunk
            sent within the association, but MAY be bundled with one or more DATA
            chunks in the same packet.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |   Type = 10   |   Chunk Flags |           Length              |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                            Cookie                             /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.CookieEchoChunk.CookieBytes">
            <summary>
            This field must contain the exact cookie in byte format received in the State
            Cookie parameter from the previous INIT ACK.
            An implementation SHOULD make the cookie as small as possible to
            ensure interoperability.
            Note: A Cookie Echo does NOT contain a State Cookie parameter;
            instead, the data within the State Cookie’s Parameter Value
            becomes the data within the Cookie Echo’s Chunk Value. This
            allows an implementation to change only the first 2 bytes the
            State Cookie parameter to become a COOKIE ECHO chunk.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookieEchoChunk.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.CookieEchoChunk" /> class.
            </summary>
            <param name="cookieBytes">The cookie bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookieEchoChunk.#ctor(FM.LiveSwitch.Sctp.StateCookie)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.CookieEchoChunk" /> class.
            </summary>
            <param name="cookie">The cookie bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookieEchoChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookieEchoChunk.GetBytes(FM.LiveSwitch.Sctp.CookieEchoChunk)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.CookieEchoChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.DataChunk">
            <summary>
            Payload Data Chunk
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            | Type = 0      |  Res. |I|U|B|E|           Length              |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                           TSN                                 |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |           Stream Identifier S | Stream Sequence Number n      |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                   Payload Protocol Identifier                 |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            \                                                               \
            /                   User Data (seq n of Stream S)               /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            Update as of 2016-10-27: Introduction of the (I)mmediate bit as per RFC 7053
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataChunk.SackImmediately">
            <summary>
            Gets or sets a value indicating whether the receiver of this <see cref="T:FM.LiveSwitch.Sctp.DataChunk"/> the receiver SHOULD immediately 
            respond with the corresponding SACK chunk. Implementation as per RFC 7053
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataChunk.Acked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FM.LiveSwitch.Sctp.DataChunk"/> has been received.
            </summary>
            <value>
              <c>true</c> if acked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataChunk.Abandoned">
            <summary>
            Gets or sets a value indicating whether this Data chunk is abandoned.
            At some point, a sending PR-SCTP implementation MAY determine that a particular data chunk SHOULD NOT be transmitted or retransmitted
            further, in accordance with the rules governing some particular PR-SCTP service definition.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataChunk.Raised">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FM.LiveSwitch.Sctp.DataChunk"/> has been received and raised to the user.
            </summary>
            <value>
              <c>true</c> if raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataChunk.Unordered">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FM.LiveSwitch.Sctp.DataChunk"/> is an unordered.
            If set to true, this is an unordered DATA chunk, and there is no Stream Sequence Number assigned to it. 
            Therefore, the receiver MUST ignore the StreamSequenceNumber field. 
            After reassembly (if necessary), unordered DATA chunks MUST be dispatched to the upper layer 
            by the receiver without any attempt to reorder. If an unordered user message is fragmented, each fragment
            of the message MUST have this set to true.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataChunk.Beginning">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FM.LiveSwitch.Sctp.DataChunk"/> is the first fragment of a user message.
            </summary>
            <value>
              <c>true</c> if beginning; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataChunk.Ending">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FM.LiveSwitch.Sctp.DataChunk"/> is last fragment of a user message.
            </summary>
            <value>
              <c>true</c> if beginning; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataChunk.Tsn">
            <summary>
            This value represents the sequence number for the entire DATA stream (used in fragmentation for reassembly) for this DATA chunk. 
            The valid range of TSN is from 0 to 4294967295 (2**32 - 1). TSN wraps back to 0 after reaching 4294967295.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataChunk.StreamIdentifier">
            <summary>
            Identifies the stream to which the following user data belongs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataChunk.StreamSequenceNumber">
            <summary>
            This value represents the Stream Sequence Number of the following user data within the stream represented by <see cref="P:FM.LiveSwitch.Sctp.DataChunk.StreamIdentifier"/>. 
            Valid range is 0 to 65535. When a user message is fragmented by SCTP for transport, the same Stream Sequence Number MUST be carried in each
            of the fragments of the message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataChunk.PayloadProtocolIdentifier">
            <summary>
            Gets or sets the payload protocol identifier. This value represents an application (or upper layer) specified protocol identifier. 
            This value is passed to SCTP by its upper layer and sent to its peer. This identifier is not used by SCTP but can be used by certain network entities, 
            as well as by the peer application, to identify the type of information being carried in this DATA chunk. This field must be sent even in fragmented DATA 
            chunks (to make sure it is available for agents in the middle of the network). Note that this field is NOT touched by an SCTP implementation; 
            therefore, its byte order is NOT necessarily big endian. The upper layer is responsible for any byte order conversions to this field. The value 0 indicates 
            that no application identifier is specified by the upper layer for this payload data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataChunk.UserData">
            <summary>
            This is the payload user data. The implementation MUST pad the end of the data to a 4-byte boundary with all-zero bytes. 
            Any padding MUST NOT be included in the Length field. A sender MUST never add more than 3 bytes of padding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataChunk.TransmissionTime">
            <summary>
            Gets or sets the latest time when this chunk was transmitted (in milliseconds since 01.01.1970).
            If the chunk has never been transmitted, the value is set to -1.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataChunk.Message">
            <summary>
            Gets or sets message chunk supplied to the Sctp Transport.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataChunk.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int64,System.Int32,System.Int32,System.Int64,System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.DataChunk" /> chunk class.
            </summary>
            <param name="unordered">Indicates if this <see cref="T:FM.LiveSwitch.Sctp.DataChunk" /> chunk is unordered.</param>
            <param name="beginning">Indicates if this is the first fragment of a user message.</param>
            <param name="ending">Indicates if this is the last fragment of a user message.</param>
            <param name="tsn">The sequence number for the entire <see cref="T:FM.LiveSwitch.Sctp.DataChunk" /> stream (used in fragmentation for reassembly).</param>
            <param name="streamId">The stream identifier.</param>
            <param name="ssn">The stream sequence number.</param>
            <param name="ppi">The payload protocol identifier.</param>
            <param name="userData">User data.</param>
            <param name="sackImmediately">Do not delay sending corresponding SACK.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataChunk.GetBytes(FM.LiveSwitch.Sctp.DataChunk)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataChunk.SubtractTSN(System.Int64,System.Int64)">
            <summary>
            Calculates the difference between tsnA and tsnB
            by subtracting the value of tsnB from tsnA and taking
            TSN rollover into account.
            </summary>
            <param name="tsnA">The TSN a.</param>
            <param name="tsnB">The TSN b.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataChunk.AddTSN(System.Int64,System.Int64)">
            <summary>
            Calculates the sum of TSN A and TSN B taking
            TSN rollover into account.
            </summary>
            <param name="tsnA">The TSN a.</param>
            <param name="tsnB">The TSN b.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataChunk.IncrementTSN(System.Int64)">
            <summary>
            Increments TSN value, rolling it over(if necessary).
            </summary>
            <param name="tsn">The next TSN.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataChunk.IncrementSSN(System.Int32)">
            <summary>
            Increments SSN value, rolling it over(if necessary).
            </summary>
            <param name="ssn">The next SSN.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataChunk.DecrementTSN(System.Int64)">
            <summary>
            Decrements TSN value, rolling it over(if necessary).
            </summary>
            <param name="tsn">The previous TSN.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataChunk.CompareSsns(System.Int64,System.Int64)">
            <summary>
            Compares two SSN values (accounting for SSN rollover)
            </summary>
            <param name="ssnA">SSN value a.</param>
            <param name="ssnB">SSN value b.</param>
            <returns>0 if values are the same; 1 if the first value is greater; 2 if the second value is greater.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataChunk.CompareTsns(System.Int64,System.Int64)">
            <summary>
            Compares two TSN values (accounting for TSN rollover)
            </summary>
            <param name="tsnA">TSN value a.</param>
            <param name="tsnB">TSN value b.</param>
            <returns>0 if values are the same; 1 if the first value is greater; 2 if the second value is greater.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataChunk.MinTsns(System.Int64,System.Int64)">
            <summary>
            Compares two TSN values returning the smaller one (accounting for TSN rollover)
            </summary>
            <param name="tsnA">TSN value a.</param>
            <param name="tsnB">TSN value b.</param>
            <returns>The smaller of the two supplied values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataChunk.MaxTsns(System.Int64,System.Int64)">
            <summary>
            Compares two TSN values returning the greater one (accounting for TSN rollover)
            </summary>
            <param name="tsnA">TSN value a.</param>
            <param name="tsnB">TSN value b.</param>
            <returns>The smaller of the two supplied values.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.DataQueue">
            <summary>
            SCTP DATA Queue
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataQueue.GetNextChunk(System.Int64)">
            <summary>
            Gets the chunk with the TSN next after the given TSN. If none is found, null is returned.
            </summary>
            <param name="tsn">The TSN.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataQueue.GetPreviousChunk(System.Int64)">
            <summary>
            Gets the chunk with the TSN just prior the given TSN. If none is found, null is returned.
            </summary>
            <param name="tsn">The TSN.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataQueue.Purge(System.Int64)">
            <summary>
            Removes all the data chunks up to and including the given TSN from the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataQueue.RemoveAll">
            <summary>
            Removes chunks from the queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataQueue.EarliestTSN">
            <summary>
            Gets the earliest TSN in the data queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataQueue.Tsns">
            <summary>
            Gets a copy of TSN values of DATA chunks in queue in order.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataQueue.Add(FM.LiveSwitch.Sctp.DataChunk)">
            <summary>
            Adds the specified DATA chunk.
            </summary>
            <param name="dataChunk">The data chunk.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataQueue.Remove(System.Int64)">
            <summary>
            Removes the data chunk with the specified TSN.
            </summary>
            <param name="tsn">The TSN.</param>
            <returns>If the entry was successfully removed</returns>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.DataQueue.Count">
            <summary>
            Gets the number of entries in this queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataQueue.GetChunk(System.Int64)">
            <summary>
            Returns DATA chunk from the quue with the given tsn
            </summary>
            <param name="tsn">The TSN.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.DataQueue.ChunkExists(System.Int64)">
            <summary>
            Returns value indicating if chunk with the given value exists in the queue
            </summary>
            <param name="tsn">The TSN value to test.</param>
            <returns>Value indicating whether the chunk with given value exists</returns>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.ErrorChunk">
            <summary>
            An endpoint sends this chunk to its peer endpoint to notify it of
            certain error conditions. It contains one or more error causes. An
            Operation Error is not considered fatal in and of itself, but may be
            used with an ABORT chunk to report a fatal condition. It has the
            following parameters:
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |      Type = 9 |   Chunk Flags |               Length          |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            \                                                               \
            /                   one or more Error Causes                    /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ErrorChunk.ErrorCauses">
            <summary>
            Gets or sets the errors.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ErrorChunk.#ctor(FM.LiveSwitch.Sctp.ErrorCause[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.ErrorChunk" /> class.
            </summary>
            <param name="errorCauses">The errors.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ErrorChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ErrorChunk.GetBytes(FM.LiveSwitch.Sctp.ErrorChunk)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ErrorChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to an error.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.ForwardTsnChunk">
            <summary>
            This chunk shall be used by the data sender to inform the data
            receiver to adjust its cumulative received TSN point forward because
            some missing TSNs are associated with data chunks that SHOULD NOT be
            transmitted or retransmitted by the sender.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |   Type = 192  |  Flags = 0x00 |        Length = Variable      |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                      New Cumulative TSN                       |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |         Stream-1              |       Stream Sequence-1       |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            \                                                               /
            /                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |         Stream-N              |       Stream Sequence-N       |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ForwardTsnChunk.NewCumulativeTsnAck">
            <summary>
            Gets or sets a value that indicates the new cumulative TSN to the data receiver.
            Upon the reception of this value, the data receiver MUST consider any missing TSNs 
            earlier than or equal to this value as received, and stop reporting them as gaps 
            in any subsequent SACKs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ForwardTsnChunk.StreamStreamSequencePairs">
            <summary>
            Gets or sets the pairs of Stream-N and Stream Sequence-N values. 
            *** Stream-N: This field holds a stream number that was skipped by this FWD-TSN.
            *** Stream Sequence-N: This field holds the sequence number associated with the stream that was skipped.
            The stream sequence field holds the largest stream sequence number in this stream being skipped. The receiver 
            of the FWD-TSN's can use the Stream-N and Stream Sequence-N fields to enable delivery of any stranded TSN's that 
            remain on the stream re-ordering queues.This field MUST NOT report TSN's corresponding to DATA chunks that are marked
            as unordered.For ordered DATA chunks this field MUST be filled in.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ForwardTsnChunk.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.ForwardTsnChunk" /> class.
            </summary>
            <param name="newCumulativeTsnAck">New cumulative TSN ack.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ForwardTsnChunk.#ctor(System.Int64,System.Int32[][])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.ForwardTsnChunk" /> class.
            </summary>
            <param name="newCumulativeTsnAck">New cumulative TSN ack.</param>
            <param name="streamStreamSequencePairs">Pairs of Stream-N and Stream Sequence-N values</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ForwardTsnChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ForwardTsnChunk.GetBytes(System.Int32)">
            <summary>
            Converts this instance to a byte array subject to a specified limit.
            </summary>
            <param name="sizeLimit">Resulting chunk size limit in bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ForwardTsnChunk.GetBytes(FM.LiveSwitch.Sctp.ForwardTsnChunk,System.Int32)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            <param name="sizeLimit">Resulting chunk size limit in bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ForwardTsnChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.HeartbeatAckChunk">
            <summary>
            An endpoint should send this chunk to its peer endpoint as a response
            to a HEARTBEAT chunk (see Section 8.3). A HEARTBEAT ACK is always
            sent to the source IP address of the IP datagram containing the
            HEARTBEAT chunk to which this ack is responding.
            The parameter field contains a variable-length opaque data structure.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |      Type = 5 |   Chunk Flags |        Heartbeat ACK Length   |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            \                                                               \
            /           Heartbeat Information TLV (Variable-Length)         /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.HeartbeatAckChunk.HeartbeatInfo">
            <summary>
            Gets or sets the heartbeat information (variable length).
            The Sender-Specific Heartbeat Info field should normally include
            information about the sender’s current time when this HEARTBEAT
            chunk is sent and the destination transport address to which this
            HEARTBEAT is sent. This information is simply
            reflected back by the receiver in the HEARTBEAT ACK message.
            Note also that the HEARTBEAT message is both for
            reachability checking and for path verification.
            When a HEARTBEAT chunk is being used for path verification
            purposes, it MUST hold a 64-bit random nonce.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HeartbeatAckChunk.#ctor(FM.LiveSwitch.Sctp.TlvParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.HeartbeatAckChunk" /> class.
            </summary>
            <param name="heartbeatInfo">The heartbeat information.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HeartbeatAckChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HeartbeatAckChunk.GetBytes(FM.LiveSwitch.Sctp.HeartbeatAckChunk)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HeartbeatAckChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.HeartbeatChunk">
            <summary>
            An endpoint should send this chunk to its peer endpoint to probe the
            reachability of a particular destination transport address defined in
            the present association.
            The parameter field contains the Heartbeat Information, which is a
            variable-length opaque data structure understood only by the sender.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |      Type = 4 |   Chunk Flags |        Heartbeat Length       |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            \                                                               \
            /           Heartbeat Information TLV (Variable-Length)         /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.HeartbeatChunk.HeartbeatInfo">
            <summary>
            Gets or sets the heartbeat information (variable length).
            The Sender-Specific Heartbeat Info field should normally include
            information about the sender’s current time when this HEARTBEAT
            chunk is sent and the destination transport address to which this
            HEARTBEAT is sent. This information is simply
            reflected back by the receiver in the HEARTBEAT ACK message.
            Note also that the HEARTBEAT message is both for
            reachability checking and for path verification.
            When a HEARTBEAT chunk is being used for path verification
            purposes, it MUST hold a 64-bit random nonce.
            </summary>=
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HeartbeatChunk.#ctor(FM.LiveSwitch.Sctp.TlvParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.HeartbeatChunk" /> class.
            </summary>
            <param name="heartbeatInfo">The heartbeat information.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HeartbeatChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HeartbeatChunk.GetBytes(FM.LiveSwitch.Sctp.HeartbeatChunk)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.HeartbeatChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.InitAckChunk">
            <summary>
            The INIT ACK chunk is used to acknowledge the initiation of an SCTP association.
            The parameter part of INIT ACK is formatted similarly to the INIT chunk.
            It uses two extra variable parameters: The State Cookie and the Unrecognized Parameter
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |      Type = 1 |   Chunk Flags |       Chunk Length            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                         Initiate Tag                          |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |            Advertised Receiver Window Credit (a_rwnd)         |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            | Number of Outbound Streams    |   Number of Inbound Streams   |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                            Initial TSN                        |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            \                                                               \
            /                   Optional/Variable-Length Parameters         /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitAckChunk.InitiateTag">
            <summary>
            Gets or sets the initiate-tag parameter.
            The receiver of the INIT ACK records the value of the Initiate Tag
            parameter. This value MUST be placed into the Verification Tag
            field of every SCTP packet that the INIT ACK receiver transmits
            within this association. The Initiate Tag MUST NOT take the value 0.
            If the value of the Initiate Tag in a received INIT ACK chunk is
            found to be 0, the receiver MUST destroy the association
            discarding its SCTPAssociationStateArgs. The receiver MAY send an ABORT for debugging purpose.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitAckChunk.AdvertisedReceiverWindowCredit">
            <summary>
            Gets or sets the advertised receiver window credit (a_rwnd): 32 bits (unsigned integer)
            This value represents the dedicated buffer space, in number of bytes, the sender of the INIT_ACK has reserved
            in association with this window. During the life of the association, this buffer space SHOULD NOT be lessened
            (i.e., dedicated buffers taken away from this association); however, an endpoint MAY change the value of a_rwnd
            it sends in SACK chunks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitAckChunk.NumberOfOutboundStreams">
            <summary>
            Gets or sets the number of outbound streams (OS): 16 bits (unsigned integer)
            Defines the number of outbound streams the sender of this INIT
            chunk wishes to create in this association. The value of 0 MUST
            NOT be used.
            Note: A receiver of an INIT with the OS value set to 0 SHOULD abort the association.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitAckChunk.NumberOfInboundStreams">
            <summary>
            Gets or sets the number of inbound streams (MIS): 16 bits (unsigned integer).
            Defines the maximum number of streams the sender of this INIT chunk allows the peer end to create in this association.
            The value 0 MUST NOT be used. Note: There is no negotiation of the actual number of streams but instead the two endpoints
            will use the min(requested, offered).
            Note: A receiver of an INIT with the MIS value of 0 SHOULD abort the association.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitAckChunk.InitialTsn">
            <summary>
            Gets or sets the initial TSN (I-TSN): 32 bits (unsigned integer)
            Defines the initial TSN that the sender will use. The valid range is from 0 to 4294967295.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitAckChunk.IPv4Addresses">
            <summary>
            Gets or sets IPv4 addresses (optional).
            Combined with the Source Port Number in the SCTP common header,
            the value passed in an IPv4 or IPv6 Address parameter indicates a
            transport address the sender of the INIT will support for the
            association being initiated. That is, during the life time of
            this association, this IP address can appear in the source address
            field of an IP datagram sent from the sender of the INIT, and can
            be used as a destination address of an IP datagram sent from the
            receiver of the INIT.
            More than one IP Address parameter can be included in an INIT
            chunk when the INIT sender is multi-homed. Moreover, a multihomed
            endpoint may have access to different types of network;
            thus, more than one address type can be present in one INIT chunk,
            i.e., IPv4 and IPv6 addresses are allowed in the same INIT chunk.
            If the INIT contains at least one IP Address parameter, then the
            source address of the IP datagram containing the INIT chunk and
            any additional address(es) provided within the INIT can be used as
            destinations by the endpoint receiving the INIT. If the INIT does
            not contain any IP Address parameters, the endpoint receiving the
            INIT MUST use the source address associated with the received IP
            datagram as its sole destination address for the association.
            Note that not using any IP Address parameters in the INIT and INIT
            ACK is an alternative to make an association more likely to work
            across a NAT box.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitAckChunk.HostNameAddress">
            <summary>
            Gets or sets the host name address.
            The sender of INIT uses this parameter to pass its Host Name (in
            place of its IP addresses) to its peer. The peer is responsible for
            resolving the name. Using this parameter might make it more likely
            for the association to work across a NAT box.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitAckChunk.StateCookieChunk">
            <summary>
            Gets or sets the state cookie. State Cookie Parameter Type Value: 7
            Parameter Length: Variable size, depending on size of Cookie.
            Parameter Value:
            This parameter value MUST contain all the necessary state and
            parameter information required for the sender of this INIT ACK to
            create the association, along with a Message Authentication Code(MAC).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitAckChunk.UnrecognizedParameter">
            <summary>
            Gets or sets the unrecognized parameter.
            Unrecognized Parameter: Parameter Type Value: 8
            Parameter Length: Variable size. Parameter Value:
            This parameter is returned to the originator of the INIT chunk
            when the INIT contains an unrecognized parameter that has a value
            that indicates it should be reported to the sender. This
            parameter value field will contain unrecognized parameters copied
            from the INIT chunk complete with Parameter Type, Length, and
            Value fields.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitAckChunk.AuthenticatedChunksParameters">
            <summary>
            Gets or sets the details of the support for authenticated chunks parameters (as defined in RFC 4895).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitAckChunk.PartialReliabilityParameters">
            <summary>
            Gets or sets the details of the support for SCTP partial reliability (as defined in RFC 3758).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitAckChunk.DynamicAddressReconfigurationParameters">
            <summary>
            Gets or sets the details of the support for SCTP dynamic address reconfiguration (as defined in RFC 5061).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitAckChunk.SupportedExtensionsChunks">
            <summary>
            Gets or sets the supported extensions chunks.  This parameter is used at startup to identify any additional
            extensions that the sender supports.  The sender MUST support both
            the sending and the receiving of any chunk types listed within the
            Supported Extensions Parameter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitAckChunk.UnrecognizedParametersThatNeedToBeReportedBackToSender">
            <summary>
            Gets or sets the unrecognized parameters.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InitAckChunk.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,System.Int64,FM.LiveSwitch.Sctp.StateCookieChunkParameter,FM.LiveSwitch.Sctp.HostNameAddressChunkParameter,FM.LiveSwitch.Sctp.UnrecognizedParameterChunkParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.InitAckChunk"/> class.
            </summary>
            <param name="initiateTag">The initiate tag.</param>
            <param name="advertisedReceiverWindowCredit">The advertised receiver window credit.</param>
            <param name="numberOfOutboundStreams">The number of outbound streams.</param>
            <param name="numberOfInboundStreams">The number of inbound streams.</param>
            <param name="initialTsn">The initial TSN.</param>
            <param name="stateCookie">The state cookie.</param>
            <param name="hostNameAddress">The host name address.</param>
            <param name="unrecognizedParameter">The unrecognized parameter.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InitAckChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InitAckChunk.GetBytes(FM.LiveSwitch.Sctp.InitAckChunk)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InitAckChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.InitChunk">
            <summary>
            This chunk is used to initiate an SCTP association between two endpoints.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |      Type = 1 |   Chunk Flags |       Chunk Length            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                         Initiate Tag                          |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |            Advertised Receiver Window Credit (a_rwnd)         |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            | Number of Outbound Streams    |   Number of Inbound Streams   |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                            Initial TSN                        |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            \                                                               \
            /                   Optional/Variable-Length Parameters         /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitChunk.InitiateTag">
            <summary>
            Gets or sets the initiate-tag parameter.
            The receiver of the INIT (the responding end) records the value of the Initiate Tag parameter.
            This value MUST be placed into the Verification Tag field of every SCTP packet that the receiver of
            the INIT transmits within this association. The Initiate Tag is allowed to have any value except 0.
            If the value of the Initiate Tag in a received INIT chunk is found to be 0, the receiver MUST treat
            it as an error and close the association by transmitting an ABORT.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitChunk.AdvertisedReceiverWindowCredit">
            <summary>
            Gets or sets the advertised receiver window credit (a_rwnd): 32 bits (unsigned integer)
            This value represents the dedicated buffer space, in number of bytes, the sender of the INIT has reserved
            in association with this window. During the life of the association, this buffer space SHOULD NOT be lessened
            (i.e., dedicated buffers taken away from this association); however, an endpoint MAY change the value of a_rwnd
            it sends in SACK chunks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitChunk.NumberOfOutboundStreams">
            <summary>
            Gets or sets the number of outbound streams (OS): 16 bits (unsigned integer)
            Defines the number of outbound streams the sender of this INIT
            chunk wishes to create in this association. The value of 0 MUST
            NOT be used.
            Note: A receiver of an INIT with the OS value set to 0 SHOULD abort the association.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitChunk.NumberOfInboundStreams">
            <summary>
            Gets or sets the number of inbound streams (MIS): 16 bits (unsigned integer).
            Defines the maximum number of streams the sender of this INIT chunk allows the peer end to create in this association.
            The value 0 MUST NOT be used. Note: There is no negotiation of the actual number of streams but instead the two endpoints
            will use the min(requested, offered).
            Note: A receiver of an INIT with the MIS value of 0 SHOULD abort the association.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitChunk.InitialTsn">
            <summary>
            Gets or sets the initial TSN (I-TSN): 32 bits (unsigned integer)
            Defines the initial TSN that the sender will use. The valid range is from 0 to 4294967295.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitChunk.IPv4Addresses">
            <summary>
            Gets or sets the IPv4 addresses (optional).
            Combined with the Source Port Number in the SCTP common header,
            the value passed in an IPv4 or IPv6 Address parameter indicates a
            transport address the sender of the INIT will support for the
            association being initiated. That is, during the life time of
            this association, this IP address can appear in the source address
            field of an IP datagram sent from the sender of the INIT, and can
            be used as a destination address of an IP datagram sent from the
            receiver of the INIT.
            More than one IP Address parameter can be included in an INIT
            chunk when the INIT sender is multi-homed. Moreover, a multihomed
            endpoint may have access to different types of network;
            thus, more than one address type can be present in one INIT chunk,
            i.e., IPv4 and IPv6 addresses are allowed in the same INIT chunk.
            If the INIT contains at least one IP Address parameter, then the
            source address of the IP datagram containing the INIT chunk and
            any additional address(es) provided within the INIT can be used as
            destinations by the endpoint receiving the INIT. If the INIT does
            not contain any IP Address parameters, the endpoint receiving the
            INIT MUST use the source address associated with the received IP
            datagram as its sole destination address for the association.
            Note that not using any IP Address parameters in the INIT and INIT
            ACK is an alternative to make an association more likely to work
            across a NAT box.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitChunk.SuggestedCookieLifeSpanIncrement">
            <summary>
            Gets or sets the suggested cookie life-span increment (msec). Optional
            The sender of the INIT shall use this parameter to suggest to the
            receiver of the INIT for a longer life-span of the State Cookie.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitChunk.HostNameAddress">
            <summary>
            Gets or sets the host name address.
            The sender of INIT uses this parameter to pass its Host Name (in
            place of its IP addresses) to its peer. The peer is responsible for
            resolving the name. Using this parameter might make it more likely
            for the association to work across a NAT box.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitChunk.SupportedAddressTypes">
            <summary>
            Gets or sets the supported address types (12).The sender of INIT uses this parameter
            to list all the address typesit can support.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitChunk.AuthenticatedChunksParameters">
            <summary>
            Gets or sets the details of the support for authenticated chunks parameters (as defined in RFC 4895).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitChunk.PartialReliabilityParameters">
            <summary>
            Gets or sets the details of the support for SCTP partial reliability (as defined in RFC 3758).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitChunk.DynamicAddressReconfigurationParameters">
            <summary>
            Gets or sets the details of the support for SCTP dynamic address reconfiguration (as defined in RFC 5061).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitChunk.SupportedExtensionsChunks">
            <summary>
            Gets or sets the supported extensions chunks.  This parameter is used at startup to identify any additional
            extensions that the sender supports.  The sender MUST support both
            the sending and the receiving of any chunk types listed within the
            Supported Extensions Parameter.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.InitChunk.UnrecognizedParametersThatNeedToBeReportedBackToSender">
            <summary>
            Gets or sets the unrecognized parameters.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InitChunk.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.InitChunk" /> class.
            </summary>
            <param name="initiateTag">The initiate tag.</param>
            <param name="advertisedReceiverWindowCredit">The advertised receiver window credit.</param>
            <param name="numberOfOutboundStreams">The number of outbound streams.</param>
            <param name="numberOfInboundStreams">The number of inbound streams.</param>
            <param name="initialTsn">The initial TSN.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InitChunk.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,System.Int64,FM.LiveSwitch.Sctp.PartialReliabilitySupportParameters,FM.LiveSwitch.Sctp.AuthenticatedChunksParameters,FM.LiveSwitch.Sctp.DynamicAddressReconfigurationSupportParameters,FM.LiveSwitch.Sctp.CookiePreservativeChunkParameter,FM.LiveSwitch.Sctp.HostNameAddressChunkParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.InitChunk" /> class.
            </summary>
            <param name="initiateTag">The initiate tag.</param>
            <param name="advertisedReceiverWindowCredit">The advertised receiver window credit.</param>
            <param name="numberOfOutboundStreams">The number of outbound streams.</param>
            <param name="numberOfInboundStreams">The number of inbound streams.</param>
            <param name="initialTsn">The initial TSN.</param>
            <param name="partialReliabilityParameters">The partial reliability parameters.</param>
            <param name="authenticatedChunksParameters">The authenticated chunks parameters.</param>
            <param name="addressReconfigParameters">The address reconfig parameters.</param>
            <param name="suggestedCookieLifeSpanIncrement">The suggested cookie life span increment.</param>
            <param name="hostNameAddress">The host name address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InitChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InitChunk.GetBytes(FM.LiveSwitch.Sctp.InitChunk)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.InitChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.Message">
            <summary>
            An SCTP message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Message.OnSuccess">
            <summary>
            Gets or sets the callback to invoke when delivery of the message has been acknowledged.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Message.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the connection fails before the message has been acknowledged.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Message.Payload">
            <summary>
            Gets or sets the data payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Message.PayloadType">
            <summary>
            Gets or sets the type of the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Message.Unordered">
            <summary>
            Gets or sets a value indicating whether out-of-order delivery is acceptable.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Message.StreamId">
            <summary>
            Gets the stream identifier.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Message.#ctor(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.Message" /> class.
            </summary>
            <param name="payload">The data payload.</param>
            <param name="streamId">The SCTP stream ID.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.Packet">
            <summary>
            An SCTP packet is composed of a common header and chunks. A chunk
            contains either control information or user data.
            The SCTP packet format is shown below:
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                       Common Header                           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                       Chunk #1                                |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                           ...                                 |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                       Chunk #n                                |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            Multiple chunks can be bundled into one SCTP packet up to the MTU
            size, except for the INIT, INIT ACK, and SHUTDOWN COMPLETE chunks.
            These chunks MUST NOT be bundled with any other chunk in a packet.
            If a user data message doesn’t fit into one SCTP packet it can be
            fragmented into multiple chunks.
            All integer fields in an SCTP packet MUST be transmitted in network
            byte order, unless otherwise stated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Packet.UnrecognizedChunksThatShouldBeReportedToSender">
            <summary>
            Gets the unrecognized chunks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Packet.Header">
            <summary>
            Gets or sets the common header of the packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Packet.Chunks">
            <summary>
            Gets or sets the SCTP chunks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Packet.#ctor(FM.LiveSwitch.Sctp.CommonHeader,FM.LiveSwitch.Sctp.Chunk[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.Packet"/> class.
            </summary>
            <param name="header">The header.</param>
            <param name="chunks">The chunks.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Packet.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Packet.GetBytes(FM.LiveSwitch.Sctp.Packet)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="packet">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Packet.ParseBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a byte array to a packet.
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">Maximum number of bytes to parse.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Packet.ParseBytes(System.Byte[])">
            <summary>
            Converts a byte array to a packet starting with the beginning of the stream.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Packet.VerifyCRC32cChecksum(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Verifies the CRC32c checksum.
            </summary>
            <param name="sctpBytes">The SCTP bytes.</param>
            <param name="offset">The offset.</param>
            <param name="len">The length.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.PadChunk">
            <summary>
            This chunk is defined in RFC 4820 and is used to pad an SCTP packet.
            A PAD chunk can be used to enlarge the packet by 4 to 65536 bytes
            in steps of 4 bytes.  An SCTP packet MAY contain multiple PAD chunks.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            | Type = 0x84   |   Flags=0     |             Length            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                                                               |
            \                         Padding Data                          /
            /                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.PadChunk.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.PadChunk" /> class.
            </summary>
            <param name="length">Required size of padding chunk. Valid range: 4 to 65536 bytes in
            increments of 4 bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.PadChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.PadChunk.GetBytes(FM.LiveSwitch.Sctp.PadChunk)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.PadChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a packet.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.ReceiveDataQueue">
            <summary>
            SCTP Receieve DATA Queue
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ReceiveDataQueue.ProcessForwardTsnChunk(FM.LiveSwitch.Sctp.ForwardTsnChunk)">
            <summary>
            Examines Forward TSN Chunk and adjusts the receive queue accordingly
            </summary>
            <param name="fwd"></param>
            <returns>Returns a value indicating whether cumulative point was updated. If not, RFC 3756 indicates that a SACK should be sent to the other peer.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ReceiveDataQueue.RemoveAll">
            <summary>
            Removes chunks from the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ReceiveDataQueue.Purge(System.Int64)">
            <summary>
            Removes all the data chunks up to and including the given TSN from the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ReceiveDataQueue.Add(FM.LiveSwitch.Sctp.DataChunk)">
            <summary>
            Adds the specified DATA chunk.
            </summary>
            <param name="dataChunk">The data chunk.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ReceiveDataQueue.Remove(System.Int64)">
            <summary>
            Removes the data chunk with the specified TSN.
            </summary>
            <param name="tsn">The TSN.</param>
            <returns>If the entry was successfully removed</returns>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.ResendArgs">
            <summary>
            Arguments for the SCTP COOKIE_ECHO or INIT resending.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ResendArgs.Type">
            <summary>
            Gets or sets the type of SCTP chunk being retransmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ResendArgs.PacketBytes">
            <summary>
            Gets or sets the SCTP packet to be resent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ResendArgs.State">
            <summary>
            Gets or sets the SCTP state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ResendArgs.#ctor(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.Sctp.TcbState)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.ResendArgs" /> class.
            </summary>
            <param name="packetBytes">The packet bytes.</param>
            <param name="state">The states.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ResendArgs.#ctor(FM.LiveSwitch.Sctp.TcbState)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.ResendArgs" /> class.
            </summary>
            <param name="state">The states.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.SackChunk">
            <summary>
            This chunk is sent to the peer endpoint to acknowledge received DATA
            chunks and to inform the peer endpoint of gaps in the received
            subsequences of DATA chunks as represented by their TSNs.
            The SACK MUST contain the Cumulative TSN Ack, Advertised Receiver
            Window Credit (a_rwnd), Number of Gap Ack Blocks, and Number of
            Duplicate TSNs fields.
            By definition, the value of the Cumulative TSN Ack parameter is the
            last TSN received before a break in the sequence of received TSNs
            occurs; the next TSN value following this one has not yet been
            received at the endpoint sending the SACK. This parameter therefore
            acknowledges receipt of all TSNs less than or equal to its value.
            The SACK also contains zero or more Gap Ack Blocks. Each Gap Ack
            Block acknowledges a subsequence of TSNs received following a break
            in the sequence of received TSNs. By definition, all TSNs
            acknowledged by Gap Ack Blocks are greater than the value of the
            Cumulative TSN Ack.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |      Type = 3 |   Chunk Flags |         Chunk Length          |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                      Cumulative TSN Ack                       |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |              Advertised Receiver Window Credit (a_rwnd)       |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |  Number of Gap Ack Blocks = N |  Number of Duplicate TSNs = X |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |        Gap Ack Block #1 Start |  Gap Ack Block #1 End         |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                                                               /
            \                              ...                              \
            /                                                               /
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |        Gap Ack Block #N Start |          Gap Ack Block #N End |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                      Duplicate TSN 1                          |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            /                                                               /
            \                              ...                              \
            /                                                               /
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                          Duplicate TSN X                      |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.SackChunk.CumulativeTsnAck">
            <summary>
            Gets or sets the cumulative TSN ack: 32 bits (unsigned integer)
            This parameter contains the TSN of the last DATA chunk received in
            sequence before a gap. In the case where no DATA chunk has been
            received, this value is set to the peer’s Initial TSN minus one.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.SackChunk.AdvertisedReceiverWindowCredit">
            <summary>
            Gets or sets the advertised receiver window credit (a_rwnd): 32 bits (unsigned integer)
            This field indicates the updated receive buffer space in bytes of
            the sender of this SACK
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.SackChunk.NumberOfGapAckBlocks">
            <summary>
            Gets or sets the number of gap ACK blocks: 16 bits (unsigned integer)
            Indicates the number of gap ACK blocks included in this SACK.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.SackChunk.NumberOfDuplicateTsns">
            <summary>
            Gets or sets the number of duplicate TSNs: 16 bit
            This field contains the number of duplicate TSNs the endpoint has received.
            Each duplicate TSN is listed following the Gap Ack Block list.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.SackChunk.GapAckBlocks">
            <summary>
            Gets or sets the Gap Ack Block collection.
            All DATA chunks with TSNs greater than or equal to (Cumulative TSN Ack + Gap Ack Block
            Start) and less than or equal to (Cumulative TSN Ack + Gap Ack
            Block End) of each Gap Ack Block are assumed to have been received correctly.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.SackChunk.DuplicateTsns">
            <summary>
            Gets or sets the duplicate TSNs.
            Duplicate TSN: 32 bits (unsigned integer)
            Indicates the number of times a TSN was received in duplicate
            since the last SACK was sent. Every time a receiver gets a
            duplicate TSN (before sending the SACK), it adds it to the list of
            duplicates. The duplicate count is reinitialized to zero after
            sending each SACK. For example, if a receiver were to get the TSN 19 three times it
            would list 19 twice in the outbound SACK. After sending the SACK, if
            it received yet one more TSN 19 it would list 19 as a duplicate once
            in the next outgoing SACK.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SackChunk.#ctor(System.Int64,System.Int64,FM.LiveSwitch.Sctp.GapAckBlock[],System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.SackChunk" /> class.
            </summary>
            <param name="cumulativeTsnAck">The cumulative TSN ACK.</param>
            <param name="advertisedReceiverWindowCredit">Advertised Receiver Window Credit.</param>
            <param name="gapAckBlocks">Gap ACK Blocks (containing both start and end).</param>
            <param name="duplicateTsns">Duplicate TSNs.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SackChunk.ToString">
            <summary>
            Provides string representation of this SACK chunk to ease logging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SackChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SackChunk.GetBytes(System.Int32)">
            <summary>
            Converts this instance to a byte array subject to a specified limit.
            </summary>
            <param name="sizeLimit">Resulting chunk size limit in bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SackChunk.Equals(FM.LiveSwitch.Sctp.SackChunk)">
            <summary>
            Return a value indicating whether this SACK chunk equals to the other chunk.
            </summary>
            <param name="chunk">Chunk to compare with.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SackChunk.GetBytes(FM.LiveSwitch.Sctp.SackChunk,System.Int32)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            <param name="sizeLimit">Resulting chunk size limit in bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SackChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a parameter.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SendControlChunkQueue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.DataQueue"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SendControlChunkQueue.Enqueue(FM.LiveSwitch.Sctp.ControlChunk)">
            <summary>
            Adds the specified control chunk.
            </summary>
            <param name="controlChunk">The control chunk.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SendControlChunkQueue.Dequeue">
            <summary>
            Returns the first control chunk from the queue (as well as removes it from the queue)
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SendControlChunkQueue.Peek">
            <summary>
            Returns the first control chunk from the queue (but does not remove it from the queue)
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.Sctp.SendControlChunkQueue.Count">
            <summary>
            Gets the number of entries in this queue.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.SendDataQueue">
            <summary>
            SCTP Receieve DATA Queue
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.SendDataQueue.NonsentDataAvailable">
            <summary>
            Gets the value indicating whether there exist any data chunks that have not yet been transmitted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.SendDataQueue.Cwnd">
            <summary>
            Gets the value indicating current congestion window on this queue
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.SendDataQueue.AllAckedUpTo">
            <summary>
            Gets or sets the TSN such that all the TSNs in the queue prior to and including this value have been ACKed
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.SendDataQueue.NotAckedPast">
            <summary>
            Gets or sets the TSN such that all the TSNs in the queue after and including this value have not been ACKed
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SendDataQueue.GetFirstUnAcked">
            <summary>
            Gets the first unacknowledged chunk in queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SendDataQueue.RemoveAll">
            <summary>
            Removes chunks from the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SendDataQueue.Purge(System.Int64)">
            <summary>
            Removes all the data chunks up to and including the given TSN from the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SendDataQueue.Add(FM.LiveSwitch.Sctp.DataChunk)">
            <summary>
            Adds the specified DATA chunk.
            </summary>
            <param name="dataChunk">The data chunk.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SendDataQueue.Remove(System.Int64)">
            <summary>
            Removes the data chunk with the specified TSN.
            </summary>
            <param name="tsn">The TSN.</param>
            <returns>If the entry was successfully removed</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SendDataQueue.ProcessSackChunk(FM.LiveSwitch.Sctp.SackChunk)">
            <summary>
            Processes SACK chunk and updates this outgoing queue accordingly.
            </summary>
            <param name="sack">Chunk requiring processing.</param>
            <returns>The data chunks containing full messages that have been successfully delivered.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.SendDataQueue.MarkAs(System.Boolean,System.Int64,System.Int64)">
            <summary>
            Marks chunks starting with startTsn and ending with endTsn as acked.
            </summary>
            <param name="acked">Mark as acked or not acked</param>
            <param name="startTsn">Starting position.</param>
            <param name="endTsn">Ending position.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.ShutdownAckChunk">
            <summary>
            This chunk MUST be used to acknowledge the receipt of the SHUTDOWN
            chunk at the completion of the shutdown process.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |      Type = 8 |   Chunk Flags |         Length = 4            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ShutdownAckChunk.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.ShutdownAckChunk" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ShutdownAckChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ShutdownAckChunk.GetBytes(FM.LiveSwitch.Sctp.ShutdownAckChunk)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ShutdownAckChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a packet.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.ShutdownChunk">
            <summary>
            An endpoint in an association MUST use this chunk to initiate a
            graceful close of the association with its peer. This chunk has the
            following format.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |      Type = 7 |   Chunk Flags |       Length = 8              |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                       Cumulative TSN Ack                      |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ShutdownChunk.CumulativeTsnAck">
            <summary>
            Gets or sets the cumulative TSN ack.
            This parameter contains the TSN of the last chunk received in sequence before any gaps.
            Note: Since the SHUTDOWN message does not contain Gap Ack Blocks,
            it cannot be used to acknowledge TSNs received out of order. In a
            SACK, lack of Gap Ack Blocks that were previously included
            indicates that the data receiver reneged on the associated DATA
            chunks. Since SHUTDOWN does not contain Gap Ack Blocks, the
            receiver of the SHUTDOWN shouldn’t interpret the lack of a Gap Ack
            Block as a renege.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ShutdownChunk.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.ShutdownChunk" /> class.
            </summary>
            <param name="cumulativeTSNAck">The cumulative TSN ack.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ShutdownChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ShutdownChunk.GetBytes(FM.LiveSwitch.Sctp.ShutdownChunk)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ShutdownChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a packet.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.ShutdownCompleteChunk">
            <summary>
            This chunk MUST be used to acknowledge the receipt of the SHUTDOWN
            chunk at the completion of the shutdown process.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |      Type = 8 |Reserved     |T|         Length = 4            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.ShutdownCompleteChunk.VerificationTagReflected">
            <summary>
            Indicates whether Verification Tag is reflected (same as received).
            </summary>
            <value>
            <c>true</c> if the verification tag is reflected (returned same as received);
            <c>false</c> if the sender filled in the verification tag expected by the peer
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ShutdownCompleteChunk.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.ShutdownCompleteChunk" /> class.
            </summary>
            <param name="verificationTagReflected"><c>true</c> if the verification tag is reflected (returned same as received);
            <c>false</c> if the sender filled in the verification tag expected by the peer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ShutdownCompleteChunk.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ShutdownCompleteChunk.GetBytes(FM.LiveSwitch.Sctp.ShutdownCompleteChunk)">
            <summary>
            Converts a packet to a byte array.
            </summary>
            <param name="chunk">The packet.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.ShutdownCompleteChunk.ParseBytes(System.Byte[],System.Int32@)">
            <summary>
            Converts a byte array to a packet.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.StateCookie">
            <summary>
            State Cookie used in the initialisation part.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                           Timestamp                           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                           Timestamp                           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                        My Verification Tag                    |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                       Peer Verification Tag                   |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                           Peer RWND                           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                           Next TSN                            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |        Outbound Streams       |      0      |A|               \    
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               /
            /                                                               \
            \                                                               /
            /                           HMAC...                             \
            \                                                               /
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            Where A represents Partial Relibility Extension support;
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.StateCookie.Timestamp">
            <summary>
            Gets or sets the creation time (in milliseconds since 01.01.1970).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.StateCookie.MyVerificationTag">
            <summary>
            Gets or sets the tag expected in every inbound packet and sent in the INIT or INIT ACK chunk.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.StateCookie.PeerVerificationTag">
            <summary>
            Gets or sets the tag value to be sent in every packet and is received in the INIT or INIT ACK chunk.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.StateCookie.PeerReceiverWindowCredit">
            <summary>
            Gets or sets the peer advertised RWND.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.StateCookie.LastReceivedTsnFromPeer">
            <summary>
            Gets or sets the last received TSN from peer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.StateCookie.NumberOfOutboundStreams">
            <summary>
            Gets or sets the number of outbound streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.StateCookie.PartialReliabilityExtensionSupported">
            <summary>
            Gets or sets support for the SCTP partial relibility extension
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.StateCookie.SecretKey">
            <summary>
            Gets or sets the secret key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StateCookie.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int32,System.Int64,FM.LiveSwitch.DataBuffer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.StateCookie" /> class.
            </summary>
            <param name="myVTag">My verification tag.</param>
            <param name="peerVTag">The peer verification tag.</param>
            <param name="peerReceiverWindowCredit">The peer advertised RWND.</param>
            <param name="lastReceivedTsnFromPeer">The last received TSN from peer.</param>
            <param name="outboundStreams">The number outbound streams.</param>
            <param name="timestamp">Time created at (in milliseconds since 1970).</param>
            <param name="secretKey">The secret key.</param>
            <param name="partialReliabilitySupported">Partial relibility support.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StateCookie.GetBytes">
            <summary>
            Gets the bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StateCookie.GetBytes(FM.LiveSwitch.Sctp.StateCookie)">
            <summary>
            Gets the bytes.
            </summary>
            <param name="cookie">The cookie.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StateCookie.ParseBytes(System.Byte[],System.Int32,System.Int32@,FM.LiveSwitch.DataBuffer)">
            <summary>
            Parses bytes. Returns null if authentication fails.
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="offsetPlus">The offset plus.</param>
            <param name="secretKey">The secret key.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.StateCookie.ParseBytes(System.Byte[],System.Int32@,FM.LiveSwitch.DataBuffer)">
            <summary>
            Parses bytes. Returns null if authentication fails.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offsetPlus">The offset plus.</param>
            <param name="secretKey">The secret key.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.Stream">
            <summary>
            An SCTP stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Stream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.Stream" /> class.
            </summary>
            <param name="id">Stream ID.</param>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Stream.NextSsn">
            <summary>
            Gets or sets the next SSN for this stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Stream.Id">
            <summary>
            Gets or sets the stream identifier.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.TcbState">
            <summary>
            SCTP Association State Transition
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TcbState.CookieWait">
            <summary>
            Indicates the cookie wait state.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TcbState.CookieEchoed">
            <summary>
            Indicates the cookie echoed state.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TcbState.Established">
            <summary>
            Indicates the established state.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TcbState.ClosedNeverOpened">
            <summary>
            Indicates the closed state, where attempts to establish connections were never made.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TcbState.Closed">
            <summary>
            Indicates the closed state, where association had been previously established and then closed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TcbState.Failed">
            <summary>
            Indicates the closed state, where association had been shutdown due to an error.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TcbState.Closing">
            <summary>
            Indicates the temporary closing state, to be used while proper association shutdown is implemented.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TcbState.Failing">
            <summary>
            Indicates the temporary closing state (for the cases when shut down is due to an error), to be used while proper association shutdown is implemented.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.TlvParameter">
            <summary>
            Variable-Length Generic Parameter Type
            Chunk values of SCTP control chunks consist of a chunk-type-specific
            header of required fields, followed by zero or more parameters. The
            optional and variable-length parameters contained in a chunk are
            defined in a Type-Length-Value format as shown below.
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |      Parameter Type           |           Parameter Length    |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            \                                                               \
            /                          Parameter Value                      /
            \                                                               \
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TlvParameter.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            This is a 16-bit identifier of the type of parameter.
            Values other than those defined in specific SCTP chunk descriptions are reserved for use by IETF.
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.TlvParameter.GetBytes">
            <summary>
            Converts this instance to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.TlvParameter.ParseBytes(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="offsetPlus">The offset plus.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.TlvParameter.IsInManualListOfUnrecognizedChunkParameterThatMustBeReported(System.Int32)">
            <summary>
            Determines whether the parameter received as a part of the chunk should be treated as unrecognized (even if the implementation can parse it).
            </summary>
            <param name="parameter">The parameter.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.TransmissionControlBlock">
            <summary>
            Parameters describing the current state of association (denoted TCB in RFC 4960)
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.MaxNumberStreamFormats">
            <summary>
            Maximum number of stream types when SCTP is used
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.MaxDataChunkSize">
            <summary>
            Maximum size of the SCTP chunk
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.MaxDataPacketPayloadSize">
            <summary>
            Maximum size of the SCTP packet payload
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.ValidCookieLife">
            <summary>
            Valid cookie lifespan (in milliseconds). If this time elapses, echoed cookie in initialisation stage  becomes invalid.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.MaxTsn">
            <summary>w
            Defines the maximum allowed TSN value
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.MaxSsn">
            <summary>
            Defines the maximum allowed SSN value 
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.MaxInitiateTag">
            <summary>
            Defines the maximum Initiate Tag 
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.MaxSuggestedCookieLifespanIncrement">
            <summary>
            The maximum suggested cookie lifespan increment
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.InitRetrasmitLifetime">
            <summary>
            Time period during which manager should attempt to resend initialisation control chunks (in milliseconds)
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.T1InitRetransmissionInterval">
            <summary>
            Timeout of the T1 INIT timer (in milliseconds)
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.RtoInitial">
            <summary>
            Default DATA retransmission timeout in milliseconds
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.RtoMin">
            <summary>
            Minimum DATA retransmission timeout in milliseconds
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.RtoMax">
            <summary>
            Maximum DATA retransmission timeout in milliseconds
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.RtoAlpha">
            <summary>
            RTO.Alpha parameter for DATA retransmission timeout
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.RtoBeta">
            <summary>
            RTO.Beta parameter for DATA retransmission timeout
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.MaxAckDelay">
            <summary>
            Time period whithin which SCTP should accept incoming DATA chunk in milliseconds. Cannot be greater than 500 ms.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.AckNewDataPacketCountThreshold">
            <summary>
            After receiving this number of packets with new DATA, application will generate a SACK, unless MaxAckDelay is reached first.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.ImmediateAckThreshold">
            <summary>
            If the share of new data chunks in a received packed is smaller than this number, a SACK will be generated immediately.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.CWNDSACKTriggerLimit">
            <summary>
            Indicates how full congestion window should be when each outgoing DATA packet starts requesting an immediate SACK.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.NumberOfPacketsProcessorYieldThreshold">
            <summary>
            After sending this number of packets in a single transmission sequence, application should yield processing time to system for <seealso cref="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.TimeToYield"/> milliseconds.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.TimeToYield">
            <summary>
            After sending <seealso cref="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.NumberOfPacketsProcessorYieldThreshold"/> packets in a single transmission sequence, application should yield processing time to system for this many milliseconds.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.MaxFTSNDelay">
            <summary>
            Maximum amount of time by which a Forward Tsn can be delayed (in ms).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransmissionControlBlock.NumberOfDuplicateTsnsToSkip">
            <summary>
            Number of duplicate TSNs that can be skipped.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.DynamicAddressReconfigurationSupport">
            <summary>
            Gets or sets a value indicating whether SCTP dynamic address reconfiguration is supported.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.AuthenticatedChunksSupport">
            <summary>
            Gets or sets the authenticated chunks support info.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.PartialReliabilitySupport">
            <summary>
            Gets or sets a value indicating whether Forward TSN can be properly parsed by this endpoint (but not necessarily processed)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.ExtraPacketInFlight">
            <summary>
            Gets or sets whether there is an extra DATA chunk in flight.
            Regardless of the value of rwnd (including if it is 0),
            the data sender can always have one DATA chunk in flight to the receiver if allowed by cwnd (Rule 6.1 A in RFC 4960)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.MyVerificationTag">
            <summary>
            Gets or sets the tag expected in every inbound packet and sent in the INIT or INIT ACK chunk.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.PeerVerificationTag">
            <summary>
            Gets or sets the tag value to be sent in every packet and is received in the INIT or INIT ACK chunk.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.State">
            <summary>
            Gets or sets a state variable indicating what state the association is in
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.OverallErrorCount">
            <summary>
            Gets or sets the overall association error count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.OverallErrorThreshold">
            <summary>
            Gets or sets the threshold for this association that if the Overall Error Count reaches will cause this association to be torn down.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.PeerReceiverWindowCredit">
            <summary>
            Gets or sets the peer's rwnd.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.AdvertisedReceiverWindowCredit">
            <summary>
            Gets or sets the advertised receiver window credit for this endpoint.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.NextTsnToSend">
            <summary>
            Gets or sets the next TSN number to be assigned to a new DATA chunk. This is sent in the INIT or INIT ACK chunk to the peer and incremented each time a DATA chunk is assigned a
            TSN (normally just prior to transmit or during fragmentation).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.RemoteLikelyInConnectedState">
            <summary>
            Gets or sets a value indicating whether or not local should infer that remote must have switched to Connected state at some point.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.CookieAckSent">
            <summary>
            Gets or sets a value indicating that Cookie_Ack was sent in the past.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.GreatestReceivedTsn">
            <summary>
            Gets or sets the last TSN received in sequence. This value is set initially by taking the peer’s initial TSN, received in the INIT or INIT ACK chunk, and subtracting one from it.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.GreatestCumulativeTsnReceived">
            <summary>
            Gets or sets the greatest TSN value such that all the chunks prior to and including this value have been received
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.SackCounter">
            <summary>
            Gets or sets the flag that indicates if the next received packet is to be responded to with a SACK. This is initialized to 0. When a packet (with DATA chunks) is received it is incremented.
            If this value reaches 2 or more, a SACK is sent and the value is reset to 0. Note: This is used only when no DATA chunks are received out of order. When DATA
            chunks are out of order, SACKs are not delayed (see Section 6 of RFC 4960).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.InboundStreams">
            <summary>
            Gets or sets an array of structures to track the inbound streams, normally including the next sequence number expected and possibly the stream number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.OutboundStreams">
            <summary>
            Gets or sets an array of structures to track the outbound channels, normally including the next sequence number to be sent on the stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.AssociationPmtu">
            <summary>
            Gets or sets the smallest PMTU discovered for the peer's transport address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.CongestionWindow">
            <summary>
            Gets or sets the current congestion window.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.MaximumStaticCongestionWindow">
            <summary>
            Gets or sets the maximum static CWND. Temporary solution before proper congestion control is implemented.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.SSThresh">
            <summary>
            Gets or sets the current ssthresh.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.RetransmissionTimeout">
            <summary>
            Gets or sets the current retransmission timeout value (in ms).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.SmoothedRoundTripTime">
            <summary>
            Gets or sets the Smoothed Round Trip Time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.RoundTripTimeVariation">
            <summary>
            Gets or sets the current RTT variation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.PartialBytesAcked">
            <summary>
            Gets or sets the tracking method for increase of cwnd when in congestion avoidance mode (see Section 7.2.2 of RFC 4960).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.RtoPending">
            <summary>
            Gets or sets the RTO-Pending : A flag used to track if one of the DATA chunks sent to this address is currently being used to compute an RTT.
            If this flag is 0, the next DATA chunk sent to this destination should be used to compute an RTT and
            this flag should be set. Every time the RTT calculation completes (i.e., the DATA chunk is SACKed), clear this flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.LastSentTime">
            <summary>
            Gets or sets the time to which this destination was last sent.
            This can be used to determine if a HEARTBEAT is needed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.EarliestAllowedSackSendTime">
            <summary>
            Gets or sets the earliest time a SACK can be sent (in milliseconds since 01.01.1970).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.MostRecentOutgoingForwardTsnChunk">
            <summary>
            Gets or sets the most recently compiled outgoing Forward TSN Chunk.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.NumberOfDuplicateForwardTsnRequests">
            <summary>
            Gets or sets the number of duplicate Forward TSNs that would have been sent if no congestion avoidance was in place.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.SendForwardTsnScheduledItem">
            <summary>
            Gets or sets scheduled item containing Forward TSN chunk that needs to be sent out.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.EarliestAllowedRetransmissionTime">
            <summary>
            Gets or sets the earliest time DATA can be retransmitted (in milliseconds since 01.01.1970).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.FreshestReceivedSack">
            <summary>
            Gets or sets the freshest SACK received from the other party
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.TransmissionControlBlock.SecretKeyForCookie">
            <summary>
            Gets or sets the secret key bytes to sign SCTP cookie.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.TransmissionControlBlock.ResetAssociationState">
            <summary>
            Resets the association state arguments to the state when association was in the CLOSED state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.TransmissionControlBlock.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.TransmissionControlBlock" /> class.
            This constructor incorporates parameters needed to create a state cookie when sending INIT ACK
            </summary>
            <param name="myVerificationTag">My verification tag.</param>
            <param name="peerVerificationTag">The peer verification tag.</param>
            <param name="peerReceiverWindowCredit">The peer advertised RWND.</param>
            <param name="lastReceivedTsnFromPeer">The last received TSN from peer.</param>
            <param name="numOutboundStreams">The number outbound streams.</param>
            <param name="secretKey">The secret key.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.TransmissionControlBlock.ImportTcbParameters(FM.LiveSwitch.Sctp.TransmissionControlBlock)">
            <summary>
            Import TCB parameters from a TCB extracted from cookie
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.TransmissionControlBlock.#ctor(System.Int32,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.TransmissionControlBlock" /> class.
            </summary>
            <param name="oc">Number of outbound channels.</param>
            <param name="ic">Number of inbound channels.</param>
            <param name="a_rwnd">The advertised receiver window credit.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.TransmissionControlBlock.#ctor(FM.LiveSwitch.Sctp.StateCookie)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.TransmissionControlBlock" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.TransmissionControlBlock.GetNewCookie">
            <summary>
            Gets the sctp state cookie (for INIT/INITACK purposes).
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sctp.Transport">
            <summary>
            Manages SCTP Initiation, Data transmission, Error reporting and Shutdown.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Transport.MaxMessageSize">
            <summary>
            Gets or sets the maximum message size in bytes that this instance will be able to send.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Transport.SendData(FM.LiveSwitch.Sctp.Message)">
            <summary>
            Sends the data.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Transport.LocalSupportsPartialReliabilityExtension">
            <summary>
            Gets or sets a value indicating support for the partial reliability extension to SCTP as defined in RFC 3758.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Transport.Port">
            <summary>
            Gets or sets ephemeral SCTP Port.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.Transport._TCB">
            <summary>
            Gets or sets the SCTP Transmission Control Block.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Transport.Start">
            <summary>
            Starts this transport.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Sctp.Transport.OnStateChange">
            <summary>
            Raised when the state changes.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.Transport._SendDataQueue">
            <summary>
            The object containing DATA chunks to be sent by SCTP manager. They key is TSN of the chunk.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.Transport._SendControlChunkQueue">
            <summary>
            The object containing SCTP control chunks to be sent by SCTP manager. This operates on FIFO basis.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.Transport._ErrorToCombineWithCookieEcho">
            <summary>
            Stores Error chunk that can be bundled with outgoing CookieEcho, if there is anough space.
            If not, it should be sent only when Cookie_ACK is received.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.Transport._NextDataChunkToBeExaminedForSending">
            <summary>
            The next DATA chunk to be evaluated while building a packet for sending
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.Transport._DataRetransmission">
            <summary>
            Indicates whether all (or only new) unacked DATA in outgoing queue has to be sent
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.Transport._NumberOfPacketsSentSinceLastProcessorYield">
            <summary>
            The number of packets sent since last processor yield within the current transmission sequence
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Transport.Dispatch(FM.LiveSwitch.DataBuffer)">
            <summary>
            Method sends serialised SCTP packets
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Transport.GetT3TimerExtension">
            <summary>
            Gets the increment in T3 (data retransmit) timer.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.Sctp.Transport.OnMessage">
            <summary>
            Gets or sets the SCTP message callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.Transport._ReceiveDataQueue">
            <summary>
            The object containing DATA chunks received by SCTP manager. They key is TSN of the chunk.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Transport.GetNewDataPacketCountTrigger">
            <summary>
            After receiving this number of packets with new DATA, application will generate a SACK
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Transport.ProcessIncomingSctpPacket(FM.LiveSwitch.DataBuffer)">
            <summary>
            Processes the incoming SCTP Packet.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Transport.AssembleMessage(System.Byte[]@,System.Int64[]@,System.Int64)">
            <summary>
            Assembles message from DATA chunks at current TSN (and prior to it). Notifies the caller which DATA chunks can be deleted from the recieving queue
            </summary>
            <param name="message">The message.</param>
            <param name="tsnArray">The delete candidates.</param>
            <param name="currentTSN">The current TSN.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Transport.#ctor(System.Object,FM.LiveSwitch.Scheduler,FM.LiveSwitch.BundleTransport,FM.LiveSwitch.BundleTransport,System.Int32,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.Transport" /> class.
            </summary>
            <param name="lockObject">The lock object.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="innerTransportPrimary">The inner transport when bundling is not in use.</param>
            <param name="innerTransportAlternative">The inner transport when bundling is in use.</param>
            <param name="requestedOutboundStreams">Defines the number of outbound streams application wishes to create in this association.
            The value of 0 MUST NOT be used.</param>
            <param name="maxIncomingStreams">Maximum incoming channels this association can support.</param>
            <param name="advertisedReceiverWindow">Advertised Receiver Window Credit (a_rwnd)
            This value represents the dedicated buffer space, in number of bytes, the sender of the INIT has reserved
            in association with this window. During the life of the association, this buffer space SHOULD NOT be lessened
            (i.e., dedicated buffers taken away from this association); however, an endpoint MAY change the value of a_rwnd
            it sends in SACK chunks.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Transport.#ctor(System.Object,FM.LiveSwitch.Scheduler,FM.LiveSwitch.BundleTransport,FM.LiveSwitch.BundleTransport,System.Int32,System.Int32,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sctp.Transport" /> class.
            </summary>
            <param name="lockObject">The lock object.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="innerTransportPrimary">The inner transport when bundling is not in use.</param>
            <param name="innerTransportAlternative">The inner transport when bundling is in use.</param>
            <param name="requestedOutboundStreams">Defines the number of outbound streams application wishes to create in this association.
            The value of 0 MUST NOT be used.</param>
            <param name="maxIncomingStreams">Maximum incoming channels this association can support.</param>
            <param name="advertisedReceiverWindow">Advertised Receiver Window Credit (a_rwnd)
            This value represents the dedicated buffer space, in number of bytes, the sender of the INIT has reserved
            in association with this window. During the life of the association, this buffer space SHOULD NOT be lessened
            (i.e., dedicated buffers taken away from this association); however, an endpoint MAY change the value of a_rwnd
            it sends in SACK chunks.</param>
            <param name="port">SCTP port.</param>
            <exception cref="T:System.Exception">SCTP: Maximum supported number of inbound channels must be at least 1
            or
            SCTP: Desirable number of outbound channels must be at least 1</exception>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Transport.RespondWithCOOKIE_ACK(FM.LiveSwitch.Sctp.CookieEchoChunk,FM.LiveSwitch.Sctp.CommonHeader)">
            <summary>
            Respond to COOKIE_ECHO with COOKIE_ACK (fourth step of the normal association establishment) and move itself to ESTABLISHED state
            </summary>
            <param name="incomingCOOKIEECHOChunk">The incoming cookieecho chunk.</param>
            <param name="header">The SCTP common header from the incoming packet.</param>
            <returns>
            Whether cookie processing was successful
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Transport.RespondWithCOOKIE_ECHO(FM.LiveSwitch.Sctp.InitAckChunk)">
            <summary>
            Respond to INIT_ACK with COOKIE_ECHO (third step of the normal association establishment)
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Transport.RespondWithINIT_ACK(FM.LiveSwitch.Sctp.InitChunk)">
            <summary>
            Respond to INIT with INIT_ACK (second step of the normal association establishment)
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sctp.Transport.Initiate">
            <summary>
            Normal establishment of association
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sctp.TransportState">
            <summary>
            <see cref="T:FM.LiveSwitch.Sctp.Transport"/> states.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransportState.New">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Sctp.Transport"/> has been created and has not started negotiating yet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransportState.Connecting">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Sctp.Transport"/> is in the process of negotiating an association.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransportState.Connected">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Sctp.Transport"/> has completed negotiation of an association.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransportState.Closing">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Sctp.Transport"/> started disconnecting. It is still sending and receiving existing SCTP
            messages but does not accept new messages.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransportState.Closed">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Sctp.Transport"/> has been closed intentionally via a call to <see cref="M:FM.LiveSwitch.Sctp.Transport.Stop"/>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransportState.Failed">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Sctp.Transport"/> has been closed as the result of an error.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sctp.TransportState.Failing">
            <summary>
            Indicates the <see cref="T:FM.LiveSwitch.Sctp.Transport"/> started disconnecting due to an internal error. It may still be sending and receiving existing SCTP
            messages but does not accept new messages.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.SdesChunk">
            <summary>
            An RTCP source description chunk.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesChunk.FixedPayloadHeaderLength">
            <summary>
            Gets the fixed payload header length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesChunk.DataBuffer">
            <summary>
            Gets the data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesChunk.SynchronizationSource">
            <summary>
            Gets or sets the SSRC/CSRC identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesChunk.SourceDescriptionItems">
            <summary>
            Gets the source description items.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesChunk.Length">
            <summary>
            Gets the full chunk length in bytes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SdesChunk.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SdesChunk"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.SdesChunk.#ctor(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SdesChunk"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.SdesChunk.#ctor(System.Int64,FM.LiveSwitch.SdesItem)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SdesChunk"/> class.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="sourceDescriptionItem">The source description item.</param>
        </member>
        <member name="M:FM.LiveSwitch.SdesChunk.#ctor(System.Int64,FM.LiveSwitch.SdesItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SdesChunk"/> class.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="sourceDescriptionItems">The source description items.</param>
        </member>
        <member name="P:FM.LiveSwitch.SdesChunk.CanonicalName">
            <summary>
            Gets the Canonical Name (if set) in this SDES chunk.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesChunk.Mid">
            <summary>
            Gets the Media Stream Indentification (if set) in this SDES chunk.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.SdesControlFrame">
            <summary>
            An RTCP SDES packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesControlFrame.RegisteredPayloadType">
            <summary>
            Gets the session description payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesControlFrame.FixedPayloadHeaderLength">
            <summary>
            Gets the length of the fixed payload header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesControlFrame.SourceCount">
            <summary>
            Gets the source count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesControlFrame.Chunks">
            <summary>
            Gets or sets the source description chunks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SdesControlFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SdesControlFrame"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SdesControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SdesControlFrame"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.SdesControlFrame.#ctor(FM.LiveSwitch.SdesChunk)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SdesControlFrame"/> class.
            </summary>
            <param name="chunk">The chunk.</param>
        </member>
        <member name="M:FM.LiveSwitch.SdesControlFrame.#ctor(FM.LiveSwitch.SdesChunk[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SdesControlFrame"/> class.
            </summary>
            <param name="chunks">The chunks.</param>
        </member>
        <member name="T:FM.LiveSwitch.SdesItem">
            <summary>
            An RTCP source description item.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItem.FixedPayloadHeaderLength">
            <summary>
            Gets the fixed payload header length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItem.DataBuffer">
            <summary>
            Gets the data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItem.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItem.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SdesItem.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SdesItem"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:FM.LiveSwitch.SdesItem.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SdesItem"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.SdesItemType">
            <summary>
            An SDES Item Type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItemType.Null">
            <summary>
            Gets the null type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItemType.CanonicalName">
            <summary>
            Gets the canonical name (CNAME) type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItemType.UserName">
            <summary>
            Gets the name of the user (NAME) type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItemType.EmailAddress">
            <summary>
            Gets the email address (EMAIL) type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItemType.PhoneNumber">
            <summary>
            Gets the phone number (PHONE) type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItemType.Location">
            <summary>
            Gets the location (LOC) type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItemType.ToolName">
            <summary>
            Gets the name of the tool (TOOL) type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItemType.Notice">
            <summary>
            Gets the notice/status (NOTE) type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItemType.PrivateExtensions">
            <summary>
            Gets the private extensions (PRIV) type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItemType.RtpStreamId">
            <summary>
            Gets the RTP stream identifier (RtpStreamId) type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItemType.RepairedRtpStreamId">
            <summary>
            Gets the repaired RTP stream identifier (RepairedRtpStreamId) type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SdesItemType.Mid">
            <summary>
            Gets the Media Identification (MID) type as defined in http://www.iana.org/go/draft-ietf-mmusic-sdp-bundle-negotiation-52 .
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.SdesPolicy">
            <summary>
            Indicates Sdes policy for stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SdesPolicy.Negotiated">
            <summary>
            Sdes is preferred but not required. If stream type is compatible (i.e. not a DataStream) Crypto attributes will be included in the session description.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SdesPolicy.Disabled">
            <summary>
            Sdes is disabled. Crypto attributes will not be included in the session description.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ServerAddress">
            <summary>
            An IP address and port, along with an optional
            public IP address for listening behind a 1:1 NAT.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ServerAddress.PublicIPAddress">
            <summary>
            Gets the public IP address.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ServerAddress.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ServerAddress"/> class.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:FM.LiveSwitch.ServerAddress.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ServerAddress" /> class.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
            <param name="publicIPAddress">The public IP address.</param>
        </member>
        <member name="T:FM.LiveSwitch.SignallingState">
            <summary>
            The signalling state of a connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SignallingState.New">
            <summary>
            Indicates that no offer/answer exchange ever occurred.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SignallingState.HaveLocalOffer">
            <summary>
            Indicates that the connection has a local offer and remote answer is outstanding.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SignallingState.HaveRemoteOffer">
            <summary>
            Indicates that the connection has a remote offer and local answer is outstanding.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SignallingState.Stable">
            <summary>
            Indicates that for each offer there is a matching answer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.SinkOutput">
            <summary>
            A sink output (e.g. device, track, screen).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SinkOutput.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SinkOutput.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SinkOutput.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SinkOutput"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:FM.LiveSwitch.SinkOutput.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.SinkOutput.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SinkOutput.ToJson(FM.LiveSwitch.SinkOutput)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="sinkOutput">The sink output.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SinkOutput.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="sinkOutputJson">The sink output JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SinkOutput.ToJsonArray(FM.LiveSwitch.SinkOutput[])">
            <summary>
            Serializes an instance array to JSON.
            </summary>
            <param name="sinkOutputs">The sink outputs.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SinkOutput.FromJsonArray(System.String)">
            <summary>
            Deserializes an instance array from JSON.
            </summary>
            <param name="sinkOutputsJson">The sink outputs JSON.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Sli">
            <summary>
            An RTCP slice loss indication.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sli.DataBuffer">
            <summary>
            Gets the backing <c>DataBuffer</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sli.First">
            <summary>
            Gets or sets the macroblock (MB) address of the first lost macroblock.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sli.Number">
            <summary>
            Gets or sets the number of lost macroblocks, in scan order.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sli.PictureId">
            <summary>
            Gets or sets the six least significant bits of the codec-specific
            identifier that is used to reference the picture in which the loss
            of the macroblock(s) has occurred.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sli.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sli"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sli.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sli"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.SliControlFrame">
            <summary>
            An RTCP Feedback PS-SLI packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SliControlFrame.RegisteredFedbackMessageType">
            <summary>
            Gets the the registered fedback message type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SliControlFrame.SliceLossIndicationsCount">
            <summary>
            Gets the number of SLIs in the FCI field.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SliControlFrame.SliceLossIndications">
            <summary>
            Gets the slice loss indications.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SliControlFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SliControlFrame"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SliControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SliControlFrame"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.SliControlFrame.#ctor(FM.LiveSwitch.Sli)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SliControlFrame"/> class.
            </summary>
            <param name="sli">The sli.</param>
        </member>
        <member name="M:FM.LiveSwitch.SliControlFrame.#ctor(FM.LiveSwitch.Sli[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SliControlFrame" /> class.
            </summary>
            <param name="slis">The slis.</param>
        </member>
        <member name="T:FM.LiveSwitch.SoundConverter">
            <summary>
            A pipe that converts sound.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SoundConverter.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SoundConverter.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SoundConverter" /> class.
            </summary>
            <param name="outputConfig">The output configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundConverter.#ctor(FM.LiveSwitch.AudioConfig,FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SoundConverter" /> class.
            </summary>
            <param name="inputConfig">The input configuration.</param>
            <param name="outputConfig">The output configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundConverter.#ctor(FM.LiveSwitch.IAudioOutput,FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SoundConverter" /> class.
            </summary>
            <param name="input">The input.</param>
            <param name="outputConfig">The output configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundConverter.#ctor(FM.LiveSwitch.IAudioOutput[],FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SoundConverter" /> class.
            </summary>
            <param name="inputs">The inputs.</param>
            <param name="outputConfig">The output configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundConverter.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundConverter.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.SoundReframer">
            <summary>
            A pipe that reframes sound chunks into different durations.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SoundReframer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SoundReframer.#ctor(FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SoundReframer" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundReframer.#ctor(FM.LiveSwitch.AudioConfig,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SoundReframer" /> class.
            </summary>
            <param name="config">The configuration.</param>
            <param name="frameDuration">The frame duration.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundReframer.#ctor(FM.LiveSwitch.IAudioOutput,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SoundReframer" /> class.
            </summary>
            <param name="input">The input.</param>
            <param name="frameDuration">The frame duration.</param>
        </member>
        <member name="P:FM.LiveSwitch.SoundReframer.DisableTimestampReset">
            <summary>
            Gets or sets whether the timestamp should be reset
            using the wall clock after <see cref="P:FM.LiveSwitch.SoundReframer.TimestampResetInterval" />
            milliseconds elapse between frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SoundReframer.ForceTimestampReset">
            <summary>
            Gets or sets whether the timestamp should be reset
            before the next frame is processed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SoundReframer.TimestampResetInterval">
            <summary>
            Gets or sets the amount of time in milliseconds
            between audio frames that will trigger a reset of
            the timestamp to the wall clock.
            Defaults to 1000ms.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SoundReframer.FrameDuration">
            <summary>
            Gets the frame duration in milliseconds.
            Defaults to 20.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SoundReframer.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundReframer.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.SoundReframerContext">
            <summary>
            A sound reframer context that can reframe
            sound chunks into consistent durations.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SoundReframerContext.FrameDuration">
            <summary>
            Gets the frame duration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SoundReframerContext.Config">
            <summary>
            Gets the config.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SoundReframerContext.DisableTimestampReset">
            <summary>
            Gets or sets whether timestamp resetting should
            be disabled entirely. Only applies if timestamps
            are auto-generated (i.e. not set on the frames).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SoundReframerContext.TimestampResetInterval">
            <summary>
            Gets or sets the amount of time in milliseconds
            between audio frames that will trigger a wall-clock
            reset of the timestamp. Only applies if timestamps
            are auto-generated (i.e. not set on the frames).
            Defaults to 1000.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SoundReframerContext.ForceTimestampReset">
            <summary>
            Gets or sets whether to force a timestamp reset
            with the next raised frame. If set to <c>true</c>,
            this value will be reset to <c>false</c> after
            the wall-clock reset takes place. Only applies
            if timestamps are auto-generated (i.e. not set
            on the frames).
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.SoundReframerContext.OnFrame">
            <summary>
            Raised when a frame is ready.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SoundReframerContext.#ctor(System.Int32,FM.LiveSwitch.AudioConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SoundReframerContext" /> class.
            </summary>
            <param name="frameDuration">The frame duration.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundReframerContext.ProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundReframerContext.AutoTimestamp(System.Int32)">
            <summary>
            Gets the next timestamp.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.SoundUtility">
            <summary>
            Sound utility methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.ShortFromFloat(System.Single)">
            <summary>
            Converts a floating-point value to a short value.
            </summary>
            <param name="value">The floating-point value.</param>
            <returns>The short value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.FloatFromShort(System.Int16)">
            <summary>
            Converts a short value to a floating-point value.
            </summary>
            <param name="value">The short value.</param>
            <returns>The floating-point value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.WritePcmShort(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Writes a PCM short value to a byte array.
            </summary>
            <param name="input">The short value to write.</param>
            <param name="output">The target byte array.</param>
            <param name="index">The target index in the byte array.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.ReadPcmShort(System.Byte[],System.Int32)">
            <summary>
            Reads a PCM short value from a byte array.
            </summary>
            <param name="input">The source byte array.</param>
            <param name="index">The source index in the byte array.</param>
            <returns>Short value.  This is an int for performance reasons but can be safely
            cast to a short as needed.</returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateOutputLengthForChannelCount(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the length of an output data buffer
            after conversion from an input to an output
            channel count.
            </summary>
            <param name="inputLength">The input data buffer length.</param>
            <param name="inputChannelCount">The input channel count.</param>
            <param name="outputChannelCount">The output channel count.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.ConvertChannelCount(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Converts a data buffer to a new channel count. The input
            data buffer length must be a multiple of the input frame
            size. If the input channel count is greater than the output
            channel count, the input channel count must divide evenly
            into the output channel count, and vice versa if the output
            channel count is greater than the input channel count.
            </summary>
            <param name="input">The input data buffer.</param>
            <param name="inputChannelCount">The input channel count.</param>
            <param name="output">The output data buffer.</param>
            <param name="outputChannelCount">The output channel count.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.MonoToStereo(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            Converts each sample into two identical samples.
            </summary>
            <returns>A new <see cref="T:FM.LiveSwitch.DataBufferPooled"/> or <c>null</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.StereoToMono(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            Converts each pair of samples into one mixed sample.
            </summary>
            <returns>A new <see cref="T:FM.LiveSwitch.DataBufferPooled"/> or <c>null</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDataLength(System.Int32,FM.LiveSwitch.AudioConfig)">
            <summary>
            Calculates the number of bytes in a given audio chunk
            given its duration (ms), clock rate, and channel count.
            </summary>
            <param name="duration">The duration in ms.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDataLengthPrecise(System.Double,FM.LiveSwitch.AudioConfig)">
            <summary>
            Calculates the number of bytes in a given audio chunk
            given its duration (ms), clock rate, and channel count.
            </summary>
            <param name="duration">The duration in ms.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDataLengthFloat(System.Int32,FM.LiveSwitch.AudioConfig)">
            <summary>
            Calculates the number of bytes in a given audio chunk
            given its duration (ms), clock rate, and channel count.
            </summary>
            <param name="duration">The duration in ms.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDataLengthFloatPrecise(System.Double,FM.LiveSwitch.AudioConfig)">
            <summary>
            Calculates the number of bytes in a given audio chunk
            given its duration (ms), clock rate, and channel count.
            </summary>
            <param name="duration">The duration in ms.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDataLength(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the number of bytes in a given audio chunk
            given its duration (ms), clock rate, and channel count.
            </summary>
            <param name="duration">The duration in ms.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDataLengthPrecise(System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the number of bytes in a given audio chunk
            given its duration (ms), clock rate, and channel count.
            </summary>
            <param name="duration">The duration in ms.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDataLengthFloat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the number of bytes in a given audio chunk
            given its duration (ms), clock rate, and channel count.
            </summary>
            <param name="duration">The duration in ms.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDataLengthFloatPrecise(System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the number of bytes in a given audio chunk
            given its duration (ms), clock rate, and channel count.
            </summary>
            <param name="duration">The duration in ms.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDuration(System.Int32,FM.LiveSwitch.AudioConfig)">
            <summary>
            Calculates the duration of an audio chunk given its data
            length (the number of bytes), clock rate, and channel count.
            </summary>
            <param name="dataLength">The length of the audio chunk.</param>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDurationFloat(System.Int32,FM.LiveSwitch.AudioConfig)">
            <summary>
            Calculates the duration of an audio chunk given its data
            length (the number of bytes), clock rate, and channel count.
            </summary>
            <param name="dataLength">The length of the audio chunk.</param>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDuration(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the duration of an audio chunk given its data
            length (the number of bytes), clock rate, and channel count.
            </summary>
            <param name="dataLength">The length of the audio chunk.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDurationFloat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the duration of an audio chunk given its data
            length (the number of bytes), clock rate, and channel count.
            </summary>
            <param name="dataLength">The length of the audio chunk.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateTimestampDeltaFromDuration(System.Int32,System.Int32)">
            <summary>
            Calculates a timestamp delta given its clock rate and a duration in milliseconds.
            </summary>
            <param name="duration">The duration in milliseconds.</param>
            <param name="clockRate">The clock rate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDurationFromTimestampDelta(System.Int32,System.Int32)">
            <summary>
            Calculates a duration in milliseconds given a timestamp delta and its clock rate.
            </summary>
            <param name="timestampDelta">The timestamp delta.</param>
            <param name="clockRate">The clock rate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateSystemTimestampDeltaFromDuration(System.Int32)">
            <summary>
            Calculates a system timestamp delta in ticks given a duration in milliseconds.
            </summary>
            <param name="duration">The duration in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDurationFromSystemTimestampDelta(System.Int32)">
            <summary>
            Calculates a duration in milliseconds given a system timestamp delta in ticks.
            </summary>
            <param name="systemTimestampDelta">The system timestamp delta.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateTimestampDeltaFromDataLength(System.Int32,System.Int32)">
            <summary>
            Calculates a timestamp delta given a data length and channel count.
            </summary>
            <param name="dataLength">The data length in bytes.</param>
            <param name="channelCount">The channel count.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateTimestampDeltaFromDataLength(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates a timestamp delta given a data length in bytes, channel count, and number of bytes per sample.
            </summary>
            <param name="dataLength">The data length in bytes.</param>
            <param name="channelCount">The channel count.</param>
            <param name="bytesPerSample">The number of bytes per sample.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDataLengthFromTimestampDelta(System.Int32,System.Int32)">
            <summary>
            Calculates a data length in bytes given a timestamp delta and channel count.
            </summary>
            <param name="timestampDelta">The timestamp delta.</param>
            <param name="channelCount">The channel count.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateDataLengthFromTimestampDelta(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates a data length in bytes given a timestamp delta, channel count, and number of bytes per sample.
            </summary>
            <param name="timestampDelta">The timestamp delta.</param>
            <param name="channelCount">The channel count.</param>
            <param name="bytesPerSample">The number of bytes per sample.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateSystemTimestampDeltaFromTimestampDelta(System.Int64,System.Int32)">
            <summary>
            Calculates a system timestamp delta given a timestamp delta and its clock rate.
            </summary>
            <param name="timestampDelta">The timestamp delta.</param>
            <param name="clockRate">The clock rate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SoundUtility.CalculateTimestampDeltaFromSystemTimestampDelta(System.Int64,System.Int32)">
            <summary>
            Calculates a timestamp delta given its clock rate and a system timestamp delta.
            </summary>
            <param name="systemTimestampDelta">The system timestamp delta.</param>
            <param name="clockRate">The clock rate.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.SourceInput">
            <summary>
            A source input (e.g. device, track, screen).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SourceInput.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SourceInput.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SourceInput.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SourceInput"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:FM.LiveSwitch.SourceInput.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.SourceInput.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SourceInput.ToJson(FM.LiveSwitch.SourceInput)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="sourceInput">The source input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SourceInput.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="sourceInputJson">The source input JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SourceInput.ToJsonArray(FM.LiveSwitch.SourceInput[])">
            <summary>
            Serializes an instance array to JSON.
            </summary>
            <param name="sourceInputs">The source inputs.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SourceInput.FromJsonArray(System.String)">
            <summary>
            Deserializes an instance array from JSON.
            </summary>
            <param name="sourceInputsJson">The source inputs JSON.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.SRControlFrame">
            <summary>
            A sender report control frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SRControlFrame.RegisteredPayloadType">
            <summary>
            Gets the sender report payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SRControlFrame.FixedSenderInfoPayloadLength">
            <summary>
            Gets the fixed payload header length of a Sender Report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SRControlFrame.ReportBlockOffset">
            <summary>
            Gets the report block offset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SRControlFrame.NtpTimestamp">
            <summary>
            Gets or sets the time when this report was sent (NTP-style).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SRControlFrame.RtpTimestamp">
            <summary>
            Gets or sets the time when this report was sent (RTP-style).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SRControlFrame.PacketCount">
            <summary>
            Gets or sets the sender's packet count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SRControlFrame.OctetCount">
            <summary>
            Gets or sets the sender's octet count.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SRControlFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SRControlFrame"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SRControlFrame.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SRControlFrame" /> class.
            </summary>
            <param name="buffer">The data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.SRControlFrame.#ctor(FM.LiveSwitch.ReportBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SRControlFrame" /> class.
            </summary>
            <param name="reportBlock">The report block.</param>
        </member>
        <member name="M:FM.LiveSwitch.SRControlFrame.#ctor(FM.LiveSwitch.ReportBlock[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SRControlFrame" /> class.
            </summary>
            <param name="reportBlocks">The report blocks.</param>
        </member>
        <member name="M:FM.LiveSwitch.SRControlFrame.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SRControlFrame"/> class.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="ntpTimestamp">The time when this report was sent (NTP-style).</param>
            <param name="rtpTimestamp">The time when this report was sent (RTP-style).</param>
            <param name="packetCount">The sender's packet count.</param>
            <param name="octetCount">The sender's octet count.</param>
        </member>
        <member name="M:FM.LiveSwitch.SRControlFrame.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,FM.LiveSwitch.ReportBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SRControlFrame" /> class.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="ntpTimestamp">The time when this report was sent (NTP-style).</param>
            <param name="rtpTimestamp">The time when this report was sent (RTP-style).</param>
            <param name="packetCount">The sender's packet count.</param>
            <param name="octetCount">The sender's octet count.</param>
            <param name="reportBlock">The report block.</param>
        </member>
        <member name="M:FM.LiveSwitch.SRControlFrame.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,FM.LiveSwitch.ReportBlock[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SRControlFrame" /> class.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="ntpTimestamp">The time when this report was sent (NTP-style).</param>
            <param name="rtpTimestamp">The time when this report was sent (RTP-style).</param>
            <param name="packetCount">The sender's packet count.</param>
            <param name="octetCount">The sender's octet count.</param>
            <param name="reportBlocks">The report blocks.</param>
        </member>
        <member name="T:FM.LiveSwitch.Srtp.Context">
            <summary>
            Context for SRTP encryption.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Srtp.Context.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Srtp.Context.LocalSynchronizationSource">
            <summary>
            Gets the local synchronization source, if applicable.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Srtp.Context.RemoteSynchronizationSource">
            <summary>
            Gets the remote synchronization source, if applicable.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Srtp.Context.ProtectionProfile">
            <summary>
            Gets or sets the protection profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Srtp.Context.LocalKey">
            <summary>
            Gets or sets the local key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Srtp.Context.LocalSalt">
            <summary>
            Gets or sets the local salt.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Srtp.Context.RemoteKey">
            <summary>
            Gets or sets the remote key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Srtp.Context.RemoteSalt">
            <summary>
            Gets or sets the remote salt.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Srtp.Context.#ctor(System.String,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Srtp.Context" /> class.
            </summary>
            <param name="protectionProfile">The encryption mode.</param>
            <param name="localKey">The local key.</param>
            <param name="localSalt">The local salt.</param>
            <param name="remoteKey">The remote key.</param>
            <param name="remoteSalt">The remote salt.</param>
        </member>
        <member name="M:FM.LiveSwitch.Srtp.Context.EncryptRtp(FM.LiveSwitch.RtpPacketHeader,FM.LiveSwitch.DataBuffer)">
            <summary>
            Encrypts an RTP packet.
            The returned buffer must be freed.
            </summary>
            <param name="header">The Rtp Header.</param>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:FM.LiveSwitch.Srtp.Context.DecryptRtp(FM.LiveSwitch.DataBuffer)">
            <summary>
            Decrypts an RTP packet.
            The returned buffer must be freed.
            </summary>
            <param name="encryptedBuffer">The encrypted buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Srtp.Context.DecryptRtp(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.RtpPacketHeader)">
            <summary>
            Decrypts an RTP packet.
            The returned buffer must be freed.
            </summary>
            <param name="encryptedBuffer">The encrypted buffer.</param>
            <param name="header">The header, if already available.</param>
        </member>
        <member name="M:FM.LiveSwitch.Srtp.Context.EncryptRtcp(FM.LiveSwitch.Rtcp.Packet[])">
            <summary>
            Encrypts an array of RTCP packets.
            </summary>
            <param name="packets">The RTP packets.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Srtp.Context.DecryptRtcp(FM.LiveSwitch.DataBuffer)">
            <summary>
            Decrypts an array of RTCP packets.
            </summary>
            <param name="buffer">The encrypted buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Srtp.Context.Destroy">
            <summary>
            Clears the associated Rtp and Rtcp decryption and encryption instances.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Srtp.ProtectionParameters">
            <summary>
            A set of SRTP parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Srtp.ProtectionParameters.ProtectionProfileString">
            <summary>
            Gets the protection profile string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Srtp.ProtectionParameters.ProtectionProfileCode">
            <summary>
            Gets the protection profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Srtp.ProtectionParameters.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Srtp.ProtectionParameters.Salt">
            <summary>
            Gets the salt.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Srtp.ProtectionParameters.#ctor(System.String,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Srtp.ProtectionParameters"/> class.
            </summary>
            <param name="protectionProfileString">The protection profile string.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
        </member>
        <member name="M:FM.LiveSwitch.Srtp.ProtectionParameters.#ctor(System.Int32,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Srtp.ProtectionParameters"/> class.
            </summary>
            <param name="protectionProfileCode">The protection profile code.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
        </member>
        <member name="T:FM.LiveSwitch.SynchronizeContext">
            <summary>
            A stream synchronization context.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SynchronizeContext.NtpTimestampTicks">
            <summary>
            Gets or sets the NTP timestamp ticks.
            Deprecated. Use <see cref="P:FM.LiveSwitch.SynchronizeContext.SystemTimestamp"/> instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SynchronizeContext.SystemTimestamp">
            <summary>
            Gets or sets the system timestamp.
            Uses a clock known only to the remote sender,
            but consistent across synchronized streams.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SynchronizeContext.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SynchronizeContext"/> class.
            </summary>
            <param name="systemTimestamp">The system timestamp.</param>
        </member>
        <member name="M:FM.LiveSwitch.SynchronizeContext.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.SynchronizeContext"/> class.
            Deprecated. Use SynchronizeContext(long) instead.
            </summary>
            <param name="ntpTimestampTicks">The NTP timestamp ticks.</param>
            <param name="systemTimestamp">The system timestamp.</param>
        </member>
        <member name="M:FM.LiveSwitch.SynchronizeQueue`4.Activate(System.Boolean,FM.LiveSwitch.ISynchronizer[])">
            <summary>
            Activates synchronizing.
            </summary>
            <param name="master">Whether this is a master.</param>
            <param name="slaves">The slaves, if this is a master.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stream">
            <summary>
            A peer-to-peer stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stream.RemoteIceParameters">
            <summary>
            Gets the remote ICE parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stream.LocalIceParameters">
            <summary>
            Gets or sets the local ICE parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stream.UseDtls">
            <summary>
            Gets or sets a value indicating whether DTLS encryption is in use for this stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stream.UseSdes">
            <summary>
            Gets or sets a value indicating whether SDES encryption is in use for this stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stream.EncryptionModes">
            <summary>
            Gets or sets the encryption modes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stream.EncryptionMode">
            <summary>
            Gets or sets the encryption mode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stream.EncryptionPolicy">
            <summary>
            Gets or sets a value indicating Encryption Policy
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stream.SdesPolicy">
            <summary>
            Gets or sets Sdes policy for stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stream.CopyLocalParameters(FM.LiveSwitch.Stream)">
            <summary>
            Copies ICE and Dtls parameters from another stream
            </summary>
            <param name="otherStream">The other stream.</param>
        </member>
        <member name="P:FM.LiveSwitch.Stream.Deactivated">
            <summary>
            Gets or sets a value indicating whether this stream is deactivated.
            A stream is deactivated if its direction is unset or inactive.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stream.Disabled">
            <summary>
            Gets or sets a value indicating whether this stream is disabled.
            A stream is disabled if session negotiation failed or if the
            underlying transport could not be started.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stream.RaiseDisabledChange">
            <summary>
            Raises the OnDisabledChange event.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Stream.OnDisabledChange">
            <summary>
            Raised when the Disabled property changes state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stream.Index">
            <summary>
            Gets the index.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stream.ProcessBundledStateChanged(System.Boolean)">
            <summary>
            Processes bundled state change of this stream.
            </summary>
            <param name="bundled"></param>
        </member>
        <member name="M:FM.LiveSwitch.Stream.#ctor(FM.LiveSwitch.StreamType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stream" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stream.Close">
            <summary>
            Resets local encryption and ICE parameters for this stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stream.CreateSdpMediaDescription(FM.LiveSwitch.Sdp.Message,System.Boolean,System.Boolean,System.Boolean,FM.LiveSwitch.BundlePolicy)">
            <summary>
            Generates SDP media description for data stream.
            </summary>
            <param name="sdpMessage">The SDP message.</param>
            <param name="supportSdes">if set to <c>true</c> Sdp message will contain SDES crypto attibutes.</param>
            <param name="isOffer">if set to <c>true</c> Sdp media description is a part of an Sdp offer.</param>
            <param name="isRenegotiation">Indicates whether media description generation is a part of the SDP renegotiation attempt.</param>
            <param name="bundlePolicy">BundlePolicy on this connection.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stream.PopulateProperties(FM.LiveSwitch.MediaDescriptionRequirements)">
            <summary>
            Populate media description requirements for SDP generation.
            </summary>
            <param name="requirements"></param>
        </member>
        <member name="M:FM.LiveSwitch.Stream.ProcessCachedSettings">
            <summary>
            Evaluate cached settings and set them
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.StreamBase">
            <summary>
            Stream base properties/methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.ExternalId">
            <summary>
            Gets or sets the external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.MediaDescriptionId">
            <summary>
            Gets the media description identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.ConnectionId">
            <summary>
            Gets the connection identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.DirectionCapabilities">
            <summary>
            Gets the direction capabilities of this stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.Tag">
            <summary>
            Gets or sets optional data to associate with this instance.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.StreamBase.OnDirectionChange">
            <summary>
            Raised when the stream direction change has occurred.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.LocalSend">
            <summary>
            Gets or sets a value indicating whether sending media is supported by the local peer on this stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.LocalReceive">
            <summary>
            Gets or sets a value indicating whether receiving media is supported by the local peer on this stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.RemoteSend">
            <summary>
            Gets a value indicating whether sending media is supported by the remote peer on this stream. Returns false if the remote stream direction has not been received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.RemoteReceive">
            <summary>
            Gets or sets a value indicating whether receiving media is supported by the local peer on this stream. Returns false if the remote stream direction has not been received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.Direction">
            <summary>
            Gets the current direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.LocalDirection">
            <summary>
            Gets or sets current direction indicated by the local description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.RemoteDirection">
            <summary>
            Gets or sets current direction indicated by the remote description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamBase.ChangeDirection(FM.LiveSwitch.StreamDirection)">
            <summary>
            Changes this stream's direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.TransportInfo">
            <summary>
            Gets the stream transport info.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.StreamBase.OnStateChange">
            <summary>
            Raised when the stream state changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.StateLock">
            <summary>
            Gets or sets the state lock, shared with the connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamBase.ProcessStateLockChange">
            <summary>
            Processes a state lock change.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.IsTerminating">
            <summary>
            Gets a value indicating whether the stream is currently closing or failing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.IsTerminated">
            <summary>
            Gets a value indicating whether the stream is currently closed or failed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.IsTerminatingOrTerminated">
            <summary>
            Gets a value indicating whether the stream is currently closing, failing, closed, or failed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.State">
            <summary>
            Gets or sets the state of the stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.ConnectedTimestamp">
            <summary>
            Gets the ManagedStopwatch.GetTimestamp() value representing the ticks that
            passed when this stream's connection state changed to connected.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamBase.ProcessStateChange">
            <summary>
            Processes a state change.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamBase.#ctor(FM.LiveSwitch.StreamType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.StreamBase" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.MediaStreamIdentification">
            <summary>
            Gets or sets the media stream identification.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamBase.ProcessUpdateToMediaStreamIdentification(System.String)">
            <summary>
            Process update to the MediaDescription Identificiation.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamBase.ProcessSdpMediaDescription(FM.LiveSwitch.Sdp.Message,FM.LiveSwitch.Sdp.MediaDescription,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Processes an SDP description.
            </summary>
            <param name="sdpMessage">The SDP message.</param>
            <param name="sdpMediaDescription">The SDP media description.</param>
            <param name="index">The SDP media description index.</param>
            <param name="isLocalDescription">Indicates whether description is local or not.</param>
            <param name="isOffer">Indicates whether this description is an offer.</param>
            <param name="isRenegotiation">Flag indicating whether SDP renegotiation is currently in progress.</param>
        </member>
        <member name="P:FM.LiveSwitch.StreamBase.MediaDescriptionManager">
            <summary>
            Gets MediaDescriptionManager.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamBase.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.StreamCollection">
            <summary>
            A stream collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamCollection.GetByType``1(FM.LiveSwitch.StreamType)">
            <summary>
            Gets a stream by its type.
            </summary>
            <typeparam name="T"></typeparam>
            
        </member>
        <member name="M:FM.LiveSwitch.StreamCollection.GetManyByType``1(FM.LiveSwitch.StreamType)">
            <summary>
            Gets some streams by their type.
            </summary>
            <typeparam name="T"></typeparam>
            
        </member>
        <member name="M:FM.LiveSwitch.StreamCollection.ArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.Stream})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.StreamCollection.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.StunServer">
            <summary>
            A STUN server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StunServer.CreateDatagramSocket">
            <summary>
            Gets or sets the create callback to create a datagram socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StunServer.CreateStreamSocket">
            <summary>
            Gets or sets the create callback to create a stream socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StunServer.StreamSendTimeout">
            <summary>
            Gets or sets timeout for asynchronous data sending over stream sockets in ms. Defaults to unset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StunServer.LocalUdpAddress">
            <summary>
            Gets the local UDP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StunServer.LocalUdpAddresses">
            <summary>
            Gets the local UDP addresses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StunServer.LocalTcpAddress">
            <summary>
            Gets the local TCP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StunServer.LocalTcpAddresses">
            <summary>
            Gets the local TCP addresses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StunServer.DisableUdp">
            <summary>
            Gets or sets whether to prevent the server from
            listening for UDP requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StunServer.DisableTcp">
            <summary>
            Gets or sets whether to prevent the server from
            listening for TCP requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StunServer.DisableTls">
            <summary>
            Gets or sets whether to prevent the server from
            listening for TLS requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StunServer.UdpAddresses">
            <summary>
            Gets the UDP server addresses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StunServer.TcpAddresses">
            <summary>
            Gets the TCP server addresses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StunServer.TlsAddresses">
            <summary>
            Gets the TLS server addresses.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StunServer.Start">
            <summary>
            Starts the server.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.StunServer.Start(FM.LiveSwitch.ServerAddress[])">
            <summary>
            Starts the server.
            </summary>
            <param name="udpAddresses">The UDP addresses to listen on.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.StunServer.Start(FM.LiveSwitch.ServerAddress[],FM.LiveSwitch.ServerAddress[])">
            <summary>
            Starts the server.
            </summary>
            <param name="udpAddresses">The UDP addresses to listen on.</param>
            <param name="tcpAddresses">The TCP addresses to listen on.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.StunServer.Start(FM.LiveSwitch.ServerAddress[],FM.LiveSwitch.ServerAddress[],FM.LiveSwitch.ServerAddress[])">
            <summary>
            Starts the server.
            </summary>
            <param name="udpAddresses">The UDP addresses to listen on.</param>
            <param name="tcpAddresses">The TCP addresses to listen on.</param>
            <param name="tlsAddresses">The TLS addresses to listen on.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.StunServer.Label">
            <summary>
            Gets the label.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StunServer.GetPrefix(System.Boolean,System.Boolean)">
            <summary>
            Gets a prefix.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StunServer.Stop">
            <summary>
            Stops the server.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StunServer.ProcessBuffer(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DatagramSocket,FM.LiveSwitch.StreamSocket,FM.LiveSwitch.ServerAddress,FM.LiveSwitch.TransportAddress,System.Int32@)">
            <summary>
            Processes the buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="udpServerSocket">The UDP server socket.</param>
            <param name="tcpServerSocket">The TCP server socket.</param>
            <param name="localAddress">The local address.</param>
            <param name="remoteAddress">The remote address.</param>
            <param name="readLength">Length of the read.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.StunServer.Process(FM.LiveSwitch.Stun.Message,FM.LiveSwitch.DatagramSocket,FM.LiveSwitch.StreamSocket,FM.LiveSwitch.ServerAddress,FM.LiveSwitch.TransportAddress)">
            <summary>
            Processes the specified request.
            </summary>
            <param name="request">The request.</param>
            <param name="udpServerSocket">The UDP server socket.</param>
            <param name="tcpServerSocket">The TCP server socket.</param>
            <param name="localAddress">The local address.</param>
            <param name="remoteAddress">The remote address.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.StunServer.CreateErrorResponse(FM.LiveSwitch.Stun.Message,FM.LiveSwitch.TransportAddress,System.String)">
            <summary>
            Creates an error response with a ganeric Stun server error.
            </summary>
            <param name="request">The request.</param>
            <param name="remoteAddress">The remote address.</param>
            <param name="errorMessage">The erro messager.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.StunServer.CreateExceptionResponse(FM.LiveSwitch.Stun.Message,FM.LiveSwitch.TransportAddress,FM.LiveSwitch.Stun.Error)">
            <summary>
            Creates an exception response.
            </summary>
            <param name="request">The request.</param>
            <param name="remoteAddress">The remote address.</param>
            <param name="error">The Stun error.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Transport">
            <summary>
            A transport.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Transport.OnReceive">
            <summary>
            Raised when data is received.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Transport.Send(FM.LiveSwitch.DataBuffer)">
            <summary>
            Sends the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:FM.LiveSwitch.Transport.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
            <value>
              <c>true</c> if this instance is closed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Transport.RoundTripTime">
            <summary>
            Gets the current round-trip-time in milliseconds.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.TrickleIcePolicy">
            <summary>
            The local policy for TrickleIce support.
            Cf. https://tools.ietf.org/html/draft-ietf-ice-trickle-04
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.TrickleIcePolicy.NotSupported">
            <summary>
            A Trickle ICE mode of operation where the offerer
            gathers all of the possible candidates strictly before
            creating and sending the offer.  
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.TrickleIcePolicy.FullTrickle">
            <summary>
            The regular mode of operation for Trickle ICE agents,
            in which an initial offer can include any number of candidates
            (even zero candidates) and does not need to include the entire
            first generation of candidates as in half trickle.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.TrickleIcePolicy.HalfTrickle">
            <summary>
            A Trickle ICE mode of operation where the offerer
            gathers its first generation of candidates strictly before
            creating and sending the offer. Once sent, that offer can be
            processed by Vanilla ICE agents and does not require support for
            this specification. It also allows Trickle ICE capable answerers
            to still gather candidates and perform connectivity checks in a
            non-blocking way, thus roughly offering "half" the advantages of
            Trickle ICE. The mechanism is mostly meant for use in cases where
            support for Trickle ICE cannot be confirmed prior to sending an
            initial offer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.TurnAuthArgs">
            <summary>
            Arguments for the <see cref="T:FM.LiveSwitch.TurnServer" />'s authentication callback.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnAuthArgs.Username">
            <summary>
            Gets or sets the username from the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnAuthArgs.Realm">
            <summary>
            Gets or sets the realm from the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnAuthArgs.Operation">
            <summary>
            Gets or sets the operation.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TurnAuthArgs.#ctor(System.String,System.String,FM.LiveSwitch.TurnAuthOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TurnAuthArgs" /> class.
            </summary>
            <param name="username">The username from the request.</param>
            <param name="realm">The realm from the request.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="T:FM.LiveSwitch.TurnAuthOperation">
            <summary>
            An authenticated TURN operation.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.TurnAuthOperation.Allocate">
            <summary>
            Indicates a socket allocation request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.TurnAuthOperation.CreatePermission">
            <summary>
            Indicates a create-permission request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.TurnAuthOperation.Refresh">
            <summary>
            Indicates an allocation refresh request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.TurnAuthOperation.ChannelBind">
            <summary>
            Indicates a channel-bind request.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.TurnAuthResult">
            <summary>
            The result of attempting to authenticate a TURN request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnAuthResult.Password">
            <summary>
            Gets or sets the user's password in plain text.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnAuthResult.LongTermKeyBytes">
            <summary>
            Gets or sets the long-term key bytes, calculated as the MD5 hash of the
            following UTF8-encoded input: "username:realm:password" (for convenience,
            use STUN.CreateLongTermKey to calculate).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TurnAuthResult.FromPassword(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TurnAuthResult"/> class
            using a plaintext password.
            </summary>
            <param name="password">The user's password in plain text.</param>
        </member>
        <member name="M:FM.LiveSwitch.TurnAuthResult.FromLongTermKeyBytes(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TurnAuthResult"/> class
            using a long-term key.
            </summary>
            <param name="longTermKeyBytes">The long-term key bytes, calculated as the MD5 hash
            of the following UTF8-encoded input: "username:realm:password".</param>
        </member>
        <member name="T:FM.LiveSwitch.TurnServer">
            <summary>
            An TURN/STUN server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.Nonce">
            <summary>
            Gets or sets the current nonce.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.Realm">
            <summary>
            Gets or sets the realm used for this server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.Label">
            <summary>
            Gets the label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.AllocationPortMin">
            <summary>
            Gets or sets the minimum allowed port to be
            used when allocating sockets.
            The default value is 49152.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.AllocationPortMax">
            <summary>
            Gets or sets the maximum allowed port to be
            used when allocating sockets.
            The default value is 65535.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.AllocationCount">
            <summary>
            Gets the number of active allocations.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.DefaultAllocateLifetime">
            <summary>
            Gets or sets the default lifetime for new allocations
            in seconds. Defaults to 600 (10 minutes).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.ForceDefaultAllocateLifetime">
            <summary>
            Gets or sets whether the server should force the
            default lifetime for new allocations (true) or allow
            clients to request their own lifetime within the
            min/max range (false). Defaults to false.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.MinAllocateLifetime">
            <summary>
            Gets the minimum lifetime for new allocations
            in seconds. Equal to 600 (10 minutes).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.MaxAllocateLifetime">
            <summary>
            Gets or sets the maximum lifetime for new
            allocations in seconds. Defaults to 3600
            (1 hour).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.DefaultRefreshLifetime">
            <summary>
            Gets or sets the default lifetime for refreshed allocations
            in seconds. Defaults to 600 (10 minutes).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.ForceDefaultRefreshLifetime">
            <summary>
            Gets or sets whether the server should force the
            default lifetime for refreshed allocations (true) or allow
            clients to request their own lifetime within the
            min/max range (false). Defaults to false.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.MinRefreshLifetime">
            <summary>
            Gets the minimum lifetime for refreshed allocations
            in seconds. Equal to 600 (10 minutes).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.MaxRefreshLifetime">
            <summary>
            Gets or sets the maximum lifetime for refreshed
            allocations in seconds. Defaults to 3600
            (1 hour).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.StaleNonceSecurity">
            <summary>
            Gets or sets whether the server should enforce
            stale-nonce security by sending a 438 Stale Nonce
            in response to allocate requests with a stale
            or non-existent nonce.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TurnServer.#ctor(FM.LiveSwitch.Function1{FM.LiveSwitch.TurnAuthArgs,FM.LiveSwitch.TurnAuthResult})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TurnServer" /> class.
            </summary>
            <param name="authCallback">The authentication callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.TurnServer.Start(FM.LiveSwitch.ServerAddress[],FM.LiveSwitch.ServerAddress[],FM.LiveSwitch.ServerAddress[])">
            <summary>
            Starts the server.
            </summary>
            <param name="udpAddresses">The UDP addresses to listen on.</param>
            <param name="tcpAddresses">The TCP addresses to listen on.</param>
            <param name="tlsAddresses">The TLS addresses to listen on.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TurnServer.Stop">
            <summary>
            Stops the server.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.TurnServer.ProcessBuffer(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DatagramSocket,FM.LiveSwitch.StreamSocket,FM.LiveSwitch.ServerAddress,FM.LiveSwitch.TransportAddress,System.Int32@)">
            <summary>
            Processes the buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="udpServerSocket">The UDP server socket.</param>
            <param name="tcpServerSocket">The TCP server socket.</param>
            <param name="localAddress">The local address.</param>
            <param name="remoteAddress">The remote address.</param>
            <param name="readLength">Length of the read.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TurnServer.Process(FM.LiveSwitch.Stun.Message,FM.LiveSwitch.DatagramSocket,FM.LiveSwitch.StreamSocket,FM.LiveSwitch.ServerAddress,FM.LiveSwitch.TransportAddress)">
            <summary>
            Processes the specified request.
            </summary>
            <param name="request">The request.</param>
            <param name="udpServerSocket">The UDP server socket.</param>
            <param name="tcpServerSocket">The TCP server socket.</param>
            <param name="localAddress">The local address.</param>
            <param name="remoteAddress">The remote address.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TurnServer.CreateExceptionResponse(FM.LiveSwitch.Stun.Message,FM.LiveSwitch.TransportAddress,FM.LiveSwitch.Stun.Error)">
            <summary>
            Creates an exception response.
            </summary>
            <param name="request">The request.</param>
            <param name="remoteAddress">The remote address.</param>
            <param name="error">The error.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.TurnServer.DisableBypass">
            <summary>
            Gets or sets a value indicating whether to
            disable the in-memory bypass of the network
            when communicating between two relay candidates.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Turn.Allocation">
            <summary>
            A TURN allocation on the relay.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.Allocation.TransactionId">
            <summary>
            Gets or sets the transaction ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.Allocation.Reservation">
            <summary>
            Gets or sets the reservation code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.Allocation.ClientAddress">
            <summary>
            Gets or sets the client address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.Allocation.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.Allocation.Realm">
            <summary>
            Gets or sets the realm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.Allocation.LastLifetime">
            <summary>
            Gets the last lifetime, in seconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.Allocation.IsExpired">
            <summary>
            Gets whether the allocation has expired.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.Allocation.LocalIPAddress">
            <summary>
            Gets the local IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.Allocation.PublicIPAddress">
            <summary>
            Gets the public IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.Allocation.LocalPort">
            <summary>
            Gets the local port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.Allocation.Permissions">
            <summary>
            Gets the array of permissions.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Turn.Allocation.#ctor(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.TransportAddress,System.String,System.String,System.Int64,FM.LiveSwitch.Action1{FM.LiveSwitch.TransportAddress})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Turn.Allocation" /> class.
            </summary>
            <param name="transactionId">The transaction ID.</param>
            <param name="reservation">The reservation code.</param>
            <param name="clientAddress">The client address.</param>
            <param name="username">The username.</param>
            <param name="realm">The realm.</param>
            <param name="lifetime">The allocate lifetime in seconds.</param>
            <param name="onExpires">The expires callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.Turn.Allocation.Refresh(System.Int64)">
            <summary>
            Refreshes the allocation.
            </summary>
            <param name="lifetime">The refresh lifetime in seconds.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Turn.Allocation.AddPermission(System.String)">
            <summary>
            Adds a permission for a remote address.
            </summary>
            <param name="remoteIPAddress">The remote IP address.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Turn.Allocation.AddChannelBinding(FM.LiveSwitch.TransportAddress,System.Int32,FM.LiveSwitch.TransportAddress)">
            <summary>
            Adds a channel binding for a remote address.
            </summary>
            <param name="xorRemoteAddress">The XOR remote address.</param>
            <param name="channelNumber">The channel number.</param>
            <param name="remoteAddress">The remote address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Turn.Allocation.HasPermission(System.String)">
            <summary>
            Checks if a remote IP address has permission on this allocation.
            </summary>
            <param name="remoteIPAddress">The remote IP address.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Turn.Allocation.HasChannelBindingNumber(System.Int32)">
            <summary>
            Checks if a channel number is bound on this allocation.
            </summary>
            <param name="channelNumber">The channel number.</param>
            <returns>The remote address.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Turn.Allocation.HasChannelBindingAddress(FM.LiveSwitch.TransportAddress)">
            <summary>
            Checks if a remote address is bound on this allocation.
            </summary>
            <param name="remoteAddress">The remote address.</param>
            <returns>The channel number.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Turn.Allocation.Close">
            <summary>
            Closes the socket for this allocation.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Turn.ChannelBinding">
            <summary>
            A TURN channel binding on the relay.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.ChannelBinding.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.ChannelBinding.ChannelNumber">
            <summary>
            Gets or sets the channel number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.ChannelBinding.TimeToExpiry">
            <summary>
            Gets the time to expiry in seconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.ChannelBinding.IsExpired">
            <summary>
            Gets whether the permission has expired.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Turn.ChannelBinding.#ctor(FM.LiveSwitch.TransportAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Turn.ChannelBinding"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="channelNumber">The channel number.</param>
        </member>
        <member name="M:FM.LiveSwitch.Turn.ChannelBinding.ExtendTimeToExpiry">
            <summary>
            Extends the time to expiry.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Turn.ChannelBinding.SetTimeToExpiry(System.Int32)">
            <summary>
            Sets the time to expiry.
            </summary>
            <param name="timeToExpiry">The time to expiry, in seconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.Turn.ChannelBinding.ToString">
            <summary>
            Displays a friendly description of this permission.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Turn.Permission">
            <summary>
            A TURN permission on the relay.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.Permission.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.Permission.TimeToExpiry">
            <summary>
            Gets the time to expiry in seconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.Permission.IsExpired">
            <summary>
            Gets whether the permission has expired.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Turn.Permission.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Turn.Permission"/> class.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Turn.Permission.ExtendTimeToExpiry">
            <summary>
            Extends the time to expiry.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Turn.Permission.SetTimeToExpiry(System.Int32)">
            <summary>
            Sets the time to expiry.
            </summary>
            <param name="timeToExpiry">The time to expiry, in seconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.Turn.Permission.ToString">
            <summary>
            Displays a friendly description of this permission.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.Turn.TcpConnection.IsClosed">
            <summary>
            Gets a value indicating whether the socket is closed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.UdpAllocation.UdpServerSocket">
            <summary>
            Gets or sets the UDP server socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.UdpAllocation.TcpServerSocket">
            <summary>
            Gets or sets the TCP server socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.UdpAllocation.Socket">
            <summary>
            Gets or sets the UDP socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.UdpAllocation.LocalIPAddress">
            <summary>
            Gets the local IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.UdpAllocation.PublicIPAddress">
            <summary>
            Gets the public IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Turn.UdpAllocation.LocalPort">
            <summary>
            Gets the local port.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Turn.UdpAllocation.#ctor(FM.LiveSwitch.DatagramSocket,FM.LiveSwitch.StreamSocket,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DatagramSocket,FM.LiveSwitch.TransportAddress,System.String,System.String,System.Int64,FM.LiveSwitch.Action3{FM.LiveSwitch.Turn.UdpAllocation,FM.LiveSwitch.TransportAddress,FM.LiveSwitch.DataBuffer},FM.LiveSwitch.Action1{FM.LiveSwitch.TransportAddress})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Turn.UdpAllocation" /> class.
            </summary>
            <param name="udpServerSocket">The UDP server socket.</param>
            <param name="tcpServerSocket">The TCP server socket.</param>
            <param name="transactionId">The transaction ID.</param>
            <param name="reservation">The reservation code.</param>
            <param name="socket">The UDP socket.</param>
            <param name="clientAddress">The client address.</param>
            <param name="username">The username.</param>
            <param name="realm">The realm.</param>
            <param name="lifetime">The lifetime in seconds.</param>
            <param name="onReceive">The receive callback.</param>
            <param name="onExpires">The expires callback.</param>
        </member>
        <member name="P:FM.LiveSwitch.Turn.UdpAllocation.IsClosed">
            <summary>
            Gets a value indicating whether the socket is closed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Turn.UdpAllocation.StartReceiving">
            <summary>
            Starts listening for incoming packets.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Turn.UdpAllocation.SendData(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.TransportAddress,System.Exception@)">
            <summary>
            Sends data from this allocation.
            </summary>
            <param name="buffer">The buffer to send.</param>
            <param name="remoteAddress">The remote address.</param>
            <param name="exception">The exception that occurred, if any.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Turn.UdpAllocation.Close">
            <summary>
            Closes the UDP socket for this allocation, and the TCP server socket which is
            no longer needed.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.VideoBranch">
            <summary>
            A video branch.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBranch.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoBranch.#ctor(FM.LiveSwitch.VideoTrack[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoBranch" /> class.
            </summary>
            <param name="tracks">The tracks.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoBranch.ArrayFromTracks(System.Collections.Generic.List{FM.LiveSwitch.VideoTrack})">
            <summary>
            Creates an array of tracks from a list of tracks.
            </summary>
            <param name="tracks">The list of tracks.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.VideoBuffer">
            <summary>
            A video buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.Stride">
            <summary>
            Gets or sets the stride.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.Strides">
            <summary>
            Gets or sets the strides.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsRaw">
            <summary>
            Gets a value indicating whether this buffer has raw video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsYuvType">
            <summary>
            Gets a value indicating whether this buffer has raw I420, YV12, NV12, or NV21 video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsRgbType">
            <summary>
            Gets a value indicating whether this buffer has raw RGB or BGR video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsRgbaType">
            <summary>
            Gets a value indicating whether this buffer has raw RGBA, BGRA, ARGB, or ABGR video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsI420">
            <summary>
            Gets a value indicating whether this buffer has I420 video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsYv12">
            <summary>
            Gets a value indicating whether this buffer has YV12 video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsNv12">
            <summary>
            Gets a value indicating whether this buffer has NV12 video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsNv21">
            <summary>
            Gets a value indicating whether this buffer has NV21 video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsRgb">
            <summary>
            Gets a value indicating whether this buffer has RGB video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsBgr">
            <summary>
            Gets a value indicating whether this buffer has BGR video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsRgba">
            <summary>
            Gets a value indicating whether this buffer has RGBA video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsBgra">
            <summary>
            Gets a value indicating whether this buffer has BGRA video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsArgb">
            <summary>
            Gets a value indicating whether this buffer has ARGB video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsAbgr">
            <summary>
            Gets a value indicating whether this buffer has ABGR video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsVp8">
            <summary>
            Gets a value indicating whether this buffer has VP8 video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsVp9">
            <summary>
            Gets a value indicating whether this buffer has VP9 video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsH264">
            <summary>
            Gets a value indicating whether this buffer has H.264 video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsMuted">
            <summary>
            Gets a value indicating whether this instance has been muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsPacked">
            <summary>
            Gets a value indicating whether the data is packed into a single data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsPlanar">
            <summary>
            Gets a value indicating whether the data is spread across multiple data buffers (planes).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.Mute">
            <summary>
            Mutes this instance. This is a one-way operation that clears
            the underlying data buffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoBuffer" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.#ctor(System.Int32,System.Int32,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoBuffer" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="dataBuffer">The data buffer.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.#ctor(System.Int32,System.Int32,FM.LiveSwitch.DataBuffer[],FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoBuffer" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="dataBuffers">The data buffers.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.#ctor(System.Int32,System.Int32,System.Int32,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoBuffer" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="dataBuffer">The data buffer.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.#ctor(System.Int32,System.Int32,System.Int32[],FM.LiveSwitch.DataBuffer[],FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoBuffer" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="strides">The strides.</param>
            <param name="dataBuffers">The data buffers.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoBuffer.IsKeyFrame">
            <summary>
            Gets a value indicating whether this buffer contains a keyframe.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.GetMinimumBufferLength(System.Int32,System.Int32,System.String)">
            <summary>
            Gets the minimum data buffer length for a given width, height, and format.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateCustom(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a custom video buffer with the specified width/height and red/green/blue values
            for the specified format name. If the format is not supported, returns null.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="red">The red value.</param>
            <param name="green">The green value.</param>
            <param name="blue">The blue value.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateCustom(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,FM.LiveSwitch.DataBuffer)">
            <summary>
            Creates a custom video buffer with the specified width/height and red/green/blue values
            for the specified format name. If the format is not supported, returns null.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="red">The red value.</param>
            <param name="green">The green value.</param>
            <param name="blue">The blue value.</param>
            <param name="formatName">Name of the format.</param>
            <param name="buffer">The output data buffer.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateBlack(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a black (0, 0, 0) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateGray(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a gray (255, 255, 255) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateWhite(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a white (255, 255, 255) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateRed(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a red (255, 0, 0) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateGreen(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a green (0, 255, 0) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateBlue(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a blue (0, 0, 255) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateDarkRed(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a dark red (128, 0, 0) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateDarkGreen(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a dark green (0, 128, 0) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateDarkBlue(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a dark blue (0, 0, 128) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateYellow(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a yellow (255, 255, 0) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateMagenta(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a magenta (255, 0, 255) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateCyan(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a cyan (0, 255, 255) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateOlive(System.Int32,System.Int32,System.String)">
            <summary>
            Creates an olive (128, 128, 0) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreatePurple(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a purple (128, 0, 128) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.CreateTeal(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a teal (0, 128, 128) video buffer with the specified width/height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">Name of the format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.GetYValue(System.Int32)">
            <summary>
            Gets the Y value at a given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The Y value, or -1 if the video buffer is not YUV-type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.SetYValue(System.Int32,System.Int32)">
            <summary>
            Sets the Y value at a given index.
            </summary>
            <param name="yValue">The Y value.</param>
            <param name="index">The index.</param>
            <returns><c>true</c> if the video buffer is YUV-type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.GetUValue(System.Int32)">
            <summary>
            Gets the U value at a given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The U value, or -1 if the video buffer is not YUV-type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.SetUValue(System.Int32,System.Int32)">
            <summary>
            Sets the U value at a given index.
            </summary>
            <param name="uValue">The U value.</param>
            <param name="index">The index.</param>
            <returns><c>true</c> if the video buffer is YUV-type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.GetVValue(System.Int32)">
            <summary>
            Gets the V value at a given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The V value, or -1 if the video buffer is not YUV-type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.SetVValue(System.Int32,System.Int32)">
            <summary>
            Sets the V value at a given index.
            </summary>
            <param name="vValue">The V value.</param>
            <param name="index">The index.</param>
            <returns><c>true</c> if the video buffer is YUV-type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.GetRValue(System.Int32)">
            <summary>
            Gets the R value at a given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The R value, or -1 if the video buffer is not RGB/RGBA-type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.SetRValue(System.Int32,System.Int32)">
            <summary>
            Sets the R value at a given index.
            </summary>
            <param name="rValue">The R value.</param>
            <param name="index">The index.</param>
            <returns><c>true</c> if the video buffer is RGB/RGBA-type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.GetGValue(System.Int32)">
            <summary>
            Gets the G value at a given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The G value, or -1 if the video buffer is not RGB/RGBA-type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.SetGValue(System.Int32,System.Int32)">
            <summary>
            Sets the G value at a given index.
            </summary>
            <param name="gValue">The G value.</param>
            <param name="index">The index.</param>
            <returns><c>true</c> if the video buffer is RGB/RGBA-type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.GetBValue(System.Int32)">
            <summary>
            Gets the B value at a given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The B value, or -1 if the video buffer is not RGB/RGBA-type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.SetBValue(System.Int32,System.Int32)">
            <summary>
            Gets the B value at a given index.
            </summary>
            <param name="bValue">The B value.</param>
            <param name="index">The index.</param>
            <returns><c>true</c> if the video buffer is RGB/RGBA-type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.GetAValue(System.Int32)">
            <summary>
            Gets the A value at a given index.
            If the video buffer is not RGBA-type, then this will return 255.
            </summary>
            <param name="index">The index.</param>
            <returns>The A value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.SetAValue(System.Int32,System.Int32)">
            <summary>
            Gets the A value at a given index.
            If the video buffer is not RGBA-type, then this will return false.
            </summary>
            <param name="aValue">The A value.</param>
            <param name="index">The index.</param>
            <returns><c>true</c> if the video buffer is RGBA-type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.Convert(FM.LiveSwitch.VideoFormat)">
            <summary>
            Creates a new video buffer using the specified format.
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.Convert(FM.LiveSwitch.VideoFormat,System.Boolean)">
            <summary>
            Creates a new video buffer using the specified format.
            </summary>
            <param name="format">The format.</param>
            <param name="usePool">Whether to use the DataBufferPool.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.Convert(FM.LiveSwitch.VideoFormat,FM.LiveSwitch.DataBuffer)">
            <summary>
            Creates a new video buffer using the specified format.
            </summary>
            <param name="format">The format.</param>
            <param name="dataBuffer">The data buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.ToPacked">
            <summary>
            Creates a packed representation of this
            planar buffer, if in YUV-planar format.
            Otherwise, returns the current buffer.
            If the planar data is not contiguous in
            memory, new memory will be allocated for
            the packed representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.ToPacked(System.Boolean)">
            <summary>
            Creates a packed representation of this
            planar buffer, if in YUV-planar format.
            Otherwise, returns the current buffer.
            If the planar data is not contiguous in
            memory, new memory will be allocated or
            taken from the data buffer pool for
            the packed representation.
            </summary>
            <param name="usePool">Whether to use the data buffer pool for any required memory allocations.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.ToPlanar">
            <summary>
            Creates a planar representation of this
            packed buffer, if in YUV-packed format.
            Otherwise, returns the current buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.ToJson(FM.LiveSwitch.VideoBuffer)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="videoBuffer">The video buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="videoBufferJson">The video buffer JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.ToJsonArray(FM.LiveSwitch.VideoBuffer[])">
            <summary>
            Serializes an array of instances to JSON.
            </summary>
            <param name="videoBuffers">The video buffers.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoBuffer.FromJsonArray(System.String)">
            <summary>
            Deserializes an array of instances from JSON.
            </summary>
            <param name="videoBuffersJson">The video buffers JSON.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.VideoBufferCollection">
            <summary>
            A video buffer collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoBufferCollection.ArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.VideoBuffer})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoBufferCollection.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.VideoDecoder">
            <summary>
            A video decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoDecoder.MinInputBitrate">
            <summary>
            Gets the minimum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            Returns -1 by default.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoDecoder.MaxInputBitrate">
            <summary>
            Gets the maximum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            Returns -1 by default.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoDecoder.MinOutputBitrate">
            <summary>
            Gets the minimum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            Returns -1 by default.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoDecoder.MaxOutputBitrate">
            <summary>
            Gets the maximum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            Returns -1 by default.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoDecoder.#ctor(FM.LiveSwitch.VideoFormat,FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoDecoder" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="P:FM.LiveSwitch.VideoDecoder.DelayDecodeOnPendingKeyFrame">
            <summary>
            Gets or sets a flag indicating whether decoding should be bypassed for
            incoming media packets when a key frame request has been made via
            a PLI message. Default is true.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoDecoder.DelayDecode">
            <summary>
            Gets a value indicating whether decoding should be delayed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoDecoder.IsKeyFrame(FM.LiveSwitch.DataBuffer)">
            <summary>
            Determines whether a data buffer represents a keyframe.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoDecoder.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoDecoder.RaiseFrame(FM.LiveSwitch.VideoFrame)">
            <summary>
            Raises a frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoDecoder.SendKeyFrameRequest(System.String)">
            <summary>
            Sends a key-frame request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoDecoder.FrameWidth">
            <summary>
            Gets the last frame width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoDecoder.FrameHeight">
            <summary>
            Gets the last frame height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoDecoder.FrameRate">
            <summary>
            Gets the current frame rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoDecoder.FramesDecoded">
            <summary>
            Gets the number of decoded frames.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoDecoder.DoProcessTrackStatsFromInput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Process track stats from an input.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="T:FM.LiveSwitch.AudioSynchronizer">
            <summary>
            An audio pipe for synchronizing
            playout with other streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSynchronizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSynchronizer.MaxDelay">
            <summary>
            Gets or sets the maximum amount of delay to allow in the queue, in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSynchronizer.MaxData">
            <summary>
            Gets or sets the maximum amount of data to allow in the queue, in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSynchronizer.QueueCount">
            <summary>
            Gets the number of pending frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSynchronizer.HeadSystemTimestamp">
            <summary>
            Gets the system timestamp from the head of the queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSynchronizer.Active">
            <summary>
            Gets whether synchronization is active.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSynchronizer.Master">
            <summary>
            Gets whether this is the master.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSynchronizer.Slaves">
            <summary>
            Gets the slaves.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioSynchronizer.MasterSystemTimestamp">
            <summary>
            Gets or sets the master system timestamp.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioSynchronizer.#ctor(FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioSynchronizer"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioSynchronizer.Activate(System.Boolean,FM.LiveSwitch.ISynchronizer[])">
            <summary>
            Activates synchronizing.
            </summary>
            <param name="master">Whether this is a master.</param>
            <param name="slaves">The slaves, if this is a master.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioSynchronizer.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioSynchronizer.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.VideoSynchronizer">
            <summary>
            An video pipe for synchronizing
            playout with other streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSynchronizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSynchronizer.MaxDelay">
            <summary>
            Gets or sets the maximum amount of delay to allow in the queue, in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSynchronizer.MaxData">
            <summary>
            Gets or sets the maximum amount of data to allow in the queue, in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSynchronizer.QueueCount">
            <summary>
            Gets the number of pending frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSynchronizer.Active">
            <summary>
            Gets whether synchronization is active.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSynchronizer.HeadSystemTimestamp">
            <summary>
            Gets the system timestamp from the head of the queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSynchronizer.Master">
            <summary>
            Gets whether this is the master.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSynchronizer.Slaves">
            <summary>
            Gets the slaves.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSynchronizer.MasterSystemTimestamp">
            <summary>
            Gets or sets the master system timestamp.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoSynchronizer.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoSynchronizer"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoSynchronizer.Activate(System.Boolean,FM.LiveSwitch.ISynchronizer[])">
            <summary>
            Activates synchronizing.
            </summary>
            <param name="master">Whether this is a master.</param>
            <param name="slaves">The slaves, if this is a master.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoSynchronizer.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoSynchronizer.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.VideoDepacketizer`1">
            <summary>
            A video depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoDepacketizer`1.AllowDiagnosticTimer">
            <summary>
            Gets whether this pipe is allowed to be timed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoDepacketizer`1.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoDepacketizer`1"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoDepacketizer`1.#ctor(FM.LiveSwitch.VideoFormat,FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoDepacketizer`1" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoDepacketizer`1.#ctor(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoDepacketizer`1"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="P:FM.LiveSwitch.VideoDepacketizer`1.DelayDepacketizeOnPendingKeyFrame">
            <summary>
            Gets or sets a flag indicating whether depacketizing should be bypassed for
            incoming media packets when a key frame request has been made via
            a PLI message. Default is true.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoDepacketizer`1.DelayDepacketize">
            <summary>
            Gets a value indicating whether depacketizing should be delayed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoDepacketizer`1.IsKeyFrame(FM.LiveSwitch.DataBuffer)">
            <summary>
            Determines whether a buffer represents the start of a keyframe.
            </summary>
            <param name="inputBuffer">The buffer.</param>
            <returns><c>true</c> if the buffer represents the start of a keyframe; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoDepacketizer`1.DoCreateFragment(FM.LiveSwitch.RtpPacketHeader,FM.LiveSwitch.DataBuffer)">
            <summary>
            Creates a fragment from a data buffer.
            </summary>
            <param name="header">The RTP header for this packet.</param>
            <param name="dataBuffer">The data buffer.</param>
            <returns>A fragment.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoDepacketizer`1.IsGapAllowed(`0,`0)">
            <summary>
            Determines whether a gap between two fragments is allowed.
            </summary>
            <param name="fragment">The fragment.</param>
            <param name="lastFragment">The last fragment.</param>
            <returns><c>true</c> if the gap is allowed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoDepacketizer`1.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoDepacketizer`1.SendKeyFrameRequest(System.String)">
            <summary>
            Sends a key-frame request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoDepacketizer`1.FramesReceived">
            <summary>
            Gets the number of received frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoDepacketizer`1.FramesDropped">
            <summary>
            Gets the number of dropped frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoDepacketizer`1.FramesCorrupted">
            <summary>
            Gets the number of corrupted frames.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoDepacketizer`1.DoProcessTrackStatsFromInput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Process track stats from an input.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoDepacketizer`1.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.VideoEncoder">
            <summary>
            A video encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.MinCodecBitrate">
            <summary>
            Gets the minimum possible codec bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.MaxCodecBitrate">
            <summary>
            Gets the maximum possible codec bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.StaticOutputBitrate">
            <summary>
            Gets or sets whether <see cref="P:FM.LiveSwitch.VideoEncoder.MinOutputBitrate"/> and
            <see cref="P:FM.LiveSwitch.VideoEncoder.MaxOutputBitrate"/> should return
            <see cref="P:FM.LiveSwitch.VideoEncoder.MinCodecBitrate"/> and
            <see cref="P:FM.LiveSwitch.VideoEncoder.MaxCodecBitrate"/>, respectively, or
            response to changes in <see cref="P:FM.LiveSwitch.VideoEncoder.MinBitrate"/> and
            <see cref="P:FM.LiveSwitch.VideoEncoder.MaxBitrate"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.MinOutputBitrate">
            <summary>
            Gets or sets the minimum output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.MinBitrate">
            <summary>
            Gets or sets the minimum bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.MaxOutputBitrate">
            <summary>
            Gets or sets the maximum output bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.MaxBitrate">
            <summary>
            Gets or sets the maximum bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.TargetOutputBitrate">
            <summary>
            Gets or sets the target output bitrate, in kbps.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.TargetBitrate">
            <summary>
            Gets or sets the target bitrate, in kbps.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.Bitrate">
            <summary>
            Gets or sets the current bitrate, in kbps.
            A value of -1 indicates unset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.CanChangeBitrate">
            <summary>
            Gets whether this pipe can change the output bitrate.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.VideoEncoder.OnBitrateChange">
            <summary>
            Raised when the bitrate changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.ForceKeyFrame">
            <summary>
            Gets or sets a value indicating whether a keyframe should be forced.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncoder.#ctor(FM.LiveSwitch.VideoFormat,FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoEncoder" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncoder.ProcessFrame(FM.LiveSwitch.VideoFrame)">
            <summary>
            Processes the frame.
            </summary>
            <param name="frame">The frame.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncoder.RaiseFrame(FM.LiveSwitch.VideoFrame)">
            <summary>
            Raises the frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncoder.DoProcessControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes the control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.FrameWidth">
            <summary>
            Gets the last frame width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.FrameHeight">
            <summary>
            Gets the last frame height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.FrameRate">
            <summary>
            Gets the current frame rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncoder.FramesEncoded">
            <summary>
            Gets the number of encoded frames.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncoder.DoProcessTrackStatsFromOutput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes track stats from an output.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="T:FM.LiveSwitch.VideoFormat">
            <summary>
            A video format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.DefaultClockRate">
            <summary>
            Gets the default clock rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Vp8">
            <summary>
            Gets a VP8 video format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Vp9">
            <summary>
            Gets a VP9 video format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.H264">
            <summary>
            Gets an H.264 video format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Rgb">
            <summary>
            Gets an RGB video format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Bgr">
            <summary>
            Gets a BGR video format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.I420">
            <summary>
            Gets an I420 video format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Yv12">
            <summary>
            Gets a YV12 video format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Nv12">
            <summary>
            Gets an NV12 video format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Nv21">
            <summary>
            Gets an NV21 video format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Rgba">
            <summary>
            Gets an RGBA video format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Bgra">
            <summary>
            Gets an BGRA video format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Argb">
            <summary>
            Gets an ARGB video format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Abgr">
            <summary>
            Gets an ABGR video format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Vp8Name">
            <summary>
            Gets the name of the VP8 video format ("VP8").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Vp9Name">
            <summary>
            Gets the name of the VP9 video format ("VP9").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.H264Name">
            <summary>
            Gets the name of the H.264 video format ("H264").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.RgbName">
            <summary>
            Gets the name of the RGB video format ("RGB").
            Indicates that each pixel occupies 24 bits (8 bits for red, then 8 bits for green, then 8 bits for blue).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.BgrName">
            <summary>
            Gets the name of the BGR video format ("BGR").
            Indicates that each pixel occupies 24 bits (8 bits for blue, then8 bits for green, then 8 bits for red).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.I420Name">
            <summary>
            Gets the name of the I420 video format ("I420").
            Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
            Y plane is followed by U plane and then V plane.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Yv12Name">
            <summary>
            Gets the name of the YV12 video format ("YV12").
            Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
            Y plane is followed by V plane and then U plane.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Nv12Name">
            <summary>
            Gets the name of the NV12 video format ("NV12").
            Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
            Y plane is followed by interleaved U/V plane.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Nv21Name">
            <summary>
            Gets the name of the NV21 video format ("NV21").
            Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
            Y plane is followed by interleaved V/U plane.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.RgbaName">
            <summary>
            Gets the name of the RGBA video format ("RGBA").
            Indicates that each pixel occupies 32 bits (8 bits for red, then 8 bits for green, then 8 bits for blue, then 8 bits for alpha).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.BgraName">
            <summary>
            Gets the name of the BGRA video format ("BGRA").
            Indicates that each pixel occupies 32 bits (8 bits for blue, then8 bits for green, then 8 bits for red, then 8 bits for alpha).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.ArgbName">
            <summary>
            Gets the name of the ARGB video format ("ARGB").
            Indicates that each pixel occupies 32 bits (8 bits for alpha, then 8 bits for red, then 8 bits for green, then 8 bits for blue).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.AbgrName">
            <summary>
            Gets the name of the ABGR video format ("ABGR").
            Indicates that each pixel occupies 32 bits (8 bits for alpha, then 8 bits for blue, then8 bits for green, then 8 bits for red).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsCompressed">
            <summary>
            Gets whether this is a compressed format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsRaw">
            <summary>
            Gets a value indicating whether this format is RGB, BGR,
            I420, YV12, NV12, NV21, RGBA, BGRA, ARGB, or ABGR.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsYuvType">
            <summary>
            Gets a value indicating whether this format is
            I420, YV12, NV12, or NV21.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsRgbType">
            <summary>
            Gets a value indicating whether this format is RGB or BGR.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsRgbaType">
            <summary>
            Gets a value indicating whether this format is
            RGBA, BGRA, ARGB, or ABGR.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsI420">
            <summary>
            Gets a value indicating whether this format is I420.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsYv12">
            <summary>
            Gets a value indicating whether this format is YV12.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsNv12">
            <summary>
            Gets a value indicating whether this format is NV12.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsNv21">
            <summary>
            Gets a value indicating whether this format is NV21.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsRgb">
            <summary>
            Gets a value indicating whether this format is RGB.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsBgr">
            <summary>
            Gets a value indicating whether this format is BGR.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsRgba">
            <summary>
            Gets a value indicating whether this format is RGBA.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsBgra">
            <summary>
            Gets a value indicating whether this format is BGRA.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsArgb">
            <summary>
            Gets a value indicating whether this format is ARGB.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsAbgr">
            <summary>
            Gets a value indicating whether this format is ABGR.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsVp8">
            <summary>
            Gets a value indicating whether this format is VP8.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsVp9">
            <summary>
            Gets a value indicating whether this format is VP9.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.IsH264">
            <summary>
            Gets a value indicating whether this format is H.264.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.FourCC">
            <summary>
            Gets or sets the FourCC value for this format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFormat.Info">
            <summary>
            Gets this format as an info object.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoFormat"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoFormat" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoFormat" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoFormat" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="profile">The media format profile.</param>
            <param name="level">The media format level.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoFormat" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="packetizationMode">The packetization mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoFormat" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="packetizationMode">The packetization mode.</param>
            <param name="level">The media format level.</param>
            <param name="profile">The media format profile.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.Clone">
            <summary>
            Clones this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.ToFourCC(System.String)">
            <summary>
            Converts a FourCC string to a int.
            </summary>
            <param name="fourcc">The fourcc.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.ToFourCC(System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Converts 4 FourCC characters to an int.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.FormatNameToFourCC(System.String)">
            <summary>
            Converts a format name to its FourCC value.
            </summary>
            <param name="formatName">The format name.</param>
            <returns>The FourCC value, or 0 if the format name is not recognized.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.FourCCToFormatName(System.Int32)">
            <summary>
            Converts a FourCC value to its format name.
            </summary>
            <param name="fourcc">The FourCC value.</param>
            <returns>The format name, or an empty string if the FourCC value is not recognized.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.ToJson(FM.LiveSwitch.VideoFormat)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="videoFormat">The video format.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="videoFormatJson">The video format JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.FromFormatInfo(FM.LiveSwitch.FormatInfo)">
            <summary>
            Transforms a FormatInfo into an VideoFormat.
            </summary>
            <param name="info">The format info.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.IsProfileCompatible(System.String)">
            <summary>
            Gets whether a profile is compatible.
            </summary>
            <param name="profile">The profile.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.IsLevelCompatible(System.String)">
            <summary>
            Gets whether a level is compatible.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.UpdateProfileToCompatible(FM.LiveSwitch.VideoFormat)">
            <summary>
            Updates the profile to a compatible value.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.GetMinLevel(System.String,System.String)">
            <summary>
            Gets the minimum level.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The minimum level.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormat.GetMaxLevel(System.String,System.String)">
            <summary>
            Gets the maximum level.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The maximum level.</returns>
        </member>
        <member name="T:FM.LiveSwitch.VideoFormatCollection">
            <summary>
            A collection of video formats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoFormatCollection.ArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.VideoFormat})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoFormatCollection.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.VideoFragment">
            <summary>
            A fragment of a video frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFragment.First">
            <summary>
            Gets or sets whether this is the first packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFragment.Last">
            <summary>
            Gets or sets whether this is the last packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoFragment.Buffer">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoFragment.Destroy">
            <summary>
            Destroys this fragment.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoFragment.Keep">
            <summary>
            Keeps the underlying data buffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoFragment.Free">
            <summary>
            Frees the underlying data buffer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.VideoFrame">
            <summary>
            A video frame.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoFrame" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoFrame.#ctor(FM.LiveSwitch.VideoBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoFrame" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoFrame.#ctor(FM.LiveSwitch.VideoBuffer[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoFrame" /> class.
            </summary>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoFrame.Clone">
            <summary>
            Clones this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoFrame.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoFrame.CreateMediaBufferCollection">
            <summary>
            Creates a media buffer collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoFrame.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoFrame.GenerateFrame(System.Int32,System.Int32,System.String)">
            <summary>
            Generates a black video frame for the given width, height, and format.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="formatName">The format name.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.VideoPacketizer">
            <summary>
            A video packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPacketizer.AllowDiagnosticTimer">
            <summary>
            Gets whether this pipe is allowed to be timed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPacketizer.CanPauseBitrate">
            <summary>
            Gets whether this pipe can pause the output bitrate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoPacketizer.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoPacketizer"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoPacketizer.#ctor(FM.LiveSwitch.VideoFormat,FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoPacketizer" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoPacketizer.#ctor(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoPacketizer" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoPacketizer.ProcessFrame(FM.LiveSwitch.VideoFrame)">
            <summary>
            Processes the frame.
            </summary>
            <param name="frame">The frame.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.VideoPacketizer.FramesSent">
            <summary>
            Gets the number of sent frames.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoPacketizer.DoProcessTrackStatsFromOutput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes track stats from an output.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="T:FM.LiveSwitch.VideoPipe">
            <summary>
            A video pipe.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.VideoType">
            <summary>
            Gets or sets the video type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoPipe.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoPipe" /> class.
            </summary>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoPipe.#ctor(FM.LiveSwitch.VideoFormat,FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoPipe" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoPipe.CreateFrame(FM.LiveSwitch.VideoBuffer)">
            <summary>
            Creates a frame.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoPipe.CreateOutputCollection(FM.LiveSwitch.IVideoInput)">
            <summary>
            Creates an output collection.
            </summary>
            <param name="input">The input.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoPipe.CreateInputCollection(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Creates an input collection.
            </summary>
            <param name="output">The output.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedInput">
            <summary>
            Gets whether the input is over-contrained.
            An input is over-constrained if it's
            input bitrate, input scale, input frame-rate,
            input size is over-contrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedOutput">
            <summary>
            Gets whether the output is over-contrained.
            An output is over-constrained if it's
            output bitrate, output scale, output frame-rate,
            output size is over-contrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedScale">
            <summary>
            Gets whether the pipe scale is over-constrained.
            A pipe scale is over-constrained if the input
            scale or output scale is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedInputScale">
            <summary>
            Gets whether the minimum allowed input scale exceeds the maximum allowed input scale.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedOutputScale">
            <summary>
            Gets whether the minimum allowed output scale exceeds the maximum allowed output scale.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MinInputScale">
            <summary>
            Gets or sets the minimum allowed input scale.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MaxInputScale">
            <summary>
            Gets or sets the maximum allowed input scale.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MinOutputScale">
            <summary>
            Gets or sets the minimum allowed output scale.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MaxOutputScale">
            <summary>
            Gets or sets the maximum allowed output scale.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.TargetOutputScale">
            <summary>
            Gets or sets the target output scale.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedFrameRate">
            <summary>
            Gets whether the pipe frame-rate is over-constrained.
            A pipe frame-rate is over-constrained if the input
            frame-rate or output frame-rate is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedInputFrameRate">
            <summary>
            Gets whether the minimum allowed input frame-rate exceeds the maximum allowed input frame-rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedOutputFrameRate">
            <summary>
            Gets whether the minimum allowed output frame-rate exceeds the maximum allowed output frame-rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MinInputFrameRate">
            <summary>
            Gets or sets the minimum allowed input frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MaxInputFrameRate">
            <summary>
            Gets or sets the maximum allowed input frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MinOutputFrameRate">
            <summary>
            Gets or sets the minimum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MaxOutputFrameRate">
            <summary>
            Gets or sets the maximum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.TargetOutputFrameRate">
            <summary>
            Gets or sets the target output frame-rate, in fps.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedSize">
            <summary>
            Gets whether the pipe size is over-constrained.
            A pipe size is over-constrained if the input
            size or output size is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedInputSize">
            <summary>
            Gets whether the minimum allowed input size exceeds the maximum allowed input size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedOutputSize">
            <summary>
            Gets whether the minimum allowed output size exceeds the maximum allowed output size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MinInputSize">
            <summary>
            Gets or sets the minimum allowed input size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MaxInputSize">
            <summary>
            Gets or sets the maximum allowed input size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MinOutputSize">
            <summary>
            Gets or sets the minimum allowed output size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MaxOutputSize">
            <summary>
            Gets or sets the maximum allowed output size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.TargetOutputSize">
            <summary>
            Gets or sets the target output size.
            A value of null indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedWidth">
            <summary>
            Gets whether the pipe width is over-constrained.
            A pipe width is over-constrained if the input
            width or output width is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedInputWidth">
            <summary>
            Gets whether the minimum allowed input width exceeds the maximum allowed input width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedOutputWidth">
            <summary>
            Gets whether the minimum allowed output width exceeds the maximum allowed output width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MinInputWidth">
            <summary>
            Gets the minimum allowed input width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MaxInputWidth">
            <summary>
            Gets the maximum allowed input width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MinOutputWidth">
            <summary>
            Gets the minimum allowed output width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MaxOutputWidth">
            <summary>
            Gets the maximum allowed output width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.TargetOutputWidth">
            <summary>
            Gets the target output width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedHeight">
            <summary>
            Gets whether the pipe height is over-constrained.
            A pipe height is over-constrained if the input
            height or output height is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedInputHeight">
            <summary>
            Gets whether the minimum allowed input height exceeds the maximum allowed input height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.OverConstrainedOutputHeight">
            <summary>
            Gets whether the minimum allowed output height exceeds the maximum allowed output height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MinInputHeight">
            <summary>
            Gets the minimum allowed input height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MaxInputHeight">
            <summary>
            Gets the maximum allowed input height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MinOutputHeight">
            <summary>
            Gets the minimum allowed output height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MaxOutputHeight">
            <summary>
            Gets the maximum allowed output height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.TargetOutputHeight">
            <summary>
            Gets the target output height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MinInputEncoding">
            <summary>
            Gets or sets the minimum allowed input encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MaxInputEncoding">
            <summary>
            Gets or sets the maximum allowed input encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MinOutputEncoding">
            <summary>
            Gets or sets the minimum allowed output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.MaxOutputEncoding">
            <summary>
            Gets or sets the maximum allowed output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoPipe.TargetOutputEncoding">
            <summary>
            Gets or sets the target output encoding.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.VideoPipe.OnRaiseSizeChange">
            <summary>
            Raised when a frame is about to be raised with
            a size that does not match the prior frame.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoPipe.RaiseFrame(FM.LiveSwitch.VideoFrame)">
            <summary>
            Raises a frame.
            </summary>
            <param name="frame">The frame.</param>
            
        </member>
        <member name="E:FM.LiveSwitch.VideoPipe.OnProcessSizeChange">
            <summary>
            Raised when a frame is about to be processed with
            a size that does not match the prior frame.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoPipe.DoPreProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Pre-processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoPipe.OutputCanProcessFrame(FM.LiveSwitch.IVideoInput)">
            <summary>
            Determines whether an output can process a frame from this pipe.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.VideoRecorder">
            <summary>
            An video recorder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoRecorder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoRecorder"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="T:FM.LiveSwitch.VideoSink">
            <summary>
            A video sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.VideoType">
            <summary>
            Gets or sets the video type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoSink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoSink" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoSink.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoSink" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoSink.CreateOutputCollection(FM.LiveSwitch.IVideoInput)">
            <summary>
            Creates an output collection.
            </summary>
            <param name="input">The input.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.OverConstrainedInput">
            <summary>
            Gets whether the input is over-contrained.
            An input is over-constrained if it's
            input bitrate, input scale, input frame-rate,
            input size is over-contrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.OverConstrainedScale">
            <summary>
            Gets whether the sink scale is over-constrained.
            A sink scale is over-constrained if the input
            scale is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.OverConstrainedInputScale">
            <summary>
            Gets whether the minimum allowed input scale exceeds the maximum allowed input scale.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.MinInputScale">
            <summary>
            Gets or sets the minimum allowed input scale.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.MaxInputScale">
            <summary>
            Gets or sets the maximum allowed input scale.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.OverConstrainedFrameRate">
            <summary>
            Gets whether the sink frame-rate is over-constrained.
            A sink frame-rate is over-constrained if the input
            frame-rate is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.OverConstrainedInputFrameRate">
            <summary>
            Gets whether the minimum allowed input frame-rate exceeds the maximum allowed input frame-rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.MinInputFrameRate">
            <summary>
            Gets or sets the minimum allowed input frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.MaxInputFrameRate">
            <summary>
            Gets or sets the maximum allowed input frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.OverConstrainedSize">
            <summary>
            Gets whether the sink size is over-constrained.
            A sink size is over-constrained if the input
            size is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.OverConstrainedInputSize">
            <summary>
            Gets whether the minimum allowed input size exceeds the maximum allowed input size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.MinInputSize">
            <summary>
            Gets or sets the minimum allowed input size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.MaxInputSize">
            <summary>
            Gets or sets the maximum allowed input size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.OverConstrainedWidth">
            <summary>
            Gets whether the sink width is over-constrained.
            A sink width is over-constrained if the input
            width is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.OverConstrainedInputWidth">
            <summary>
            Gets whether the minimum allowed input width exceeds the maximum allowed input width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.MinInputWidth">
            <summary>
            Gets the minimum allowed input width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.MaxInputWidth">
            <summary>
            Gets the maximum allowed input width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.OverConstrainedHeight">
            <summary>
            Gets whether the sink height is over-constrained.
            A sink height is over-constrained if the input
            height is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.OverConstrainedInputHeight">
            <summary>
            Gets whether the minimum allowed input height exceeds the maximum allowed input height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.MinInputHeight">
            <summary>
            Gets the minimum allowed input height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.MaxInputHeight">
            <summary>
            Gets the maximum allowed input height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.MinInputEncoding">
            <summary>
            Gets or sets the minimum allowed input encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSink.MaxInputEncoding">
            <summary>
            Gets or sets the maximum allowed input encoding.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.VideoSink.OnProcessSizeChange">
            <summary>
            Raised when a frame is about to be processed with
            a size that does not match the prior frame.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoSink.DoPreProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Pre-processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.VideoSource">
            <summary>
            A video source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.VideoType">
            <summary>
            Gets or sets the video type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoSource.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoSource" /> class.
            </summary>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.FrameCount">
            <summary>
            Gets the frame count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.AverageFrameRate">
            <summary>
            Gets the average frame rate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoSource.GetSizeDistance(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the distance between two sizes.
            </summary>
            <param name="width1">The first width.</param>
            <param name="height1">The first height.</param>
            <param name="width2">The second width.</param>
            <param name="height2">The second height.</param>
            <returns>The positive linear distance between the two sizes.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoSource.GetFrameRateDistance(System.Double,System.Double)">
            <summary>
            Gets the distance between two frame rates.
            </summary>
            <param name="frameRate1">The first frame rate.</param>
            <param name="frameRate2">The second frame rate.</param>
            <returns>The positive distance between the two frame rates.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoSource.CreateInputCollection(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Creates an input collection.
            </summary>
            <param name="output">The source.</param>
            
        </member>
        <member name="E:FM.LiveSwitch.VideoSource.OnRaiseSizeChange">
            <summary>
            Raised when a frame is about to be raised with
            a size that does not match the prior frame.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoSource.RaiseFrame(FM.LiveSwitch.VideoFrame)">
            <summary>
            Raises a frame.
            </summary>
            <param name="frame">The frame.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.OverConstrainedOutput">
            <summary>
            Gets whether the output is over-contrained.
            An output is over-constrained if it's
            output bitrate, output scale, output frame-rate,
            output size is over-contrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.OverConstrainedScale">
            <summary>
            Gets whether the source scale is over-constrained.
            A source scale is over-constrained if the output
            scale is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.OverConstrainedOutputScale">
            <summary>
            Gets whether the minimum allowed output scale exceeds the maximum allowed output scale.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.MinOutputScale">
            <summary>
            Gets or sets the minimum allowed output scale.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.MaxOutputScale">
            <summary>
            Gets or sets the maximum allowed output scale.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.TargetOutputScale">
            <summary>
            Gets or sets the target output scale.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.OverConstrainedFrameRate">
            <summary>
            Gets whether the source frame-rate is over-constrained.
            A source frame-rate is over-constrained if the output
            frame-rate is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.OverConstrainedOutputFrameRate">
            <summary>
            Gets whether the minimum allowed output frame-rate exceeds the maximum allowed output frame-rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.MinOutputFrameRate">
            <summary>
            Gets or sets the minimum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.MaxOutputFrameRate">
            <summary>
            Gets or sets the maximum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.TargetOutputFrameRate">
            <summary>
            Gets or sets the target output frame-rate, in fps.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.OverConstrainedSize">
            <summary>
            Gets whether the source size is over-constrained.
            A source size is over-constrained if the output
            size is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.OverConstrainedOutputSize">
            <summary>
            Gets whether the minimum allowed output size exceeds the maximum allowed output size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.MinOutputSize">
            <summary>
            Gets or sets the minimum allowed output size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.MaxOutputSize">
            <summary>
            Gets or sets the maximum allowed output size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.TargetOutputSize">
            <summary>
            Gets or sets the target output size.
            A value of null indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.OverConstrainedWidth">
            <summary>
            Gets whether the source width is over-constrained.
            A source width is over-constrained if the output
            width is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.OverConstrainedOutputWidth">
            <summary>
            Gets whether the minimum allowed output width exceeds the maximum allowed output width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.MinOutputWidth">
            <summary>
            Gets the minimum allowed output width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.MaxOutputWidth">
            <summary>
            Gets the maximum allowed output width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.TargetOutputWidth">
            <summary>
            Gets the target output width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.OverConstrainedHeight">
            <summary>
            Gets whether the source height is over-constrained.
            A source height is over-constrained if the output
            height is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.OverConstrainedOutputHeight">
            <summary>
            Gets whether the minimum allowed output height exceeds the maximum allowed output height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.MinOutputHeight">
            <summary>
            Gets the minimum allowed output height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.MaxOutputHeight">
            <summary>
            Gets the maximum allowed output height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.TargetOutputHeight">
            <summary>
            Gets the target output height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.MinOutputEncoding">
            <summary>
            Gets or sets the minimum allowed output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.MaxOutputEncoding">
            <summary>
            Gets or sets the maximum allowed output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoSource.TargetOutputEncoding">
            <summary>
            Gets or sets the target output encoding.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoSource.OutputCanProcessFrame(FM.LiveSwitch.IVideoInput)">
            <summary>
            Determines whether an output can process a frame from this pipe.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.VideoStream">
            <summary>
            A video stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.Vp8Disabled">
            <summary>
            Gets or sets whether VP8 is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.Vp9Disabled">
            <summary>
            Gets or sets whether VP9 is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.H264Disabled">
            <summary>
            Gets or sets whether H.264 is disabled.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoStream" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.#ctor(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoStream" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.#ctor(FM.LiveSwitch.IVideoOutput[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoStream" /> class.
            </summary>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.#ctor(FM.LiveSwitch.IVideoInput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoStream" /> class.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.#ctor(FM.LiveSwitch.IVideoInput[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoStream" /> class.
            </summary>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.#ctor(FM.LiveSwitch.IVideoOutput,FM.LiveSwitch.IVideoInput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoStream" /> class.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.#ctor(FM.LiveSwitch.VideoTrack)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoStream"/> class.
            </summary>
            <param name="localTrack">The local track.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.#ctor(FM.LiveSwitch.VideoTrack,FM.LiveSwitch.VideoTrack)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoStream" /> class.
            </summary>
            <param name="localTrack">The local track.</param>
            <param name="remoteTrack">The remote track.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.#ctor(FM.LiveSwitch.LocalMedia)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoStream" /> class.
            </summary>
            <param name="localMedia">The local media.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.#ctor(FM.LiveSwitch.RemoteMedia)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoStream" /> class.
            </summary>
            <param name="remoteMedia">The remote media.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.#ctor(FM.LiveSwitch.LocalMedia,FM.LiveSwitch.RemoteMedia)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoStream" /> class.
            </summary>
            <param name="localMedia">The local media.</param>
            <param name="remoteMedia">The remote media.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.#ctor(FM.LiveSwitch.IVideoOutput[],FM.LiveSwitch.IVideoInput[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoStream" /> class.
            </summary>
            <param name="inputs">The inputs.</param>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.FormatArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.VideoFormat})">
            <summary>
            Creates a format array from a format list.
            </summary>
            <param name="formatList">The format list.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.InputArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.IVideoInput})">
            <summary>
            Creates an input array from an input list.
            </summary>
            <param name="inputList">The input list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.OutputArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.IVideoOutput})">
            <summary>
            Creates an output array from an output list.
            </summary>
            <param name="outputList">The output list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.CreateFormat(FM.LiveSwitch.Sdp.Rtp.MapAttribute,FM.LiveSwitch.Sdp.FormatParametersAttribute)">
            <summary>
            Creates a format.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="formatParametersAttribute">The format parameters attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.CreateFormat(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates a format.
            </summary>
            <param name="name">The format name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="parameters">The parameters.</param>
            <param name="payloadType">The payload type.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.CreateOutputCollection(FM.LiveSwitch.IVideoInput)">
            <summary>
            Creates an output collection.
            </summary>
            <param name="input">The input.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.CreateInputCollection(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Creates an input collection.
            </summary>
            <param name="output">The output.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.CreateMediaFormatCollection">
            <summary>
            Creates a media format collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.CreateRedFormat">
            <summary>
            Creates a RED format.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.CreateUlpFecFormat">
            <summary>
            Creates a ulpfec format.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.ProcessFrame(FM.LiveSwitch.VideoFrame)">
            <summary>
            Processes the frame.
            </summary>
            <param name="frame">The frame.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.VideoType">
            <summary>
            Gets the video type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.GetInputSourceMuted(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Gets whether an input source is muted.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.SetInputSourceMuted(FM.LiveSwitch.IVideoOutput,System.Boolean)">
            <summary>
            Sets whether an input source is muted.
            </summary>
            <param name="input">The input.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.GetOutputSinkMuted(FM.LiveSwitch.IVideoInput)">
            <summary>
            Gets whether an output sink is muted.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.SetOutputSinkMuted(FM.LiveSwitch.IVideoInput,System.Boolean)">
            <summary>
            Sets whether an output sink is muted.
            </summary>
            <param name="output">The output.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedInput">
            <summary>
            Gets whether the input is over-contrained.
            An input is over-constrained if it's
            input bitrate, input scale, input frame-rate,
            input size is over-contrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedOutput">
            <summary>
            Gets whether the output is over-contrained.
            An output is over-constrained if it's
            output bitrate, output scale, output frame-rate,
            output size is over-contrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedScale">
            <summary>
            Gets whether the stream scale is over-constrained.
            A stream scale is over-constrained if the input
            scale or output scale is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedInputScale">
            <summary>
            Gets whether the minimum allowed input scale exceeds the maximum allowed input scale.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedOutputScale">
            <summary>
            Gets whether the minimum allowed output scale exceeds the maximum allowed output scale.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MinInputScale">
            <summary>
            Gets the minimum allowed input scale.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MaxInputScale">
            <summary>
            Gets the maximum allowed input scale.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MinOutputScale">
            <summary>
            Gets the minimum allowed output scale.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MaxOutputScale">
            <summary>
            Gets the maximum allowed output scale.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.TargetOutputScale">
            <summary>
            Gets the target output scale.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedFrameRate">
            <summary>
            Gets whether the stream frame-rate is over-constrained.
            A stream frame-rate is over-constrained if the input
            frame-rate or output frame-rate is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedInputFrameRate">
            <summary>
            Gets whether the minimum allowed input frame-rate exceeds the maximum allowed input frame-rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedOutputFrameRate">
            <summary>
            Gets whether the minimum allowed output frame-rate exceeds the maximum allowed output frame-rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MinInputFrameRate">
            <summary>
            Gets the minimum allowed input frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MaxInputFrameRate">
            <summary>
            Gets the maximum allowed input frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MinOutputFrameRate">
            <summary>
            Gets the minimum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MaxOutputFrameRate">
            <summary>
            Gets the maximum allowed output frame-rate, in fps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.TargetOutputFrameRate">
            <summary>
            Gets the target output frame-rate, in fps.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedSize">
            <summary>
            Gets whether the stream size is over-constrained.
            A stream size is over-constrained if the input
            size or output size is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedInputSize">
            <summary>
            Gets whether the minimum allowed input size exceeds the maximum allowed input size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedOutputSize">
            <summary>
            Gets whether the minimum allowed output size exceeds the maximum allowed output size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MinInputSize">
            <summary>
            Gets the minimum allowed input size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MaxInputSize">
            <summary>
            Gets the maximum allowed input size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MinOutputSize">
            <summary>
            Gets the minimum allowed output size.
            A value of null indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MaxOutputSize">
            <summary>
            Gets the maximum allowed output size.
            A value of null indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.TargetOutputSize">
            <summary>
            Gets the target output size.
            A value of null indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedInputWidth">
            <summary>
            Gets whether the minimum allowed input width exceeds the maximum allowed input width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedOutputWidth">
            <summary>
            Gets whether the minimum allowed output width exceeds the maximum allowed output width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MinInputWidth">
            <summary>
            Gets the minimum allowed input width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MaxInputWidth">
            <summary>
            Gets the maximum allowed input width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MinOutputWidth">
            <summary>
            Gets the minimum allowed output width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MaxOutputWidth">
            <summary>
            Gets the maximum allowed output width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.TargetOutputWidth">
            <summary>
            Gets the target output width.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedInputHeight">
            <summary>
            Gets whether the minimum allowed input height exceeds the maximum allowed input height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.OverConstrainedOutputHeight">
            <summary>
            Gets whether the minimum allowed output height exceeds the maximum allowed output height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MinInputHeight">
            <summary>
            Gets the minimum allowed input height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MaxInputHeight">
            <summary>
            Gets the maximum allowed input height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MinOutputHeight">
            <summary>
            Gets the minimum allowed output height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MaxOutputHeight">
            <summary>
            Gets the maximum allowed output height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.TargetOutputHeight">
            <summary>
            Gets the target output height.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MinInputEncoding">
            <summary>
            Gets the minimum allowed input encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MaxInputEncoding">
            <summary>
            Gets the maximum allowed input encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MinOutputEncoding">
            <summary>
            Gets the minimum allowed output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.MaxOutputEncoding">
            <summary>
            Gets the maximum allowed output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoStream.TargetOutputEncoding">
            <summary>
            Gets the target output encoding.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.VideoStream.OnDiscardKeyFrameRequest">
            <summary>
            Raised when a keyframe request is discarded due to policy
            restrictions or lack of support by the remote endpoint.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoStream.RaiseKeyFrameRequest(System.Int64[])">
            <summary>
            Raises a keyframe request to the local track.
            </summary>
            <param name="synchronizationSources">The synchronization sources.</param>
        </member>
        <member name="T:FM.LiveSwitch.VideoTrack">
            <summary>
            A video track.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.VideoTrack.OnSize">
            <summary>
            Raised whenever the size is calculated.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.VideoTrack.OnRawBuffer">
            <summary>
            Raised whenever a raw buffer is raised.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoTrack.Size">
            <summary>
            Gets the size of this track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoTrack.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoTrack.Elements">
            <summary>
            Gets the elements.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoTrack" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.#ctor(FM.LiveSwitch.VideoTrack[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoTrack" /> class.
            </summary>
            <param name="tracks">The branch of tracks.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.#ctor(FM.LiveSwitch.IVideoElement)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoTrack" /> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.AddElement(FM.LiveSwitch.IVideoElement)">
            <summary>
            Adds an element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.GrabFrame">
            <summary>
            Grabs the next frame once it's rendered.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.ArrayFromOutputs(System.Collections.Generic.List{FM.LiveSwitch.IVideoOutput})">
            <summary>
            Creates an array of outputs from a list of outputs.
            </summary>
            <param name="outputs">The list of outputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.ArrayFromInputs(System.Collections.Generic.List{FM.LiveSwitch.IVideoInput})">
            <summary>
            Creates an array of inputs from a list of inputs.
            </summary>
            <param name="inputs">The list of inputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.ArrayFromSinks(System.Collections.Generic.List{FM.LiveSwitch.VideoSink})">
            <summary>
            Creates an array of sinks from a list of sinks.
            </summary>
            <param name="sinks">The list of sinks.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.BranchFromTracks(FM.LiveSwitch.VideoTrack[])">
            <summary>
            Creates a branch from an array of tracks.
            </summary>
            <param name="tracks">The tracks.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.IsBranch(FM.LiveSwitch.IVideoElement)">
            <summary>
            Determines whether the specified element is a branch.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.IsSource(FM.LiveSwitch.IVideoElement)">
            <summary>
            Determines whether the specified element is a source.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.IsPipe(FM.LiveSwitch.IVideoElement)">
            <summary>
            Determines whether the specified element is a pipe.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.IsSink(FM.LiveSwitch.IVideoElement)">
            <summary>
            Determines whether the specified element is a sink.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.IsStream(FM.LiveSwitch.IVideoElement)">
            <summary>
            Determines whether the specified element is a stream.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.IsInput(FM.LiveSwitch.IVideoElement)">
            <summary>
            Determines whether the specified element is an input.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoTrack.IsOutput(FM.LiveSwitch.IVideoElement)">
            <summary>
            Determines whether the specified element is an output.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.RtcVideoTrackConfig">
            <summary>
            A WebRTC/ORTC-compatible video track configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcVideoTrackConfig.Vp8Disabled">
            <summary>
            Gets or sets whether the VP8 codec should be disabled.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcVideoTrackConfig.H264Disabled">
            <summary>
            Gets or sets whether the H.264 codec should be disabled.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RtcVideoTrackConfig.Vp9Disabled">
            <summary>
            Gets or sets whether the VP9 codec should be disabled.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.VideoUtility">
            <summary>
            Utility methods for video.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ViewSink`1">
            <summary>
            A video view sink.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:FM.LiveSwitch.ViewSink`1.View">
            <summary>
            Gets the view.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ViewSink`1.ViewScale">
            <summary>
            Gets or sets the view scale.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ViewSink`1.ViewMirror">
            <summary>
            Gets or sets a value indicating whether the view is mirrored.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ViewSink`1.IsRecording">
            <summary>
            Gets or sets a value indicating whether a recording icon should be displayed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ViewSink`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ViewSink`1" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ViewSink`1.#ctor(FM.LiveSwitch.VideoFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ViewSink`1" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ViewSink`1.#ctor(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ViewSink`1" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.ViewSink`1.#ctor(FM.LiveSwitch.IVideoOutput[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ViewSink`1" /> class.
            </summary>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.ViewSink`1.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.ViewSink`1.RenderBuffer(FM.LiveSwitch.VideoBuffer)">
            <summary>
            Renders the buffer.
            </summary>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.ViewSink`1.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.VirtualAdapter">
            <summary>
            A virtual network adapter.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.VirtualDevice">
            <summary>
            A virtual network device.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualDevice.Network">
            <summary>
            Gets or sets the virtual network to which this device belongs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualDevice.IPAddress1">
            <summary>
            Gets or sets the first byte of the device IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualDevice.IPAddress2">
            <summary>
            Gets or sets the second byte of the device IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualDevice.IPAddress3">
            <summary>
            Gets or sets the third byte of the device IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualDevice.IPAddress4">
            <summary>
            Gets or sets the fourth byte of the device IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualDevice.UseDhcp">
            <summary>
            Gets or sets whether to use DHCP to assign an IP address to this device.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualDevice.IPAddress">
            <summary>
            Gets the device IP address as a string.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VirtualDevice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VirtualDevice"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VirtualDevice.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VirtualDevice"/> class.
            </summary>
            <param name="ipAddress1">The first byte of the device IP address.</param>
            <param name="ipAddress2">The second byte of the device IP address.</param>
            <param name="ipAddress3">The third byte of the device IP address.</param>
            <param name="ipAddress4">The fourth byte of the device IP address.</param>
        </member>
        <member name="M:FM.LiveSwitch.VirtualDevice.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.VirtualNatMode">
            <summary>
            Defines various virtual network NAT modes.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.VirtualNatMode.FullCone">
            <summary>
            Once an internal address (iAddr:iPort) is mapped to an external
            address (eAddr:ePort), any packets from iAddr:iPort will be sent
            through eAddr:ePort. Any external host can send packets to
            iAddr:iPort by sending packets to eAddr:ePort.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.VirtualNatMode.AddressRestrictedCone">
            <summary>
            Once an internal address (iAddr:iPort) is mapped to an external
            address (eAddr:ePort), any packets from iAddr:iPort will be sent
            through eAddr:ePort. An external host (hAddr:any) can send
            packets to iAddr:iPort by sending packets to eAddr:ePort only if
            iAddr:iPort has previously sent a packet to hAddr:any. "Any"
            means the port number doesn't matter.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.VirtualNatMode.PortRestrictedCone">
            <summary>
            Once an internal address (iAddr:iPort) is mapped to an external
            address (eAddr:ePort), any packets from iAddr:iPort will be sent
            through eAddr:ePort. An external host (hAddr:hPort) can send
            packets to iAddr:iPort by sending packets to eAddr:ePort only if
            iAddr:iPort has previously sent a packet to hAddr:hPort.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.VirtualNatMode.Symmetric">
            <summary>
            Each request from the same internal IP address and port to a
            specific destination IP address and port is mapped to a unique
            external source IP address and port, if the same internal host
            sends a packet even with the same source address and port but
            to a different destination, a different mapping is used. Only
            an external host that receives a packet from an internal host
            can send a packet back.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.VirtualNat">
            <summary>
            A virtual network NAT.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNat.Mode">
            <summary>
            Gets or sets the NAT mode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNat.Mappings">
            <summary>
            Gets the NAT mappings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNat.Timeout">
            <summary>
            Gets or sets the NAT mapping timeout (in ms).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VirtualNat.#ctor(FM.LiveSwitch.VirtualNatMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VirtualNat"/> class.
            </summary>
            <param name="mode">The NAT mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.VirtualNat.GetMapping(System.Int32,System.String@,System.Int32@,System.String,System.Int32)">
            <summary>
            Gets a NAT mapping.
            </summary>
            <param name="port">The local port.</param>
            <param name="internalIPAddress">The internal IP address.</param>
            <param name="internalPort">The internal port.</param>
            <param name="externalIPAddress">The external IP address.</param>
            <param name="externalPort">The external port.</param>
            <returns><c>true</c> if a mapping exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FM.LiveSwitch.VirtualNatMapping">
            <summary>
            A virtual network NAT mapping.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNatMapping.Port">
            <summary>
            Gets or sets the mapped port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNatMapping.IsForwarding">
            <summary>
            Gets or sets whether this is a forwarded mapping.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNatMapping.InternalAddress">
            <summary>
            Gets or sets the address of the internal device.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNatMapping.ExternalAddresses">
            <summary>
            Gets or sets the address(es) of the external device(s).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VirtualNatMapping.#ctor(System.Int32,FM.LiveSwitch.Action1{FM.LiveSwitch.VirtualNatMapping})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VirtualNatMapping"/> class.
            </summary>
            <param name="timeout">The NAT mapping timeout (in ms).</param>
            <param name="timeoutCallback">The callback to invoke when a NAT mapping times out.</param>
        </member>
        <member name="M:FM.LiveSwitch.VirtualNatMapping.ToString">
            <summary>
            Formats this mapping as a string.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.VirtualNetwork">
            <summary>
            A virtual network.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNetwork.Devices">
            <summary>
            Gets a list of connected devices.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNetwork.Nat">
            <summary>
            Gets or sets the NAT.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNetwork.NatMode">
            <summary>
            Gets or sets the NAT mode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNetwork.DhcpIPAddress1">
            <summary>
            Gets or sets the first byte of the DHCP range to use when assigning IP addresses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNetwork.DhcpIPAddress2">
            <summary>
            Gets or sets the second byte of the DHCP range to use when assigning IP addresses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNetwork.DhcpIPAddress3">
            <summary>
            Gets or sets the third byte of the DHCP range to use when assigning IP addresses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNetwork.DhcpIPAddress4Start">
            <summary>
            Gets or sets the starting fourth byte of the DHCP range to use when assigning IP addresses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNetwork.DhcpIPAddress4End">
            <summary>
            Gets or sets the ending fourth byte of the DHCP range to use when assigning IP addresses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNetwork.InternalIPAddress1">
            <summary>
            Gets or sets the first byte of the device's internal IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNetwork.InternalIPAddress2">
            <summary>
            Gets or sets the second byte of the device's internal IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNetwork.InternalIPAddress3">
            <summary>
            Gets or sets the third byte of the device's internal IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VirtualNetwork.InternalIPAddress4">
            <summary>
            Gets or sets the fourth byte of the device's internal IP address.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VirtualNetwork.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VirtualNetwork"/> class
            in full-cone NAT mode with a random DHCP range.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VirtualNetwork.#ctor(FM.LiveSwitch.VirtualNatMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VirtualNetwork"/> class
            with a random DHCP range.
            </summary>
            <param name="natMode">The NAT mode.</param>
        </member>
        <member name="M:FM.LiveSwitch.VirtualNetwork.#ctor(FM.LiveSwitch.VirtualNatMode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VirtualNetwork"/> class.
            with a partially random DHCP range.
            </summary>
            <param name="natMode">The NAT mode.</param>
            <param name="dhcpAddress1">The first byte of the DHCP range to use when assigning IP addresses.</param>
        </member>
        <member name="M:FM.LiveSwitch.VirtualNetwork.#ctor(FM.LiveSwitch.VirtualNatMode,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VirtualNetwork"/> class.
            with a partially random DHCP range.
            </summary>
            <param name="natMode">The NAT mode.</param>
            <param name="dhcpAddress1">The first byte of the DHCP range to use when assigning IP addresses.</param>
            <param name="dhcpAddress2">The second byte of the DHCP range to use when assigning IP addresses.</param>
        </member>
        <member name="M:FM.LiveSwitch.VirtualNetwork.#ctor(FM.LiveSwitch.VirtualNatMode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VirtualNetwork"/> class.
            </summary>
            <param name="natMode">The NAT mode.</param>
            <param name="dhcpAddress1">The first byte of the DHCP range to use when assigning IP addresses.</param>
            <param name="dhcpAddress2">The second byte of the DHCP range to use when assigning IP addresses.</param>
            <param name="dhcpAddress3">The third byte of the DHCP range to use when assigning IP addresses.</param>
        </member>
        <member name="M:FM.LiveSwitch.VirtualNetwork.AddAdapter">
            <summary>
            Adds an adapter to the network.
            </summary>
            <returns>The adapter.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VirtualNetwork.AddDevice``1(``0)">
            <summary>
            Adds a device to the network.
            </summary>
            <param name="device">The device to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.VirtualNetwork.RemoveDevice``1(``0)">
            <summary>
            Removes a device from the network.
            </summary>
            <param name="device">The device to remove.</param>
            <returns><c>true</c> if the device was removed; otherwise, <c>false</c></returns>
        </member>
        <member name="T:FM.LiveSwitch.Virtual.Client">
            <summary>
            Simple in-memory virtual client.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.Client.Name">
            <summary>
            Gets the client name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.Client.Adapters">
            <summary>
            Gets the adapters.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.Client.#ctor(FM.LiveSwitch.Virtual.SessionServer,System.String,FM.LiveSwitch.VirtualAdapter[],FM.LiveSwitch.Connection)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Virtual.Client" /> class.
            </summary>
            <param name="sessionServer">The session server.</param>
            <param name="clientName">Name of the client.</param>
            <param name="adapters">The adapters.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.Client.SetCandidate(FM.LiveSwitch.Candidate,System.String)">
            <summary>
            Sets a candidate.
            </summary>
            <param name="candidate">The candidate.</param>
            <param name="peerClientName">Name of the peer client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.Client.SessionServerNotify(FM.LiveSwitch.Virtual.SessionServerEventType,System.String)">
            <summary>
            Used by the session server to notify the client when peer events occur.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="peerClientName">Name of the peer client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.Client.Send(System.String)">
            <summary>
            Sends the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="T:FM.LiveSwitch.Virtual.ReceiveList">
            <summary>
            A virtual receive list.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Virtual.ReceivePort">
            <summary>
            A virtual receive port.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Virtual.Packet">
            <summary>
            A virtual network packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.Packet.ProtocolType">
            <summary>
            Gets or sets the protocol type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.Packet.SourceIPAddress">
            <summary>
            Gets or sets the source IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.Packet.SourcePort">
            <summary>
            Gets or sets the source port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.Packet.DestinationHostname">
            <summary>
            Gets or sets the destination hostname.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.Packet.DestinationIPAddress">
            <summary>
            Gets or sets the destination IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.Packet.DestinationPort">
            <summary>
            Gets or sets the destination port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.Packet.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.Packet.Payload">
            <summary>
            Gets or sets the data payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.Packet.SendTimestamp">
            <summary>
            Gets the send time as a <see cref="T:FM.LiveSwitch.ManagedStopwatch"/> timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.Packet.MinReceiveTimestamp">
            <summary>
            Gets the minimum receive time as a <see cref="T:FM.LiveSwitch.ManagedStopwatch"/> timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.Packet.Delay">
            <summary>
            Gets or sets the delay in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.Packet.ReadyForReceive">
            <summary>
            Gets whether this packet is ready to be received.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Virtual.PacketDeliveredArgs">
            <summary>
            Arguments for the packet-delivered event.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.PacketDeliveredArgs.Port">
            <summary>
            Gets or sets the port on which the packet was received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.PacketDeliveredArgs.ProtocolType">
            <summary>
            Gets or sets the protocol type of the delivery.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Virtual.SessionServer">
            <summary>
            Simple in-memory session server. For testing purposes only.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.SessionServer.Add(FM.LiveSwitch.Virtual.Client)">
            <summary>
            Adds a specified client.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.SessionServer.Remove(FM.LiveSwitch.Virtual.Client)">
            <summary>
            Removes a specified client.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.SessionServer.SendCandidate(FM.LiveSwitch.Candidate,System.String)">
            <summary>
            Sends a candidate to everyone else registered on the same virtual session server.
            </summary>
            <param name="candidate">The candidate.</param>
            <param name="sourceClientName">Name of the source client.</param>
        </member>
        <member name="T:FM.LiveSwitch.Virtual.TcpSocket">
            <summary>
            A virtual TCP socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.TcpSocket.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.TcpSocket.Server">
            <summary>
            Gets a value indicating whether the socket can accept incoming connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.TcpSocket.Secure">
            <summary>
            Gets a value indicating whether the socket is secure.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.TcpSocket.IPv6">
            <summary>
            Gets a value indicating whether the socket supports IPv6.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.TcpSocket.LocalPort">
            <summary>
            Gets or sets the local port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.TcpSocket.LocalIPAddress">
            <summary>
            Gets or sets the local IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.TcpSocket.RemotePort">
            <summary>
            Gets or sets the remote port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.TcpSocket.RemoteIPAddress">
            <summary>
            Gets or sets the remote IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.TcpSocket.RemoteHostname">
            <summary>
            Gets or sets the remote hostname.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.TcpSocket.SendDelay">
            <summary>
            Gets or sets the delay, in milliseconds, to
            apply to outbound packets.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.TcpSocket.LocalHostname">
            <summary>
            Gets or sets the local hostname to use if
            accepting secure sockets.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.#ctor(FM.LiveSwitch.VirtualAdapter,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Virtual.TcpSocket" /> class.
            </summary>
            <param name="adapter">The virtual adapter.</param>
            <param name="server">Whether the socket is going to accept new incoming connections.</param>
            <param name="ipv6">Whether an IPv6 socket should be created.</param>
            <param name="secure">Whether to send data securely using SSL.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.Bind">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.Bind(System.Boolean@)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="addressInUse">Whether or not the address is in use (no available ports).</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.Bind(System.String)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="ipAddress">The local IP address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.Bind(System.String,System.Boolean@)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="ipAddress">The local IP address.</param>
            <param name="addressInUse">Whether or not the address is in use (no available ports).</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.Bind(System.Int32)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="port">The local port.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.Bind(System.Int32,System.Boolean@)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="port">The local port.</param>
            <param name="addressInUse">Whether or not the address is in use (no available ports).</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.Bind(System.String,System.Int32)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="ipAddress">The local IP address.</param>
            <param name="port">The local port.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.Bind(System.String,System.Int32,System.Boolean@)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="ipAddress">The local IP address.</param>
            <param name="port">The local port.</param>
            <param name="addressInUse">Whether or not the address is in use.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.AcceptAsync(FM.LiveSwitch.Action0,FM.LiveSwitch.Action1{System.Exception},FM.LiveSwitch.Action1{FM.LiveSwitch.StreamSocket})">
            <summary>
            Accepts a new socket asynchronously.
            </summary>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
            <param name="onSocket">The callback to invoke when a socket is ready.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.Connect(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Connects to the specified IP address synchronously.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.ConnectAsync(System.String,System.String,System.Int32,System.Int32,FM.LiveSwitch.Action0,FM.LiveSwitch.Action2{System.Exception,System.Boolean})">
            <summary>
            Connects the socket asynchronously.
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="ipAddress">The remote IP address.</param>
            <param name="port">The remote port.</param>
            <param name="timeout">The timeout (in ms).</param>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.Send(FM.LiveSwitch.DataBuffer)">
            <summary>
            Sends data synchronously.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.SendAsync(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.Action0,FM.LiveSwitch.Action2{System.Exception,System.Boolean})">
            <summary>
            Sends data asynchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="timeout">The timeout (in ms).</param>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.Receive">
            <summary>
            Receives data synchronously.
            </summary>
            <returns>
            The received packet.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.Receive(System.Int32)">
            <summary>
            Receives data synchronously.
            </summary>
            <param name="timeout">The receive timeout (in ms).</param>
            <returns>
            The received packet.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.ReceiveAsync(System.Int32)">
            <summary>
            Receives data asynchronously.
            </summary>
            <param name="timeout">The timeout (in ms).</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.TcpSocket.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Virtual.UdpSocket">
            <summary>
            A virtual UDP socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.UdpSocket.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.UdpSocket.IPv6">
            <summary>
            Gets a value indicating whether the socket supports IPv6.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.UdpSocket.ReceiveBufferSize">
            <summary>
            Gets the current receive buffer size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.UdpSocket.SendBufferSize">
            <summary>
            Gets the current send buffer size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.UdpSocket.MaxQueuedPackets">
            <summary>
            Gets or sets the maximum number of packets
            that can be queued at any given point in time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.UdpSocket.LocalPort">
            <summary>
            Gets or sets the local port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.UdpSocket.LocalIPAddress">
            <summary>
            Gets or sets the local IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Virtual.UdpSocket.SendDelay">
            <summary>
            Gets or sets the delay, in milliseconds, to
            apply to outbound packets.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.#ctor(FM.LiveSwitch.VirtualAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Virtual.UdpSocket" /> class.
            </summary>
            <param name="adapter">The virtual adapter.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.#ctor(FM.LiveSwitch.VirtualAdapter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Virtual.UdpSocket" /> class.
            </summary>
            <param name="adapter">The virtual adapter.</param>
            <param name="ipv6">Whether an IPv6 socket should be created.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.Bind">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.Bind(System.Boolean@)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="addressInUse">Whether or not the address is in use (no available ports).</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.Bind(System.String)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="ipAddress">The local IP address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.Bind(System.String,System.Boolean@)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="ipAddress">The local IP address.</param>
            <param name="addressInUse">Whether or not the address is in use (no available ports).</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.Bind(System.Int32)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="port">The local port.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.Bind(System.Int32,System.Boolean@)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="port">The local port.</param>
            <param name="addressInUse">Whether or not the address is in use (no available ports).</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.Bind(System.String,System.Int32)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="ipAddress">The local IP address.</param>
            <param name="port">The local port.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.Bind(System.String,System.Int32,System.Boolean@)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="ipAddress">The local IP address.</param>
            <param name="port">The local port.</param>
            <param name="addressInUse">Whether or not the address is in use.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.Send(FM.LiveSwitch.DataBuffer,System.String,System.Int32)">
            <summary>
            Sends data synchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="ipAddress">The remote IP address.</param>
            <param name="port">The remote port.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.Receive">
            <summary>
            Receives data synchronously.
            </summary>
            <returns>
            The received packet.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.Receive(System.Int32)">
            <summary>
            Receives data synchronously.
            </summary>
            <param name="timeout">The receive timeout (in ms).</param>
            <returns>
            The received packet.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.ReceiveAsync(FM.LiveSwitch.Action3{FM.LiveSwitch.DataBuffer,System.String,System.Int32},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Receives data asynchronously.
            </summary>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Virtual.UdpSocket.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Vp8.Depacketizer">
            <summary>
            A VP8 depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Depacketizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Depacketizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp8.Depacketizer"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Depacketizer.#ctor(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp8.Depacketizer"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Depacketizer.DoCreateFragment(FM.LiveSwitch.RtpPacketHeader,FM.LiveSwitch.DataBuffer)">
            <summary>
            Creates a fragment from a data buffer.
            </summary>
            <param name="header">The RTP header for this packet.</param>
            <param name="dataBuffer">The data buffer.</param>
            <returns>A fragment.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Depacketizer.IsKeyFrame(FM.LiveSwitch.DataBuffer)">
            <summary>
            Determines whether a buffer represents the start of a keyframe.
            </summary>
            <param name="inputBuffer">The buffer.</param>
            <returns><c>true</c> if the buffer represents the start of a keyframe; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Depacketizer.IsGapAllowed(FM.LiveSwitch.Vp8.Fragment,FM.LiveSwitch.Vp8.Fragment)">
            <summary>
            Determines whether a gap between two fragments is allowed.
            </summary>
            <param name="fragment">The fragment.</param>
            <param name="lastFragment">The last fragment.</param>
            <returns><c>true</c> if the gap is allowed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Depacketizer.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Vp8.Format">
            <summary>
            A VP8 format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Format.MinBitrate">
            <summary>
            Gets the minimum bitrate supported by this format, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Format.MaxBitrate">
            <summary>
            Gets the maximum bitrate supported by this format, in kbps.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Format.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp8.Format"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Format.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp8.Format"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Format.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Vp8.Fragment">
            <summary>
            A VP8 packet fragment.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Fragment.RtpTimestamp">
            <summary>
            Gets the RTP timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Fragment.RtpSequenceNumber">
            <summary>
            Gets the RTP sequence number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Fragment.NonReferenceFrame">
            <summary>
            Gets whether this fragment belongs to a non-reference frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Fragment.StartOfPartition">
            <summary>
            Gets whether this fragment is the start of a partition.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Fragment.PartitionIndex">
            <summary>
            Gets the partition index.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Fragment.PictureId">
            <summary>
            Gets the picture ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Fragment.TemporalLevelZeroIndex">
            <summary>
            Gets the temporal level zero index.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Fragment.TemporalLayerIndex">
            <summary>
            Gets the temporal layer index.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Fragment.LayerSync">
            <summary>
            Gets whether layer sync is set.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Fragment.KeyIndex">
            <summary>
            Gets the key index.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Fragment.#ctor(FM.LiveSwitch.RtpPacketHeader,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp8.Fragment" /> class.
            </summary>
            <param name="header">The rtp packet header.</param>
            <param name="dataBuffer">The data buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.Vp8.Packet">
            <summary>
            A VP8 packet for RTP.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.ExtendedControlBitsPresent">
            <summary>
            Gets or sets whether extended control bits are present.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.NonReferenceFrame">
            <summary>
            Gets or sets whether this packet belongs to a non-reference frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.StartOfPartition">
            <summary>
            Gets or sets whether this packet is the start of a partition.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.PartitionIndex">
            <summary>
            Gets or sets the partition index.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.PictureIdPresent">
            <summary>
            Gets or sets whether a picture index is present.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.TemporalLevelZeroIndexPresent">
            <summary>
            Gets or sets whether a temporal level zero index (TL0PICIDX) is present.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.TemporalLayerIndexPresent">
            <summary>
            Gets or sets whether a temporal layer index is present.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.KeyIndexPresent">
            <summary>
            Gets or sets whether a key index is present.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.PictureIdExtensionPresent">
            <summary>
            Gets or sets whether the picture ID is 15-bits (true) or 7-bits (false).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.PictureId">
            <summary>
            Gets or sets the picture ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.TemporalLevelZeroIndex">
            <summary>
            Gets or sets the temporal level zero index.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.TemporalLayerIndex">
            <summary>
            Gets or sets the temporal layer index.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.LayerSync">
            <summary>
            Gets or sets whether layer sync is set.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.KeyIndex">
            <summary>
            Gets or sets the key index.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.Buffer">
            <summary>
            Gets or sets the data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.VariableHeaderLength">
            <summary>
            Gets the length of the variable header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.HeaderLength">
            <summary>
            Gets the length of the fixed and variable headers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.PayloadOffset">
            <summary>
            Gets the offset of the <see cref="P:FM.LiveSwitch.Vp8.Packet.Payload"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.PayloadLength">
            <summary>
            Gets the length of the <see cref="P:FM.LiveSwitch.Vp8.Packet.Payload"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packet.Payload">
            <summary>
            Gets or sets a VP8 packet payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Packet.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp8.Packet"/> class.
            </summary>
            <param name="payload">The payload.</param>
            <param name="startOfPartition">Whether this packet is the start of a partition.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Packet.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp8.Packet"/> class.
            </summary>
            <param name="payload">The payload.</param>
            <param name="startOfPartition">Whether this packet is the start of a partition.</param>
            <param name="nonReferenceFrame">Whether this packet belongs to a non-reference frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Packet.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp8.Packet"/> class.
            </summary>
            <param name="payload">The payload.</param>
            <param name="startOfPartition">Whether this packet is the start of a partition.</param>
            <param name="nonReferenceFrame">Whether this packet belongs to a non-reference frame.</param>
            <param name="partitionIndex">The partition index.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Packet.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp8.Packet"/> class.
            </summary>
            <param name="payload">The payload.</param>
            <param name="startOfPartition">Whether this packet is the start of a partition.</param>
            <param name="nonReferenceFrame">Whether this packet belongs to a non-reference frame.</param>
            <param name="partitionIndex">The partition index.</param>
            <param name="pictureId">The picture ID.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Packet.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp8.Packet"/> class.
            </summary>
            <param name="payload">The payload.</param>
            <param name="startOfPartition">Whether this packet is the start of a partition.</param>
            <param name="nonReferenceFrame">Whether this packet belongs to a non-reference frame.</param>
            <param name="partitionIndex">The partition index.</param>
            <param name="pictureId">The picture ID.</param>
            <param name="temporalLevelZeroIndex">The temporal level zero index.</param>
            <param name="temporalLayerIndex">The temporal layer index.</param>
            <param name="layerSync">Whether layer sync is set.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Packet.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp8.Packet"/> class.
            </summary>
            <param name="payload">The payload.</param>
            <param name="startOfPartition">Whether this packet is the start of a partition.</param>
            <param name="nonReferenceFrame">Whether this packet belongs to a non-reference frame.</param>
            <param name="partitionIndex">The partition index.</param>
            <param name="pictureId">The picture ID.</param>
            <param name="temporalLevelZeroIndex">The temporal level zero index.</param>
            <param name="temporalLayerIndex">The temporal layer index.</param>
            <param name="layerSync">Whether layer sync is set.</param>
            <param name="keyIndex">The key index.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Packet.Wrap(FM.LiveSwitch.DataBuffer)">
            <summary>
            Parses the specified packet bytes and wrap it into a VP8 Packet.
            </summary>
            <param name="packetBuffer">The packet bytes.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Vp8.Packetizer">
            <summary>
            A VP8 packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packetizer.HeaderPadding">
            <summary>
            Gets the header padding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packetizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Packetizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp8.Packetizer"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Packetizer.#ctor(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp8.Packetizer"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Packetizer.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="P:FM.LiveSwitch.Vp8.Packetizer.MaxPacketSize">
            <summary>
            Gets the maximum packet size (affects packetization).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Packetizer.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Vp8.Utility">
            <summary>
            Utility methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Utility.DeriveWidth(FM.LiveSwitch.DataBuffer)">
            <summary>
            Derives the width.
            </summary>
            <param name="buffer">The buffer.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Utility.DeriveHeight(FM.LiveSwitch.DataBuffer)">
            <summary>
            Derives the height.
            </summary>
            <param name="buffer">The buffer.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Utility.IsKeyFrame(FM.LiveSwitch.DataBuffer)">
            <summary>
            Determines whether the buffer holds a keyframe.
            The data buffer must represent the payload of
            a VP8 packet.
            </summary>
            <param name="buffer">The buffer.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Utility.IsGapAllowed(FM.LiveSwitch.Vp8.Fragment,FM.LiveSwitch.Vp8.Fragment)">
            <summary>
            Determines whether a gap in the sequence of two fragments is allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Vp8.Utility.GetPictureIdDelta(System.Int32,System.Int32)">
            <summary>
            Retrieves the difference between two picture IDs
            while accounting for overflow rollover.
            </summary>
            <param name="pictureId">The current picture ID.</param>
            <param name="lastPictureId">The last picture ID.</param>
            <returns>The difference between the picture IDs.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Vp9.Depacketizer">
            <summary>
            A VP9 depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp9.Depacketizer.SequenceNumberingViolated">
            <summary>
            Gets or sets whether RTP sequence numbering has
            been violated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp9.Depacketizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Depacketizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp9.Depacketizer"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Depacketizer.#ctor(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp9.Depacketizer"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Depacketizer.DoCreateFragment(FM.LiveSwitch.RtpPacketHeader,FM.LiveSwitch.DataBuffer)">
            <summary>
            Creates a fragment from a data buffer.
            </summary>
            <param name="header">The rtp header for this packet.</param>
            <param name="dataBuffer">The data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Depacketizer.IsKeyFrame(FM.LiveSwitch.DataBuffer)">
            <summary>
            Checks if the databuffer contains a keyframe.
            </summary>
            <param name="inputBuffer">VideoBuffer containing video data.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Depacketizer.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Vp9.Format">
            <summary>
            A VP9 format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp9.Format.MinBitrate">
            <summary>
            Gets the minimum bitrate supported by this format, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp9.Format.MaxBitrate">
            <summary>
            Gets the maximum bitrate supported by this format, in kbps.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Format.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp9.Format" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Format.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp9.Format" /> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Format.CreateInstance">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Vp9.Fragment">
            <summary>
            A VP9 packet fragment.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Fragment.#ctor(FM.LiveSwitch.RtpPacketHeader,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp9.Fragment" /> class.
            </summary>
            <param name="header">The rtp packet header.</param>
            <param name="dataBuffer">The data buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.Vp9.Packet">
            <summary>
            A VP9 packet for RTP.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp9.Packet.VariableHeaderLength">
            <summary>
            Gets the length of the variable header.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp9.Packet.HeaderLength">
            <summary>
            Gets the length of the fixed and variable headers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp9.Packet.Buffer">
            <summary>
            Gets or sets the data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp9.Packet.Payload">
            <summary>
            Gets or sets a VP8 packet payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Packet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp9.Packet"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Packet.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp9.Packet"/> class.
            </summary>
            <param name="payload">The payload.</param>
            <param name="startOfLayerFrame">if set to <c>true</c> [start of layer frame].</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Packet.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp9.Packet"/> class.
            </summary>
            <param name="payload">The payload.</param>
            <param name="startOfPartition">if set to <c>true</c> [start of partition].</param>
            <param name="partitionIndex">Index of the partition.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Packet.Wrap(FM.LiveSwitch.DataBuffer)">
            <summary>
            Parses the specified packet bytes and wrap it into a VP9 Packet.
            </summary>
            <param name="packetBuffer">The packet bytes.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Vp9.Packetizer">
            <summary>
            A VP8 packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp9.Packetizer.HeaderPadding">
            <summary>
            Gets the header padding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Vp9.Packetizer.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Packetizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp9.Packetizer"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Packetizer.#ctor(FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Vp9.Packetizer"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Packetizer.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="P:FM.LiveSwitch.Vp9.Packetizer.MaxPacketSize">
            <summary>
            Gets the maximum packet size (affects packetization).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Packetizer.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Vp9.Utility">
            <summary>
            Utility methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Utility.DeriveWidth(FM.LiveSwitch.DataBuffer)">
            <summary>
            Derives the width.
            </summary>
            <param name="buffer">The buffer.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Utility.DeriveHeight(FM.LiveSwitch.DataBuffer)">
            <summary>
            Derives the height.
            </summary>
            <param name="buffer">The buffer.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Vp9.Utility.IsKeyFrame(FM.LiveSwitch.DataBuffer)">
            <summary>
            Determines whether the buffer holds a keyframe.
            </summary>
            <param name="buffer">The buffer.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Wave.AudioRecorder">
            <summary>
            A WAVE audio recorder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Wave.AudioRecorder.#ctor(System.String,FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Wave.AudioRecorder" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="inputFormat">The input format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Wave.AudioRecorder.DoWrite(FM.LiveSwitch.AudioBuffer,System.Int64)">
            <summary>
            Write an encoded video frame.
            </summary>
            <param name="buffer">The encoded buffer.</param>
            <param name="presentationTimestamp">The presentation timestamp.</param>
            <returns>
              <c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Wave.AudioRecorder.DoWriteHeader">
            <summary>
            Writes the file header.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Wave.AudioRecorder.DoUpdateHeader">
            <summary>
            Updates the file header.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Wave.AudioSink">
            <summary>
            A WAVE-file-based audio sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Wave.AudioSink.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Wave.AudioSink.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Wave.AudioSink.OnFileOpen">
            <summary>
            Raised when a new file is opened in response to
            this sink being activated and processing a frame.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Wave.AudioSink.OnFileClose">
            <summary>
            Raised when an existing file is close in response to
            this sink being deactivated or destroyed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Wave.AudioSink.OpenFilePath">
            <summary>
            Gets the currently open file path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Wave.AudioSink.LastFilePath">
            <summary>
            Gets the last known file path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Wave.AudioSink.BaseTimestamp">
            <summary>
            Gets the base timestamp - the timestamp of the first frame
            processed by the recorder after being activated. This timestamp
            will change each time a new file is created in response to the
            sink being activated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Wave.AudioSink.LastTimestamp">
            <summary>
            Gets the last timestamp processed by the recorder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Wave.AudioSink.#ctor(System.String,FM.LiveSwitch.AudioFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Wave.AudioSink" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Wave.AudioSink.#ctor(System.String,FM.LiveSwitch.IAudioOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Wave.AudioSink" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.Wave.AudioSink.DoProcessFrame(FM.LiveSwitch.AudioFrame,FM.LiveSwitch.AudioBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Wave.AudioSink.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaPipe`9">
            <summary>
            A media pipe.
            </summary>
            <typeparam name="TIOutput">The type of the output interface.</typeparam>
            <typeparam name="TIOutputCollection">The type of the output interface collection.</typeparam>
            <typeparam name="TIInput">The type of the input interface.</typeparam>
            <typeparam name="TIInputCollection">The type of the input interface collection.</typeparam>
            <typeparam name="TPipe">The type of the pipe.</typeparam>
            <typeparam name="TFrame">The type of the frame.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.AllowDiagnosticTimer">
            <summary>
            Gets whether this media pipe is allowed to be timed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.AllowInputRateTimer">
            <summary>
            Gets whether this media pipe input rate is allowed to be timed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.AllowDurationTimer">
            <summary>
            Gets whether this media pipe duration is allowed to be timed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.AllowOutputRateTimer">
            <summary>
            Gets whether this media pipe output rate is allowed to be timed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.ProcessFramePolicy">
            <summary>
            Gets or sets the ProcessFramePolicy for this media input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.ExternalId">
            <summary>
            Gets or sets the external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.DeactivatedByApplication">
            <summary>
            Gets or sets whether this pipe is deactivated
            because the application has requested it.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.DeactivatedByServer">
            <summary>
            Gets or sets whether this pipe is deactivated
            because the server has requested it.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.Deactivated">
            <summary>
            Gets or sets a value indicating whether this pipe is deactivated.
            A pipe is deactivated if it's input and output are deactivated.
            Alias for <see cref="P:FM.LiveSwitch.MediaPipe`9.InputDeactivated"/> and <see cref="P:FM.LiveSwitch.MediaPipe`9.OutputDeactivated"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.CanPauseBitrate">
            <summary>
            Gets whether this pipe can pause the output bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.CanChangeBitrate">
            <summary>
            Gets whether this pipe can change the output bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.Disabled">
            <summary>
            Gets a value indicating whether this pipe is disabled.
            A pipe is automatically disabled if it is deactivated or if all of its outputs are disabled.
            A disabled pipe will not accept frames raised by its inputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.OutputCanProcessFrame(`2)">
            <summary>
            Determines whether an output can process a frame from this pipe.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.RaiseDisabledChange">
            <summary>
            Raises the OnDisabledChange event.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.Paused">
            <summary>
            Gets a value indicating whether this pipe is paused.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.Persistent">
            <summary>
            Gets or sets a value indicating whether this instance is persistent.
            If <c>true</c>, this instance will not be destroyed unless
            <see cref="M:FM.LiveSwitch.MediaPipe`9.Destroy"/> is called explicitly on this instance.
            It will survive destruction of any parent elements that are
            being destroyed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.SynchronizationSource">
            <summary>
            Gets or sets the output synchronization source.
            Alias for <see cref="P:FM.LiveSwitch.MediaPipe`9.OutputSynchronizationSource"/>.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnProcessFrame">
            <summary>
            Raised when a frame is being processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnProcessedFrame">
            <summary>
            Raised when a frame has been processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnRaiseFrame">
            <summary>
            Raised when a frame is being raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnRaisedFrame">
            <summary>
            Raised when a frame has been raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnProcessControlFrames">
            <summary>
            Raised when control frames are processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnProcessedControlFrames">
            <summary>
            Raised when control frames have been processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnRaiseControlFrames">
            <summary>
            Raised when control frames are raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnRaisedControlFrames">
            <summary>
            Raised when control frames have been raused.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnProcessControlFrameResponses">
            <summary>
            Raised when control frame responses are processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnProcessedControlFrameResponses">
            <summary>
            Raised when control frame responses have been processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnRaiseControlFrameResponses">
            <summary>
            Raised when control frame responses are raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnRaisedControlFrameResponses">
            <summary>
            Raised when control frame responses have been raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnDisabledChange">
            <summary>
            Raised when the Disabled property changes state.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnPausedChange">
            <summary>
            Raised when the Paused property changes state.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnProcessFrameException">
            <summary>
            Raised when an exception is thrown while processing a frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.InputFormat">
            <summary>
            Gets the input format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.OutputFormat">
            <summary>
            Gets the output format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.Muted">
            <summary>
            Gets or sets whether output is muted.
            Alias for <see cref="P:FM.LiveSwitch.MediaPipe`9.OutputMuted"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.Tag">
            <summary>
            Gets or sets optional data to associate with this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.#ctor(`8)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaPipe`9" /> class.
            </summary>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.#ctor(`8,`8)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaPipe`9" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.CreateInputCollection(`0)">
            <summary>
            Creates an input collection.
            </summary>
            <param name="output">The output.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.CreateOutputCollection(`2)">
            <summary>
            Creates an output collection.
            </summary>
            <param name="input">The input.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaPipe`9.OnStateChange">
            <summary>
            Raised when the state changes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.ProcessBuffer(`6)">
            <summary>
            Processes a buffer, returning a future that is resolved when processing is complete.
            The resolved future will contain a buffer that MUST be freed, as it is not known
            whether the underlying implementation is using data buffer pooling.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.CreateFrame(`6)">
            <summary>
            Creates a frame.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.IsMixer">
            <summary>
            Gets whether this pipe processes media from different sources.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.ProcessFrame(`5)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.DoPreProcessFrame(`5,`6)">
            <summary>
            Pre-processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.DoProcessFrame(`5,`6)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.DoPostProcessFrame(`5,`6)">
            <summary>
            Post-processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.RaiseFrame(`5)">
            <summary>
            Raises a frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.RaiseControlFrame(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Raises a control frame.
            </summary>
            <param name="controlFrame">The control frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.RaiseControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Raises control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.ProcessControlFrame(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Processes a control frame.
            </summary>
            <param name="controlFrame">The control frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.ProcessControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.DoProcessControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.RaiseControlFrameResponse(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Raises a control frame response.
            </summary>
            <param name="controlFrameResponse">The control frame response.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.RaiseControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Raises control frame responses.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.ProcessControlFrameResponse(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Processes a control frame response.
            </summary>
            <param name="controlFrameResponse">The control frame response.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.ProcessControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frame responses.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.DoProcessControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frame responses.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.Output">
            <summary>
            Gets or sets the output.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.Outputs">
            <summary>
            Gets or sets the outputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.HasOutput(`2)">
            <summary>
            Determines whether this pipe has the specified output.
            </summary>
            <param name="output">The output.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.AddOutput(`2)">
            <summary>
            Adds an output.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.AddOutputs(`2[])">
            <summary>
            Adds some outputs.
            </summary>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.RemoveOutput(`2)">
            <summary>
            Removes an output.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.RemoveOutputs(`2[])">
            <summary>
            Removes some outputs.
            </summary>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.RemoveOutputs">
            <summary>
            Removes all outputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.OutputAdded(`2)">
            <summary>
            Called when an output is added.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.OutputRemoved(`2)">
            <summary>
            Called when an output is removed.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.Input">
            <summary>
            Gets or sets the input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.Inputs">
            <summary>
            Gets or sets the inputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.HasInput(`0)">
            <summary>
            Determines whether this pipe has the specified input.
            </summary>
            <param name="input">The input.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.AddInput(`0)">
            <summary>
            Adds an input.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.AddInputs(`0[])">
            <summary>
            Adds some inputs.
            </summary>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.RemoveInput(`0)">
            <summary>
            Removes an input.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.RemoveInputs(`0[])">
            <summary>
            Removes some inputs.
            </summary>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.RemoveInputs">
            <summary>
            Removes all inputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.InputAdded(`0)">
            <summary>
            Called when an input is added.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.InputRemoved(`0)">
            <summary>
            Called when an input is removed.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.ProcessSdpMediaDescriptionFromInput(FM.LiveSwitch.Sdp.MediaDescription,System.Boolean,System.Boolean)">
            <summary>
            Processes an SDP media description from an input.
            </summary>
            <param name="mediaDescription">The media description.</param>
            <param name="isOffer">if set to <c>true</c> [is offer].</param>
            <param name="isLocalDescription">if set to <c>true</c> [is local description].</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.ProcessSdpMediaDescriptionFromOutput(FM.LiveSwitch.Sdp.MediaDescription,System.Boolean,System.Boolean)">
            <summary>
            Processes an SDP media description from an output.
            </summary>
            <param name="mediaDescription">The media description.</param>
            <param name="isOffer">if set to <c>true</c> [is offer].</param>
            <param name="isLocalDescription">if set to <c>true</c> [is local description].</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.DoProcessSdpMediaDescription(FM.LiveSwitch.Sdp.MediaDescription,System.Boolean,System.Boolean)">
            <summary>
            Processes an SDP media description.
            </summary>
            <param name="mediaDescription">The media description.</param>
            <param name="isOffer">if set to <c>true</c> [is offer].</param>
            <param name="isLocalDescription">if set to <c>true</c> [is local description].</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.PipelineJsonFromInput">
            <summary>
            Gets the pipeline JSON from an input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.PipelineJsonFromOutput">
            <summary>
            Gets the pipeline JSON from an output.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.PipelineJson">
            <summary>
            Gets the pipeline JSON with this as the central point.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.PipelineJsonBase">
            <summary>
            Gets the pipeline JSON base.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.PipelineJsonInputs">
            <summary>
            Gets the pipeline JSON inputs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.PipelineJsonOutputs">
            <summary>
            Gets the pipeline JSON outputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.IncrementCcmSequenceNumber">
            <summary>
            Increments the CCM sequence number.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.GetCcmSequenceNumber">
            <summary>
            Gets the CCM sequence number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.ProcessTrackStatsFromInput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes track stats from an input.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.ProcessTrackStatsFromOutput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes track stats from an output.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.DoProcessTrackStatsFromInput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes track stats from an input.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.DoProcessTrackStatsFromOutput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes track stats from an output.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.ProcessSinkStatsFromInput(FM.LiveSwitch.MediaSinkStats)">
            <summary>
            Processes sink stats from an input.
            </summary>
            <param name="sinkStats">The sink stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.ProcessSourceStatsFromOutput(FM.LiveSwitch.MediaSourceStats)">
            <summary>
            Processes source stats from an output.
            </summary>
            <param name="sourceStats">The source stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.DoProcessSinkStatsFromInput(FM.LiveSwitch.MediaSinkStats)">
            <summary>
            Processes sink stats from an input.
            </summary>
            <param name="sinkStats">The sink stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.DoProcessSourceStatsFromOutput(FM.LiveSwitch.MediaSourceStats)">
            <summary>
            Processes source stats from an output.
            </summary>
            <param name="sourceStats">The source stats.</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.OutputSynchronizationSource">
            <summary>
            Gets or sets the output synchronization source.
            If the output synchronization source is -1 (unset),
            then getting this property returns the
            <see cref="P:FM.LiveSwitch.MediaPipe`9.InputSynchronizationSource"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.InputSynchronizationSource">
            <summary>
            Gets or sets the input synchronization source.
            If the input synchronization source is -1 (unset),
            then getting this property returns the first valid
            output synchronization source from the array of
            <see cref="P:FM.LiveSwitch.MediaPipe`9.Inputs"/>, or -1 if they are all unset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.OutputRtpStreamId">
            <summary>
            Gets or sets the output RTP stream identifier.
            If the output RTP stream identifier is null (unset),
            then getting this property returns the
            <see cref="P:FM.LiveSwitch.MediaPipe`9.InputRtpStreamId"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.InputRtpStreamId">
            <summary>
            Gets or sets the input RTP stream identifier.
            If the input RTP stream identifier is null (unset),
            then getting this property returns the first valid
            output RTP stream identifier from the array of
            <see cref="P:FM.LiveSwitch.MediaPipe`9.Inputs"/>, or null if they are all unset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.OutputDeactivated">
            <summary>
            Gets or sets whether output is deactivated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.InputDeactivated">
            <summary>
            Gets or sets whether input is deactivated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.OverConstrained">
            <summary>
            Gets whether this pipe is over-constrained.
            A pipe is over-constrained if either it's
            input or output is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.OverConstrainedInput">
            <summary>
            Gets whether the input is over-contrained.
            An input is over-constrained if it's
            input bitrate is over-contrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.OverConstrainedOutput">
            <summary>
            Gets whether the output is over-constrained.
            An output is over-constrained if it's
            output bitrate is over-contrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.OverConstrainedBitrate">
            <summary>
            Gets whether the pipe bitrate is over-constrained.
            A pipe bitrate is over-constrained if the input
            bitrate or output bitrate is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.OverConstrainedInputBitrate">
            <summary>
            Gets whether the minimum allowed input bitrate exceeds the maximum allowed input bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.OverConstrainedOutputBitrate">
            <summary>
            Gets whether the minimum allowed output bitrate exceeds the maximum allowed output bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.MinInputBitrate">
            <summary>
            Gets or sets the minimum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.MaxInputBitrate">
            <summary>
            Gets or sets the maximum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.MinOutputBitrate">
            <summary>
            Gets or sets the minimum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.MaxOutputBitrate">
            <summary>
            Gets or sets the maximum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.TargetOutputBitrate">
            <summary>
            Gets or sets the target output bitrate, in kbps.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.MinInputEncoding">
            <summary>
            Gets or sets the min input encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.MaxInputEncoding">
            <summary>
            Gets or sets the max input encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.MinOutputEncoding">
            <summary>
            Gets or sets the min output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.MaxOutputEncoding">
            <summary>
            Gets or sets the max output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.TargetOutputEncoding">
            <summary>
            Gets or sets the target output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.SystemDelay">
            <summary>
            Gets or sets the system delay in ticks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.GetPipelineSystemDelay(`8)">
            <summary>
            Gets the total pipeline system delay in ticks for a given output format.
            </summary>
            <param name="outputFormat">The output format.</param>
            <returns>The total pipeline system delay in ticks.</returns>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.OutputMuted">
            <summary>
            Gets or sets whether output is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.InputMuted">
            <summary>
            Gets or sets whether input is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaPipe`9.OutputSynchronizable">
            <summary>
            Gets or sets whether output is synchronizable.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaPipe`9.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaSink`8">
            <summary>
            A media sink.
            </summary>
            <typeparam name="TIOutput">The type of the output interface.</typeparam>
            <typeparam name="TIOutputCollection">The type of the output interface collection.</typeparam>
            <typeparam name="TIInput">The type of the input interface.</typeparam>
            <typeparam name="TSink">The type of the sink.</typeparam>
            <typeparam name="TFrame">The type of the frame.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.AllowDiagnosticTimer">
            <summary>
            Gets whether this media sink is allowed to be timed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.AllowInputRateTimer">
            <summary>
            Gets whether this media pipe input rate is allowed to be timed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.ProcessFramePolicy">
            <summary>
            Gets or sets the ProcessFramePolicy for this media input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.Deactivated">
            <summary>
            Gets or sets a value indicating whether this sink is deactivated.
            Deactivating a sink disables it until it is activated again.
            A deactivated sink will not process any frames.
            Alias for <see cref="P:FM.LiveSwitch.MediaSink`8.InputDeactivated"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.Disabled">
            <summary>
            Gets or sets a value indicating whether this sink is disabled.
            A sink is automatically disabled if it is deactivated.
            A disabled sink will not accept frames raised by its inputs.
            Setting the value of MediaSink.Disabled is deprecated. Set MediaSink.Deactivated instead.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.UpdateDisabled">
            <summary>
            Updates the disabled property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.RaiseDisabledChange">
            <summary>
            Raises the OnDisabledChange event.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.Paused">
            <summary>
            Gets a value indicating whether this sink is paused.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.Persistent">
            <summary>
            Gets or sets a value indicating whether this instance is persistent.
            If <c>true</c>, this instance will not be destroyed unless
            <see cref="M:FM.LiveSwitch.MediaSink`8.Destroy"/> is called explicitly on this instance.
            It will survive destruction of any parent elements that are
            being destroyed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSink`8.OnProcessFrame">
            <summary>
            Raised when a frame is being processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSink`8.OnProcessedFrame">
            <summary>
            Raised when a frame has been processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSink`8.OnDisabledChange">
            <summary>
            Raised when the Disabled property changes state.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSink`8.OnPausedChange">
            <summary>
            Raised when the Paused property changes state.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSink`8.OnRaiseControlFrames">
            <summary>
            Raised when control frames are raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSink`8.OnRaisedControlFrames">
            <summary>
            Raised when control frames have been raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSink`8.OnProcessControlFrameResponses">
            <summary>
            Raised when control frame responses are processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSink`8.OnProcessedControlFrameResponses">
            <summary>
            Raised when control frame responses have been processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSink`8.OnProcessFrameException">
            <summary>
            Raised when an exception is thrown while processing a frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.InputFormat">
            <summary>
            Gets the input format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.Muted">
            <summary>
            Gets or sets whether input is muted.
            Alias for <see cref="P:FM.LiveSwitch.MediaSink`8.InputMuted"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.Output">
            <summary>
            Gets or sets the current output.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.GetOutputs">
            <summary>
            Gets the available outputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.ChangeOutput(FM.LiveSwitch.SinkOutput)">
            <summary>
            Changes the current output.
            </summary>
            <param name="output">The output.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaSink`8" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.#ctor(`7)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaSink`8" /> class.
            </summary>
            <param name="inputFormat">The input format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.CreateOutputCollection(`2)">
            <summary>
            Creates an output collection.
            </summary>
            <param name="input">The input.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSink`8.OnStateChange">
            <summary>
            Raised when the state changes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.IsMixer">
            <summary>
            Gets whether this sink processes media from different sources.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.ProcessFrame(`4)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.DoPreProcessFrame(`4,`5)">
            <summary>
            Pre-processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.DoProcessFrame(`4,`5)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.DoPostProcessFrame(`4,`5)">
            <summary>
            Post-processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.RaiseControlFrame(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Raises a control frame.
            </summary>
            <param name="controlFrame">The control frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.RaiseControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Raises control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.ProcessControlFrameResponse(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Processes a control frame response.
            </summary>
            <param name="controlFrameResponse">The control frame response.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.ProcessControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frame responses.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.DoProcessControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frame responses.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.Input">
            <summary>
            Gets or sets the input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.Inputs">
            <summary>
            Gets or sets the inputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.HasInput(`0)">
            <summary>
            Determines whether this pipe has the specified input.
            </summary>
            <param name="input">The input.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.AddInput(`0)">
            <summary>
            Adds an input.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.AddInputs(`0[])">
            <summary>
            Adds some inputs.
            </summary>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.RemoveInput(`0)">
            <summary>
            Removes an input.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.RemoveInputs(`0[])">
            <summary>
            Removes some inputs.
            </summary>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.RemoveInputs">
            <summary>
            Removes all inputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.InputAdded(`0)">
            <summary>
            Called when an input is added.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.InputRemoved(`0)">
            <summary>
            Called when an input is removed.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.ProcessSdpMediaDescriptionFromInput(FM.LiveSwitch.Sdp.MediaDescription,System.Boolean,System.Boolean)">
            <summary>
            Processes a remote SDP media description from an output.
            </summary>
            <param name="mediaDescription">The media description.</param>
            <param name="isOffer">if set to <c>true</c> [is offer].</param>
            <param name="isLocalDescription">if set to <c>true</c> [is local description].</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.DoProcessSdpMediaDescription(FM.LiveSwitch.Sdp.MediaDescription,System.Boolean,System.Boolean)">
            <summary>
            Processes a remote SDP media description.
            </summary>
            <param name="mediaDescription">The media description.</param>
            <param name="isOffer">if set to <c>true</c> [is offer].</param>
            <param name="isLocalDescription">if set to <c>true</c> [is local description].</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.PipelineJsonFromInput">
            <summary>
            Gets the pipeline JSON from an input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.PipelineJson">
            <summary>
            Gets the pipeline JSON with this as the central point.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.IncrementCcmSequenceNumber">
            <summary>
            Increments the CCM sequence number.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.GetCcmSequenceNumber">
            <summary>
            Gets the CCM sequence number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.ProcessTrackStatsFromInput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes track stats from an input.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.DoProcessTrackStatsFromInput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes track stats from an input.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.ProcessSinkStatsFromInput(FM.LiveSwitch.MediaSinkStats)">
            <summary>
            Processes sink stats from an input.
            </summary>
            <param name="sinkStats">The sink stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.DoProcessSinkStatsFromInput(FM.LiveSwitch.MediaSinkStats)">
            <summary>
            Processes sink stats from an input.
            </summary>
            <param name="sinkStats">The stats.</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.InputSynchronizationSource">
            <summary>
            Gets or sets the input synchronization source.
            If the input synchronization source is -1 (unset),
            then getting this property returns the first valid
            output synchronization source from the array of
            <see cref="P:FM.LiveSwitch.MediaSink`8.Inputs"/>, or -1 if they are all unset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.InputRtpStreamId">
            <summary>
            Gets or sets the input RTP stream identifier.
            If the input RTP stream identifier is null (unset),
            then getting this property returns the first valid
            output RTP stream identifier from the array of
            <see cref="P:FM.LiveSwitch.MediaSink`8.Inputs"/>, or null if they are all unset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.InputDeactivated">
            <summary>
            Gets or sets whether input is deactivated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.OverConstrained">
            <summary>
            Gets whether this sink is over-constrained.
            A sink is over-constrained if it's
            input is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.OverConstrainedInput">
            <summary>
            Gets whether the input is over-contrained.
            An input is over-constrained if it's
            input bitrate is over-contrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.OverConstrainedBitrate">
            <summary>
            Gets whether the sink bitrate is over-constrained.
            A sink bitrate is over-constrained if the input
            bitrate is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.OverConstrainedInputBitrate">
            <summary>
            Gets whether the minimum allowed input bitrate exceeds the maximum allowed input bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.MinInputBitrate">
            <summary>
            Gets or sets the minimum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            Returns -1 by default.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.MaxInputBitrate">
            <summary>
            Gets or sets the maximum allowed input bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            Returns -1 by default.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.MinInputEncoding">
            <summary>
            Gets or sets the minimum allowed input encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.MaxInputEncoding">
            <summary>
            Gets or sets the maximum allowed input encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.SystemDelay">
            <summary>
            Gets or sets the system delay in ticks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.GetPipelineSystemDelay(`7)">
            <summary>
            Gets the total pipeline system delay in ticks for a given output format.
            </summary>
            <param name="outputFormat">The output format.</param>
            <returns>The total pipeline system delay in ticks.</returns>
        </member>
        <member name="P:FM.LiveSwitch.MediaSink`8.InputMuted">
            <summary>
            Gets or sets whether input is muted.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSink`8.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaSource`8">
            <summary>
            A media source.
            </summary>
            <typeparam name="TIOutput">The type of the output interface.</typeparam>
            <typeparam name="TIInput">The type of the input interface.</typeparam>
            <typeparam name="TIInputCollection">The type of the input interface collection.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TFrame">The type of the frame.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.AllowDiagnosticTimer">
            <summary>
            Gets whether this media pipe is allowed to be timed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.AllowOutputRateTimer">
            <summary>
            Gets whether this media pipe output rate is allowed to be timed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.DeactivatedByApplication">
            <summary>
            Gets or sets whether this source is deactivated
            because the application has requested it.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.DeactivatedByServer">
            <summary>
            Gets or sets whether this source is deactivated
            because the server has requested it.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.Deactivated">
            <summary>
            Gets or sets a value indicating whether this source is deactivated.
            Deactivating a source disables it until it is activated again.
            Upon reactivation, a pipe may remain disabled if its outputs are disabled.
            A deactivated source will not raise any frames.
            Alias for <see cref="P:FM.LiveSwitch.MediaSource`8.OutputDeactivated"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.CanPauseBitrate">
            <summary>
            Gets whether this source can pause the output bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.CanChangeBitrate">
            <summary>
            Gets whether this source can change the output bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.Disabled">
            <summary>
            Gets a value indicating whether this source is disabled.
            A source is automatically disabled if it is deactivated or if all of its outputs are disabled.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.UpdateDisabled">
            <summary>
            Updates the disabled property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.OutputCanProcessFrame(`1)">
            <summary>
            Determines whether an output can process a frame from this pipe.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.RaiseDisabledChange">
            <summary>
            Raises the OnDisabledChange event.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.Paused">
            <summary>
            Gets a value indicating whether this source is paused.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.Persistent">
            <summary>
            Gets or sets a value indicating whether this instance is persistent.
            If <c>true</c>, this instance will not be destroyed unless
            <see cref="M:FM.LiveSwitch.MediaSource`8.Destroy"/> is called explicitly on this instance.
            It will survive destruction of any parent elements that are
            being destroyed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSource`8.OnRaiseFrame">
            <summary>
            Raised when a frame is being raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSource`8.OnRaisedFrame">
            <summary>
            Raised when a frame has been raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSource`8.OnProcessControlFrames">
            <summary>
            Raised when control frames are processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSource`8.OnProcessedControlFrames">
            <summary>
            Raised when control frames have been processed.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSource`8.OnRaiseControlFrameResponses">
            <summary>
            Raised when control frame responses are raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSource`8.OnRaisedControlFrameResponses">
            <summary>
            Raised when control frame responses have been raised.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSource`8.OnDisabledChange">
            <summary>
            Raised when the Disabled property changes state.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSource`8.OnPausedChange">
            <summary>
            Raised when the Paused property changes state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.SynchronizationSource">
            <summary>
            Gets or sets the output synchronization source.
            Alias for <see cref="P:FM.LiveSwitch.MediaSource`8.OutputSynchronizationSource"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.OutputFormat">
            <summary>
            Gets the output format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.Muted">
            <summary>
            Gets or sets whether output is muted.
            Alias for <see cref="P:FM.LiveSwitch.MediaSource`8.OutputMuted"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.Input">
            <summary>
            Gets or sets the current input.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.GetInputs">
            <summary>
            Gets the available inputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.ChangeInput(FM.LiveSwitch.SourceInput)">
            <summary>
            Changes the current input.
            </summary>
            <param name="input">The input.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.#ctor(`7)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaSource`8"/> class.
            </summary>
            <param name="outputFormat">The output format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.CreateInputCollection(`0)">
            <summary>
            Creates an input collection.
            </summary>
            <param name="output">The output.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.IsStarted">
            <summary>
            Gets whether the current state is Started.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.IsStopped">
            <summary>
            Gets whether the current state is Stopped.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.IsDestroyed">
            <summary>
            Gets whether the current state is Destroyed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaSource`8.OnStateChange">
            <summary>
            Raised when the state changes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.Start">
            <summary>
            Starts this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.DoStart">
            <summary>
            Starts this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.Stop">
            <summary>
            Stops this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.DoStop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.RaiseFrame(`4)">
            <summary>
            Raises a frame.
            </summary>
            <param name="frame">The frame.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.ProcessControlFrame(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Processes a control frame.
            </summary>
            <param name="controlFrame">The control frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.ProcessControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.DoProcessControlFrames(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Processes control frames.
            </summary>
            <param name="controlFrames">The control frames.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.RaiseControlFrameResponse(FM.LiveSwitch.MediaControlFrame)">
            <summary>
            Raises a control frame response.
            </summary>
            <param name="controlFrameResponse">The control frame response.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.RaiseControlFrameResponses(FM.LiveSwitch.MediaControlFrame[])">
            <summary>
            Raises control frame responses.
            </summary>
            <param name="controlFrameResponses">The control frame responses.</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.Output">
            <summary>
            Gets or sets the output.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.Outputs">
            <summary>
            Gets or sets the outputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.HasOutput(`1)">
            <summary>
            Determines whether this source has the specified output.
            </summary>
            <param name="output">The output.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.AddOutput(`1)">
            <summary>
            Adds an output.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.AddOutputs(`1[])">
            <summary>
            Adds some outputs.
            </summary>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.RemoveOutput(`1)">
            <summary>
            Removes an output.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.RemoveOutputs(`1[])">
            <summary>
            Removes some outputs.
            </summary>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.RemoveOutputs">
            <summary>
            Removes all outputs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.OutputAdded(`1)">
            <summary>
            Called when an output is added.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.OutputRemoved(`1)">
            <summary>
            Called when an output is removed.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.ProcessSdpMediaDescriptionFromOutput(FM.LiveSwitch.Sdp.MediaDescription,System.Boolean,System.Boolean)">
            <summary>
            Processes a local SDP media description from an output.
            </summary>
            <param name="mediaDescription">The media description.</param>
            <param name="isOffer">if set to <c>true</c> [is offer].</param>
            <param name="isLocalDescription">if set to <c>true</c> [is local description].</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.DoProcessSdpMediaDescription(FM.LiveSwitch.Sdp.MediaDescription,System.Boolean,System.Boolean)">
            <summary>
            Processes a local SDP media description.
            </summary>
            <param name="mediaDescription">The media description.</param>
            <param name="isOffer">if set to <c>true</c> [is offer].</param>
            <param name="isLocalDescription">if set to <c>true</c> [is local description].</param>
            
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.PipelineJsonFromOutput">
            <summary>
            Gets the pipeline JSON from an output.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.PipelineJson">
            <summary>
            Gets the pipeline JSON with this as the central point.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.IncrementCcmSequenceNumber">
            <summary>
            Increments the CCM sequence number.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.GetCcmSequenceNumber">
            <summary>
            Gets the CCM sequence number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.ProcessTrackStatsFromOutput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes track stats from an output.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.DoProcessTrackStatsFromOutput(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Processes track stats from an output.
            </summary>
            <param name="trackStats">The track stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.ProcessSourceStatsFromOutput(FM.LiveSwitch.MediaSourceStats)">
            <summary>
            Processes source stats from an output.
            </summary>
            <param name="sourceStats">The source stats.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.DoProcessSourceStatsFromOutput(FM.LiveSwitch.MediaSourceStats)">
            <summary>
            Processes source stats from an output.
            </summary>
            <param name="sourceStats">The source stats.</param>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.OutputSynchronizationSource">
            <summary>
            Gets or sets the output synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.OutputRtpStreamId">
            <summary>
            Gets or sets the output RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.OutputDeactivated">
            <summary>
            Gets or sets whether output is deactivated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.OverConstrained">
            <summary>
            Gets whether this source is over-constrained.
            A source is over-constrained if it's
            output is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.OverConstrainedOutput">
            <summary>
            Gets whether the output is over-constrained.
            An output is over-constrained if it's
            output bitrate is over-contrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.OverConstrainedBitrate">
            <summary>
            Gets whether the source bitrate is over-constrained.
            A source bitrate is over-constrained if the output
            bitrate is over-constrained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.OverConstrainedOutputBitrate">
            <summary>
            Gets whether the minimum allowed output bitrate exceeds the maximum allowed output bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.MinOutputBitrate">
            <summary>
            Gets or sets the minimum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no minimum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.MaxOutputBitrate">
            <summary>
            Gets or sets the maximum allowed output bitrate, in kbps.
            A value of -1 indicates unset (no maximum).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.TargetOutputBitrate">
            <summary>
            Gets or sets the target output bitrate, in kbps.
            A value of -1 indicates unset (no target).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.MinOutputEncoding">
            <summary>
            Gets or sets the minimum allowed output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.MaxOutputEncoding">
            <summary>
            Gets or sets the maximum allowed output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.TargetOutputEncoding">
            <summary>
            Gets or sets the target output encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.SystemDelay">
            <summary>
            Gets or sets the system delay in ticks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.GetPipelineSystemDelay(`7)">
            <summary>
            Gets the total pipeline system delay in ticks for a given output format.
            </summary>
            <param name="outputFormat">The output format.</param>
            <returns>The total pipeline system delay in ticks.</returns>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.OutputMuted">
            <summary>
            Gets or sets whether output is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSource`8.OutputSynchronizable">
            <summary>
            Gets or sets whether output is synchronizable.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSource`8.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaTrack`14">
            <summary>
            A media track.
            </summary>
            <typeparam name="TIOutput">The type of the output interface.</typeparam>
            <typeparam name="TIOutputCollection">The type of the source collection.</typeparam>
            <typeparam name="TIInput">The type of the input interface.</typeparam>
            <typeparam name="TIInputCollection">The type of the sink collection.</typeparam>
            <typeparam name="TIElement">The type of the element interface</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TSink">The type of the sink.</typeparam>
            <typeparam name="TPipe">The type of the pipe.</typeparam>
            <typeparam name="TTrack">The type of the track.</typeparam>
            <typeparam name="TBranch">The type of the branch.</typeparam>
            <typeparam name="TFrame">The type of the frame.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.ExternalId">
            <summary>
            Gets or sets the external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Persistent">
            <summary>
            Gets or sets a value indicating whether this instance is persistent.
            If <c>true</c>, this instance will not be destroyed unless
            <see cref="M:FM.LiveSwitch.MediaTrack`14.Destroy"/> is called explicitly on this instance.
            It will survive destruction of any parent elements that are
            being destroyed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaTrack`14.OnStarted">
            <summary>
            Raised when the track is started.
            Only applicable for local media tracks.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaTrack`14.OnStopped">
            <summary>
            Raised when the track is stopped.
            Only applicable for local media tracks.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.MediaTrack`14.OnDestroyed">
            <summary>
            Raised when the track is destroyed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.FirstElement">
            <summary>
            Gets the first element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.LastElement">
            <summary>
            Gets the last element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Elements">
            <summary>
            Gets the elements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Deactivated">
            <summary>
            Gets or sets a value indicating whether this track is deactivated.
            A track is deactivated if its first element is deactivated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Disabled">
            <summary>
            Gets a value indicating whether this track is disabled.
            A track is disabled if its first element is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Paused">
            <summary>
            Gets a value indicating whether this track is paused.
            A track is paused if its last elements is paused.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.InputFormat">
            <summary>
            Gets the input format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.OutputFormat">
            <summary>
            Gets the output format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Source">
            <summary>
            Gets the source, if the first element
            is a source. Otherwise, returns <c>null</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Sink">
            <summary>
            Gets the sink, if the last element
            is a sink. Otherwise, returns <c>null</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Sinks">
            <summary>
            Gets the sinks. This will return <see cref="P:FM.LiveSwitch.MediaTrack`14.Sink"/>
            if <see cref="P:FM.LiveSwitch.MediaTrack`14.Sink"/> is not <c>null</c>.
            Otherwise, if this track branches, it will iterate recursively
            over the branched tracks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.ActiveSink">
            <summary>
            Gets the active sink. This will return <see cref="P:FM.LiveSwitch.MediaTrack`14.Sink"/>
            if <see cref="P:FM.LiveSwitch.MediaTrack`14.Sink"/> is not <c>null</c> and not disabled.
            Otherwise, if this track branches, it will iterate recursively
            over the active tracks until it finds an <see cref="P:FM.LiveSwitch.MediaTrack`14.ActiveSink"/>.
            Otherwise, it will return <c>null</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Input">
            <summary>
            Gets the first input, if this track
            has inputs. Otherwise, returns <c>null</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Inputs">
            <summary>
            Gets the track inputs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Output">
            <summary>
            Gets the first output, if this track
            has outputs. Otherwise, returns <c>null</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Outputs">
            <summary>
            Gets the track outputs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.IsBranched">
            <summary>
            Gets a value indicating whether this track's
            last element is a branch.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.IsTerminated">
            <summary>
            Gets a value indicating whether this track's
            last element is a sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.AddElement(`4)">
            <summary>
            Adds an element.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.ArrayFromOutputs(System.Collections.Generic.List{`0})">
            <summary>
            Creates an array of outputs from a list of outputs.
            </summary>
            <param name="outputs">The list of outputs.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.ArrayFromSinks(System.Collections.Generic.List{`6})">
            <summary>
            Creates an array of sinks from a list of sinks.
            </summary>
            <param name="sinks">The list of sinks.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.ArrayFromInputs(System.Collections.Generic.List{`2})">
            <summary>
            Creates an array of inputs from a list of inputs.
            </summary>
            <param name="inputs">The list of inputs.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.BranchFromTracks(`8[])">
            <summary>
            Creates a branch from an array of tracks.
            </summary>
            <param name="tracks">The tracks.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.IsBranch(`4)">
            <summary>
            Determines whether the specified element is a branch.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.IsSource(`4)">
            <summary>
            Determines whether the specified element is a source.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.IsPipe(`4)">
            <summary>
            Determines whether the specified element is a pipe.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.IsSink(`4)">
            <summary>
            Determines whether the specified element is a sink.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.IsStream(`4)">
            <summary>
            Determines whether the specified element is a stream.
            </summary>
            <param name="element">The element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.IsInput(`4)">
            <summary>
            Determines whether the specified element is an input.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.IsOutput(`4)">
            <summary>
            Determines whether the specified element is an output.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.RaiseOnStarted">
            <summary>
            Raises the <see cref="E:FM.LiveSwitch.MediaTrack`14.OnStarted"/> event.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.RaiseOnStopped">
            <summary>
            Raises the <see cref="E:FM.LiveSwitch.MediaTrack`14.OnStopped"/> event.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.Next(`2)">
            <summary>
            Adds an element to this track.
            </summary>
            <param name="next">The next element.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.Next(`9)">
            <summary>
            Branches out to several tracks.
            </summary>
            <param name="branch">The tracks.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.Next(`8[])">
            <summary>
            Branches out to several tracks.
            </summary>
            <param name="tracks">The tracks.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.FindElement(FM.LiveSwitch.Function1{`4,System.Boolean})">
            <summary>
            Finds an element in the track. This method will recursively
            call into any branched tracks.
            </summary>
            <returns>The first element found matching the given 'where' function,
            or <c>null</c> if no elements exist for that type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.FindElement(FM.LiveSwitch.Function1{`4,System.Boolean},System.Boolean)">
            <summary>
            Finds an element in this track. If the recurse flag is set,
            then this method will recursively call into any branched tracks.
            </summary>
            <returns>The first element found matching the given 'where' function,
            or <c>null</c> if no elements exist for that type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.FindElements(FM.LiveSwitch.Function1{`4,System.Boolean})">
            <summary>
            Finds elements in the track. This method will recursively
            call into any branched tracks.
            </summary>
            <returns>A list of elements found matching the given 'where' function,
            or <c>null</c> if no elements exist for that type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.FindElements(FM.LiveSwitch.Function1{`4,System.Boolean},System.Boolean)">
            <summary>
            Finds elements in this track. If the recurse flag is set,
            then this method will recursively call into any branched tracks.
            </summary>
            <returns>A list of elements found matching the given 'where' function,
            or <c>null</c> if no elements exist for that type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.FindElement``1">
            <summary>
            Finds an element in the track. This method will recursively
            call into any branched tracks.
            </summary>
            <returns>The first element found matching the given type,
            or <c>null</c> if no elements exist for that type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.FindElement``1(System.Boolean)">
            <summary>
            Finds an element in this track. If the recurse flag is set,
            then this method will recursively call into any branched tracks.
            </summary>
            <returns>The first element found matching the given type,
            or <c>null</c> if no elements exist for that type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.FindElements``1">
            <summary>
            Finds elements in this track. If the recurse flag is set,
            then this method will recursively call into any branched tracks.
            </summary>
            <returns>A list of elements found matching the given type,
            or <c>null</c> if no elements exist for that type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.FindElements``1(System.Boolean)">
            <summary>
            Finds elements in this track. If the recurse flag is set,
            then this method will recursively call into any branched tracks.
            </summary>
            <returns>A list of elements found matching the given type,
            or <c>null</c> if no elements exist for that type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.Destroy">
            <summary>
            Destroys this media track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.Muted">
            <summary>
            Gets or sets a value indicating whether any
            of the elements in this track are muted.
            Setting a value will apply to all elements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.PipelineJson">
            <summary>
            Gets the pipeline JSON using the first element
            as a starting point.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.GetSourceInputs">
            <summary>
            Gets the available source inputs.
            </summary>
            <returns>
            A future with an array of source inputs.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.GetSinkOutputs">
            <summary>
            Gets the available sink outputs.
            </summary>
            <returns>
            A future with an array of sink outputs.
            </returns>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.SourceInput">
            <summary>
            Gets or sets the current source input.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrack`14.SinkOutput">
            <summary>
            Gets or sets the current sink output.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.ChangeSourceInput(FM.LiveSwitch.SourceInput)">
            <summary>
            Changes the source input while the media track is active.
            </summary>
            <param name="sourceInput">The source input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrack`14.ChangeSinkOutput(FM.LiveSwitch.SinkOutput)">
            <summary>
            Changes the sink output while the media track is active.
            </summary>
            <param name="sinkOutput">The sink output.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaBranch`14">
            <summary>
            A media branch.
            </summary>
            <typeparam name="TIOutput">The type of the output interface.</typeparam>
            <typeparam name="TIOutputCollection">The type of the output interface collection.</typeparam>
            <typeparam name="TIInput">The type of the input interface.</typeparam>
            <typeparam name="TIInputCollection">The type of the input interface collection.</typeparam>
            <typeparam name="TIElement">The type of the element interface</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TSink">The type of the sink.</typeparam>
            <typeparam name="TPipe">The type of the pipe.</typeparam>
            <typeparam name="TTrack">The type of the track.</typeparam>
            <typeparam name="TBranch">The type of the branch.</typeparam>
            <typeparam name="TFrame">The type of the frame.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="TBufferCollection">The type of the buffer collection.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.MediaBranch`14.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBranch`14.ExternalId">
            <summary>
            Gets or sets the external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBranch`14.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBranch`14.Deactivated">
            <summary>
            Gets or sets a value indicating whether this branch is deactivated.
            A branch is deactivated if its active tracks are deactivated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBranch`14.Disabled">
            <summary>
            Gets a value indicating whether this branch is disabled.
            A branch is disabled if its active tracks are disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBranch`14.Paused">
            <summary>
            Gets a value indicating whether this branch is paused.
            A branch is paused if its active tracks are paused.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBranch`14.Persistent">
            <summary>
            Gets or sets a value indicating whether this instance is persistent.
            If <c>true</c>, this instance will not be destroyed unless
            <see cref="M:FM.LiveSwitch.MediaBranch`14.Destroy"/> is called explicitly on this instance.
            It will survive destruction of any parent elements that are
            being destroyed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBranch`14.ActiveTrack">
            <summary>
            Gets the first active track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBranch`14.ActiveTracks">
            <summary>
            Gets the active tracks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBranch`14.Track">
            <summary>
            Gets the first track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBranch`14.Tracks">
            <summary>
            Gets the tracks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaBranch`14.#ctor(`8[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaBranch`14"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaBranch`14.ArrayFromTracks(System.Collections.Generic.List{`8})">
            <summary>
            Creates an array of tracks from a list of tracks.
            </summary>
            <param name="tracks">The list of tracks.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.MediaBranch`14.PipelineJson">
            <summary>
            Gets the pipeline JSON with this as the central point.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaBranch`14.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaBranch`14.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaBranch`14.Muted">
            <summary>
            Gets or sets a value indicating whether any
            of the tracks in this branch are muted.
            Setting a value will apply to all elements.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Yuv4Mpeg.VideoRecorder">
            <summary>
            A YUV4MPEG video recorder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Yuv4Mpeg.VideoRecorder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Yuv4Mpeg.VideoRecorder" /> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FM.LiveSwitch.Yuv4Mpeg.VideoRecorder.DoWrite(FM.LiveSwitch.VideoBuffer,System.Int64)">
            <summary>
            Write an encoded video frame.
            </summary>
            <param name="buffer">The encoded buffer.</param>
            <param name="presentationTimestamp">The presentation timestamp.</param>
            <returns>
              <c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Yuv4Mpeg.VideoRecorder.DoWriteHeader">
            <summary>
            Writes the file header.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Yuv4Mpeg.VideoRecorder.DoUpdateHeader">
            <summary>
            Updates the file header.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Yuv4Mpeg.VideoSink">
            <summary>
            A YUV4MPEG-file-based video sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Yuv4Mpeg.VideoSink.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Yuv4Mpeg.VideoSink.Label">
            <summary>
            Gets a label that identifies this class.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Yuv4Mpeg.VideoSink.OnFileOpen">
            <summary>
            Raised when a new file is opened in response to
            this sink being activated and processing a frame.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Yuv4Mpeg.VideoSink.OnFileClose">
            <summary>
            Raised when an existing file is close in response to
            this sink being deactivated or destroyed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Yuv4Mpeg.VideoSink.OpenFilePath">
            <summary>
            Gets the currently open file path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Yuv4Mpeg.VideoSink.LastFilePath">
            <summary>
            Gets the last known file path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Yuv4Mpeg.VideoSink.BaseTimestamp">
            <summary>
            Gets the base timestamp - the timestamp of the first frame
            processed by the recorder after being activated. This timestamp
            will change each time a new file is created in response to the
            sink being activated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Yuv4Mpeg.VideoSink.LastTimestamp">
            <summary>
            Gets the last timestamp processed by the recorder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Yuv4Mpeg.VideoSink.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Yuv4Mpeg.VideoSink" /> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FM.LiveSwitch.Yuv4Mpeg.VideoSink.#ctor(System.String,FM.LiveSwitch.IVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Yuv4Mpeg.VideoSink" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.Yuv4Mpeg.VideoSink.DoProcessFrame(FM.LiveSwitch.VideoFrame,FM.LiveSwitch.VideoBuffer)">
            <summary>
            Processes a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="inputBuffer">The input buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Yuv4Mpeg.VideoSink.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Yuv4Mpeg.VideoSource">
            <summary>
            A YUV4MPEG-file-based video source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Yuv4Mpeg.VideoSource.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Yuv4Mpeg.VideoSource.Label">
            <summary>
            Gets the label.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Yuv4Mpeg.VideoSource.OnEnded">
            <summary>
            Raised when the file ends.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Yuv4Mpeg.VideoSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Yuv4Mpeg.VideoSource" /> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FM.LiveSwitch.Yuv4Mpeg.VideoSource.DoStart">
            <summary>
            Starts the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Yuv4Mpeg.VideoSource.DoStop">
            <summary>
            Stops the source.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.AddressFamily">
            <summary>
            A STUN address family.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.AddressFamily.IPv4">
            <summary>
            Gets the value indicating the IPv4 address family.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.AddressFamily.IPv6">
            <summary>
            Gets the value indicating the IPv6 address family.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Stun.AlternateServerAttribute">
            <summary>
            The alternate server represents an alternate transport address
            identifying a different STUN server that the STUN client should try.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.AlternateServerAttribute.IPAddress">
            <summary>
            Gets or sets the IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.AlternateServerAttribute.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.AlternateServerAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.AlternateServerAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.AlternateServerAttribute"/> class.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.AlternateServerAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.AlternateServerAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.AlternateServerAttribute.GetValueLength">
            <summary>
            Gets the length of the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.AlternateServerAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the value to.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.AlternateServerAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Attribute">
            <summary>
            A STUN attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.AlternateServerType">
            <summary>
            Gets the ALTERNATE-SERVER type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.TransactionTransmitCounterType">
            <summary>
            Gets the comprehension-optional TRANSACTION_TRANSMIT_COUNTER type defined in RFC 7982.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.ErrorCodeType">
            <summary>
            Gets the ERROR-CODE type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.FingerprintType">
            <summary>
            Gets the FINGERPRINT type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.MappedAddressType">
            <summary>
            Gets the MAPPED-ADDRESS type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.MessageIntegrityType">
            <summary>
            Gets the MESSAGE-INTEGRITY type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.NonceType">
            <summary>
            Gets the NONCE type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.RealmType">
            <summary>
            Gets the REALM type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.SoftwareType">
            <summary>
            Gets the SOFTWARE type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.UnknownAttributesType">
            <summary>
            Gets the UNKNOWN-ATTRIBUTES type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.UsernameType">
            <summary>
            Gets the USERNAME type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.XorMappedAddressType">
            <summary>
            Gets the XOR-MAPPED-ADDRESS type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.ControlledType">
            <summary>
            Gets the CONTROLLED type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.ControllingType">
            <summary>
            Gets the CONTROLLING type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.PriorityType">
            <summary>
            Gets the PRIORITY type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.UseCandidateType">
            <summary>
            Gets the USE-CANDIDATE type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.ChannelNumberType">
            <summary>
            Gets the CHANNEL-NUMBER type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.ConnectionIdType">
            <summary>
            Gets the CONNECTION-ID type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.DataType">
            <summary>
            Gets the DATA type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.DontFragmentType">
            <summary>
            Gets the DONT-FRAGMENT type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.EvenPortType">
            <summary>
            Gets the EVEN-PORT type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.LifetimeType">
            <summary>
            Gets the LIFETIME type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.RequestedTransportType">
            <summary>
            Gets the REQUESTED-TRANSPORT type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.ReservationTokenType">
            <summary>
            Gets the RESERVATION-TOKEN type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.XorPeerAddressType">
            <summary>
            Gets the XOR-PEER-ADDRESS type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.XorRelayedAddressType">
            <summary>
            Gets the XOR-RELAYED-ADDRESS type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.RequestedAddressFamilyType">
            <summary>
            Gets the REQUESTED-ADDRESS-FAMILY type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.ReadAddressType(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Reads an address type.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.ReadPort(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Reads a port.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.ReadXorPort(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Reads an XOR'd port.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="transactionId">The transaction identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.ReadIPAddress(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.AddressType)">
            <summary>
            Reads an IP address.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="addressType">The address type.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.ReadXorIPAddress(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.AddressType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Reads an XOR'd IP address.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="addressType">The address type.</param>
            <param name="transactionId">The transaction identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.WriteAddressType(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.AddressType)">
            <summary>
            Writes an address type.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="addressType">The address type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.WritePort(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32)">
            <summary>
            Writes a port.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.WriteXorPort(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Writes an XOR'd port.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="port">The port.</param>
            <param name="transactionId">The transaction identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.WriteIPAddress(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.AddressType,System.String)">
            <summary>
            Writes an IP address.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="addressType">The address type.</param>
            <param name="ipAddress">The IP address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.WriteXorIPAddress(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.AddressType,System.String,FM.LiveSwitch.DataBuffer)">
            <summary>
            Writes an XOR'd IP address.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="addressType">The address type.</param>
            <param name="ipAddress">The IP address.</param>
            <param name="transactionId">The transaction identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.XorPort(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            XORs a port.
            </summary>
            <param name="portBuffer">The port buffer.</param>
            <param name="transactionId">The transaction identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.XorIPAddress(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            XORs an IP address.
            </summary>
            <param name="ipAddressBuffer">The IP address buffer.</param>
            <param name="transactionId">The transaction identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.CreateAttributeFromValue(System.Int32,FM.LiveSwitch.DataBuffer,System.Int32,System.Int32,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            Creates the attribute from a value.
            </summary>
            <param name="typeValue">The type.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="transactionId">The transaction identifier.</param>
            <param name="messageBuffer">The message buffer.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Attribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.GetPaddingLength(System.Int32)">
            <summary>
            Gets the length of the padding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.GetLength">
            <summary>
            Gets the length of the attribute, including header and padding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.WriteTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.WriteTo(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32@)">
            <summary>
            Writes the attribute to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.ReadFrom(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            Reads an <see cref="T:FM.LiveSwitch.Stun.Attribute" /> from a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="transactionId">The STUN message transaction ID.</param>
            <param name="messageBuffer">The STUN message thus far as a byte array.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.ReadFrom(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32@,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            Reads an <see cref="T:FM.LiveSwitch.Stun.Attribute" /> from a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the attribute length.</param>
            <param name="transactionId">The STUN message transaction ID.</param>
            <param name="messageBuffer">The STUN message thus far as a byte array.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Attribute.NextLength(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Reads the length of the next attribute from a data buffer, including header and padding.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.BadRequestError">
            <summary>
            The request was malformed. The client SHOULD NOT
            retry the request without modification from the previous
            attempt. The server may not be able to generate a valid
            MESSAGE-INTEGRITY for this error, so the client MUST NOT expect
            a valid MESSAGE-INTEGRITY attribute on this response.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.BadRequestError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.BadRequestError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.BadRequestError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.BadRequestError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.BadRequestError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.BindingIndication">
            <summary>
            A STUN binding indication.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.BindingIndication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.BindingIndication"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Stun.BindingMessage">
            <summary>
            A generic STUN binding message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.BindingMessage.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.BindingMessage.#ctor(FM.LiveSwitch.Stun.MessageType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.BindingMessage"/> class.
            </summary>
            <param name="messageType">The type of the message.</param>
            <param name="transactionId">The transaction ID.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.BindingRequest">
            <summary>
            A STUN binding request.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.BindingRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.BindingRequest"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.BindingRequest.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.BindingRequest"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Stun.BindingResponse">
            <summary>
            A STUN binding response.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.BindingResponse.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.BindingResponse"/> class.
            </summary>
            <param name="transactionId">The transaction ID.</param>
            <param name="success">Whether the request was successful.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Error">
            <summary>
            Common functionality of various STUN/TURN server exceptions that occur while processing Allocation and Binding requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Error.StunErrorCode">
            <summary>
            Gets the STUN code.
            Obsolete. Alias for <see cref="P:FM.LiveSwitch.Stun.Error.StunCode"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Error.StunCode">
            <summary>
            Gets the STUN code.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Error.#ctor(FM.LiveSwitch.ErrorCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Error" /> class.
            </summary> 
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Error.CreateStunError(System.Int32,FM.LiveSwitch.Stun.Message)">
            <summary>
            Creates error for the given error code and with a given message.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.ErrorCodeAttribute">
            <summary>
            The ERROR-CODE attribute is used in error response messages.  It
            contains a numeric error code value in the range of 300 to 699 plus a
            textual reason phrase encoded in UTF-8 [RFC3629], and is consistent
            in its code assignments and semantics with SIP [RFC3261] and HTTP
            [RFC2616]. The reason phrase is meant for user consumption, and can
            be anything appropriate for the error code.  Recommended reason
            phrases for the defined error codes are included in the IANA registry
            for error codes.  The reason phrase MUST be a UTF-8 [RFC3629] encoded
            sequence of less than 128 characters (which can be as long as 763
            bytes).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.ErrorCodeAttribute.Code">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>
            The code.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Stun.ErrorCodeAttribute.Reason">
            <summary>
            Gets or sets the error reason.
            </summary>
            <value>
            The reason.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Stun.ErrorCodeAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.ErrorCodeAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.ErrorCodeAttribute"/> class.
            </summary>
            <param name="code">The error code.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.ErrorCodeAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.ErrorCodeAttribute"/> class.
            </summary>
            <param name="code">The error code.</param>
            <param name="reason">The error reason.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.ErrorCodeAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.ErrorCodeAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.ErrorCodeAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.ErrorCodeAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.ErrorCodeAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.FingerprintAttribute">
            <summary>
            The FINGERPRINT attribute MAY be present in all STUN messages.  The
            value of the attribute is computed as the CRC-32 of the STUN message
            up to (but excluding) the FINGERPRINT attribute itself, XOR'ed with
            the 32-bit value 0x5354554e (the XOR helps in cases where an
            application packet is also using CRC-32 in it).  The 32-bit CRC is
            the one defined in ITU V.42 [ITU.V42.2002], which has a generator
            polynomial of x32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1.
            When present, the FINGERPRINT attribute MUST be the last attribute in
            the message, and thus will appear after MESSAGE-INTEGRITY.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.FingerprintAttribute.MessageBuffer">
            <summary>
            Gets or sets the message buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.FingerprintAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.FingerprintAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.FingerprintAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.FingerprintAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.FingerprintAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="messageBuffer">The message buffer thus far.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.FingerprintAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.FingerprintAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.FingerprintAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Ice.ControlledAttribute">
            <summary>
            The ICE-CONTROLLED attribute is present in a Binding request and
            indicates that the client believes it is currently in the controlled
            role.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Ice.ControlledAttribute.Value">
            <summary>
            Gets or sets the tiebreaker value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Ice.ControlledAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.ControlledAttribute.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Ice.ControlledAttribute"/> class.
            </summary>
            <param name="value">The tiebreaker value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.ControlledAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Ice.ControlledAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.ControlledAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.ControlledAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.ControlledAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Ice.ControllingAttribute">
            <summary>
            The ICE-CONTROLLING attribute is present in a Binding request and
            indicates that the client believes it is currently in the controlling
            role.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Ice.ControllingAttribute.Value">
            <summary>
            Gets or sets the tiebreaker value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Ice.ControllingAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.ControllingAttribute.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Ice.ControllingAttribute"/> class.
            </summary>
            <param name="value">The tiebreaker value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.ControllingAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Ice.ControllingAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.ControllingAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.ControllingAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.ControllingAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Ice.PriorityAttribute">
            <summary>
            The PRIORITY attribute indicates the priority that is to be
            associated with a peer reflexive candidate, should one be discovered
            by this check.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Ice.PriorityAttribute.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Ice.PriorityAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.PriorityAttribute.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Ice.PriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.PriorityAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Ice.PriorityAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.PriorityAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.PriorityAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.PriorityAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Ice.RoleConflictError">
            <summary>
            487 Role Conflict. The Binding request contained either the ICE-CONTROLLING or ICE-CONTROLLED attribute, indicating a role that conflicted with the server. 
            The server ran a tie-breaker based on the tie-breaker value in the request and determined that the client needs to switch roles.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.RoleConflictError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Ice.RoleConflictError.IceControlled">
            <summary>
            Gets or sets the ICE-controlled attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Ice.RoleConflictError.IceControlling">
            <summary>
            Gets or sets the ICE-controlling attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.RoleConflictError.#ctor(FM.LiveSwitch.Stun.Ice.ControlledAttribute,FM.LiveSwitch.Stun.Ice.ControllingAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Ice.RoleConflictError"/> class.
            </summary>
            <param name="iceControlled">The ICE-controlled attribute.</param>
            <param name="iceControlling">The ICE-controlling attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.RoleConflictError.#ctor(System.String,FM.LiveSwitch.Stun.Ice.ControlledAttribute,FM.LiveSwitch.Stun.Ice.ControllingAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Ice.RoleConflictError"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="iceControlled">The ICE-controlled attribute.</param>
            <param name="iceControlling">The ICE-controlling attribute.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Ice.UseCandidateAttribute">
            <summary>
            The USE-CANDIDATE attribute indicates that the candidate pair
            resulting from this check should be used for transmission of media.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Ice.UseCandidateAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.UseCandidateAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Ice.UseCandidateAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.UseCandidateAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Ice.UseCandidateAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.UseCandidateAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns>
            The length of the attribute value.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.UseCandidateAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Ice.UseCandidateAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.IntegrityCheckFailureError">
            <summary>
            431 Integrity Check Failure.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.IntegrityCheckFailureError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.IntegrityCheckFailureError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.IntegrityCheckFailureError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.IntegrityCheckFailureError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.IntegrityCheckFailureError" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.MappedAddressAttribute">
            <summary>
            The MAPPED-ADDRESS attribute indicates a reflexive transport address
            of the client.  It consists of an 8-bit address family and a 16-bit
            port, followed by a fixed-length value representing the IP address.
            If the address family is IPv4, the address MUST be 32 bits.  If the
            address family is IPv6, the address MUST be 128 bits.  All fields
            must be in network byte order.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.MappedAddressAttribute.IPAddress">
            <summary>
            Gets or sets the IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.MappedAddressAttribute.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.MappedAddressAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.MappedAddressAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.MappedAddressAttribute"/> class.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.MappedAddressAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.MappedAddressAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.MappedAddressAttribute.GetValueLength">
            <summary>
            Gets the length of the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.MappedAddressAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the value to.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.MappedAddressAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Message">
            <summary>
            A STUN message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.BindingMethod">
            <summary>
            Gets the binding method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.AllocateMethod">
            <summary>
            Gets the allocate method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.RefreshMethod">
            <summary>
            Gets the refresh method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.SendMethod">
            <summary>
            Gets the send method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.DataMethod">
            <summary>
            Gets the data method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.CreatePermissionMethod">
            <summary>
            Gets the create-permission method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.ChannelBindMethod">
            <summary>
            Gets the channel-bind method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.ConnectMethod">
            <summary>
            Gets the connect method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.ConnectionBindMethod">
            <summary>
            Gets the connection-bind method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.ConnectionAttemptMethod">
            <summary>
            Gets the connection-attempt method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.CreateMessage(System.Int32,FM.LiveSwitch.Stun.MessageType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Creates a message.
            </summary>
            <param name="method">The method.</param>
            <param name="messageType">Type of the message.</param>
            <param name="transactionId">The transaction ID.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.MessageType">
            <summary>
            Gets the message type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.MagicCookieBytes">
            <summary>
            Gets the "magic cookie" bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.MagicCookieValue">
            <summary>
            Gets the "magic cookie" value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.TransactionId">
            <summary>
            Gets the transaction ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Message.Attributes">
            <summary>
            Gets the message attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetAlternateServer">
            <summary>
            Gets the alternate-server attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetAlternateServer(FM.LiveSwitch.Stun.AlternateServerAttribute)">
            <summary>
            Set the alternate-server attribute.
            </summary>
            <param name="attribute">The alternate-server attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetTransactionTransmitCounter(FM.LiveSwitch.Stun.TransactionTransmitCounterAttribute)">
            <summary>
            Set the transaction-transmit-counter attribute.
            </summary>
            <param name="attribute">The transaction-transmit-counter attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetTransactionTransmitCounter">
            <summary>
            Gets the transaction-transmit-counter attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetErrorCode">
            <summary>
            Gets the error-code attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetErrorCode(FM.LiveSwitch.Stun.ErrorCodeAttribute)">
            <summary>
            Set the error-code attribute.
            </summary>
            <param name="attribute">The error-code attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetFingerprint">
            <summary>
            Gets the fingerprint attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetFingerprint(FM.LiveSwitch.Stun.FingerprintAttribute)">
            <summary>
            Set the fingerprint attribute.
            </summary>
            <param name="attribute">The fingerprint attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetMappedAddress">
            <summary>
            Gets the mapped-address attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetMappedAddress(FM.LiveSwitch.Stun.MappedAddressAttribute)">
            <summary>
            Set the mapped-address attribute.
            </summary>
            <param name="attribute">The mapped-address attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetMessageIntegrity">
            <summary>
            Gets the message-integrity attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetMessageIntegrity(FM.LiveSwitch.Stun.MessageIntegrityAttribute)">
            <summary>
            Set the message-integrity attribute.
            </summary>
            <param name="attribute">The message-integrity attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetNonce">
            <summary>
            Gets the nonce attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetNonce(FM.LiveSwitch.Stun.NonceAttribute)">
            <summary>
            Set the nonce attribute.
            </summary>
            <param name="attribute">The nonce attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetRealm">
            <summary>
            Gets the realm attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetRealm(FM.LiveSwitch.Stun.RealmAttribute)">
            <summary>
            Set the realm attribute.
            </summary>
            <param name="attribute">The realm attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetSoftware">
            <summary>
            Gets the software attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetSoftware(FM.LiveSwitch.Stun.SoftwareAttribute)">
            <summary>
            Set the software attribute.
            </summary>
            <param name="attribute">The software attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetUnknownAttributes">
            <summary>
            Gets the unknown-attributes attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetUnknownAttributes(FM.LiveSwitch.Stun.UnknownAttributesAttribute)">
            <summary>
            Set the unknown-attributes attribute.
            </summary>
            <param name="attribute">The unknown-attributes attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetUsername">
            <summary>
            Gets the username attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetUsername(FM.LiveSwitch.Stun.UsernameAttribute)">
            <summary>
            Set the username attribute.
            </summary>
            <param name="attribute">The username attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetXorMappedAddress">
            <summary>
            Gets the XOR-mapped-address attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetXorMappedAddress(FM.LiveSwitch.Stun.XorMappedAddressAttribute)">
            <summary>
            Set the XOR-mapped-address attribute.
            </summary>
            <param name="attribute">The XOR-mapped-address attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetIceControlled">
            <summary>
            Gets the ICE-controlled attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetIceControlled(FM.LiveSwitch.Stun.Ice.ControlledAttribute)">
            <summary>
            Sets the ICE-controlled attribute.
            </summary>
            <param name="attribute">The ICE-controlled attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetIceControlling">
            <summary>
            Gets the ICE-controlling attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetIceControlling(FM.LiveSwitch.Stun.Ice.ControllingAttribute)">
            <summary>
            Sets the ICE-controlling attribute.
            </summary>
            <param name="attribute">The ICE-controlling attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetPriority">
            <summary>
            Gets the priority attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetPriority(FM.LiveSwitch.Stun.Ice.PriorityAttribute)">
            <summary>
            Sets the priority attribute.
            </summary>
            <param name="attribute">The priority attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetUseCandidate">
            <summary>
            Gets the use-candidate attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetUseCandidate(FM.LiveSwitch.Stun.Ice.UseCandidateAttribute)">
            <summary>
            Sets the use-candidate attribute.
            </summary>
            <param name="attribute">The use-candidate attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetChannelNumber">
            <summary>
            Gets the channel-number attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetChannelNumber(FM.LiveSwitch.Stun.Turn.ChannelNumberAttribute)">
            <summary>
            Sets the channel-number attribute.
            </summary>
            <param name="attribute">The channel-number attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetConnectionId">
            <summary>
            Gets the connection-id attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetConnectionId(FM.LiveSwitch.Stun.Turn.ConnectionIdAttribute)">
            <summary>
            Sets the connection-id attribute.
            </summary>
            <param name="attribute">The connection-id attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetData">
            <summary>
            Gets the data attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetData(FM.LiveSwitch.Stun.Turn.DataAttribute)">
            <summary>
            Sets the data attribute.
            </summary>
            <param name="attribute">The data attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetDontFragment">
            <summary>
            Gets the don't-fragment attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetDontFragment(FM.LiveSwitch.Stun.Turn.DontFragmentAttribute)">
            <summary>
            Sets the don't-fragment attribute.
            </summary>
            <param name="attribute">The don't-fragment attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetEvenPort">
            <summary>
            Gets the even-port attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetEvenPort(FM.LiveSwitch.Stun.Turn.EvenPortAttribute)">
            <summary>
            Sets the even-port attribute.
            </summary>
            <param name="attribute">The even-port attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetLifetime">
            <summary>
            Gets the lifetime attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetLifetime(FM.LiveSwitch.Stun.Turn.LifetimeAttribute)">
            <summary>
            Sets the lifetime attribute.
            </summary>
            <param name="attribute">The lifetime attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetRequestedTransport">
            <summary>
            Gets the requested-transport attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetRequestedTransport(FM.LiveSwitch.Stun.Turn.RequestedTransportAttribute)">
            <summary>
            Sets the requested-transport attribute.
            </summary>
            <param name="attribute">The requested-transport attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetReservationToken">
            <summary>
            Gets the reservation-token attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetReservationToken(FM.LiveSwitch.Stun.Turn.ReservationTokenAttribute)">
            <summary>
            Sets the reservation-token attribute.
            </summary>
            <param name="attribute">The reservation-token attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetXorPeerAddress">
            <summary>
            Gets the XOR-peer-address attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetXorPeerAddress(FM.LiveSwitch.Stun.Turn.XorPeerAddressAttribute)">
            <summary>
            Sets the XOR-peer-address attribute.
            </summary>
            <param name="attribute">The XOR-peer-address attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetXorRelayedAddress">
            <summary>
            Gets the XOR-relayed-address attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetXorRelayedAddress(FM.LiveSwitch.Stun.Turn.XorRelayedAddressAttribute)">
            <summary>
            Sets the XOR-relayed-address attribute.
            </summary>
            <param name="attribute">The XOR-relayed-address attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetRequestedAddressFamily">
            <summary>
            Gets the requested-address-family attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.SetRequestedAddressFamily(FM.LiveSwitch.Stun.Turn.RequestedAddressFamilyAttribute)">
            <summary>
            Sets the requested-address-family attribute.
            </summary>
            <param name="attribute">The requested-address-family attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.#ctor(FM.LiveSwitch.Stun.MessageType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Message"/> class.
            </summary>
            <param name="messageType">The type of the message.</param>
            <param name="transactionId">The transaction ID.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GenerateTransactionId">
            <summary>
            Generates a random transaction ID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetPayloadLength">
            <summary>
            Gets the length of the payload.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.GetLength">
            <summary>
            Gets the length of the message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.WriteTo(FM.LiveSwitch.DataBuffer)">
            <summary>
            Writes the message to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.WriteTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the message to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.WriteTo(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32@)">
            <summary>
            Writes the message to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.ReadFrom(FM.LiveSwitch.DataBuffer)">
            <summary>
            Reads a <see cref="T:FM.LiveSwitch.Stun.Message" /> instance from a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.ReadFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Reads a <see cref="T:FM.LiveSwitch.Stun.Message" /> instance from a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Message.ReadFrom(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32@)">
            <summary>
            Reads an <see cref="T:FM.LiveSwitch.Stun.Message" /> instance from a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length of the parsed segment.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.MessageIntegrityAttribute">
            <summary>
            The MESSAGE-INTEGRITY attribute contains an HMAC-SHA1 [RFC2104] of
            the STUN message.  The MESSAGE-INTEGRITY attribute can be present in
            any STUN message type.  Since it uses the SHA1 hash, the HMAC will be
            20 bytes.  The text used as input to HMAC is the STUN message,
            including the header, up to and including the attribute preceding the
            MESSAGE-INTEGRITY attribute.  With the exception of the FINGERPRINT
            attribute, which appears after MESSAGE-INTEGRITY, agents MUST ignore
            all other attributes that follow MESSAGE-INTEGRITY.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.MessageIntegrityAttribute.MessageBuffer">
            <summary>
            Gets or sets the message buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.MessageIntegrityAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.MessageIntegrityAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.MessageIntegrityAttribute"/> class.
            </summary>
            <param name="keyBuffer">The key as a buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.MessageIntegrityAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.MessageIntegrityAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="messageBuffer">The message buffer thus far.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.MessageIntegrityAttribute.IsValid(System.Byte[])">
            <summary>
            After creating a message-integrity attribute using the byte array representation,
            this method determines whether the supplied key is valid.
            </summary>
            <param name="keyBuffer">The key as a buffer.</param>
            <returns>
              <c>true</c> if the key is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.MessageIntegrityAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.MessageIntegrityAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.MessageIntegrityAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.MessageType">
            <summary>
            The list of valid message types.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Stun.MessageType.Request">
            <summary>
            Specifies that the message is a request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Stun.MessageType.Indication">
            <summary>
            Specifies that the message is an indication (no response).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Stun.MessageType.SuccessResponse">
            <summary>
            Specifies that the message is a response indicating success.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Stun.MessageType.ErrorResponse">
            <summary>
            Specifies that the message is a response indicating failure.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Stun.MissingUsernameError">
            <summary>
            432 Missing username; the username attribute is not present in the request.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.MissingUsernameError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.MissingUsernameError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.MissingUsernameError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.MissingUsernameError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.MissingUsernameError" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.NonceAttribute">
            <summary>
            The NONCE attribute may be present in requests and responses.  It
            contains a sequence of qdtext or quoted-pair, which are defined in
            RFC 3261 [RFC3261].  Note that this means that the NONCE attribute
            will not contain actual quote characters.  See RFC 2617 [RFC2617],
            Section 4.3, for guidance on selection of nonce values in a server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.NonceAttribute.Value">
            <summary>
            Gets or sets the nonce value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.NonceAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.NonceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.NonceAttribute"/> class.
            </summary>
            <param name="value">The nonce value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.NonceAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.NonceAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.NonceAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.NonceAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.NonceAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.RealmAttribute">
            <summary>
            The REALM attribute may be present in requests and responses.  It
            contains text that meets the grammar for "realm-value" as described
            in RFC 3261 [RFC3261] but without the double quotes and their
            surrounding whitespace.  That is, it is an unquoted realm-value (and
            is therefore a sequence of qdtext or quoted-pair).  It MUST be a
            UTF-8 [RFC3629] encoded sequence of less than 128 characters (which
            can be as long as 763 bytes), and MUST have been processed using
            SASLprep [RFC4013].
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.RealmAttribute.Value">
            <summary>
            Gets or sets the realm value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.RealmAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.RealmAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.RealmAttribute"/> class.
            </summary>
            <param name="value">The realm value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.RealmAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.RealmAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.RealmAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.RealmAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.RealmAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.ServerError">
            <summary>
             500 Server Error. RFC5389. Indicates that the server has suffered a temporary error. The client should try again.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.ServerError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.ServerError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.ServerError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.ServerError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.ServerError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.SoftwareAttribute">
            <summary>
            The SOFTWARE attribute contains a textual description of the software
            being used by the agent sending the message.  It is used by clients
            and servers.  Its value SHOULD include manufacturer and version
            number.  The attribute has no impact on operation of the protocol,
            and serves only as a tool for diagnostic and debugging purposes.  The
            value of SOFTWARE is variable length.  It MUST be a UTF-8 [RFC3629]
            encoded sequence of less than 128 characters (which can be as long as
            763 bytes).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.SoftwareAttribute.Value">
            <summary>
            Gets or sets the textual description of the software being used by
            the agent sending the message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.SoftwareAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.SoftwareAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.SoftwareAttribute"/> class.
            </summary>
            <param name="value">The textual description of the software being used by
            the agent sending the message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.SoftwareAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.SoftwareAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.SoftwareAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.SoftwareAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.SoftwareAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.StaleCredentialsError">
            <summary>
            430 Stale Credentials. The shared secret sent in the request is expired; the client should obtain a new shared secret.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.StaleCredentialsError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.StaleCredentialsError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.StaleCredentialsError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.StaleCredentialsError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.StaleCredentialsError" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.StaleNonceError">
            <summary>
            438 Stale Nonce. RFC5389. Indicates that the NONCE used by the client was no longer valid. The client should retry, using the
            NONCE provided in the response.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.StaleNonceError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.StaleNonceError.Nonce">
            <summary>
            Gets or sets the nonce attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.StaleNonceError.Realm">
            <summary>
            Gets or sets the realm attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.StaleNonceError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.StaleNonceError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.StaleNonceError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.StaleNonceError" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.StaleNonceError.#ctor(FM.LiveSwitch.Stun.NonceAttribute,FM.LiveSwitch.Stun.RealmAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.StaleNonceError"/> class.
            </summary>
            <param name="nonce">The nonce attribute.</param>
            <param name="realm">The realm attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.StaleNonceError.#ctor(System.String,FM.LiveSwitch.Stun.NonceAttribute,FM.LiveSwitch.Stun.RealmAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.StaleNonceError" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="nonce">The nonce attribute.</param>
            <param name="realm">The realm attribute.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.TransactionTransmitCounterAttribute">
            <summary>
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |        Reserved(Padding)      |    Req        |     Resp      |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            Transaction Transmit Counter comprehension-optional STUN attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.TransactionTransmitCounterAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.TransactionTransmitCounterAttribute.NumRequests">
            <summary>
            Gets or sets the number of times the request is transmitted with the same transaction ID to the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.TransactionTransmitCounterAttribute.NumResponses">
            <summary>
            Gets or sets the number of times a response with the same transaction ID is sent from the server. MUST be set to zero in requests and ignored by the receiver.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.TransactionTransmitCounterAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.TransactionTransmitCounterAttribute"/> class.
            </summary>
            <param name="numRequests">The number of times the request is transmitted with the same transaction ID to the server.</param>
            <param name="numResponses">The number of times a response with the same transaction ID is sent from the server.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.TransactionTransmitCounterAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.TransactionTransmitCounterAttribute"/> class.
            </summary>
            <param name="numRequests">The number of times the request is transmitted with the same transaction ID to the server.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.TransactionTransmitCounterAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.TransactionTransmitCounterAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.TransactionTransmitCounterAttribute.GetValueLength">
            <summary>
            Gets the length of the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.TransactionTransmitCounterAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the value to.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.TransactionTransmitCounterAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.TryAlternateStunError">
            <summary>
            The client should contact an alternate server for
            this request.  This error response MUST only be sent if the
            request included a USERNAME attribute and a valid MESSAGE-
            INTEGRITY attribute; otherwise, it MUST NOT be sent and error
            code 400 (Bad Request) is suggested.  This error response MUST
            be protected with the MESSAGE-INTEGRITY attribute, and receivers
            MUST validate the MESSAGE-INTEGRITY of this response before
            redirecting themselves to an alternate server.
            
            Note: Failure to generate and validate message integrity
            for a 300 response allows an on-path attacker to falsify a
            300 response thus causing subsequent STUN messages to be
            sent to a victim.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.TryAlternateStunError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.TryAlternateStunError.AlternateServer">
            <summary>
            Gets or sets the alternate server attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.TryAlternateStunError.#ctor(System.String,FM.LiveSwitch.Stun.AlternateServerAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.TryAlternateStunError"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="alternateServer">The alternate server attribute.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.AddressFamilyNotSupportedError">
            <summary>
            440 Address Family Not Supported. RFC 6156. Indicates that the server does not support the address family requested by the client.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.AddressFamilyNotSupportedError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.AddressFamilyNotSupportedError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.AddressFamilyNotSupportedError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.AddressFamilyNotSupportedError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.AddressFamilyNotSupportedError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.AllocateMessage">
            <summary>
            A generic STUN allocate message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.AllocateMessage.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.AllocateMessage.#ctor(FM.LiveSwitch.Stun.MessageType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.AllocateMessage"/> class.
            </summary>
            <param name="messageType">The type of the message.</param>
            <param name="transactionId">The transaction ID.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.AllocateRequest">
            <summary>
            A STUN allocate request.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.AllocateRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.AllocateRequest"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.AllocateResponse">
            <summary>
            A STUN allocate response.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.AllocateResponse.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.AllocateResponse"/> class.
            </summary>
            <param name="transactionId">The transaction ID.</param>
            <param name="success">Whether the request was successful.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.AllocationMismatchError">
            <summary>
            437 Allocation Mismatch. RFC 5766. This indicates that the client has picked a 5-tuple that the server sees as already in use.  
            One way this could happen is if an intervening NAT assigned a mapped transport address that was used by another client that recently
            crashed.  The client considers the current transaction as having failed. The client SHOULD pick another client transport address 
            and retry the Allocate request (using a different transaction id).
            The client SHOULD try three different client transport addresses before giving up on this server.Once the client gives up on the
            server, it SHOULD NOT try to create another allocation on the server for 2 minutes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.AllocationMismatchError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.AllocationMismatchError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.AllocationMismatchError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.AllocationMismatchError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.AllocationMismatchError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.AllocationQuotaReachedError">
            <summary>
            486 Allocation Quota Reached. The server is currently unable to create any more allocations with this username.  The client considers the current
            transaction as having failed. The client SHOULD wait at least 1 minute before trying to create any more allocations on the server. 
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.AllocationQuotaReachedError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.AllocationQuotaReachedError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.AllocationQuotaReachedError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.AllocationQuotaReachedError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.AllocationQuotaReachedError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ChannelBindMessage">
            <summary>
            A generic STUN channel-bind message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.ChannelBindMessage.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ChannelBindMessage.#ctor(FM.LiveSwitch.Stun.MessageType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ChannelBindMessage"/> class.
            </summary>
            <param name="messageType">The type of the message.</param>
            <param name="transactionId">The transaction ID.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ChannelBindRequest">
            <summary>
            A STUN channel-bind request.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ChannelBindRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ChannelBindRequest"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ChannelBindResponse">
            <summary>
            A STUN channel-bind response.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ChannelBindResponse.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ChannelBindResponse"/> class.
            </summary>
            <param name="transactionId">The transaction ID.</param>
            <param name="success">Whether the request was successful.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ChannelNumberAttribute">
            <summary>
            The CHANNEL-NUMBER attribute contains the number of the channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.ChannelNumberAttribute.ChannelNumber">
            <summary>
            Gets or sets the channel number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.ChannelNumberAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ChannelNumberAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ChannelNumberAttribute"/> class.
            </summary>
            <param name="channelNumber">The channel number.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ChannelNumberAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ChannelNumberAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ChannelNumberAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ChannelNumberAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Gets the value as a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ChannelNumberAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ConnectionAlreadyExistsError">
            <summary>
            446 Connection Already exists. This indicates that either 1) the server is currently processing a Connect request for this allocation with 
            the same XOR-PEER-ADDRESS; OR 2) the server has already successfully processed a Connect request for this allocation with the same XOR-PEER-ADDRESS,
            and the resulting client and peer data connections are either pending or active
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionAlreadyExistsError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionAlreadyExistsError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ConnectionAlreadyExistsError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionAlreadyExistsError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ConnectionAlreadyExistsError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ConnectionAttemptIndication">
            <summary>
            A STUN connection-attempt indication.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionAttemptIndication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ConnectionAttemptIndication"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ConnectionAttemptMessage">
            <summary>
            A generic STUN connection-attempt message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.ConnectionAttemptMessage.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionAttemptMessage.#ctor(FM.LiveSwitch.Stun.MessageType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ConnectionAttemptMessage"/> class.
            </summary>
            <param name="messageType">The type of the message.</param>
            <param name="transactionId">The transaction ID.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ConnectionBindMessage">
            <summary>
            A generic STUN connection-bind message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.ConnectionBindMessage.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionBindMessage.#ctor(FM.LiveSwitch.Stun.MessageType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ConnectionBindMessage"/> class.
            </summary>
            <param name="messageType">The type of the message.</param>
            <param name="transactionId">The transaction ID.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ConnectionBindRequest">
            <summary>
            A STUN connection-bind request.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionBindRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ConnectionBindRequest"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ConnectionBindResponse">
            <summary>
            A STUN connection-bind response.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionBindResponse.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ConnectionBindResponse"/> class.
            </summary>
            <param name="transactionId">The transaction ID.</param>
            <param name="success">Whether the request was successful.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ConnectionIdAttribute">
            <summary>
            The CONNECTION-ID attribute uniquely identifies a peer data connection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.ConnectionIdAttribute.ConnectionId">
            <summary>
            Gets or sets the connection ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.ConnectionIdAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionIdAttribute.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ConnectionIdAttribute"/> class.
            </summary>
            <param name="connectionId">The connection ID.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionIdAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ChannelNumberAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionIdAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionIdAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionIdAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ConnectionTimeoutOrFailureError">
            <summary>
            447 Connection Timeout or Failure. This indicates that the TURN server was unable to connect to the peer. The client MAY retry with the same
            XOR-PEER-ADDRESS attribute, but MUST wait at least 10 seconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionTimeoutOrFailureError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionTimeoutOrFailureError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ConnectionTimeoutOrFailureError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectionTimeoutOrFailureError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ConnectionTimeoutOrFailureError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ConnectMessage">
            <summary>
            A generic STUN connect message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.ConnectMessage.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectMessage.#ctor(FM.LiveSwitch.Stun.MessageType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ConnectMessage"/> class.
            </summary>
            <param name="messageType">The type of the message.</param>
            <param name="transactionId">The transaction ID.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ConnectRequest">
            <summary>
            A STUN connect request.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ConnectRequest"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ConnectResponse">
            <summary>
            A STUN connect response.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ConnectResponse.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ConnectResponse"/> class.
            </summary>
            <param name="transactionId">The transaction ID.</param>
            <param name="success">Whether the request was successful.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.CreatePermissionMessage">
            <summary>
            A generic STUN create-permission message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.CreatePermissionMessage.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.CreatePermissionMessage.#ctor(FM.LiveSwitch.Stun.MessageType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.CreatePermissionMessage"/> class.
            </summary>
            <param name="messageType">The type of the message.</param>
            <param name="transactionId">The transaction ID.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.CreatePermissionRequest">
            <summary>
            A STUN create-permission request.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.CreatePermissionRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.CreatePermissionRequest"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.CreatePermissionResponse">
            <summary>
            A STUN create-permission response.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.CreatePermissionResponse.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.CreatePermissionResponse"/> class.
            </summary>
            <param name="transactionId">The transaction ID.</param>
            <param name="success">Whether the request was successful.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.DataAttribute">
            <summary>
            The DATA attribute is present in all Send and Data indications.
            The value portion of this attribute is variable length and consists of
            the application data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.DataAttribute.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.DataAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.DataAttribute.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.DataAttribute"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.DataAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.DataAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.DataAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.DataAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.DataAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.DataIndication">
            <summary>
            A STUN data indication.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.DataIndication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.DataIndication"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.DataMessage">
            <summary>
            A generic STUN data message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.DataMessage.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.DataMessage.#ctor(FM.LiveSwitch.Stun.MessageType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.DataMessage"/> class.
            </summary>
            <param name="messageType">The type of the message.</param>
            <param name="transactionId">The transaction ID.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.DontFragmentAttribute">
            <summary>
            This attribute is used by the client to request that the server set
            the DF (Don't Fragment) bit in the IP header when relaying the
            application data onward to the peer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.DontFragmentAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.DontFragmentAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.DontFragmentAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.DontFragmentAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.DontFragmentAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.DontFragmentAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.DontFragmentAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.DontFragmentAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.EvenPortAttribute">
            <summary>
            This attribute allows the client to request that the port in the
            relayed transport address be even, and (optionally) that the server
            reserve the next-higher port number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.EvenPortAttribute.ReserveNextHigher">
            <summary>
            Gets or sets whether the server should reserve the next-higher port number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.EvenPortAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.EvenPortAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.EvenPortAttribute"/> class.
            </summary>
            <param name="reserveNextHigher">Whether the server should reserve the next-higher port number.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.EvenPortAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.EvenPortAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.EvenPortAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.EvenPortAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.EvenPortAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ForbiddenError">
            <summary>
            403 Forbidden. RFC 5766. Indicates that the request is valid, but the server is refusing
            to perform it, likely due to administrative restrictions. The client considers the current
            transaction as having failed. The client MAY notify the user or operator and SHOULD NOT retry the
            same request with this server until it believes the problem has been fixed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ForbiddenError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ForbiddenError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ForbiddenError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ForbiddenError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ForbiddenError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.InsufficientCapacityError">
            <summary>
            508 Insufficient Capacity. The server has no more relayed transport addresses available, or has none with the requested properties, or the one that was 
            reserved is no longer available. The client considers the current operation as having failed. If the client is using either the EVEN-PORT or the 
            RESERVATION-TOKEN attribute, then the client MAY choose to remove or modify this attribute and try again immediately.  Otherwise, the client SHOULD 
            wait at least 1 minute before trying to create any more allocations on this server.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.InsufficientCapacityError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.InsufficientCapacityError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.InsufficientCapacityError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.InsufficientCapacityError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.InsufficientCapacityError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.LifetimeAttribute">
            <summary>
            The LIFETIME attribute represents the duration for which the server
            will maintain an allocation in the absence of a refresh (in seconds).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.LifetimeAttribute.Lifetime">
            <summary>
            Gets or sets the allocation duration in seconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.LifetimeAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.LifetimeAttribute.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.LifetimeAttribute"/> class.
            </summary>
            <param name="lifetime">The allocation duration in seconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.LifetimeAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.LifetimeAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.LifetimeAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.LifetimeAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.LifetimeAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.MobilityForbiddenError">
            <summary>
            405 Mobility Forbidden. RFC 8016. Indicates that the request is valid, but the server is refusing to perform it, 
            likely due to administrative restrictions. The client considers the current transaction as having failed.
            The client can notify the user or operator.  The client SHOULD NOT retry sending the Allocate request 
            containing the MOBILITY-TICKET with this server until it believes the problem has been fixed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.MobilityForbiddenError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.MobilityForbiddenError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.MobilityForbiddenError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.MobilityForbiddenError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.MobilityForbiddenError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.PeerAddressFamilyMismatchError">
            <summary>
            443 Peer Address Family Mismatch. A peer address was of a different address family than that of the relayed transport address of the allocation.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.PeerAddressFamilyMismatchError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.PeerAddressFamilyMismatchError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.PeerAddressFamilyMismatchError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.PeerAddressFamilyMismatchError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.PeerAddressFamilyMismatchError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.RefreshMessage">
            <summary>
            A generic STUN refresh message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.RefreshMessage.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.RefreshMessage.#ctor(FM.LiveSwitch.Stun.MessageType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.RefreshMessage"/> class.
            </summary>
            <param name="messageType">The type of the message.</param>
            <param name="transactionId">The transaction ID.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.RefreshRequest">
            <summary>
            A STUN refresh request.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.RefreshRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.RefreshRequest"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.RefreshResponse">
            <summary>
            A STUN refresh response.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.RefreshResponse.#ctor(FM.LiveSwitch.DataBuffer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.RefreshResponse"/> class.
            </summary>
            <param name="transactionId">The transaction ID.</param>
            <param name="success">Whether the request was successful.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.RequestedAddressFamilyAttribute">
            <summary>
            The REQUESTED-ADDRESS-FAMILY attribute is used by clients to request
            the allocation of a specific address type from a server. 
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.RequestedAddressFamilyAttribute.AddressFamily">
            <summary>
            Gets or sets the address family.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.RequestedAddressFamilyAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.RequestedAddressFamilyAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.RequestedAddressFamilyAttribute" /> class.
            </summary>
            <param name="addressFamily">The address family.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.RequestedAddressFamilyAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.RequestedAddressFamilyAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.RequestedAddressFamilyAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.RequestedAddressFamilyAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.RequestedAddressFamilyAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.RequestedTransportAttribute">
            <summary>
            This attribute is used by the client to request a specific transport
            protocol for the allocated transport address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.RequestedTransportAttribute.Protocol">
            <summary>
            Gets or sets the transport protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.RequestedTransportAttribute.UdpProtocol">
            <summary>
            Gets the UDP transport protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.RequestedTransportAttribute.TcpProtocol">
            <summary>
            Gets the TCP transport protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.RequestedTransportAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.RequestedTransportAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.RequestedTransportAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.RequestedTransportAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.RequestedTransportAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.RequestedTransportAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.RequestedTransportAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.RequestedTransportAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.ReservationTokenAttribute">
            <summary>
            The RESERVATION-TOKEN attribute contains a token that uniquely
            identifies a relayed transport address being held in reserve by the
            server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.ReservationTokenAttribute.Token">
            <summary>
            Gets or sets the reservation token.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.ReservationTokenAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ReservationTokenAttribute.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ReservationTokenAttribute"/> class.
            </summary>
            <param name="token">The reservation token.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ReservationTokenAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.ReservationTokenAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ReservationTokenAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ReservationTokenAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.ReservationTokenAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.SendIndication">
            <summary>
            A STUN send indication.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.SendIndication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.SendIndication"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.SendMessage">
            <summary>
            A generic STUN send message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.SendMessage.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.SendMessage.#ctor(FM.LiveSwitch.Stun.MessageType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.SendMessage"/> class.
            </summary>
            <param name="messageType">The type of the message.</param>
            <param name="transactionId">The transaction ID.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.UnsupportedTransportProtocolError">
            <summary>
            442 Unsupported Transport Protocol. The client should not receive this error in response to a request for a UDP allocation. The
            client MAY notify the user or operator and SHOULD NOT reattempt the request with this server until it believes the problem has
            been fixed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.UnsupportedTransportProtocolError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.UnsupportedTransportProtocolError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.UnsupportedTransportProtocolError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.UnsupportedTransportProtocolError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.UnsupportedTransportProtocolError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.WrongCredentialsError">
            <summary>
            441 Wrong Credentials. RFC 5766. Indicates that wrong credential were used by the client. The client should not receive this error
            in response to an Allocate request.  The client MAY notify the user or operator and SHOULD NOT retry the same request with this server
            until it believes the problem has been fixed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.WrongCredentialsError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.WrongCredentialsError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.WrongCredentialsError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.WrongCredentialsError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.WrongCredentialsError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.XorPeerAddressAttribute">
            <summary>
            The XOR-PEER-ADDRESS specifies the address and port of the peer as
            seen from the TURN server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.XorPeerAddressAttribute.IPAddress">
            <summary>
            Gets or sets the IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.XorPeerAddressAttribute.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.XorPeerAddressAttribute.TransactionId">
            <summary>
            Gets or sets the transaction ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.XorPeerAddressAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.XorPeerAddressAttribute.#ctor(System.String,System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.XorPeerAddressAttribute"/> class.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
            <param name="transactionId">The transaction ID.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.XorPeerAddressAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.XorPeerAddressAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="transactionId">The transaction ID.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.XorPeerAddressAttribute.GetValueLength">
            <summary>
            Gets the length of the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.XorPeerAddressAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the value to.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.XorPeerAddressAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Turn.XorRelayedAddressAttribute">
            <summary>
            The XOR-RELAYED-ADDRESS is present in Allocate responses.  It
            specifies the address and port that the server allocated to the
            client.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.XorRelayedAddressAttribute.IPAddress">
            <summary>
            Gets or sets the IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.XorRelayedAddressAttribute.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.XorRelayedAddressAttribute.TransactionId">
            <summary>
            Gets or sets the transaction ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.Turn.XorRelayedAddressAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.XorRelayedAddressAttribute.#ctor(System.String,System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.XorRelayedAddressAttribute"/> class.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
            <param name="transactionId">The transaction ID.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.XorRelayedAddressAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.Turn.XorRelayedAddressAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="transactionId">The transaction ID.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.XorRelayedAddressAttribute.GetValueLength">
            <summary>
            Gets the length of the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.XorRelayedAddressAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the value to.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Turn.XorRelayedAddressAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.UnauthorizedStunError">
            <summary>
            401  Unauthorized. RFC5389. Indicates that the request did not contain the correct
            credentials to proceed.  The client should retry the request with proper credentials.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UnauthorizedStunError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.UnauthorizedStunError.Nonce">
            <summary>
            Gets or sets the nonce attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.UnauthorizedStunError.Realm">
            <summary>
            Gets or sets the realm attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UnauthorizedStunError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.UnauthorizedStunError"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UnauthorizedStunError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.UnauthorizedStunError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UnauthorizedStunError.#ctor(FM.LiveSwitch.Stun.NonceAttribute,FM.LiveSwitch.Stun.RealmAttribute,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.UnauthorizedStunError" /> class.
            </summary>
            <param name="nonce">The nonce attribute.</param>
            <param name="realm">The realm attribute.</param>
            <param name="message">The message</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.UnknownAttributeError">
            <summary>
            420  Unknown Attribute. RFC5389. Indicates that the server received a STUN packet containing a comprehension-required 
            attribute that it did not understand. The server MUST put this unknown attribute in the UNKNOWN-ATTRIBUTE 
            attribute of its error response.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UnknownAttributeError.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Stun.Error"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.UnknownAttributeError.UnknownAttributes">
            <summary>
            Gets or sets the unknown attributes attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UnknownAttributeError.#ctor(FM.LiveSwitch.Stun.UnknownAttributesAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.UnknownAttributeError"/> class.
            </summary>
            <param name="unknownAttributes">The unknown attributes attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UnknownAttributeError.#ctor(System.String,FM.LiveSwitch.Stun.UnknownAttributesAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.UnknownAttributeError"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="unknownAttributes">The unknown attributes attribute.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.UnknownAttributesAttribute">
            <summary>
            The UNKNOWN-ATTRIBUTES attribute is present only in an error response
            when the response code in the ERROR-CODE attribute is 420.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.UnknownAttributesAttribute.Types">
            <summary>
            Gets or sets the array of unknown attribute types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.UnknownAttributesAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UnknownAttributesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.UnknownAttributesAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UnknownAttributesAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.UnknownAttributesAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UnknownAttributesAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UnknownAttributesAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:FM.LiveSwitch.Stun.UsernameAttribute">
            <summary>
            The USERNAME attribute is used for message integrity.  It identifies
            the username and password combination used in the message-integrity
            check.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.UsernameAttribute.Value">
            <summary>
            Gets or sets the username value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.UsernameAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UsernameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.UsernameAttribute"/> class.
            </summary>
            <param name="value">The username value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UsernameAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.UsernameAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UsernameAttribute.GetValueLength">
            <summary>
            Gets the length of the attribute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UsernameAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the attribute value to a data buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.UsernameAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Stun.Utility">
            <summary>
            STUN-wide methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.Utility.CreateLongTermKey(System.String,System.String,System.String)">
            <summary>
            Creates a long term key from the given username, realm, and password by calculating
            the MD5 hash of their values concatenated as "username:realm:password".
            </summary>
            <param name="username">The username.</param>
            <param name="realm">The realm.</param>
            <param name="password">The password.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Stun.Utility.CreateShortTermKey(System.String)">
            <summary>
            Creates a short term key from the given password by encoding it as a UTF-8 byte array.
            </summary>
            <param name="password">The password.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Stun.XorMappedAddressAttribute">
            <summary>
            The XOR-MAPPED-ADDRESS attribute is identical to the MAPPED-ADDRESS
            attribute, except that the reflexive transport address is obfuscated
            through the XOR function.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.XorMappedAddressAttribute.IPAddress">
            <summary>
            Gets or sets the IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.XorMappedAddressAttribute.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.XorMappedAddressAttribute.TransactionId">
            <summary>
            Gets or sets the transaction ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Stun.XorMappedAddressAttribute.TypeValue">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Stun.XorMappedAddressAttribute.#ctor(System.String,System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.XorMappedAddressAttribute"/> class.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
            <param name="transactionId">The transaction ID.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.XorMappedAddressAttribute.ReadValueFrom(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Stun.XorMappedAddressAttribute" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="transactionId">The transaction ID.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.XorMappedAddressAttribute.GetValueLength">
            <summary>
            Gets the length of the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Stun.XorMappedAddressAttribute.WriteValueTo(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes the value to.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.Stun.XorMappedAddressAttribute.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Channel">
            <summary>
            A channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.Claim">
            <summary>
            Gets or sets the claim.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.ApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.UserId">
            <summary>
            Gets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.UserAlias">
            <summary>
            Gets the user alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.DeviceId">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.DeviceAlias">
            <summary>
            Gets the device alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.ClientId">
            <summary>
            Gets the client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.ClientTag">
            <summary>
            Gets the client tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.ClientRoles">
            <summary>
            Gets the client roles.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.Id">
            <summary>
            Gets the channel identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.RemoteClientInfos">
            <summary>
            Gets information about the remote client in this channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.RemoteUpstreamConnectionInfos">
            <summary>
            Gets information about the remote upstream (SFU or MCU)
            connections opened by remote clients in this channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.Connections">
            <summary>
            Gets the active connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.MessagesSent">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.MessagesReceived">
            <summary>
            Gets the number of messages received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.MessageBytesSent">
            <summary>
            Gets the number of message bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Channel.MessageBytesReceived">
            <summary>
            Gets the number of message bytes received.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Channel.OnMessage">
            <summary>
            Raised when a channel message is received from the server.
            Parameters:
                - clientInfo - the sending client information
                - message - the message
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Channel.OnUserMessage">
            <summary>
            Raised when a user message is received from the server.
            Parameters:
                - clientInfo - the sending client information
                - message - the message
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Channel.OnDeviceMessage">
            <summary>
            Raised when a device message is received from the server.
            Parameters:
                - clientInfo - the sending client information
                - message - the message
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Channel.OnClientMessage">
            <summary>
            Raised when a client message is received from the server.
            Parameters:
                - clientInfo - the sending client information
                - message - the message
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Channel.OnRemoteClientJoin">
            <summary>
            Raised when a remote client joins this channel.
            Parameters:
                - clientInfo - the remote client information
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Channel.OnRemoteClientUpdate">
            <summary>
            Raised when a remote client updates their config.
            Parameters:
                - oldClientInfo - the old remote client information
                - newClientInfo - the new remote client information
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Channel.OnRemoteClientLeave">
            <summary>
            Raised when a remote client leaves this channel.
            Parameters:
                - clientInfo - the remote client information
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Channel.OnRemoteUpstreamConnectionOpen">
            <summary>
            Raised when a remote upstream (SFU or MCU)
            connection is opened by a remote client.
            Parameters:
                - connectionInfo - the remote connection information
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Channel.OnRemoteUpstreamConnectionUpdate">
            <summary>
            Raised when a remote upstream (SFU or MCU)
            connection is updated by a remote client.
            Parameters:
                - oldConnectionInfo - the old remote connection information
                - newConnectionInfo - the new remote connection information
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Channel.OnRemoteUpstreamConnectionClose">
            <summary>
            Raised when a remote upstream (SFU or MCU)
            connection is closed by a remote client.
            Parameters:
                - connectionInfo - the remote connection information
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Channel.OnPeerConnectionOffer">
            <summary>
            Raised when a remote client wants to open a peer connection.
            Parameters:
                - peerConnectionOffer - the peer connection offer
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Channel.OnMcuVideoLayout">
            <summary>
            Raised when a new MCU video layout is received from the server.
            Parameters:
                - videoLayout - the new MCU video layout
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Channel.OnClaimUpdate">
            <summary>
            Raised when the client's channel claim has been updated.
            Parameters:
                - oldConnectionInfo - the old channel claim
                - newConnectionInfo - the new channel claim
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Channel.OnKick">
            <summary>
            Raised when the client is kicked from the channel.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Channel.Send(FM.LiveSwitch.Message)">
            <summary>
            Sends a message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.Invite(System.String,System.String)">
            <summary>
            Invites a user into this channel.
            </summary>
            <param name="userId">The user id to invite.</param>
            <param name="protocol">The protocol to use for the invite.</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreatePeerConnection(FM.LiveSwitch.ClientInfo,FM.LiveSwitch.AudioStream)">
            <summary>
            Creates an audio-only peer connection in the offering role.
            </summary>
            <param name="remoteClientInfo">The remote client information.</param>
            <param name="audioStream">The audio stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreatePeerConnection(FM.LiveSwitch.ClientInfo,FM.LiveSwitch.VideoStream)">
            <summary>
            Creates a video-only peer connection in the offering role.
            </summary>
            <param name="remoteClientInfo">The remote client information.</param>
            <param name="videoStream">The video stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreatePeerConnection(FM.LiveSwitch.ClientInfo,FM.LiveSwitch.DataStream)">
            <summary>
            Creates a data-only peer connection in the offering role.
            </summary>
            <param name="remoteClientInfo">The remote client information.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreatePeerConnection(FM.LiveSwitch.ClientInfo,FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream)">
            <summary>
            Creates an audio/video peer connection in the offering role.
            </summary>
            <param name="remoteClientInfo">The remote client information.</param>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreatePeerConnection(FM.LiveSwitch.ClientInfo,FM.LiveSwitch.AudioStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates an audio/data peer connection in the offering role.
            </summary>
            <param name="remoteClientInfo">The remote client information.</param>
            <param name="audioStream">The audio stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreatePeerConnection(FM.LiveSwitch.ClientInfo,FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates a video/data peer connection in the offering role.
            </summary>
            <param name="remoteClientInfo">The remote client information.</param>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.KickClient(FM.LiveSwitch.ClientInfo)">
            <summary>
            Kicks a client from this channel if the kick permission is enabled.
            </summary>
            <param name="remoteClientInfo">The remote client to kick.</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.Update(FM.LiveSwitch.ChannelConfig)">
            <summary>
            Updates the configuration for this channel.
            </summary>
            <param name="newConfig">The new recording configuration</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreatePeerConnection(FM.LiveSwitch.ClientInfo,FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates an audio/video/data peer connection in the offering role.
            </summary>
            <param name="remoteClientInfo">The remote client information.</param>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreatePeerConnection(FM.LiveSwitch.PeerConnectionOffer,FM.LiveSwitch.AudioStream)">
            <summary>
            Creates an audio-only peer connection in the answering role.
            </summary>
            <param name="peerConnectionOffer">The peer connection offer.</param>
            <param name="audioStream">The audio stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreatePeerConnection(FM.LiveSwitch.PeerConnectionOffer,FM.LiveSwitch.VideoStream)">
            <summary>
            Creates a video-only peer connection in the answering role.
            </summary>
            <param name="peerConnectionOffer">The peer connection offer.</param>
            <param name="videoStream">The video stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreatePeerConnection(FM.LiveSwitch.PeerConnectionOffer,FM.LiveSwitch.DataStream)">
            <summary>
            Creates a data-only peer connection in the answering role.
            </summary>
            <param name="peerConnectionOffer">The peer connection offer.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreatePeerConnection(FM.LiveSwitch.PeerConnectionOffer,FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream)">
            <summary>
            Creates an audio/video peer connection in the answering role.
            </summary>
            <param name="peerConnectionOffer">The peer connection offer.</param>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreatePeerConnection(FM.LiveSwitch.PeerConnectionOffer,FM.LiveSwitch.AudioStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates an audio/data peer connection in the answering role.
            </summary>
            <param name="peerConnectionOffer">The peer connection offer.</param>
            <param name="audioStream">The audio stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreatePeerConnection(FM.LiveSwitch.PeerConnectionOffer,FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates a video/data peer connection in the answering role.
            </summary>
            <param name="peerConnectionOffer">The peer connection offer.</param>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreatePeerConnection(FM.LiveSwitch.PeerConnectionOffer,FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates an audio/video/data peer connection in the answering role.
            </summary>
            <param name="peerConnectionOffer">The peer connection offer.</param>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.RejectPeerConnection(FM.LiveSwitch.PeerConnectionOffer)">
            <summary>
            Rejects a peer connection offer.
            </summary>
            <param name="peerConnectionOffer">The peer connection offer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuUpstreamConnection(FM.LiveSwitch.AudioStream)">
            <summary>
            Creates an audio-only SFU upstream connection.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuUpstreamConnection(FM.LiveSwitch.VideoStream)">
            <summary>
            Creates a video-only SFU upstream connection.
            </summary>
            <param name="videoStream">The video stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuUpstreamConnection(FM.LiveSwitch.DataStream)">
            <summary>
            Creates a data-only SFU upstream connection.
            </summary>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuUpstreamConnection(FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream)">
            <summary>
            Creates an audio/video SFU upstream connection.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuUpstreamConnection(FM.LiveSwitch.AudioStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates an audio/data SFU upstream connection.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuUpstreamConnection(FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates a video/data SFU upstream connection.
            </summary>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuUpstreamConnection(FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates an audio/video/data SFU upstream connection.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuUpstreamConnection(FM.LiveSwitch.AudioStream,System.String)">
            <summary>
            Creates an audio-only SFU upstream connection with a specific media
            identifier that can be targeted by SFU downstream connections.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="mediaId">The media identifier, unique to this channel, for persistent SFU downstream connections.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuUpstreamConnection(FM.LiveSwitch.VideoStream,System.String)">
            <summary>
            Creates a video-only SFU upstream connection with a specific media
            identifier that can be targeted by SFU downstream connections.
            </summary>
            <param name="videoStream">The video stream.</param>
            <param name="mediaId">The media identifier, unique to this channel, for persistent SFU downstream connections.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuUpstreamConnection(FM.LiveSwitch.DataStream,System.String)">
            <summary>
            Creates a data-only SFU upstream connection with a specific media
            identifier that can be targeted by SFU downstream connections.
            </summary>
            <param name="dataStream">The data stream.</param>
            <param name="mediaId">The media identifier, unique to this channel, for persistent SFU downstream connections.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuUpstreamConnection(FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream,System.String)">
            <summary>
            Creates an audio/video SFU upstream connection with a specific media
            identifier that can be targeted by SFU downstream connections.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <param name="mediaId">The media identifier, unique to this channel, for persistent SFU downstream connections.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuUpstreamConnection(FM.LiveSwitch.AudioStream,FM.LiveSwitch.DataStream,System.String)">
            <summary>
            Creates an audio/data SFU upstream connection with a specific media
            identifier that can be targeted by SFU downstream connections.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="dataStream">The data stream.</param>
            <param name="mediaId">The media identifier, unique to this channel, for persistent SFU downstream connections.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuUpstreamConnection(FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream,System.String)">
            <summary>
            Creates a video/data SFU upstream connection with a specific media
            identifier that can be targeted by SFU downstream connections.
            </summary>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <param name="mediaId">The media identifier, unique to this channel, for persistent SFU downstream connections.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuUpstreamConnection(FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream,System.String)">
            <summary>
            Creates an audio/video SFU upstream connection with a specific media
            identifier that can be targeted by SFU downstream connections.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The video stream.</param>
            <param name="mediaId">The media identifier, unique to this channel, for persistent SFU downstream connections.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuDownstreamConnection(FM.LiveSwitch.ConnectionInfo,FM.LiveSwitch.AudioStream)">
            <summary>
            Creates an audio-only SFU downstream connection to the SFU or MCU
            upstream connection identified by the remote connection info.
            </summary>
            <param name="remoteConnectionInfo">The remote connection information.</param>
            <param name="audioStream">The audio stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuDownstreamConnection(FM.LiveSwitch.ConnectionInfo,FM.LiveSwitch.VideoStream)">
            <summary>
            Creates a video-only SFU downstream connection to the SFU or MCU
            upstream connection identified by the remote connection info.
            </summary>
            <param name="remoteConnectionInfo">The remote connection information.</param>
            <param name="videoStream">The video stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuDownstreamConnection(FM.LiveSwitch.ConnectionInfo,FM.LiveSwitch.DataStream)">
            <summary>
            Creates a data-only SFU downstream connection.
            </summary>
            <param name="remoteConnectionInfo">The remote connection information.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuDownstreamConnection(FM.LiveSwitch.ConnectionInfo,FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream)">
            <summary>
            Creates an audio/video SFU downstream connection to the SFU or MCU
            upstream connection identified by the remote connection info.
            </summary>
            <param name="remoteConnectionInfo">The remote connection information.</param>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuDownstreamConnection(FM.LiveSwitch.ConnectionInfo,FM.LiveSwitch.AudioStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates an audio/data SFU downstream connection.
            </summary>
            <param name="remoteConnectionInfo">The remote connection information.</param>
            <param name="audioStream">The audio stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuDownstreamConnection(FM.LiveSwitch.ConnectionInfo,FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates a video/data SFU downstream connection.
            </summary>
            <param name="remoteConnectionInfo">The remote connection information.</param>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuDownstreamConnection(FM.LiveSwitch.ConnectionInfo,FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates an audio/video/data SFU downstream connection.
            </summary>
            <param name="remoteConnectionInfo">The remote connection information.</param>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuDownstreamConnection(System.String,FM.LiveSwitch.AudioStream)">
            <summary>
            Creates an audio-only SFU downstream connection to the SFU or MCU
            upstream connection with the remote media identifier.
            </summary>
            <param name="remoteMediaId">The remote media identifier.</param>
            <param name="audioStream">The audio stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuDownstreamConnection(System.String,FM.LiveSwitch.VideoStream)">
            <summary>
            Creates a video-only SFU downstream connection.
            </summary>
            <param name="remoteMediaId">The remote media identifier.</param>
            <param name="videoStream">The video stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuDownstreamConnection(System.String,FM.LiveSwitch.DataStream)">
            <summary>
            Creates a data-only SFU downstream connection.
            </summary>
            <param name="remoteMediaId">The remote media identifier.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuDownstreamConnection(System.String,FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream)">
            <summary>
            Creates an audio/video SFU downstream connection.
            </summary>
            <param name="remoteMediaId">The remote media identifier.</param>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuDownstreamConnection(System.String,FM.LiveSwitch.AudioStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates an audio/data SFU downstream connection.
            </summary>
            <param name="remoteMediaId">The remote media identifier.</param>
            <param name="audioStream">The audio stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuDownstreamConnection(System.String,FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates a video/data SFU downstream connection.
            </summary>
            <param name="remoteMediaId">The remote media identifier.</param>
            <param name="videoStream">The audio stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateSfuDownstreamConnection(System.String,FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates an audio/video/data SFU downstream connection.
            </summary>
            <param name="remoteMediaId">The remote media identifier.</param>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateMcuConnection(FM.LiveSwitch.AudioStream)">
            <summary>
            Creates an audio-only MCU connection.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateMcuConnection(FM.LiveSwitch.VideoStream)">
            <summary>
            Creates a video-only MCU connection.
            </summary>
            <param name="videoStream">The video stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateMcuConnection(FM.LiveSwitch.DataStream)">
            <summary>
            Creates a data-only MCU connection.
            </summary>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateMcuConnection(FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream)">
            <summary>
            Creates an audio/video MCU connection.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateMcuConnection(FM.LiveSwitch.AudioStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates an audio/data MCU connection.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateMcuConnection(FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates a video/data MCU connection.
            </summary>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateMcuConnection(FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream)">
            <summary>
            Creates an audio/video/data MCU connection.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateMcuConnection(FM.LiveSwitch.AudioStream,System.String)">
            <summary>
             Creates an audio-only MCU connection with a specific media
             identifier that can be targeted by SFU downstream connections.
             The media identifer is only relevant if this connection will send media.
             </summary>
             <param name="audioStream">The audio stream.</param>
             <param name="mediaId">The media identifier, unique to this channel, for persistent SFU downstream connections.</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateMcuConnection(FM.LiveSwitch.VideoStream,System.String)">
            <summary>
            Creates a video-only MCU connection with a specific media
            identifier that can be targeted by SFU downstream connections.
            The media identifer is only relevant if this connection will send media.
            </summary>
            <param name="videoStream">The video stream.</param>
            <param name="mediaId">The media identifier, unique to this channel, for persistent SFU downstream connections.</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateMcuConnection(FM.LiveSwitch.DataStream,System.String)">
            <summary>
            Creates a data-only MCU connection with a specific media
            identifier that can be targeted by SFU downstream connections.
            The media identifer is only relevant if this connection will send media.
            </summary>
            <param name="dataStream">The data stream.</param>
            <param name="mediaId">The media identifier, unique to this channel, for persistent SFU downstream connections.</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateMcuConnection(FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream,System.String)">
            <summary>
            Creates an audio/video MCU connection with a specific media
            identifier that can be targeted by SFU downstream connections.
            The media identifer is only relevant if this connection will send media.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <param name="mediaId">The media identifier, unique to this channel, for persistent SFU downstream connections.</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateMcuConnection(FM.LiveSwitch.AudioStream,FM.LiveSwitch.DataStream,System.String)">
            <summary>
            Creates an audio/data MCU connection with a specific media
            identifier that can be targeted by SFU downstream connections.
            The media identifer is only relevant if this connection will send media.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="dataStream">The data stream.</param>
            <param name="mediaId">The media identifier, unique to this channel, for persistent SFU downstream connections.</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateMcuConnection(FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream,System.String)">
            <summary>
            Creates a video/data MCU connection with a specific media
            identifier that can be targeted by SFU downstream connections.
            The media identifer is only relevant if this connection will send media.
            </summary>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <param name="mediaId">The media identifier, unique to this channel, for persistent SFU downstream connections.</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CreateMcuConnection(FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream,System.String)">
            <summary>
            Creates an audio/video MCU connection with a specific media
            identifier that can be targeted by SFU downstream connections.
            The media identifer is only relevant if this connection will send media.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <param name="mediaId">The media identifier, unique to this channel, for persistent SFU downstream connections.</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.GetRemoteClientInfo(System.String)">
            <summary>
            Gets information about a remote client.
            </summary>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.GetRemoteConnectionInfo(System.String)">
            <summary>
            Gets information about a remote connection.
            </summary>
            <param name="connectionId">The connection identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Channel.SendMessage(System.String)">
            <summary>
            Sends a message to the channel.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.SendUserMessage(System.String,System.String)">
            <summary>
            Sends a message to a user in the channel.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.SendDeviceMessage(System.String,System.String,System.String)">
            <summary>
            Sends a message to a device in the channel.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.SendClientMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a message to a client in the channel.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Channel.CloseAll">
            <summary>
            Closes all active connections.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Client">
            <summary>
            A LiveSwitch client.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.Info">
            <summary>
            Gets the client info.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.Config">
            <summary>
            Gets the current configuration.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Client.OnRemoteUpdate">
            <summary>
            Raised when the the client's config on the server has changed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.GatewayUrl">
            <summary>
            Gets the gateway URL.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.ApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.UserId">
            <summary>
            Gets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.UserAlias">
            <summary>
            Gets or sets the user alias. Cannot be set after registration, use the 'Update' method instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.DeviceId">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.DeviceAlias">
            <summary>
            Gets or sets the device alias. Cannot be set after registration, use the 'Update' method instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.Id">
            <summary>
            Gets the client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.ExternalId">
            <summary>
            Gets or sets the external client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.Tag">
            <summary>
            Gets or sets the tag. Cannot be set after registration, use the 'Update' method instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.Roles">
            <summary>
            Gets the roles.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.Region">
            <summary>
            Gets the region.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.Channels">
            <summary>
            Gets an array of joined channels.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.RequestTimeout">
            <summary>
            Gets or sets the number of milliseconds to wait for a standard request to
            return a response before it is aborted and another request is attempted.
            Defaults to 15000 (15 seconds).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.RequestMaxRetries">
            <summary>
            Gets or sets the maximum number of retries allowed for a standard request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.DisableWebSockets">
            <summary>
            Gets or sets whether to disable WebSocket protocol support and use long-polling,
            even if the server is capable of accepting WebSocket requests.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Client.OnStateChange">
            <summary>
            Raised when the state changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Client.UnregisterException">
            <summary>
            Gets the unregister exception, which is set if
            registration is reset abnormally.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Client.OnHttpRequestCreated">
            <summary>
            Raised whenever an underlying HTTP request
            has been created and is about to be transferred to the server. This is a
            good place to add headers/cookies. For WebSocket streams, this will fire
            only once for the initial HTTP-based handshake.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Client.OnHttpResponseReceived">
            <summary>
            Raised whenever an underlying HTTP response
            has been received and is about to be processed by the client. This is a
            good place to read headers/cookies. For WebSocket streams, this will fire
            only once for the initial HTTP-based handshake.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Client.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Client" /> class.
            </summary>
            <param name="gatewayUrl">The gateway URL.</param>
            <param name="applicationId">The application identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Client.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Client" /> class.
            </summary>
            <param name="gatewayUrl">The gateway URL.</param>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier, or <c>null</c> to auto-generate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Client.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Client" /> class.
            </summary>
            <param name="gatewayUrl">The gateway URL.</param>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier, or <c>null</c> to auto-generate.</param>
            <param name="deviceId">The device identifier, or <c>null</c> to auto-generate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Client.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Client" /> class.
            </summary>
            <param name="gatewayUrl">The gateway URL.</param>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier, or <c>null</c> to auto-generate.</param>
            <param name="deviceId">The device identifier, or <c>null</c> to auto-generate.</param>
            <param name="clientId">The client identifier, or <c>null</c> to auto-generate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Client.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Client" /> class.
            </summary>
            <param name="gatewayUrl">The gateway URL.</param>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier, or <c>null</c> to auto-generate.</param>
            <param name="deviceId">The device identifier, or <c>null</c> to auto-generate.</param>
            <param name="clientId">The client identifier, or <c>null</c> to auto-generate.</param>
            <param name="roles">The roles, if any.</param>
        </member>
        <member name="M:FM.LiveSwitch.Client.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Client" /> class.
            </summary>
            <param name="gatewayUrl">The gateway URL.</param>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier, or <c>null</c> to auto-generate.</param>
            <param name="deviceId">The device identifier, or <c>null</c> to auto-generate.</param>
            <param name="clientId">The client identifier, or <c>null</c> to auto-generate.</param>
            <param name="roles">The roles, if any.</param>
            <param name="region">The region, if any.</param>
        </member>
        <member name="M:FM.LiveSwitch.Client.Update(FM.LiveSwitch.ClientConfig)">
            <summary>
            Updates your client configuration.
            </summary>
            <param name="clientConfig">The new client configuration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Client.Register(System.String)">
            <summary>
            Registers with the signalling server.
            </summary>
            <param name="token">The auth token.</param>
            <returns>
            A future with an array of initial channels as instructed by the auth token.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Client.Unregister">
            <summary>
            Unregisters with the signalling server.
            </summary>
            <returns>
            A future that resolves when successfully unregistered.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Client.Join(System.String)">
            <summary>
            Joins a channel.
            </summary>
            <param name="token">The auth token.</param>
            <returns>
            A future with the joined channel.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Client.Join(System.String,System.String)">
            <summary>
            Joins a channel.
            </summary>
            <param name="channelId">The channel identifier.</param>
            <param name="token">The auth token.</param>
            <returns>
            A future with the joined channel.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Client.Leave(System.String)">
            <summary>
            Leaves a channel.
            </summary>
            <param name="channelId">The channel identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Client.CloseAll">
            <summary>
            Closes all active connections in all channels.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Invitation">
            <summary>
            An invitation to join a channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Invitation.ChannelId">
            <summary>
            Gets the channel id that this invitation is for.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Invitation.UserId">
            <summary>
            Gets the user id of the user being invited.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Invitation.Protocol">
            <summary>
            Gets the protocol that this user was invited on.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Invitation.Reason">
            <summary>
            Gets the reason for a state if available.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Invitation.InviteKey">
            <summary>
            Gets the key for this invitation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Invitation.State">
            <summary>
            Gets the current state of the invitation. See InviteFeedbackState for possible values.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Invitation.OnStateChanging">
            <summary>
            Raised when the state changes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Invitation.Cancel">
            <summary>
            Attempts to cancel the invitation. May fail if the invitation is acted upon before being canceled.
            </summary>
            <returns>A promise that resolves if the cancel succeeds.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ManagedConnectionCollection">
            <summary>
            A collection of connections.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnectionCollection.GetById(System.String)">
            <summary>
            Gets a connection by ID.
            </summary>
            <param name="id">The identifier.</param>
            <returns>The connection, or <c>null</c> if the connection does not exist.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnectionCollection.GetByRemoteId(System.String)">
            <summary>
            Gets a connection by remote ID.
            </summary>
            <param name="id">The identifier.</param>
            <returns>The connection, or <c>null</c> if the connection does not exist.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnectionCollection.TryGetById(System.String,FM.LiveSwitch.ManagedConnection@)">
            <summary>
            Tries to get a connection by ID.
            </summary>
            <param name="id">The identifier.</param>
            <param name="connection">The connection.</param>
            <returns>The connection, or <c>null</c> if the connection does not exist.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnectionCollection.TryGetByRemoteId(System.String,FM.LiveSwitch.ManagedConnection@)">
            <summary>
            Tries to get a connection by remote ID.
            </summary>
            <param name="id">The identifier.</param>
            <param name="connection">The connection.</param>
            <returns>The connection, or <c>null</c> if the connection does not exist.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnectionCollection.AddSuccess(FM.LiveSwitch.ManagedConnection)">
            <summary>
            Invoked when an element is added to the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnectionCollection.RemoveSuccess(FM.LiveSwitch.ManagedConnection)">
            <summary>
            Invoked when an element is removed from the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnectionCollection.ArrayFromList(System.Collections.Generic.List{FM.LiveSwitch.ManagedConnection})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnectionCollection.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.ManagedConnection">
            <summary>
            A managed connection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.DefaultStatsInterval">
            <summary>
            Gets or sets the default stats interval in milliseconds.
            The initial value is 10,000 (10 seconds).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.Info">
            <summary>
            Gets the connection info.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.StatsInterval">
            <summary>
            Gets or sets the stats interval in milliseconds.
            The default value is 10,000 (10 seconds).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.Config">
            <summary>
            Gets the current configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.LocalAudioMuted">
            <summary>
            Gets whether the local audio is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.LocalVideoMuted">
            <summary>
            Gets whether the local video is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteAudioMuted">
            <summary>
            Gets or sets whether the remote audio is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteVideoMuted">
            <summary>
            Gets or sets whether the remote video is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.LocalAudioDisabled">
            <summary>
            Gets if local audio is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.LocalVideoDisabled">
            <summary>
            Gets if local video is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.LocalDataDisabled">
            <summary>
            Gets if local data is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteAudioDisabled">
            <summary>
            Gets if remote audio is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteVideoDisabled">
            <summary>
            Gets if remote video is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteDataDisabled">
            <summary>
            Gets if remote data is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.AudioDirection">
            <summary>
            Gets thes audio direction. Null if disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.VideoDirection">
            <summary>
            Gets the video direction. Null if disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.DataDirection">
            <summary>
            Gets the data direction. Null if disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteAudioEncoding">
            <summary>
            Gets or sets the remote audio encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteVideoEncoding">
            <summary>
            Gets or sets the remote video encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.LocalAudioFormats">
            <summary>
            Gets or sets the local audio formats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.LocalVideoFormats">
            <summary>
            Gets or sets the local video formats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteAudioFormats">
            <summary>
            Gets or sets the remote audio formats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteVideoFormats">
            <summary>
            Gets or sets the remote video formats.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ManagedConnection.OnRemoteAudioEncodingSwitch">
            <summary>
            Raised when the remote audio encoding is switched by the server.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ManagedConnection.OnRemoteVideoEncodingSwitch">
            <summary>
            Raised when the remote video encoding is switched by the server.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ManagedConnection.OnRemoteUpdate">
            <summary>
            Raised when a remote connection has been updated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.InternalConnection">
            <summary>
            Gets or sets the raw connection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.ApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.ChannelId">
            <summary>
            Gets the channel identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.UserId">
            <summary>
            Gets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.DeviceId">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.ClientId">
            <summary>
            Gets the client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.Id">
            <summary>
            Gets the connection identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.CanonicalName">
            <summary>
            Gets the canonical name for this Connection.
            Getting the value of Connection.CanonicalName is deprecated. Get the value of MediaStream.LocalCanonicalName instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.ExternalId">
            <summary>
            Gets the external connection identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.MediaId">
            <summary>
            Gets or sets the media identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteMediaId">
            <summary>
            Gets or sets the remote media identifier, if available.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteConnectionId">
            <summary>
            Gets or sets the remote connection identifier, if available.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.State">
            <summary>
            Gets the state of the connection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.SignallingState">
            <summary>
            Gets the state of the signalling.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.IceConnectionState">
            <summary>
            Gets the state of the ice connection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.GatheringState">
            <summary>
            Gets the state of the ice gathering.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ManagedConnection.OnStateChange">
            <summary>
            Raised when the connection state changes.
            Parameters:
                - connection - the connection
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ManagedConnection.OnSignallingStateChange">
            <summary>
            Raised when the signalling state changes.
            Parameters:
                - connection - the connection
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ManagedConnection.OnIceConnectionStateChange">
            <summary>
            Raised when the ICE connection state changes.
            Parameters:
                - connection - the connection
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ManagedConnection.OnGatheringStateChange">
            <summary>
            Raised when the ICE gathering state changes.
            Parameters:
                - connection - the connection
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ManagedConnection.OnLocalDescription">
            <summary>
            Raised when the local description is ready.
            Parameters:
                - connection - the connection
                - description - the local description
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ManagedConnection.OnRemoteDescription">
            <summary>
            Raised when the remote description is ready.
            Parameters:
                - connection - the connection
                - description - the remote description
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ManagedConnection.OnLocalCandidate">
            <summary>
            Raised when a local candidate is ready.
            Parameters:
                - connection - the connection
                - candidate - the local candidate
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ManagedConnection.OnRemoteCandidate">
            <summary>
            Raised when a remote candidate is ready.
            Parameters:
                - connection - the connection
                - candidate - the remote candidate
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ManagedConnection.OnStats">
            <summary>
            Raised when last connection stats obtained.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.Error">
            <summary>
            Gets the error, if an error exists.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.BundlePolicy">
            <summary>
            Gets or sets the Bundle Policy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.IceGatherPolicy">
            <summary>
            Gets or sets the ICE gather policy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.IceServer">
            <summary>
            Gets or sets the ICE server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.IceServers">
            <summary>
            Gets or sets the ICE servers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.TrickleIcePolicy">
            <summary>
            Gets or sets the trickle-ICE policy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.IcePolicy">
            <summary>
            Gets or sets policy indicating whether ICE is required (and enabled) or disabled (and not required for this connection).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.KeepAliveInterval">
            <summary>
            Gets or sets a value indicating how many
            milliseconds must elapse between STUN
            keep-alive binding requests.
            Defaults to 1000.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.PrivateIPAddress">
            <summary>
            Gets or sets the private IP address of this
            device. If set, this will bypass the local
            network discovery and use this as the sole
            host candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.PrivateIPAddresses">
            <summary>
            Gets or sets the private IP address of this
            device. If set, this will bypass the local
            network discovery and use this as the sole
            host candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.IcePortRange">
            <summary>
            Gets or sets the ICE port range.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.IceAddressTypes">
            <summary>
            Gets or sets the ICE address types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.TcpConnectTimeout">
            <summary>
            Gets or sets connection timeout for stream sockets in ms.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.TurnAllocateRequestLimit">
            <summary>
            Gets or sets the limit on the the number of Turn Allocate request messages when trying to establish allocation on a Turn server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.StunBindingRequestLimit">
            <summary>
            Gets or sets the limit on the the number of Turn Allocate request messages when trying to establish allocation on a Turn server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.StunRequestTimeout">
            <summary>
            Gets or sets the timeout for individual Stun (and Turn) request messages in ms.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.IceRole">
            <summary>
            Gets the ICE role.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.DtlsServerMinVersion">
            <summary>
            Gets or sets the minimum protocol version to
            allow when in the DTLS server role. Defaults
            to <see cref="F:FM.LiveSwitch.DtlsProtocolVersion.Dtls10"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.DtlsServerMaxVersion">
            <summary>
            Gets or sets the maximum protocol version to
            allow when in the DTLS server role. Defaults
            to <see cref="F:FM.LiveSwitch.DtlsProtocolVersion.Dtls12"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.DtlsClientVersion">
            <summary>
            Gets or sets the protocol version to use
            when in the DTLS client role. Defaults
            to <see cref="F:FM.LiveSwitch.DtlsProtocolVersion.Dtls10"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.DefaultLocalDtlsCertificate">
            <summary>
            Gets or sets the default local DTLS certificate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.DefaultLocalDtlsCertificates">
            <summary>
            Gets or sets the default local DTLS certificates.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.LocalDtlsCertificate">
            <summary>
            Gets or sets the local DTLS certificate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.LocalDtlsCertificates">
            <summary>
            Gets or sets the local DTLS certificates.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.DtlsCipherSuites">
            <summary>
            Gets or sets the DTLS cipher suites to use.
            Defaults to:
            DtlsCipherSuite.EcdheEcdsaAes128Sha,
            DtlsCipherSuite.EcdheEcdsaAes128GcmSha256,
            DtlsCipherSuite.EcdheEcdsaAes128CbcSha256,
            DtlsCipherSuite.EcdheRsaAes128Sha,
            DtlsCipherSuite.EcdheRsaAes128GcmSha256,
            DtlsCipherSuite.EcdheRsaAes128CbcSha256,
            DtlsCipherSuite.RsaAes128Sha,
            DtlsCipherSuite.RsaAes128GcmSha256,
            DtlsCipherSuite.RsaAes128CbcSha256,
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.MultiplexPolicy">
            <summary>
            Gets or sets the multiplex policy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.CreateDatagramSocket">
            <summary>
            Gets or sets a method that creates Datagram sockets. Optional. If not set, default OS UDP socket is used.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.CreateStreamSocket">
            <summary>
             Gets or sets a method that creates Stream sockets. Optional. If not set, default OS TCP socket is used.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.DisableAutomaticIceServers">
            <summary>
            Gets or sets whether to disable automatic ICE servers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.TestRoundTripTime">
            <summary>
            Gets or sets a fixed round-trip time (in milliseconds) to use in the network transport.
            FOR TESTING PURPOSES ONLY. Defaults to -1, which indicates that normal round-trip time
            calculations should be used.
            </summary>>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.TestReceivedRtpBuffer">
            <summary>
            Gets or sets a method that can be used to test and optionally modify inbound RTP buffers.
            FOR TESTING PURPOSES ONLY. Returning <c>null</c> will cause the buffer to be discarded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.TestSendingRtpBuffer">
            <summary>
            Gets or sets a method that can be used to test and optionally modify outbound RTP buffers.
            FOR TESTING PURPOSES ONLY. Returning <c>null</c> will cause the buffer to be discarded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.LocalDescription">
            <summary>
            Gets the local description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteDescription">
            <summary>
            Gets the remote description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.Type">
            <summary>
            Gets the connection type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteTag">
            <summary>
            Gets or sets the remote tag, if applicable.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.HasAudio">
            <summary>
            Gets whether this connection has an audio stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.HasVideo">
            <summary>
            Gets whether this connection has a video stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.HasData">
            <summary>
            Gets whether this connection has a data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.AudioStream">
            <summary>
            Gets the audio stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.VideoStream">
            <summary>
            Gets the video stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.DataStream">
            <summary>
            Gets the data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteClosed">
            <summary>
            Gets a value indicating whether the connection was
            closed by the remote host.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteFailed">
            <summary>
            Gets a value indicating whether the connection was
            failed by the remote host.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.RemoteRejected">
            <summary>
            Gets a value indicating whether the connection
            was rejected by the remote host.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.Send(FM.LiveSwitch.Message)">
            <summary>
            Sends a message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.GetStats">
            <summary>
            Gets the current connection stats.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConnection.LastStats">
            <summary>
            Gets the last cached connection stats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.IsMediaDirectionAllowed(System.String)">
            <summary>
            Gets a value indicating whether the given direction is allowed for this connection.
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.Update(FM.LiveSwitch.ConnectionConfig)">
            <summary>
            Updates the local description with any modified properties from the config and alerts the server.
            </summary>
            <param name="config">The config</param>
            <returns>A future that resolves when the renegotiation is complete.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.DoCreateUpdateMessage(FM.LiveSwitch.ConnectionConfig)">
            <summary>
            Creates an update message.
            </summary>
            <param name="config">The connection config.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.RaiseRemoteUpdate(FM.LiveSwitch.ConnectionInfo,FM.LiveSwitch.ConnectionInfo)">
            <summary>
            Raises the OnRemoteUpdate event.
            </summary>
            <param name="oldConnectionInfo">The old connection info.</param>
            <param name="newConnectionInfo">The new connection info.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.DoCreateCandidateMessage(FM.LiveSwitch.Candidate)">
            <summary>
            Creates a candidate message.
            </summary>
            <param name="candidate">The candidate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.DoCreateCloseMessage">
            <summary>
            Creates a close message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.Open">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.DoOpen">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.DoProcessMessage(FM.LiveSwitch.Message)">
            <summary>
            Processes a message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.ProcessAnswer(FM.LiveSwitch.Message)">
            <summary>
            Processes an answer.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.RaiseAudioBitrateRequest(FM.LiveSwitch.AudioStream,FM.LiveSwitch.BitrateRequest)">
            <summary>
            Raises an audio bitrate request.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="bitrateRequest">The bitrate request.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.RaiseVideoBitrateRequest(FM.LiveSwitch.VideoStream,FM.LiveSwitch.BitrateRequest)">
            <summary>
            Raises a video bitrate request.
            </summary>
            <param name="videoStream">The video stream.</param>
            <param name="bitrateRequest">The bitrate request.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.RaiseAudioBitrateNotification(FM.LiveSwitch.AudioStream,FM.LiveSwitch.BitrateNotification)">
            <summary>
            Raises an audio bitrate notification.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="bitrateNotification">The bitrate notification.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.RaiseVideoBitrateNotification(FM.LiveSwitch.VideoStream,FM.LiveSwitch.BitrateNotification)">
            <summary>
            Raises a video bitrate notification.
            </summary>
            <param name="videoStream">The video stream.</param>
            <param name="bitrateNotification">The bitrate notification.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConnection.ProcessLocalError(FM.LiveSwitch.Error)">
            <summary>
            Processes a local failure.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="T:FM.LiveSwitch.LayoutUtility">
            <summary>
            Utility to assist with managing the layout of a combined video feed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutUtility.FloatLocalPreview(FM.LiveSwitch.Layout,FM.LiveSwitch.VideoLayout,System.String)">
            <summary>
            Floats the local preview over the combined video feed.
            </summary>
            <param name="layout">The layout.</param>
            <param name="videoLayout">The video layout.</param>
            <param name="localConnectionId">The local connection identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutUtility.FloatLocalPreview(FM.LiveSwitch.Layout,FM.LiveSwitch.VideoLayout,System.String,System.String)">
            <summary>
            Floats the local preview over the combined video feed.
            </summary>
            <param name="layout">The layout.</param>
            <param name="videoLayout">The video layout.</param>
            <param name="localConnectionId">The local connection identifier.</param>
            <param name="viewId">The view id to compare with.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutUtility.FloatLocalPreview``1(FM.LiveSwitch.Layout,FM.LiveSwitch.VideoLayout,System.String,System.String,FM.LiveSwitch.IViewSink{``0})">
            <summary>
            Floats the local preview over the combined video feed.
            </summary>
            <param name="layout">The layout.</param>
            <param name="videoLayout">The video layout.</param>
            <param name="localConnectionId">The local connection identifier.</param>
            <param name="viewId">The view id to compare with.</param>
            <param name="localViewSink">The local view sink.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutUtility.FloatLocalPreview(FM.LiveSwitch.LayoutFrame,FM.LiveSwitch.LayoutFrame,FM.LiveSwitch.VideoLayout,System.String)">
            <summary>
            Floats the local preview over the combined video feed.
            </summary>
            <param name="localFrame">The local frame.</param>
            <param name="remoteFrame">The remote frame.</param>
            <param name="videoLayout">The video layout.</param>
            <param name="localConnectionId">The local connection identifier.</param>
        </member>
        <member name="T:FM.LiveSwitch.McuConnection">
            <summary>
            An MCU connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.McuConnection.DoCreateOfferMessage(FM.LiveSwitch.SessionDescription)">
            <summary>
            Creates an offer message.
            </summary>
            <param name="offer">The offer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.McuConnection.IsMediaDirectionAllowed(System.String)">
            <summary>
            Gets a value indicating whether the given media direction is allowed for this connection.
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.PeerConnection">
            <summary>
            A peer connection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PeerConnection.Role">
            <summary>
            Gets the role.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PeerConnection.RemoteClientInfo">
            <summary>
            Gets the remote client information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnection.Send(FM.LiveSwitch.Message)">
            <summary>
            Sends a message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnection.DoCreateCandidateMessage(FM.LiveSwitch.Candidate)">
            <summary>
            Creates a candidate message.
            </summary>
            <param name="candidate">The candidate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnection.DoCreateCloseMessage">
            <summary>
            Creates a close message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnection.DoOpen">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnection.ProcessAnswer(FM.LiveSwitch.Message)">
            <summary>
            Processes an answer.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnection.DoCreateUpdateMessage(FM.LiveSwitch.ConnectionConfig)">
            <summary>
            Creates an update message.
            </summary>
            <param name="config">The connection config.</param>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnection.DoProcessMessage(FM.LiveSwitch.Message)">
            <summary>
            Processes a message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnection.IsMediaDirectionAllowed(System.String)">
            <summary>
            Gets a value indicating whether the given media direction is allowed for this connection.
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.PeerConnectionOffer">
            <summary>
            A peer connection offer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PeerConnectionOffer.Channel">
            <summary>
            Gets the channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PeerConnectionOffer.RemoteClientInfo">
            <summary>
            Gets the remote client information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PeerConnectionOffer.RemoteConnectionId">
            <summary>
            Gets the remote connection identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PeerConnectionOffer.ConnectionTag">
            <summary>
            Gets the connection tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PeerConnectionOffer.Offer">
            <summary>
            Gets the offer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PeerConnectionOffer.HasAudio">
            <summary>
            Gets a value indicating whether the offer
            includes an audio description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PeerConnectionOffer.HasVideo">
            <summary>
            Gets a value indicating whether the offer
            includes a video description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PeerConnectionOffer.HasData">
            <summary>
            Gets a value indicating whether the offer
            includes a data description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PeerConnectionOffer.RemoteClosed">
            <summary>
            Gets a value indicating whether the connection
            was closed by the remote host.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PeerConnectionOffer.RemoteFailed">
            <summary>
            Gets a value indicating whether the connection
            was failed by the remote host.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.PeerConnectionOffer.OnCancel">
            <summary>
            Raised when the offer is withdrawn.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnectionOffer.Accept(FM.LiveSwitch.AudioStream)">
            <summary>
            Accepts the offer.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnectionOffer.Accept(FM.LiveSwitch.VideoStream)">
            <summary>
            Accepts the offer.
            </summary>
            <param name="videoStream">The video stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnectionOffer.Accept(FM.LiveSwitch.DataStream)">
            <summary>
            Accepts the offer.
            </summary>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnectionOffer.Accept(FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream)">
            <summary>
            Accepts the offer.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnectionOffer.Accept(FM.LiveSwitch.AudioStream,FM.LiveSwitch.DataStream)">
            <summary>
            Accepts the offer.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnectionOffer.Accept(FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream)">
            <summary>
            Accepts the offer.
            </summary>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnectionOffer.Accept(FM.LiveSwitch.AudioStream,FM.LiveSwitch.VideoStream,FM.LiveSwitch.DataStream)">
            <summary>
            Accepts the offer.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="videoStream">The video stream.</param>
            <param name="dataStream">The data stream.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PeerConnectionOffer.Reject">
            <summary>
            Rejects this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.PeerRole">
            <summary>
            A peer role.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.PeerRole.Offerer">
            <summary>
            The offering role.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.PeerRole.Answerer">
            <summary>
            The answering role.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ServerConnection">
            <summary>
            A server connection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ServerConnection.InboundAudioBitrate">
            <summary>
            Gets the current inbound audio bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ServerConnection.InboundVideoBitrate">
            <summary>
            Gets the current inbound video bitrate.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ServerConnection.OnInboundAudioBitrateChange">
            <summary>
            Raised when the inbound audio bitrate changes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.ServerConnection.OnInboundVideoBitrateChange">
            <summary>
            Raised when the inbound video bitrate changes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ServerConnection.DoCreateCandidateMessage(FM.LiveSwitch.Candidate)">
            <summary>
            Creates a candidate message.
            </summary>
            <param name="candidate">The candidate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ServerConnection.DoCreateCloseMessage">
            <summary>
            Creates a close message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ServerConnection.DoCreateOfferMessage(FM.LiveSwitch.SessionDescription)">
            <summary>
            Creates an offer message.
            </summary>
            <param name="offer">The offer.</param>
        </member>
        <member name="M:FM.LiveSwitch.ServerConnection.DoOpen">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ServerConnection.ProcessAnswer(FM.LiveSwitch.Message)">
            <summary>
            Processes an answer.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ServerConnection.RaiseAudioBitrateNotification(FM.LiveSwitch.AudioStream,FM.LiveSwitch.BitrateNotification)">
            <summary>
            Raises an audio bitrate notification.
            </summary>
            <param name="audioStream">The audio stream.</param>
            <param name="bitrateNotification">The bitrate notification.</param>
        </member>
        <member name="M:FM.LiveSwitch.ServerConnection.RaiseVideoBitrateNotification(FM.LiveSwitch.VideoStream,FM.LiveSwitch.BitrateNotification)">
            <summary>
            Raises a video bitrate notification.
            </summary>
            <param name="videoStream">The video stream.</param>
            <param name="bitrateNotification">The bitrate notification.</param>
        </member>
        <member name="M:FM.LiveSwitch.ServerConnection.DoProcessMessage(FM.LiveSwitch.Message)">
            <summary>
            Processes a message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.SfuConnection">
            <summary>
            An SFU connection.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.SfuDownstreamConnection">
            <summary>
            An SFU receiving connection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SfuDownstreamConnection.RemoteConnectionInfo">
            <summary>
            Gets the remote connection information, if available.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SfuDownstreamConnection.DoCreateOfferMessage(FM.LiveSwitch.SessionDescription)">
            <summary>
            Creates an offer message.
            </summary>
            <param name="offer">The offer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SfuDownstreamConnection.IsMediaDirectionAllowed(System.String)">
            <summary>
            Gets a value indicating whether the given media direction is allowed for this connection.
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.SfuUpstreamConnection">
            <summary>
            An SFU sending connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SfuUpstreamConnection.DoCreateOfferMessage(FM.LiveSwitch.SessionDescription)">
            <summary>
            Creates an offer message.
            </summary>
            <param name="offer">The offer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.SfuUpstreamConnection.IsMediaDirectionAllowed(System.String)">
            <summary>
            Gets a value indicating whether the given media direction is allowed for this connection.
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.ChannelConfig">
            <summary>
            Channel configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelConfig.Recording">
            <summary>
            Gets or sets recording to be enabled or disabled.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelConfig.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelConfig.ToJson(FM.LiveSwitch.ChannelConfig)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="clientConfig">The client config to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelConfig.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="clientConfigJson">The JSON to deserialize.</param>
            <returns>
            The deserialized client config.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.ClientConfig">
            <summary>
            Client configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientConfig.UserAlias">
            <summary>
            Gets or sets the User Alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientConfig.DeviceAlias">
            <summary>
            Gets or sets the Device Alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientConfig.Tag">
            <summary>
            Gets or sets the Tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientConfig.Roles">
            <summary>
            Gets or sets the Roles.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ClientConfig.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ClientConfig.ToJson(FM.LiveSwitch.ClientConfig)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="clientConfig">The client config to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientConfig.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="clientConfigJson">The JSON to deserialize.</param>
            <returns>
            The deserialized client config.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.ConnectionConfig">
            <summary>
            Connection configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.LocalAudioMuted">
            <summary>
            Gets or sets if the local audio is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.LocalVideoMuted">
            <summary>
            Gets or sets if the local video is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.LocalAudioDisabled">
            <summary>
            Gets or sets if local audio is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.LocalVideoDisabled">
            <summary>
            Gets or sets if local video is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.LocalDataDisabled">
            <summary>
            Gets or sets if local data is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.RemoteAudioDisabled">
            <summary>
            Gets or sets if remote audio is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.RemoteVideoDisabled">
            <summary>
            Gets or sets if remote video is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.RemoteDataDisabled">
            <summary>
            Gets or sets if remote data is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.AudioDirection">
            <summary>
            Gets or sets the audio direction ("sendrecv", "sendonly", "recvonly", or "inactive").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.VideoDirection">
            <summary>
            Gets or sets the video direction ("sendrecv", "sendonly", "recvonly", or "inactive").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.DataDirection">
            <summary>
            Gets or sets the data direction ("sendrecv", "sendonly", "recvonly", or "inactive").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.Tag">
            <summary>
            Gets or sets the tag for this connection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.RemoteAudioEncoding">
            <summary>
            Gets or sets the remote audio encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.RemoteVideoEncoding">
            <summary>
            Gets or sets the remote video encoding.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionConfig.#ctor">
            <summary>
            Create an instance of a ConnectionConfig.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionConfig.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionConfig.ToJson(FM.LiveSwitch.ConnectionConfig)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="connectionConfig">The connection config to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionConfig.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="connectionConfigJson">The JSON to deserialize.</param>
            <returns>
            The deserialized connection config.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.ApplicationInfo">
            <summary>
            Application information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ApplicationInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ApplicationInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.ApplicationInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ApplicationInfo.ToJson(FM.LiveSwitch.ApplicationInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="application">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ApplicationInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a ApplicationInfo.
            </summary>
            <param name="applicationInfoJson">The serialized Json.</param>
            <returns>The deserialized ApplicationInfo.</returns>
        </member>
        <member name="T:FM.LiveSwitch.CandidatePairReport">
            <summary>
            Candidate pair report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.BytesSent">
            <summary>
            Gets or sets the number of candidate pair bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.BytesReceived">
            <summary>
            Gets or sets the number of candidate pair bytes received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.RequestsSent">
            <summary>
            Gets or sets the number of candidate pair requests sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.RequestsReceived">
            <summary>
            Gets or sets the number of candidate pair requests received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.ResponsesSent">
            <summary>
            Gets or sets the number of candidate pair responses sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.ResponsesReceived">
            <summary>
            Gets or sets the number of candidate pair responses received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.ConsentRequestsSent">
            <summary>
            Gets or sets the number of candidate pair consent requests sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.ConsentRequestsReceived">
            <summary>
            Gets or sets the number of candidate pair consent requests received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.ConsentResponsesSent">
            <summary>
            Gets or sets the number of candidate pair consent responses sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.ConsentResponsesReceived">
            <summary>
            Gets or sets the number of candidate pair consent responses received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.TotalRoundTripTime">
            <summary>
            Gets or sets the candidate pair total round trip time in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.CurrentRoundTripTime">
            <summary>
            Gets or sets the candidate pair current round trip time in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CandidatePairReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.ToJson(FM.LiveSwitch.CandidatePairReport)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The serialized instance JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The instance JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.ToJsonArray(FM.LiveSwitch.CandidatePairReport[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="array">The array.</param>
            <returns>The serialized array JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.FromJsonArray(System.String)">
            <summary>
            Derializes an array from JSON.
            </summary>
            <param name="arrayJson">The array JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.ChannelReport">
            <summary>
            Channel report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelReport.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelReport.MessagesSent">
            <summary>
            Gets or sets the number of messages sent on this channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelReport.MessageBytesSent">
            <summary>
            Gets or sets the number of message bytes sent on this channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelReport.MessagesReceived">
            <summary>
            Gets or sets the number of messages received on this channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelReport.MessageBytesReceived">
            <summary>
            Gets or sets the number of message bytes received on this channel.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ChannelReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.ToJson(FM.LiveSwitch.ChannelReport)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance to serialize.</param>
            <returns>The instance JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The instance JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.ToJsonArray(FM.LiveSwitch.ChannelReport[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="array">The array.</param>
            <returns>The serialized array JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.FromJsonArray(System.String)">
            <summary>
            Derializes an array from JSON.
            </summary>
            <param name="arrayJson">The array JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.DataStreamReport">
            <summary>
            Data stream report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamReport.MessagesSent">
            <summary>
            Gets or sets the number of messages sent on this data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamReport.BytesSent">
            <summary>
            Gets or sets the number of bytes sent on this data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamReport.MessagesReceived">
            <summary>
            Gets or sets the number of messages received on this data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamReport.BytesReceived">
            <summary>
            Gets or sets the number of bytes received on this data stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataStreamReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamReport.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamReport.ToJson(FM.LiveSwitch.DataStreamReport)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="dataStreamReport">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamReport.FromJson(System.String)">
            <summary>
            Deserializes Json to a DataStreamReport.
            </summary>
            <param name="dataStreamReportJson">The serialized Json.</param>
            <returns>The deserialized DataChannelReport.</returns>
        </member>
        <member name="T:FM.LiveSwitch.EventBatch">
            <summary>
            An event batch.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventBatch.Events">
            <summary>
            Gets or sets the events.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventBatch.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventBatch.ToJson(FM.LiveSwitch.EventBatch)">
            <summary>
            Serializes an instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventBatch.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventBatch.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.EventBatch.DeserializeProperty(System.String,System.String)">
            <summary>
            Deserializes the property.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.EventType">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.GatewayStarted">
            <summary>
            Gets the 'gateway.started' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.GatewayStopped">
            <summary>
            Gets the 'gateway.stopped' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.GatewayStats">
            <summary>
            Gets the 'gateway.stats' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.MediaServerStarted">
            <summary>
            Gets the 'mediaserver.started' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.MediaServerStopped">
            <summary>
            Gets the 'mediaserver.stopped' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.MediaServerRegistered">
            <summary>
            Gets the 'mediaserver.registered' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.MediaServerUnregistered">
            <summary>
            Gets the 'mediaserver.unregistered' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.MediaServerStats">
            <summary>
            Gets the 'mediaserver.stats' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.SipConnectorStarted">
            <summary>
            Gets the 'sipconnector.started' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.SipConnectorStopped">
            <summary>
            Gets the 'sipconnector.stopped' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.SipConnectorRegistered">
            <summary>
            Gets the 'sipconnector.registered' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.SipConnectorUnregistered">
            <summary>
            Gets the 'sipconnector.unregistered' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.SipConnectorStats">
            <summary>
            Gets the 'sipconnector.stats' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ClientRegistered">
            <summary>
            Gets the 'client.registered' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ClientUnregistered">
            <summary>
            Gets the 'client.unregistered' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ClientStats">
            <summary>
            Gets the 'client.stats' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ClientUpdated">
            <summary>
            Gets the 'client.updated' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ChannelActivated">
            <summary>
            Gets the 'channel.activated' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ChannelDeactivated">
            <summary>
            Gets the 'channel.deactivated' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ChannelClientJoined">
            <summary>
            Gets the 'channel.client.joined' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ChannelClientLeft">
            <summary>
            Gets the 'channel.client.left' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionInitializing">
            <summary>
            Gets the 'connection.initializing' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionConnecting">
            <summary>
            Gets the 'connection.connecting' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionConnected">
            <summary>
            Gets the 'connection.connected' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionClosing">
            <summary>
            Gets the 'connection.closing' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionClosed">
            <summary>
            Gets the 'connection.closed' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionFailing">
            <summary>
            Gets the 'connection.failing' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionFailed">
            <summary>
            Gets the 'connection.failed' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionStats">
            <summary>
            Gets the 'connection.stats' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionUpdated">
            <summary>
            Gets the 'connection.updated' event type string.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventType.FromConnectionState(FM.LiveSwitch.ConnectionState)">
            <summary>
            Converts a connection state enum value into an event type.
            </summary>
            <param name="connectionState">The connection state.</param>
            <returns>An event type.</returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaComponentReport">
            <summary>
            Media component report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentReport.NackCount">
            <summary>
            Gets or sets the number of negative-acknowledgement (NACK) messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentReport.PliCount">
            <summary>
            Gets or sets the number of picture loss indication (PLI) messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentReport.FirCount">
            <summary>
            Gets or sets the number of full intra refresh (FIR) messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentReport.LrrCount">
            <summary>
            Gets or sets the number of layer refresh request (LRR) messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentReport.SliCount">
            <summary>
            Gets or sets the number of slice loss indication (SLI) messages sent.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaComponentReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaTrackReport">
            <summary>
            Media track report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.MaxBitrate">
            <summary>
            Gets or sets the maximum bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.MinBitrate">
            <summary>
            Gets or sets the minimum bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.Bitrate">
            <summary>
            Gets or sets the bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FrameWidth">
            <summary>
            Gets or sets the frame width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FrameHeight">
            <summary>
            Gets or sets the frame height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FrameRate">
            <summary>
            Gets or sets the frame rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FramesSent">
            <summary>
            Gets or sets the number of frames sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FramesReceived">
            <summary>
            Gets or sets the number of frames received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FramesDropped">
            <summary>
            Gets or sets the number of frames dropped.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FramesCorrupted">
            <summary>
            Gets or sets the number of frames corrupted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FramesDecoded">
            <summary>
            Gets or sets the number of frames decoded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FramesEncoded">
            <summary>
            Gets or sets the number of frames encoded.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaTrackReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.ToJson(FM.LiveSwitch.MediaTrackReport)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The serialized instance JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The instance JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.ToJsonArray(FM.LiveSwitch.MediaTrackReport[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="array">The array.</param>
            <returns>The serialized array JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.FromJsonArray(System.String)">
            <summary>
            Derializes an array from JSON.
            </summary>
            <param name="arrayJson">The array JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.ChannelClaim">
            <summary>
            A channel claim.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.Id">
            <summary>
            Gets or sets the channel identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.Broadcast">
            <summary>
            Gets or sets if this is a broadcast channel or not.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisableSendMessage">
            <summary>
            Gets or sets whether the user is NOT authorized to send messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisablePeer">
            <summary>
            Gets or sets whether the user is NOT authorized to create peer connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisableSfu">
            <summary>
            Gets or sets whether the user is NOT authorized to create SFU connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisableMcu">
            <summary>
            Gets or sets whether the user is NOT authorized to create MCU connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisableSendAudio">
            <summary>
            Gets or sets whether the user is NOT authorized to send audio.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisableSendVideo">
            <summary>
            Gets or sets whether the user is NOT authorized to send video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisableSendData">
            <summary>
            Gets or sets whether the user is NOT authorized to send data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisableRemoteClientEvents">
            <summary>
            Gets or sets whether to disable the NotifyJoin, NotifyLeave, and NotifyUpdate messages and events.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.AudioReceiveWhitelist">
            <summary>
            Gets or sets a whitelist of roles whose member's audio can be received from. Null disables the whitelist whereas an empty list
            disables all receiving.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.VideoReceiveWhitelist">
            <summary>
            Gets or sets a whitelist of roles whose member's video can be received from. Null disables the whitelist whereas an empty list
            disables all receiving.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DataReceiveWhitelist">
            <summary>
            Gets or sets a whitelist of roles whose member's data can be received from. Null disables the whitelist whereas an empty list
            disables all receiving.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.Action">
            <summary>
            Gets or sets the action of this channel claim. Possible values are in the <see cref="T:FM.LiveSwitch.ClaimAction"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.CanUpdate">
            <summary>
            Gets or sets whether the user is authorized to update a media server channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.CanKick">
            <summary>
            Gets or sets whether the user is authorized kick other users from this channel.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelClaim.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ChannelClaim"/> class.
            </summary>
            <param name="id">The channel identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelClaim.ToJson">
            <summary>
            Serializes this channel claim to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelClaim.ToJson(FM.LiveSwitch.ChannelClaim)">
            <summary>
            Serializes a channel claim to JSON.
            </summary>
            <param name="channelClaim">The channel claim to serialize.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelClaim.FromJson(System.String)">
            <summary>
            Deserializes a channel claim from JSON.
            </summary>
            <param name="channelClaimJson">The channel claim JSON.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelClaim.ToJsonArray(FM.LiveSwitch.ChannelClaim[])">
            <summary>
            Serializes an array of channel claims to JSON.
            </summary>
            <param name="channelClaims">The channel claims.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelClaim.FromJsonArray(System.String)">
            <summary>
            Deserializes an array of channel claims from JSON.
            </summary>
            <param name="channelClaimsJson">The channel claims JSON.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.ChannelInfo">
            <summary>
            Channel information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelInfo.ApplicationId">
            <summary>
            Gets or sets the application identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelInfo.Recording">
            <summary>
            Gets or sets whether the channel is recording.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelInfo.Report">
            <summary>
            Gets or sets the channel report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelInfo.ToJson(FM.LiveSwitch.ChannelInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="channel">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a ChannelInfo.
            </summary>
            <param name="channelInfoJson">The serialized Json.</param>
            <returns>The deserialized ChannelInfo.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ClientInfo">
            <summary>
            Client information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.Version">
            <summary>
            Gets or sets the client version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.ApplicationId">
            <summary>
            Gets or sets the application identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.UserAlias">
            <summary>
            Gets or sets the user alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.DeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.DeviceAlias">
            <summary>
            Gets or sets the device alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.ExternalId">
            <summary>
            Gets or sets the client external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.Tag">
            <summary>
            Gets or sets the client tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.Region">
            <summary>
            Gets or sets the client region.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.Roles">
            <summary>
            Gets or sets the client roles.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.SourceLanguage">
            <summary>
            Gets or sets the client source language.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.MachineName">
            <summary>
            Gets or sets the client machine name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.CoreCount">
            <summary>
            Gets or sets the client core count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.PhysicalMemory">
            <summary>
            Gets or sets the connector physical memory.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.OperatingSystem">
            <summary>
            Gets or sets the client operating system.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.OperatingSystemVersion">
            <summary>
            Gets or sets the client operating system version.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.Architecture">
            <summary>
            Gets or sets the client architecture.
            </summary>​
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ClientInfo" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ClientInfo" /> class.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="id">The client identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ClientInfo" /> class.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="userAlias">The user alias.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="deviceAlias">The device alias.</param>
            <param name="id">The client identifier.</param>
            <param name="tag">The client tag.</param>
            <param name="roles">The client roles.</param>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ClientInfo" /> class.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="userAlias">The user alias.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="deviceAlias">The device alias.</param>
            <param name="id">The client identifier.</param>
            <param name="tag">The client tag.</param>
            <param name="roles">The client roles.</param>
            <param name="region">The client's region.</param>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.ToJson(FM.LiveSwitch.ClientInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="clientInfo">The client info to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="clientInfoJson">The JSON to deserialize.</param>
            <returns>
            The deserialized client info.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.ToJsonArray(FM.LiveSwitch.ClientInfo[])">
            <summary>
            Serializes an array of instances to JSON.
            </summary>
            <param name="clientInfos">The client infos to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array of instances from JSON.
            </summary>
            <param name="clientInfosJson">The JSON to deserialize.</param>
            <returns>
            The deserialized client infos.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.IsEquivalent(System.String,System.String,System.String)">
            <summary>
            Tests equivalency.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="id">The client identifier.</param>
            <returns>
              <c>true</c> if equivalent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.IsEquivalent(FM.LiveSwitch.ClientInfo)">
            <summary>
            Tests for equivalency.
            </summary>
            <param name="clientInfo">The client information.</param>
            <returns>
              <c>true</c> if equivalent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.IsEquivalent(FM.LiveSwitch.ConnectionInfo)">
            <summary>
            Tests for equivalency.
            </summary>
            <param name="connectionInfo">The connection information.</param>
            <returns>
              <c>true</c> if equivalent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.ClientState">
            <summary>
            The state of a client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClientState.New">
            <summary>
            Indicates that the client is new and has not yet registered with the gateway.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClientState.Registering">
            <summary>
            Indicates that the client is registering with the gateway.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClientState.Registered">
            <summary>
            Indicates that the client is registered with the gateway.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClientState.Unregistering">
            <summary>
            Indicates that the client is unregistering with the gateway.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClientState.Unregistered">
            <summary>
            Indicates that the client is unregistered with the gateway.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ConnectionInfo">
            <summary>
            Connection information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.ApplicationId">
            <summary>
            Gets or sets the application identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.ChannelId">
            <summary>
            Gets or sets the channel identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.UserAlias">
            <summary>
            Gets or sets the user alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.DeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.DeviceAlias">
            <summary>
            Gets or sets the device alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.ClientTag">
            <summary>
            Gets or sets the client tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.ClientRoles">
            <summary>
            Gets or sets the client roles.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.ExternalId">
            <summary>
            Gets or sets the connection external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.State">
            <summary>
            Gets or sets the connection state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.Tag">
            <summary>
            Gets or sets the connection tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.Type">
            <summary>
            Gets or sets the connection type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.Recording">
            <summary>
            Gets or sets whether the connection is recording.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.Error">
            <summary>
            Gets or sets the connection error, if an error exists.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.MediaId">
            <summary>
            Gets or sets the media identifier, for MCU or SFU upstream connections.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.RemoteConnectionId">
            <summary>
            Gets or sets the remote connection identifier, for peer or SFU downstream connections.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.RemoteMediaId">
            <summary>
            Gets or sets the remote media identifier, for SFU downstream connections.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.AudioStream">
            <summary>
            Gets or sets the first connection audio stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.AudioStreams">
            <summary>
            Gets or sets the connection audio streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.VideoStream">
            <summary>
            Gets or sets the first connection video stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.VideoStreams">
            <summary>
            Gets or sets the connection video streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.DataStream">
            <summary>
            Gets or sets the connection data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.Transports">
            <summary>
            Gets or sets the connection transport information.
            This will be <c>null</c> if BUNDLE is inactive.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.HasAudio">
            <summary>
            Gets a value indicating whether the connection
            has an audio stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.HasVideo">
            <summary>
            Gets a value indicating whether the connection
            has a video stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.HasData">
            <summary>
            Gets a value indicating whether the connection
            has a data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.LocalAudioMuted">
            <summary>
            Gets or sets if the local audio is muted.
            Obsolete. Use AudioStream.Muted instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.LocalVideoMuted">
            <summary>
            Gets or sets if the local video is muted.
            Obsolete. Use VideoStream.Muted instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.LocalAudioDisabled">
            <summary>
            Gets or sets if local audio is disabled.
            Obsolete. Use AudioStream.SendDisabled instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.LocalVideoDisabled">
            <summary>
            Gets or sets if local video is disabled.
            Obsolete. Use VideoStream.SendDisabled instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.RemoteAudioDisabled">
            <summary>
            Gets or sets if remote audio is disabled.
            Obsolete. Use AudioStream.ReceiveDisabled instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.RemoteVideoDisabled">
            <summary>
            Gets or sets if remote video is disabled.
            Obsolete. Use VideoStream.ReceiveDisabled instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.AudioDirection">
            <summary>
            Gets or sets the audio stream direction.
            Obsolete. Use AudioStream.Direction instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.VideoDirection">
            <summary>
            Gets or sets the video stream direction.
            Obsolete. Use VideoStream.Direction instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.DataDirection">
            <summary>
            Gets or sets the data stream direction.
            Obsolete.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.AudioFormats">
            <summary>
            Gets the audio formats, if applicable.
            Obsolete. Use AudioStream.Formats instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.VideoFormats">
            <summary>
            Gets the video formats, if applicable.
            Obsolete. Use VideoStream.Formats instead.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ConnectionInfo" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,FM.LiveSwitch.FormatInfo[],FM.LiveSwitch.FormatInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ConnectionInfo" /> class.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="userAlias">The user alias.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="deviceAlias">The device alias.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientTag">The client tag.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="id">The connection identifier.</param>
            <param name="tag">The connection tag.</param>
            <param name="type">The connection type.</param>
            <param name="mediaId">The media identifier.</param>
            <param name="localAudioMuted">The audio muted boolean.</param>
            <param name="localVideoMuted">The video muted boolean.</param>
            <param name="audioDirection">The audio direction.</param>
            <param name="videoDirection">The video direction.</param>
            <param name="dataDirection">The data direction.</param>
            <param name="audioFormats">The audio formats.</param>
            <param name="videoFormats">The video formats.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,FM.LiveSwitch.FormatInfo[],FM.LiveSwitch.FormatInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ConnectionInfo" /> class.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="id">The connection identifier.</param>
            <param name="tag">The connection tag.</param>
            <param name="type">The connection type.</param>
            <param name="mediaId">The media identifier.</param>
            <param name="localAudioMuted">The audio muted boolean.</param>
            <param name="localVideoMuted">The video muted boolean.</param>
            <param name="audioDirection">The audio direction.</param>
            <param name="videoDirection">The video direction.</param>
            <param name="dataDirection">The data direction.</param>
            <param name="audioFormats">The audio formats.</param>
            <param name="videoFormats">The video formats.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ConnectionInfo" /> class.
            </summary>
            <param name="id">The connection identifier.</param>
            <param name="applicationId">The application identifier.</param>
            <param name="channelId">the channel nidentifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="deviceId">Device identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ShouldSerializeLocalAudioMuted">
            <summary>
            Gets whether to serialize the legacy local audio muted property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ShouldSerializeLocalVideoMuted">
            <summary>
            Gets whether to serialize the legacy local video muted property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ShouldSerializeAudioDirection">
            <summary>
            Gets whether to serialize the legacy audio direction property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ShouldSerializeVideoDirection">
            <summary>
            Gets whether to serialize the legacy video direction property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ShouldSerializeDataDirection">
            <summary>
            Gets whether to serialize the legacy data direction property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ShouldSerializeAudioFormats">
            <summary>
            Gets whether to serialize the legacy audio formats property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ShouldSerializeVideoFormats">
            <summary>
            Gets whether to serialize the legacy video formats property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ToJson(FM.LiveSwitch.ConnectionInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="connectionInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a ConnectionInfo.
            </summary>
            <param name="connectionInfoJson">The serialized Json.</param>
            <returns>The deserialized ConnectionInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ToJsonArray(FM.LiveSwitch.ConnectionInfo[])">
            <summary>
            Serializes an array of instances to JSON.
            </summary>
            <param name="connectionInfos">The connection infos to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array of instances from JSON.
            </summary>
            <param name="connectionInfosJson">The JSON to deserialize.</param>
            <returns>
            The deserialized connection infos.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.IsEquivalent(System.String,System.String,System.String,System.String)">
            <summary>
            Tests for equivalency.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="id">The connection identifier.</param>
            <returns>
              <c>true</c> if equivalent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.IsEquivalent(FM.LiveSwitch.ConnectionInfo)">
            <summary>
            Tests for equivalency.
            </summary>
            <param name="connectionInfo">The connection information.</param>
            <returns>
              <c>true</c> if equivalent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.CreateClientInfo">
            <summary>
            Creates a client info object with details
            from this connection info object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.ConnectionType">
            <summary>
            A connection type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionType.Mcu">
            <summary>
            Gets the "mcu" connection type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionType.Sfu">
            <summary>
            Gets the "sfu" connection type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionType.Peer">
            <summary>
            Gets the "peer" connection type string.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataChannelReport">
            <summary>
            Data channel report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelReport.MessagesSent">
            <summary>
            Gets or sets the number of messages sent on this data channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelReport.BytesSent">
            <summary>
            Gets or sets the number of bytes sent on this data channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelReport.MessagesReceived">
            <summary>
            Gets or sets the number of messages received on this data channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelReport.BytesReceived">
            <summary>
            Gets or sets the number of bytes received on this data channel.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataChannelReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelReport.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelReport.ToJson(FM.LiveSwitch.DataChannelReport)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="dataChannelReport">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelReport.FromJson(System.String)">
            <summary>
            Deserializes Json to a DataChannelReport.
            </summary>
            <param name="dataChannelReportJson">The serialized Json.</param>
            <returns>The deserialized DataChannelReport.</returns>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenMissing">
            <summary>
            Gets the error type associated with "tokenMissing".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenApplicationMismatch">
            <summary>
            Gets the error type associated with "tokenApplicationMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenUserMismatch">
            <summary>
            Gets the error type associated with "tokenUserMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenDeviceMismatch">
            <summary>
            Gets the error type associated with "tokenDeviceMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenClientMismatch">
            <summary>
            Gets the error type associated with "tokenClientMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenClientRoleMismatch">
            <summary>
            Gets the error type associated with "tokenClientRoleMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenRegionMismatch">
            <summary>
            Gets the error type associated with "tokenRegionMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenAuthFailure">
            <summary>
            Gets the error type associated with "tokenAuthFailure".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenParseFailure">
            <summary>
            Gets the error type associated with "tokenParseFailure".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenMissingChannelClaim">
            <summary>
            Gets the error type associated with "tokenMissingChannelClaim".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenExpired">
            <summary>
            Gets the error type associated with "tokenExpired".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.MessageParseFailure">
            <summary>
            Gets the error type associated with "messageParseFailure".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.MessageRegisterExpected">
            <summary>
            Gets the error type associated with "messageRegisterExpected".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.MessageRegisterUnexpected">
            <summary>
            Gets the error type associated with "messageRegisterUnexpected".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.MessageUnregisterUnexpected">
            <summary>
            Gets the error type associated with "messageUnregisterUnexpected".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.AccessMessageBlocked">
            <summary>
            Gets the error type associated with "accessMessageBlocked".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.AccessChannelClaimDenied">
            <summary>
            Gets the error type associated with "accessChannelClaimDenied".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ServerUpgradeRequired">
            <summary>
            Gets the error type associated with "serverUpgradeRequired".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ServerLicenseInvalid">
            <summary>
            Gets the error type associated with "serverLicenseInvalid".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ServerLicenseMissing">
            <summary>
            Gets the error type associated with "serverLicenseMissing".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ServerNoMediaServersAvailable">
            <summary>
            Gets the error type associated with "serverNoMediaServersAvailable".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ServerUnknownError">
            <summary>
            Gets the error type associated with "serverUnknownError".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ServerNoAudioCodecs">
            <summary>
            Gets the error type associated with "serverNoAudioCodecs".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ServerNoVideoCodecs">
            <summary>
            Gets the error type associated with "serverNoVideoCodecs".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.SdpCodecMismatch">
            <summary>
            Gets the error type associated with "sdpCodecMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.SdpStreamMismatch">
            <summary>
            Gets the error type associated with "sdpStreamMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.SdpSimulcastMismatch">
            <summary>
            Gets the error type associated with "sdpSimulcastMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.SfuInvalidUpstream">
            <summary>
            Gets the error type associated with "sfuInvalidUpstream".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ClientInvalidId">
            <summary>
            Gets the error type associated with "clientInvalidId".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.EventInfo">
            <summary>
            Event information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Timestamp">
            <summary>
            Gets or sets the event timestamp in milliseconds since epoch.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Origin">
            <summary>
            Gets or sets the event origin.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Type">
            <summary>
            Gets or sets the event type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Forced">
            <summary>
            Gets or sets whether this event was forced.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Client">
            <summary>
            Gets or sets the client information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Channel">
            <summary>
            Gets or sets the channel information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Connection">
            <summary>
            Gets or sets the connection information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.#ctor">
            <summary>
            Initializes a new event.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.#ctor(System.String)">
            <summary>
            Initializes a new event.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.ToJson(FM.LiveSwitch.EventInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.ToJsonArray(FM.LiveSwitch.EventInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.EventOrigin">
            <summary>
            Event origins.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventOrigin.Gateway">
            <summary>
            Gets the 'gateway' event origin string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventOrigin.MediaServer">
            <summary>
            Gets the 'mediaserver' event origin string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventOrigin.SipConnector">
            <summary>
            Gets the 'sipconnector' event origin string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventOrigin.Client">
            <summary>
            Gets the 'client' event origin string.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ExternalNetworkInfo">
            <summary>
            External network information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ExternalNetworkInfo.PublicIPAddress">
            <summary>
            Gets or sets the public IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ExternalNetworkInfo.PublicHostname">
            <summary>
            Gets or sets the public hostname.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ExternalNetworkInfo.ToJson(FM.LiveSwitch.ExternalNetworkInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="networkInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ExternalNetworkInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a ExternalNetworkInfo.
            </summary>
            <param name="networkInfoJson">The serialized Json.</param>
            <returns>The deserialized ExternalNetworkInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ExternalNetworkInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.ExternalNetworkInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.InternalNetworkInfo">
            <summary>
            Internal network information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.InternalNetworkInfo.ToJson(FM.LiveSwitch.InternalNetworkInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="networkInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.InternalNetworkInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a InternalNetworkInfo.
            </summary>
            <param name="networkInfoJson">The serialized Json.</param>
            <returns>The deserialized InternalNetworkInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.InternalNetworkInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.InternalNetworkInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.InvitationState">
            <summary>
            The invite feedback states.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Unknown">
            <summary>
            Gets the unknown state.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Pending">
            <summary>
            Gets the state for "pending". 
            This state is for when no feedback has been received yet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Proceeding">
            <summary>
            Gets the state for "proceeding". 
            This state is for when we are waiting for the invited party to respond.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Sent">
            <summary>
            Gets the state for "sent".
            This state is for when the invite is sent in a way that does not allow feedback to be returned.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Cancelled">
            <summary>
            Gets the state for "canceled".
            This state is for when the invite has been canceled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Cancelling">
            <summary>
            Gets the state for "cancelling".
            This state is for when the invite is in the process of being cancelled. May fail due to timing.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Rejected">
            <summary>
            Gets the state for "rejected".
            This state is for when the invitation was explicitly rejected.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Accepted">
            <summary>
            Gets the state for "accepted".
            This state is for when the invitation was accepted.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.NotFound">
            <summary>
            Gets the state for "notFound".
            This state is for when the invited user id cannot be found.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Busy">
            <summary>
            Gets the state for "busy".
            This state is for when the invited user signals they are busy.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.NoResponse">
            <summary>
            Gets the state for "noResponse".
            This state is for when the invitation did not receive a response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Invalid">
            <summary>
            Gets the state for "invalid".
            This state is when the invitation cannot be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.AlreadyInvited">
            <summary>
            Gets the state for "alreadyInvited".
            This state is when another invite for the same user id, protocol, and channel already exists.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.InviteFeedback">
            <summary>
            A class containing the feedback from invite requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.InviteFeedback.Protocol">
            <summary>
            Gets the protocol the user was invited on.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.InviteFeedback.UserId">
            <summary>
            Gets the user id for the user being invited.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.InviteFeedback.State">
            <summary>
            Gets the current state of the invite.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.InviteFeedback.Reason">
            <summary>
            Gets the detailed reason for the state if available.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.InviteFeedback.#ctor(System.String,System.String,FM.LiveSwitch.InvitationState,System.String)">
            <summary>
            Creates an instance of a InviteFeedback class.
            </summary>
            <param name="userId">The user id of the user being invited.</param>
            <param name="protocol">The protocol the original invite was using.</param>
            <param name="state">The current state of the invite.</param>
            <param name="reason">The detailed reason if available.</param>
        </member>
        <member name="M:FM.LiveSwitch.InviteFeedback.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.InviteFeedback.ToJson(FM.LiveSwitch.InviteFeedback)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="feedback">The invite feedback to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.InviteFeedback.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="feedbackJson">The JSON to deserialize.</param>
            <returns>
            The deserialized invite feedback.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.LogEventInfo">
            <summary>
            Log event information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEventInfo.Level">
            <summary>
            Gets or sets the log event level.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEventInfo.Tag">
            <summary>
            Gets or sets the log event tag.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.LogEventInfo.Scope">
            <summary>
            Gets or sets the log event scope.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.LogEventInfo.Message">
            <summary>
            Gets or sets the log event message.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.LogEventInfo.Exception">
            <summary>
            Gets or sets the log event exception message.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.LogEventInfo.ThreadId">
            <summary>
            Gets or sets the log event thread ID.
            </summary>​
        </member>
        <member name="M:FM.LiveSwitch.LogEventInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LogEventInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogEventInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogEventInfo.ToJson(FM.LiveSwitch.LogEventInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="logEventInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LogEventInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a LogEventInfo.
            </summary>
            <param name="logEventInfoJson">The serialized Json.</param>
            <returns>The deserialized LogEventInfo.</returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaInfo">
            <summary>
            Media information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaReceiverReport">
            <summary>
            Media receiver report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverReport.BytesReceived">
            <summary>
            Gets or sets the number of bytes received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverReport.PacketsReceived">
            <summary>
            Gets or sets the number of packets received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverReport.PacketsDiscarded">
            <summary>
            Gets or sets the number of packets discarded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverReport.PacketsDuplicated">
            <summary>
            Gets or sets the number of packets duplicated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverReport.PacketsRepaired">
            <summary>
            Gets or sets the number of packets repaired.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverReport.PacketsLost">
            <summary>
            Gets or sets the number of packets lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverReport.Jitter">
            <summary>
            Gets or sets the jitter in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaReceiverReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.ToJson(FM.LiveSwitch.MediaReceiverReport)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaReceiverReport">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaReceiverReportJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.ToJsonArray(FM.LiveSwitch.MediaReceiverReport[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaReceiverReports">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaReceiverReportsJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaSenderReport">
            <summary>
            Media sender report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderReport.BytesSent">
            <summary>
            Gets or sets the number of bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderReport.PacketsSent">
            <summary>
            Gets or sets the number of packets sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderReport.RoundTripTime">
            <summary>
            Gets or sets the round-trip-time in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaSenderReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.ToJson(FM.LiveSwitch.MediaSenderReport)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaSenderReport">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaSenderReportJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.ToJsonArray(FM.LiveSwitch.MediaSenderReport[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaSenderReports">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaSenderReportsJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.Message">
            <summary>
            A message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.Timestamp">
            <summary>
            Gets or sets the message timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.MediaServerId">
            <summary>
            Gets or sets the media server identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ConnectorId">
            <summary>
            Gets or sets the connector identifer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ApplicationId">
            <summary>
            Gets or sets the application identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ChannelId">
            <summary>
            Gets or sets the channel identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ChannelReports">
            <summary>
            Gets or sets the channel reports.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.UserAlias">
            <summary>
            Gets or sets the user alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.DeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.DeviceAlias">
            <summary>
            Gets or sets the device alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ClientTag">
            <summary>
            Gets or sets the client tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ClientRoles">
            <summary>
            Gets or sets the client roles.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ConnectionId">
            <summary>
            Gets or sets the connection identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ConnectionTag">
            <summary>
            Gets or sets the connection tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ConnectionType">
            <summary>
            Gets or sets the connection type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.MediaId">
            <summary>
            Gets or sets the broadcast identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.Token">
            <summary>
            Gets or sets the token.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.Payload">
            <summary>
            Gets or sets the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.RemoteUserId">
            <summary>
            Gets or sets the remote user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.RemoteDeviceId">
            <summary>
            Gets or sets the remote device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.RemoteClientId">
            <summary>
            Gets or sets the remote client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.RemoteConnectionId">
            <summary>
            Gets or sets the remote connection identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.RemoteMediaId">
            <summary>
            Gets or sets the remote broadcast identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.Region">
            <summary>
            Gets or sets the region.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ApiVersion">
            <summary>
            Gets the API Version.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Message.Clone">
            <summary>
            Creates a copy of the Message.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateEventMessage(System.String)">
            <summary>
            Creates an "event" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateUnregisterMessage">
            <summary>
            Creates an "unregister" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateUnregisterMessage(FM.LiveSwitch.ChannelReport[])">
            <summary>
            Creates an "unregister" message.
            </summary>
            <param name="channelReports">The channel reports.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateCandidateMessage(System.String)">
            <summary>
            Creates a "candidate" message.
            </summary>
            <param name="candidateJson">The candidate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateCloseMessage">
            <summary>
            Creates a "close" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateInviteMessage(System.String,System.String)">
            <summary>
            Creates a "invite" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateCancelInviteMessage(System.String,System.String)">
            <summary>
            Creates a "cancelInvite" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateRegisterMessage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String,System.String)">
            <summary>
            Creates a "register" message.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="userAlias">The user alias.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="deviceAlias">The device alias.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientTag">The client tag.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="region">The region.</param>
            <param name="token">The auth token.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateJoinMessage(System.String,System.String)">
            <summary>
            Creates a "join" message.
            </summary>
            <param name="channelId">The channel to join.</param>
            <param name="token">The auth token.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateLeaveMessage(System.String,FM.LiveSwitch.ChannelReport)">
            <summary>
            Creates a "leave" message.
            </summary>
            <param name="channelId">The channel to leave.</param>
            <param name="channelReport">The channel report.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateIceServersMessage">
            <summary>
            Creates an "iceServers" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateMcuOfferMessage(System.String,System.String)">
            <summary>
            Creates an MCU "offer" message.
            </summary>
            <param name="tag">The tag.</param>
            <param name="offerJson">The offer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateSfuOfferMessage(System.String,System.String)">
            <summary>
            Creates an SFU upstream "offer" message.
            </summary>
            <param name="tag">The tag.</param>
            <param name="offerJson">The offer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateSfuOfferMessage(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an SFU downstream "offer" message.
            </summary>
            <param name="tag">The tag.</param>
            <param name="offerJson">The offer.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
            <param name="remoteConnectionId">The remote connection identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateSfuOfferMessage(System.String,System.String,System.String)">
            <summary>
            Creates an SFU downstream "offer" message.
            </summary>
            <param name="tag">The tag.</param>
            <param name="offerJson">The offer.</param>
            <param name="remoteMediaId">The remote media identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreatePeerOfferMessage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a peer "offer" message.
            </summary>
            <param name="tag">The tag.</param>
            <param name="offerJson">The offer.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreatePeerAnswerMessage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a peer "answer" message.
            </summary>
            <param name="tag">The tag.</param>
            <param name="answerJson">The answer.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreatePeerRejectMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a "reject" message.
            </summary>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
            <param name="remoteConnectionId">The remote connection identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreatePeerCandidateMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a "candidate" message.
            </summary>
            <param name="candidateJson">The candidate.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreatePeerCloseMessage(System.String,System.String,System.String)">
            <summary>
            Creates a "close" message.
            </summary>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateMessageMessage(System.String)">
            <summary>
            Creates a "message" message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateMessageMessage(System.String,System.String)">
            <summary>
            Creates a "message" message.
            </summary>
            <param name="message">The message.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateMessageMessage(System.String,System.String,System.String)">
            <summary>
            Creates a "message" message.
            </summary>
            <param name="message">The message.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateMessageMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a "message" message.
            </summary>
            <param name="message">The message.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateUpdateMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a 'update' message.
            </summary>
            <param name="configJson">The config to send to the server.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateUpdateMessage(System.String)">
            <summary>
            Creates a 'update' message.
            </summary>
            <param name="configJson">The config to send to the server.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateErrorMessage(System.String)">
            <summary>
            Creates a "error" message.
            </summary>
            <param name="error">The error type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateErrorMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a "error" message.
            </summary>
            <param name="error">The error type.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateKeyFrameRequestMessage(System.Int64[])">
            <summary>
            Creates a "keyFrameRequest" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateBitrateRequestMessage(FM.LiveSwitch.BitrateRequest)">
            <summary>
            Creates a "bitrateRequest" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateBitrateRequestMessage(FM.LiveSwitch.BitrateRequest[])">
            <summary>
            Creates a "bitrateRequest" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateBitrateNotificationMessage(FM.LiveSwitch.BitrateNotification)">
            <summary>
            Creates a "bitrateNotification" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateBitrateNotificationMessage(FM.LiveSwitch.BitrateNotification[])">
            <summary>
            Creates a "bitrateNotification" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateDtmfTonesMessage(FM.LiveSwitch.Dtmf.Tone[])">
            <summary>
            Creates a "dtmfTones" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateKickMessage(System.String,System.String)">
            <summary>
            Creates a "kick" message.
            </summary>
            <param name="channelId">The channel identifier.</param>
            <param name="clientId">The ID of the client to kick.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Message.ToJson(FM.LiveSwitch.Message)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="message">The message to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="messageJson">The JSON to deserialize.</param>
            <returns>
            The deserialized message.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.PropertiesToJson(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes properties to JSON.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.PropertyFromJson(System.String,System.String)">
            <summary>
            Deserializes a property from JSON.
            </summary>
            <param name="name">The name.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.ToJsonArray(FM.LiveSwitch.Message[])">
            <summary>
            Serializes an array of instances to JSON.
            </summary>
            <param name="messages">The messages to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.FromJsonArray(System.String)">
            <summary>
            Deserializes an array of instances from JSON.
            </summary>
            <param name="messagesJson">The JSON to deserialize.</param>
            <returns>
            The deserialized messages.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.MessageInfo">
            <summary>
            Message information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageInfo.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageInfo.DeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageInfo.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageInfo.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MessageInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MessageInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MessageInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MessageInfo.ToJson(FM.LiveSwitch.MessageInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MessageInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MessageType">
            <summary>
            A message type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Register">
            <summary>
            Gets the "register" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Unregister">
            <summary>
            Gets the "unregister" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Join">
            <summary>
            Gets the "join" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Leave">
            <summary>
            Gets the "leave" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Offer">
            <summary>
            Gets the "offer" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Answer">
            <summary>
            Gets the "answer" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Reject">
            <summary>
            Gets the "reject" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Candidate">
            <summary>
            Gets the "candidate" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Close">
            <summary>
            Gets the "close" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.IceServers">
            <summary>
            Gets the "iceServers" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Fail">
            <summary>
            Gets the "fail" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Error">
            <summary>
            Gets the "error" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.NotifyJoin">
            <summary>
            Gets the "notifyJoin" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.NotifyLeave">
            <summary>
            Gets the "notifyLeave" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.NotifyUpstreamOpen">
            <summary>
            Gets the "notifyUpstreamOpen" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.NotifyUpstreamUpdate">
            <summary>
            Gets the "notifyUpstreamUpdate" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.NotifyUpstreamClose">
            <summary>
            Gets the "notifyUpstreamClose" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Event">
            <summary>
            Gets the "event" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Report">
            <summary>
            Gets the "report" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.NotifyServiceState">
            <summary>
            Gets the "notifyServiceState" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Message">
            <summary>
            Gets the "message" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Record">
            <summary>
            Gets the "record" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Kick">
            <summary>
            Gets the "kick" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Update">
            <summary>
            Gets the "update" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Invite">
            <summary>
            Gets the "invite" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.CancelInvite">
            <summary>
            Gets the "cancelInvite" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.InviteFeedback">
            <summary>
            Gets the "inviteFeedback" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.McuVideoLayout">
            <summary>
            Gets the "mcuVideoLayout" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.KeyFrameRequest">
            <summary>
            Gets the "keyFrameRequest" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.BitrateRequest">
            <summary>
            Gets the "bitrateRequest" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.BitrateNotification">
            <summary>
            Gets the "bitrateNotification" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.DtmfTones">
            <summary>
            Gets the "dtmfTones" message type string.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MixerReport">
            <summary>
            Mixer report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MixerReport.Disabled">
            <summary>
            Gets or sets whether the mixer is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MixerReport.InputFormat">
            <summary>
            Gets or sets the mixer input format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MixerReport.OutputFormat">
            <summary>
            Gets or sets the mixer output format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MixerReport.OutputWidth">
            <summary>
            Gets or sets the mixer output width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MixerReport.OutputHeight">
            <summary>
            Gets or sets the mixer output height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MixerReport.OutputFrameRate">
            <summary>
            Gets or sets the mixer output frame-rate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MixerReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MixerReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.NetworkInfo">
            <summary>
            Network information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkInfo.IPAddresses">
            <summary>
            Gets or sets the IP addresses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkInfo.Ports">
            <summary>
            Gets or sets the ports.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInfo.ToJson(FM.LiveSwitch.NetworkInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="networkInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a GatewayInfo.
            </summary>
            <param name="networkInfoJson">The serialized Json.</param>
            <returns>The deserialized GatewayInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.NetworkInterfaceInfo">
            <summary>
            Network interface information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkInterfaceInfo.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkInterfaceInfo.IPAddress">
            <summary>
            Gets or sets the network interface address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkInterfaceInfo.Mask">
            <summary>
            Gets or sets the network interface subnet mask.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkInterfaceInfo.AdapterSpeed">
            <summary>
            Gets or sets the network interface adapter speed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInterfaceInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInterfaceInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInterfaceInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInterfaceInfo.ToJson(FM.LiveSwitch.NetworkInterfaceInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="client">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInterfaceInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a NetworkInterfaceInfo.
            </summary>
            <param name="networkInterfaceInfoJson">The serialized Json.</param>
            <returns>The deserialized NetworkInterfaceInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInterfaceInfo.ToJsonArray(FM.LiveSwitch.NetworkInterfaceInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="networkInterfaceInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInterfaceInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes JSON to an array.
            </summary>
            <param name="networkInterfaceInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Report">
            <summary>
            Report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Report.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.Report.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessBoolean(System.Boolean,System.Boolean)">
            <summary>
            Processes a boolean for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessShort(System.Int16,System.Int16)">
            <summary>
            Processes a short for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessInteger(System.Int32,System.Int32)">
            <summary>
            Processes an integer for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessLong(System.Int64,System.Int64)">
            <summary>
            Processes a long for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessFloat(System.Single,System.Single)">
            <summary>
            Processes a float for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessDouble(System.Double,System.Double)">
            <summary>
            Processes a double for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessString(System.String,System.String)">
            <summary>
            Processes a string for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessBooleanArray(System.Boolean[],System.Boolean[])">
            <summary>
            Processes a boolean array for a report.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessShortArray(System.Int16[],System.Int16[])">
            <summary>
            Processes a short array for a report.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessIntegerArray(System.Int32[],System.Int32[])">
            <summary>
            Processes a integer array for a report.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessLongArray(System.Int64[],System.Int64[])">
            <summary>
            Processes a long array for a report.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessFloatArray(System.Single[],System.Single[])">
            <summary>
            Processes a float array for a report.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessFloatArray(System.Double[],System.Double[])">
            <summary>
            Processes a double array for a report.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessObject``1(``0,``0)">
            <summary>
            Processes an array for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessArray``1(``0[],``0[])">
            <summary>
            Processes an array for a report.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values are not equivalent to the old values; otherwise null.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Token">
            <summary>
            A token.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.HmacSha256Algorithm">
            <summary>
            Gets the HMAC SHA-256 algorithm string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.RsaSha256Algorithm">
            <summary>
            Gets the RSA SHA-256 algorithm string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.DefaultExpiry">
            <summary>
            Gets the default token expiry (120 seconds).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.Algorithm">
            <summary>
            Gets the algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.IssuedAt">
            <summary>
            Gets the "issued at" date/time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.ExpirationTime">
            <summary>
            Gets the "expires at" date/time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.MediaServerId">
            <summary>
            Gets the media server identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.ConnectorId">
            <summary>
            Gets the connector identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.ApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.UserId">
            <summary>
            Gets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.DeviceId">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.ClientId">
            <summary>
            Gets the client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.ClientRoles">
            <summary>
            Gets the client roles.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.Region">
            <summary>
            Gets the region.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.ChannelClaims">
            <summary>
            Gets an array of channel claims.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.ChannelClaim">
            <summary>
            Gets the first channel claim.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateEventToken(System.String,System.String)">
            <summary>
            Generates a signed event token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateEventToken(System.String,System.String,System.DateTime)">
            <summary>
            Generates a signed event token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The expiration time.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(FM.LiveSwitch.Client,System.String,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(FM.LiveSwitch.Client,System.String[],System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelIds">The channel identifiers.</param>
            <param name="sharedSecret">The shared secret.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(FM.LiveSwitch.Client,FM.LiveSwitch.ChannelClaim[],System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelClaims">The channel claims.</param>
            <param name="sharedSecret">The shared secret.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String[],System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelIds">The channel identifiers.</param>
            <param name="sharedSecret">The shared secret.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],FM.LiveSwitch.ChannelClaim[],System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelClaims">The channel claims.</param>
            <param name="sharedSecret">The shared secret.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(FM.LiveSwitch.Client,System.String,System.String,System.DateTime)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(FM.LiveSwitch.Client,System.String[],System.String,System.DateTime)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelIds">The channel identifiers.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(FM.LiveSwitch.Client,FM.LiveSwitch.ChannelClaim[],System.String,System.DateTime)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelClaims">The channel claims.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String,System.String,System.DateTime)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String[],System.String,System.DateTime)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelIds">The channel identifiers.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],FM.LiveSwitch.ChannelClaim[],System.String,System.DateTime)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelClaims">The channel claims.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(FM.LiveSwitch.Client,System.String,System.String,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(FM.LiveSwitch.Client,System.String[],System.String,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelIds">The channel identifiers.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(FM.LiveSwitch.Client,FM.LiveSwitch.ChannelClaim[],System.String,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelClaims">The channel claims.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String,System.String,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String[],System.String,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelIds">The channel identifiers.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],FM.LiveSwitch.ChannelClaim[],System.String,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelClaims">The channel claims.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(FM.LiveSwitch.Client,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(FM.LiveSwitch.Client,System.String[],System.String,System.DateTime,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelIds">The channel identifiers.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(FM.LiveSwitch.Client,FM.LiveSwitch.ChannelClaim[],System.String,System.DateTime,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelClaims">The channel claims.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String,System.String,System.DateTime,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String[],System.String,System.DateTime,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelIds">The channel identifiers.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],FM.LiveSwitch.ChannelClaim[],System.String,System.DateTime,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelClaims">The channel claims.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientJoinToken(FM.LiveSwitch.Client,FM.LiveSwitch.ChannelClaim,System.String)">
            <summary>
            Generates a signed client join token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelClaim">The channel claim.</param>
            <param name="sharedSecret">The shared secret.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientJoinToken(FM.LiveSwitch.Client,System.String,System.String)">
            <summary>
            Generates a signed client join token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientJoinToken(System.String,System.String,System.String,System.String,FM.LiveSwitch.ChannelClaim,System.String)">
            <summary>
            Generates a signed client join token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="channelClaim">The channel claim.</param>
            <param name="sharedSecret">The shared secret.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientJoinToken(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a signed client join token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientJoinToken(FM.LiveSwitch.Client,FM.LiveSwitch.ChannelClaim,System.String,System.DateTime)">
            <summary>
            Generates a signed client join token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelClaim">The channel claim.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientJoinToken(FM.LiveSwitch.Client,System.String,System.String,System.DateTime)">
            <summary>
            Generates a signed client join token.
            </summary>
            <param name="client">The client.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientJoinToken(System.String,System.String,System.String,System.String,FM.LiveSwitch.ChannelClaim,System.String,System.DateTime)">
            <summary>
            Generates a signed client join token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="channelClaim">The channel claim.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientJoinToken(System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Generates a signed client join token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.Verify(System.String)">
            <summary>
            Verifies the token signature.
            </summary>
            <param name="sharedSecret">The shared secret.</param>
            <returns>
              <c>true</c> if the signature is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.Verify(System.String,System.String)">
            <summary>
            Parses a token and verifies its signature.
            </summary>
            <param name="tokenString">The token string.</param>
            <param name="sharedSecret">The shared secret.</param>
            <returns>
              <c>true</c> if the token string could be parsed and the signature is valid; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.Parse(System.String)">
            <summary>
            Parses a token string.
            </summary>
            <param name="tokenString">The token string.</param>
            <returns>The token.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ClaimAction">
            <summary>
            A claim action.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClaimAction.Join">
            <summary>
            Gets the "join" claim action string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClaimAction.Claim">
            <summary>
            Gets the "claim" claim action string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClaimAction.Drop">
            <summary>
            Gets the "drop" claim action string.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.TokenType">
            <summary>
            A token type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TokenType.Register">
            <summary>
            Gets the "register" token type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TokenType.Join">
            <summary>
            Gets the "join" token type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TokenType.Event">
            <summary>
            Gets the "event" token type string.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.TransportReport">
            <summary>
            Transport report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportReport.BytesSent">
            <summary>
            Gets or sets the number of bytes sent on this transport.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportReport.BytesReceived">
            <summary>
            Gets or sets the number of bytes received on this transport.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TransportReport.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TransportReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TransportReport.ToJson(FM.LiveSwitch.TransportReport)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="transportReport">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportReport.FromJson(System.String)">
            <summary>
            Deserializes Json to a TransportReport.
            </summary>
            <param name="transportReportJson">The serialized Json.</param>
            <returns>The deserialized TransportReport.</returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.TransportReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.VideoLayout">
            <summary>
            A description of the layout within a mixed video view.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayout.Width">
            <summary>
            Gets or sets the video width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayout.Height">
            <summary>
            Gets or sets the video height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayout.Frames">
            <summary>
            Gets or sets the frames, keyed by connection ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayout.Bounds">
            <summary>
            Gets or sets the bounds, keyed by connection ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayout.Crop">
            <summary>
            Gets or sets whether to crop.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayout.Regions">
            <summary>
            Gets the regions within the layout where each region
            has a frame, bounds, and client/connection information.
            connection
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoLayout.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoLayout"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoLayout.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoLayout"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoLayout.#ctor(System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,FM.LiveSwitch.LayoutFrame},System.Collections.Generic.Dictionary{System.String,FM.LiveSwitch.LayoutFrame})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoLayout"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoLayout.#ctor(System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,FM.LiveSwitch.LayoutFrame},System.Collections.Generic.Dictionary{System.String,FM.LiveSwitch.LayoutFrame},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoLayout"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoLayout.IsEquivalent(FM.LiveSwitch.VideoLayout)">
            <summary>
            Determines whether the specified video layout is equivalent.
            </summary>
            <param name="videoLayout">The video layout.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoLayout.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoLayout.ToJson(FM.LiveSwitch.VideoLayout)">
            <summary>
            Serializes a view to JSON.
            </summary>
            <param name="videoLayout">The layout.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoLayout.FromJson(System.String)">
            <summary>
            Deserializes a view from JSON.
            </summary>
            <param name="videoLayoutJson">The layout JSON.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.VideoLayoutRegion">
            <summary>
            A video layout region.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayoutRegion.Frame">
            <summary>
            Gets the frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayoutRegion.Bounds">
            <summary>
            Gets the bounds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayoutRegion.UserId">
            <summary>
            Gets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayoutRegion.UserAlias">
            <summary>
            Gets the user alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayoutRegion.DeviceId">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayoutRegion.DeviceAlias">
            <summary>
            Gets the device alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayoutRegion.ClientId">
            <summary>
            Gets the client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayoutRegion.ClientTag">
            <summary>
            Gets the client tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayoutRegion.ClientRoles">
            <summary>
            Gets the client roles.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayoutRegion.ConnectionId">
            <summary>
            Gets the connection identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoLayoutRegion.ConnectionTag">
            <summary>
            Gets the connection tag.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoLayoutRegion.#ctor(FM.LiveSwitch.LayoutFrame,FM.LiveSwitch.LayoutFrame,System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoLayoutRegion"/> class.
            </summary>
            <param name="frame">The frame.</param>
            <param name="bounds">The bounds.</param>
            <param name="userId">The user identifier.</param>
            <param name="userAlias">The user alias.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="deviceAlias">The device alias.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientTag">The client tag.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="connectionId">The connection identifier.</param>
            <param name="connectionTag">The connection tag.</param>
        </member>
        <member name="T:FM.LiveSwitch.WebhookInfo">
            <summary>
            Webhook information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebhookInfo.Url">
            <summary>
            Gets or sets the webhook URL.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.WebhookInfo.Result">
            <summary>
            Gets or sets the webhook result.
            </summary>​​
        </member>
        <member name="M:FM.LiveSwitch.WebhookInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.WebhookInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebhookInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebhookInfo.ToJson(FM.LiveSwitch.WebhookInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="webhookInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.WebhookInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a WebhookInfo.
            </summary>
            <param name="webhookInfoJson">The serialized Json.</param>
            <returns>The deserialized WebhookInfo.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Advice">
            <summary>
            Advice class used in messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Advice.WebSocket">
            <summary>
            Gets or sets advice specific to WebSocket clients.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Advice.LongPolling">
            <summary>
            Gets or sets advice specific to long-polling clients.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Advice.CallbackPolling">
            <summary>
            Gets or sets advice specific to callback-polling clients.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Advice.ToJson">
            <summary>
            Serializes the advice object to JSON.
            </summary>
            <returns>The serialized advice object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Advice.ToJson(FM.LiveSwitch.Signalling.Advice)">
            <summary>
            Serializes a single advice object to JSON.
            </summary>
            <param name="advice">The advice object to serialize.</param>
            <returns>The serialized advice object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Advice.FromJson(System.String)">
            <summary>
            Deserializes a single advice object from JSON.
            </summary>
            <param name="adviceJson">The JSON advice object to deserialize.</param>
            <returns>The deserialized advice object.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.BaseAdvice">
            <summary>
            Base advice class used in messages and for nested advice.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BaseAdvice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.BaseAdvice"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BaseAdvice.Reconnect">
            <summary>
            Gets or sets how the client should attempt to re-establish a connection with the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BaseAdvice.Interval">
            <summary>
            Gets or sets the interval to wait before following the reconnect advice.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BaseAdvice.Hosts">
            <summary>
            Gets or sets the list of host names that may be used as alternate servers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BaseAdvice.ToJson">
            <summary>
            Serializes the base advice object to JSON.
            </summary>
            <returns>The serialized advice object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BaseAdvice.ToJson(FM.LiveSwitch.Signalling.BaseAdvice)">
            <summary>
            Serializes a single base advice object to JSON.
            </summary>
            <param name="baseAdvice">The base advice object to serialize.</param>
            <returns>The serialized advice object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BaseAdvice.FromJson(System.String)">
            <summary>
            Deserializes a single base advice object from JSON.
            </summary>
            <param name="baseAdviceJson">The JSON base advice object to deserialize.</param>
            <returns>The deserialized advice object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BaseAdvice.SerializeReconnect(FM.LiveSwitch.Signalling.Reconnect)">
            <summary>
            Serializes a reconnect value.
            </summary>
            <param name="reconnect">The reconnect value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BaseAdvice.DeserializeReconnect(System.String)">
            <summary>
            Deserializes a reconnect value.
            </summary>
            <param name="reconnectJson">The reconnect value JSON.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Signalling.BindArgs">
            <summary>
            Arguments for client bind requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the request fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke if the request succeeds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BindArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.BindArgs"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BindArgs.#ctor(FM.LiveSwitch.Signalling.Record)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.BindArgs"/> class.
            </summary>
            <param name="record">The record to bind.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BindArgs.#ctor(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.BindArgs"/> class.
            </summary>
            <param name="records">The records to bind.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindArgs.Record">
            <summary>
            Gets or sets the record to bind.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.BindArgs.Records"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindArgs.Records">
            <summary>
            Gets or sets the records to bind.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.BindArgs.Record"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindArgs.IsPrivate">
            <summary>
            Gets or sets whether the record(s) are private to this client (and the
            server) or visible to other clients. Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.BindFailureArgs">
            <summary>
            Arguments for bind failure callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindFailureArgs.Record">
            <summary>
            Gets the record to which the client failed to be bound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.BindFailureArgs.Records"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindFailureArgs.Records">
            <summary>
            Gets the records to which the client failed to be bound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.BindFailureArgs.Record"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindFailureArgs.IsPrivate">
            <summary>
            Gets whether the records are private.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BindFailureArgs.#ctor(FM.LiveSwitch.Signalling.Record[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.BindFailureArgs"/> class.
            </summary>
            <param name="records">The records to which the client failed to be bound.</param>
            <param name="isPrivate">Whether the records are private.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Binding">
            <summary>
            A key/value/privacy identifier for a client binding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Binding.Record">
            <summary>
            Gets or sets the binding record.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Binding.IsPrivate">
            <summary>
            Gets or sets whether the record is private to this client (and the
            server) or visible to other clients. Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.#ctor(FM.LiveSwitch.Signalling.Record)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Binding" /> class.
            </summary>
            <param name="record">The binding record.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.#ctor(FM.LiveSwitch.Signalling.Record,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Binding" /> class.
            </summary>
            <param name="record">The binding record.</param>
            <param name="isPrivate">Whether or not the record is private.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.Duplicate">
            <summary>
            Creates a deep clone of this binding.
            </summary>
            <returns>A deep clone of this binding.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.ToJson">
            <summary>
            Serializes the record to JSON.
            </summary>
            <returns>The record in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.ToJson(FM.LiveSwitch.Signalling.Binding)">
            <summary>
            Serializes a binding to JSON.
            </summary>
            <param name="binding">A binding to serialize.</param>
            <returns>A JSON-serialized binding.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.FromJson(System.String)">
            <summary>
            Deserializes a binding from JSON.
            </summary>
            <param name="bindingJson">A JSON string to deserialize.</param>
            <returns>A deserialized binding.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.ToJsonArray(FM.LiveSwitch.Signalling.Binding[])">
            <summary>
            Serializes a list of bindings to JSON.
            </summary>
            <param name="bindings">A list of bindings to serialize.</param>
            <returns>A JSON-serialized array of bindings.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.FromJsonArray(System.String)">
            <summary>
            Deserializes a list of bindings from JSON.
            </summary>
            <param name="bindingsJson">A JSON string to deserialize.</param>
            <returns>A deserialized list of bindings.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.BindSuccessArgs">
            <summary>
            Arguments for bind success callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindSuccessArgs.Record">
            <summary>
            Gets the record to which the client was bound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.BindSuccessArgs.Records"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindSuccessArgs.Records">
            <summary>
            Gets the records to which the client was bound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.BindSuccessArgs.Record"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindSuccessArgs.IsPrivate">
            <summary>
            Gets whether the records are private.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BindSuccessArgs.#ctor(FM.LiveSwitch.Signalling.Record[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.BindSuccessArgs"/> class.
            </summary>
            <param name="records">The records to which the client was bound.</param>
            <param name="isPrivate">Whether the records are private.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Client">
            <summary>
            A signalling client, used to create a persistent
            connection to a signalling server for the purposes
            of receiving JSON and binary data in real-time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.DisconnectException">
            <summary>
            Gets the disconnect exception, which is set if
            the connection is reset abnormally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.ClientId">
            <summary>
            Gets or sets the client ID. The client ID
            is generated by the server and remains
            constant for the lifetime of this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.StreamId">
            <summary>
            Gets or sets the stream ID. The stream ID
            is generated by the server and changes each
            time the client reconnects.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.AuthToken">
            <summary>
            Gets or sets the auth token. The auth token
            is generated by the server and changes each
            time the client reconnects.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.UserId">
            <summary>
            Gets or sets the user ID. The user ID
            can be set before connecting to the server
            to allow client events to be associated
            with a particular user.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.DeviceId">
            <summary>
            Gets or sets the device ID. The device ID
            can be set before connecting to the server
            to allow client events to be associated
            with a particular device.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.ServerTimeout">
            <summary>
            Gets or sets the number of milliseconds before the server takes action to discover
            if this client is idling or still active.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnStateChange">
            <summary>
            Raised when the state changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.StreamRequestUrl">
            <summary>
            Gets or sets the absolute URL of the signalling request handler for streaming connections, typically
            ending with sync.ashx.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.Synchronous">
            <summary>
            Gets or sets whether or not to execute client methods synchronously. This approach is not
            recommended for UI threads, as it will block until the request completes.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.Token">
            <summary>
            Gets or sets the token sent with each request for load balancing purposes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.StreamRequestTimeout">
            <summary>
            Gets the number of milliseconds to wait for a stream request to
            return a response before it is aborted and another stream request is attempted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.DisableWebSockets">
            <summary>
            Gets or sets whether to disable WebSocket protocol support and use long-polling,
            even if the server is capable of accepting WebSocket requests.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnClientChannelReceive">
            <summary>
            Raised whenever a message is received on the reserved client channel.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnDeviceChannelReceive">
            <summary>
            Raised whenever a message is received on the reserved device channel.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUserChannelReceive">
            <summary>
            Raised whenever a message is received on the reserved user channel.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServerBind">
            <summary>
            Raised whenever the server binds
            the client to a record or set of records.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServerUnbind">
            <summary>
            Raised whenever the server unbinds
            the client from a record or set of records.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServerSubscribe">
            <summary>
            Raised whenever the server subscribes
            the client to a channel or set of channels.
            The OnReceive and OnPresence properties of
            <see cref="T:FM.LiveSwitch.Signalling.ServerSubscribeArgs"/> should be set
            if you want to process incoming messages and/or
            presence notifications.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServerUnsubscribe">
            <summary>
            Raised whenever the server unsubscribes
            the client from a channel or set of channels.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnConnectSuccess">
            <summary>
            Raised whenever a client successfully connects.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnConnectFailure">
            <summary>
            Raised whenever a client fails to connect.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnSubscribeSuccess">
            <summary>
            Raised whenever a client successfully subscribes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnSubscribeFailure">
            <summary>
            Raised whenever a client fails to subscribe.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnBindSuccess">
            <summary>
            Raised whenever a client successfully binds.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnBindFailure">
            <summary>
            Raised whenever a client fails to bind.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnsubscribeSuccess">
            <summary>
            Raised whenever a client successfully unsubscribes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnsubscribeFailure">
            <summary>
            Raised whenever a client fails to unsubscribe.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnbindSuccess">
            <summary>
            Raised whenever a client successfully unbinds.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnbindFailure">
            <summary>
            Raised whenever a client fails to unbind.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnDisconnectComplete">
            <summary>
            Raised whenever a client completes a disconnect.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnPublishSuccess">
            <summary>
            Raised whenever a client successfully publishes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnPublishFailure">
            <summary>
            Raised whenever a client fails to publish.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServiceSuccess">
            <summary>
            Raised whenever a client successfully services.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServiceFailure">
            <summary>
            Raised whenever a client fails to service.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="requestUrl">The absolute URL of the signalling server request handler.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="requestUrl">The absolute URL of the signalling server request handler.</param>
            <param name="sharedLock">Shared application lock object.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="requestUrl">The absolute URL of the signalling server request handler for non-streaming requests.</param>
            <param name="streamRequestUrl">The absolute URL of the signalling server request handler for streaming requests.</param>
            <param name="sharedLock">Shared application lock object.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.GenerateToken">
            <summary>
            Generates a new token based on the current date/time.
            </summary>
            <returns>The generated token.</returns>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnConnectRequest">
            <summary>
            Raised before a client connect request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientConnectRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnConnectResponse">
            <summary>
            Raised after a client connect response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientConnectResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnConnectEnd">
            <summary>
            Raised after a client connect ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientConnectEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnDisconnectRequest">
            <summary>
            Raised before a client disconnect request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientDisconnectRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnDisconnectResponse">
            <summary>
            Raised after a client disconnect response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientDisconnectResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnDisconnectEnd">
            <summary>
            Raised after a client disconnect ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientDisconnectEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnBindRequest">
            <summary>
            Raised before a client bind request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientBindRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnBindResponse">
            <summary>
            Raised after a client bind response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientBindResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnBindEnd">
            <summary>
            Raised after a client bind ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientBindEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnbindRequest">
            <summary>
            Raised before a client unbind request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientUnbindRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnbindResponse">
            <summary>
            Raised after a client unbind response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientUnbindResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnbindEnd">
            <summary>
            Raised after a client unbind ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientUnbindEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnSubscribeRequest">
            <summary>
            Raised before a client subscribe request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientSubscribeRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnSubscribeResponse">
            <summary>
            Raised after a client subscribe response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientSubscribeResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnSubscribeEnd">
            <summary>
            Raised after a client subscribe ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientSubscribeEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnsubscribeRequest">
            <summary>
            Raised before a client unsubscribe request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientUnsubscribeRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnsubscribeResponse">
            <summary>
            Raised after a client unsubscribe response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientUnsubscribeResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnsubscribeEnd">
            <summary>
            Raised after a client unsubscribe ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientUnsubscribeEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnPublishRequest">
            <summary>
            Raised before a client publish request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientPublishRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnPublishResponse">
            <summary>
            Raised after a client publish response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientPublishResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnPublishEnd">
            <summary>
            Raised after a client publish ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientPublishEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServiceRequest">
            <summary>
            Raised before a client service request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientServiceRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServiceResponse">
            <summary>
            Raised after a client service response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientServiceResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServiceEnd">
            <summary>
            Raised after a client service ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientServiceEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SetCustomOnReceive(System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Sets a callback to be invoked whenever messages are received on the specified
            channel.
            </summary>
            <remarks>
            <para>
            This method does <b>not</b> subscribe you to a channel. Rather, it caches a
            callback to be executed when messages are received on a particular
            channel.
            </para>
            </remarks>
            <param name="channel">The channel over which the messages will be received.</param>
            <param name="onReceive">The callback to invoke when a message is received.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SetCustomOnReceiveWithTag(System.String,System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Sets a callback to be invoked whenever messages are received on the specified
            channel. The tag allows multiple callbacks to be registered for
            the same channel.
            </summary>
            <remarks>
            <para>
            This method does <b>not</b> subscribe you to a channel. Rather, it caches a
            callback to be executed when messages are received on a particular
            channel.
            </para>
            </remarks>
            <param name="channel">The channel over which the messages will be received.</param>
            <param name="tag">The identifier for this callback.</param>
            <param name="onReceive">The callback to invoke when a message is received.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.GetCustomOnReceive(System.String)">
            <summary>
            Gets the callback invoked whenever messages are received on the specified
            channel.
            </summary>
            <param name="channel">The channel over which the messages are being received.</param>
            <returns>The callback invoked when a message is received, if a callback
            is set; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.GetCustomOnReceiveWithTag(System.String,System.String)">
            <summary>
            Gets the callback invoked whenever messages are received on the specified
            channel.  The tag denotes a specific callback.
            </summary>
            <param name="channel">The channel over which the messages are being received.</param>
            <param name="tag">The identifier for the callback.</param>
            <returns>The callback invoked when a message is received, if a callback
            is set; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnsetCustomOnReceive(System.String)">
            <summary>
            Unsets a callback invoked whenever messages are received on the specified
            channel.
            </summary>
            <remarks>
            <para>
            This method does <b>not</b> unsubscribe you from a channel. Rather, it stops the
            callback from executing when messages are received on a particular
            channel.
            </para>
            </remarks>
            <param name="channel">The channel over which the messages are being received.</param>
            <returns><c>true</c> if the callback was previously set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnsetCustomOnReceiveWithTag(System.String,System.String)">
            <summary>
            Unsets a callback invoked whenever messages are received on the specified
            channel.  The tag denotes a specific callback.
            </summary>
            <remarks>
            <para>
            This method does <b>not</b> unsubscribe you from a channel. Rather, it stops the
            callback from executing when messages are received on a particular
            channel.
            </para>
            </remarks>
            <param name="channel">The channel over which the messages are being received.</param>
            <param name="tag">The identifier for this callback.</param>
            <returns><c>true</c> if the callback was previously set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Connect">
            <summary>
            Creates a persistent streaming connection to the signalling server.
            </summary>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Connect(FM.LiveSwitch.Signalling.ConnectArgs)">
            <summary>
            Creates a persistent streaming connection to the signalling server.
            </summary>
            <param name="connectArgs">The connect arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Disconnect">
            <summary>
            Destroys the persistent streaming connection to the signalling server.
            </summary>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Disconnect(FM.LiveSwitch.Signalling.DisconnectArgs)">
            <summary>
            Destroys the persistent streaming connection to the signalling server.
            </summary>
            <param name="disconnectArgs">The disconnect arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Bind(FM.LiveSwitch.Signalling.BindArgs)">
            <summary>
            Adds key/value metadata to the client record for the lifetime of the connection.
            </summary>
            <param name="bindArgs">The bind arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Unbind(FM.LiveSwitch.Signalling.UnbindArgs)">
            <summary>
            Removes key/value metadata from the client record.
            </summary>
            <param name="unbindArgs">The unbind arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Subscribe(FM.LiveSwitch.Signalling.SubscribeArgs)">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="subscribeArgs">The subscribe arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Unsubscribe(FM.LiveSwitch.Signalling.UnsubscribeArgs)">
            <summary>
            Removes a listener for incoming messages on one or more channels.
            </summary>
            <param name="unsubscribeArgs">The unsubscribe arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Publish(FM.LiveSwitch.Signalling.PublishArgs)">
            <summary>
            Broadcasts data to all client subscribers on a given channel.
            </summary>
            <param name="publishArgs">The publish arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Service(FM.LiveSwitch.Signalling.ServiceArgs)">
            <summary>
            Sends data to the server on a given channel.
            </summary>
            <param name="serviceArgs">The service arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.StartBatch">
            <summary>
            Flags the start of a batch of requests to be sent together to the server.
            </summary>
            <remarks>
            This is used in conjunction with <see cref="M:FM.LiveSwitch.Signalling.Client.EndBatch" />, which flags
            the end of a batch of requests and starts sending them to the server. Batching
            is used to optimize round-trips to the server by reducing the overhead
            associated with creating multiple HTTP requests.
            </remarks>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.InBatch">
            <summary>
            Gets whether or not requests are currently being batched.
            </summary>
            <returns><c>true</c> if requests are being batched; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.EndBatch">
            <summary>
            Flags the end of a batch of requests and starts sending them to the server.
            </summary>
            <remarks>
            This is used in conjunction with <see cref="M:FM.LiveSwitch.Signalling.Client.StartBatch" />, which must
            be called first to flag the start of a batch of requests to be sent together
            to the server. Batching is used to optimize round-trips to the server by
            reducing the overhead associated with creating multiple HTTP requests.
            </remarks>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.CreateFailureResponse(FM.LiveSwitch.Signalling.InputArgs,System.String)">
            <summary>
            Creates failure response arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <param name="error">The error.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.RaiseAction``1(FM.LiveSwitch.Action1{``0},``0,System.String)">
            <summary>
            Raises an action.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback">The callback.</param>
            <param name="args">The arguments.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.RaiseFunction``2(FM.LiveSwitch.Function1{``0,``1},``0,System.String)">
            <summary>
            Raises a function.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="callback">The callback.</param>
            <param name="args">The arguments.</param>
            <param name="source">The source.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.RaiseSubscribeFailure(FM.LiveSwitch.Signalling.SubscribeArgs,FM.LiveSwitch.Signalling.ClientResponse)">
            <summary>
            Raises the subscribe failure.
            </summary>
            <param name="subscribeArgs">The subscribe arguments.</param>
            <param name="response">The response arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.RaiseEvent``1(FM.LiveSwitch.Action2{FM.LiveSwitch.Signalling.Client,``0},``0,System.String)">
            <summary>
            Raises an event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventMethod">The event method.</param>
            <param name="args">The arguments.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.RaiseRequestEvent``1(FM.LiveSwitch.Action2{FM.LiveSwitch.Signalling.Client,``0},``0,System.String)">
            <summary>
            Raises a request event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventMethod">The event method.</param>
            <param name="args">The arguments.</param>
            <param name="eventName">Name of the event.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.RaiseResponseEvent``1(FM.LiveSwitch.Action2{FM.LiveSwitch.Signalling.Client,``0},``0,System.String,FM.LiveSwitch.Signalling.ClientResponse)">
            <summary>
            Raises a response event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventMethod">The event method.</param>
            <param name="args">The arguments.</param>
            <param name="eventName">Name of the event.</param>
            <param name="response">The response arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.RaiseEndEvent``1(FM.LiveSwitch.Action2{FM.LiveSwitch.Signalling.Client,``0},``0,System.String,FM.LiveSwitch.Signalling.ClientResponse)">
            <summary>
            Raises an end event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventMethod">The event method.</param>
            <param name="args">The arguments.</param>
            <param name="eventName">Name of the event.</param>
            <param name="response">The response arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.GetSubscribedChannels">
            <summary>
            Gets a list of all the channels to which the client is currently subscribed.
            </summary>
            <returns>A list of all the channels to which the client is currently subscribed</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.GetSubscribedChannels(System.String)">
            <summary>
            Gets a list of all the channels to which the client is currently subscribed.
            </summary>
            <param name="tag">The subscription tag identifier.</param>
            <returns>
            A list of all the channels to which the client is currently subscribed
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.GetBoundRecords">
            <summary>
            Gets a collection of all the records to which the client is currently bound.
            </summary>
            <returns>A collection of all the records to which the client is currently bound</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.ConnectAsync">
            <summary>
            Creates a persistent streaming connection to the signalling server.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.ConnectAsync(FM.LiveSwitch.Signalling.ConnectArgs)">
            <summary>
            Creates a persistent streaming connection to the signalling server.
            Note that this will override OnSuccess/OnFailure.
            </summary>
            <param name="connectArgs">The connect arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.DisconnectAsync">
            <summary>
            Destroys the persistent streaming connection to the signalling server.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.DisconnectAsync(FM.LiveSwitch.Signalling.DisconnectArgs)">
            <summary>
            Destroys the persistent streaming connection to the signalling server.
            Note that this will override OnComplete.
            </summary>
            <param name="disconnectArgs">The disconnect arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.BindAsync(FM.LiveSwitch.Signalling.BindArgs)">
            <summary>
            Adds key/value metadata to the client record for the lifetime of the connection.
            Note that this will override OnSuccess/OnFailure.
            </summary>
            <param name="bindArgs">The bind arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.BindAsync(FM.LiveSwitch.Signalling.Record)">
            <summary>
            Adds key/value metadata to the client record for the lifetime of the connection.
            </summary>
            <param name="record">The record to bind.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.BindAsync(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Adds key/value metadata to the client record for the lifetime of the connection.
            </summary>
            <param name="records">The records to bind.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnbindAsync(FM.LiveSwitch.Signalling.UnbindArgs)">
            <summary>
            Removes key/value metadata from the client record.
            Note that this will override OnSuccess/OnFailure.
            </summary>
            <param name="unbindArgs">The unbind arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnbindAsync(System.String)">
            <summary>
            Removes key/value metadata from the client record.
            </summary>
            <param name="key">The key to unbind.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnbindAsync(System.String[])">
            <summary>
            Removes key/value metadata from the client record.
            </summary>
            <param name="keys">The keys to unbind.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(FM.LiveSwitch.Signalling.SubscribeArgs)">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            Note that this will override OnSuccess/OnFailure.
            </summary>
            <param name="subscribeArgs">The subscribe arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String)">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String[])">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String,System.String)">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String[],System.String)">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String[],FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String,System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String[],System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channel.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String[],FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channels.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String,System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channel.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String[],System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channels.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnsubscribeAsync(FM.LiveSwitch.Signalling.UnsubscribeArgs)">
            <summary>
            Removes a listener for incoming messages on one or more channels.
            Note that this will override OnSuccess/OnFailure.
            </summary>
            <param name="unsubscribeArgs">The unsubscribe arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnsubscribeAsync(System.String)">
            <summary>
            Removes a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to unsubscribe.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnsubscribeAsync(System.String[])">
            <summary>
            Removes a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to unsubscribe.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnsubscribeAsync(System.String,System.String)">
            <summary>
            Removes a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to unsubscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnsubscribeAsync(System.String[],System.String)">
            <summary>
            Removes a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to unsubscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.PublishAsync(FM.LiveSwitch.Signalling.PublishArgs)">
            <summary>
            Broadcasts data to all client subscribers on a given channel.
            Note that this will override OnSuccess/OnFailure.
            </summary>
            <param name="publishArgs">The publish arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.PublishAsync(System.String,System.String)">
            <summary>
            Broadcasts data to all client subscribers on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.PublishAsync(System.String,System.Byte[])">
            <summary>
            Broadcasts data to all client subscribers on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.PublishAsync(System.String,System.String,System.String)">
            <summary>
            Broadcasts data to all client subscribers on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.PublishAsync(System.String,System.Byte[],System.String)">
            <summary>
            Broadcasts data to all client subscribers on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.ServiceAsync(FM.LiveSwitch.Signalling.ServiceArgs)">
            <summary>
            Sends data to the server on a given channel.
            Note that this will override OnSuccess/OnFailure.
            </summary>
            <param name="serviceArgs">The service arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.ServiceAsync(System.String,System.String)">
            <summary>
            Sends data to the server on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.ServiceAsync(System.String,System.Byte[])">
            <summary>
            Sends data to the server on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.ServiceAsync(System.String,System.String,System.String)">
            <summary>
            Sends data to the server on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.ServiceAsync(System.String,System.Byte[],System.String)">
            <summary>
            Sends data to the server on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientArgs">
            <summary>
            Base arguments for <see cref="P:FM.LiveSwitch.Signalling.ClientArgs.Client" />-triggered events.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientArgs.Client">
            <summary>
            Gets or sets the <see cref="P:FM.LiveSwitch.Signalling.ClientArgs.Client" /> triggering the event.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientBase">
            <summary>
            Base class for signalling clients and publishers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientBase.RequestUrl">
            <summary>
            Gets or sets the absolute URL of the signalling request handler, typically
            ending with sync.ashx.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientBase.RequestTimeout">
            <summary>
            Gets or sets the number of milliseconds to wait for a standard request to
            return a response before it is aborted and another request is attempted.
            Defaults to 15000 (15 seconds).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientBase.RequestMaxRetries">
            <summary>
            Gets or sets the maximum number of retries allowed for a standard request.
            Defaults to 0.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientBase.DomainKey">
            <summary>
            Gets or sets the domain key for sandboxing connections to the server.
            Defaults to "11111111-1111-1111-1111-111111111111".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientBase.DomainName">
            <summary>
            Gets or sets the domain name to send as the <tt>Referrer</tt> with each request.
            Defaults to "localhost".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientBase.DisableBinary">
            <summary>
            Gets or sets whether to disable the transmission of binary payloads
            as binary on the wire. If set to <c>true</c>, binary payloads will
            be sent over the wire as base64-encoded strings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientBase.ConcurrencyMode">
            <summary>
            Gets or sets a flag indicating the level of concurrency in the current process.
            The intended use of this property is to lighten the processor load when hundreds
            or thousands of instances are created in a single process for the purposes of
            generating load for testing.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.ClientBase.OnUnhandledException">
            <summary>
            Raised when an exception is thrown in user code and not handled,
            typically in a callback or event handler.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.ClientBase.OnRequestCreated">
            <summary>
            Raised whenever a new request is created
            and about to be transferred to the server. This is a good place to read
            or modify outgoing messages.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.ClientBase.OnResponseReceived">
            <summary>
            Raised whenever a new response is received
            and about to be processed by the client. This is a good place to read
            or modify incoming messages.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.ClientBase.OnHttpRequestCreated">
            <summary>
            Raised whenever an underlying HTTP request
            has been created and is about to be transferred to the server. This is a
            good place to add headers/cookies. For WebSocket streams, this will fire
            only once for the initial HTTP-based handshake.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.ClientBase.OnHttpResponseReceived">
            <summary>
            Raised whenever an underlying HTTP response
            has been received and is about to be processed by the client. This is a
            good place to read headers/cookies. For WebSocket streams, this will fire
            only once for the initial HTTP-based handshake.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.InternalOnRequestCreated(FM.LiveSwitch.Signalling.MessageRequestCreatedArgs)">
            <summary>
            Wrapper for the <see cref="E:FM.LiveSwitch.Signalling.ClientBase.OnRequestCreated"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.InternalOnResponseReceived(FM.LiveSwitch.Signalling.MessageResponseReceivedArgs)">
            <summary>
            Wrapper for the <see cref="E:FM.LiveSwitch.Signalling.ClientBase.OnResponseReceived"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.InternalOnHttpRequestCreated(FM.LiveSwitch.HttpRequestCreatedArgs)">
            <summary>
            Wrapper for the <see cref="E:FM.LiveSwitch.Signalling.ClientBase.OnHttpRequestCreated"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.InternalOnHttpResponseReceived(FM.LiveSwitch.HttpResponseReceivedArgs)">
            <summary>
            Wrapper for the <see cref="E:FM.LiveSwitch.Signalling.ClientBase.OnHttpResponseReceived"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientBase"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.CreateHeaders">
            <summary>
            Creates an initial set of headers, including
            the domain key and domain name.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.SanitizeDomainName(System.String)">
            <summary>
            Takes a domain name and ensures it starts with http:// or https://.
            </summary>
            <param name="domainName">The domain name to sanitize.</param>
            <returns>The sanitized domain name.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.RaiseUnhandledException(System.Exception)">
            <summary>
            Raises an unhandled exception.
            </summary>
            <param name="exception">The unhandled exception.</param>
            <returns><c>true</c> if the exception was handled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientBindEndArgs">
            <summary>
            Arguments for OnBindEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBindEndArgs.#ctor(FM.LiveSwitch.Signalling.BindArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientBindEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientBindRequestArgs">
            <summary>
            Arguments forClient.OnBindRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBindRequestArgs.#ctor(FM.LiveSwitch.Signalling.BindArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientBindRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientBindResponseArgs">
            <summary>
            Arguments for OnBindResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBindResponseArgs.#ctor(FM.LiveSwitch.Signalling.BindArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientBindResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientConnectEndArgs">
            <summary>
            Arguments for OnConnectEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientConnectEndArgs.#ctor(FM.LiveSwitch.Signalling.ConnectArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientConnectEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientConnectRequestArgs">
            <summary>
            Arguments for OnConnectRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientConnectRequestArgs.#ctor(FM.LiveSwitch.Signalling.ConnectArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientConnectRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientConnectResponseArgs">
            <summary>
            Arguments for OnConnectResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientConnectResponseArgs.#ctor(FM.LiveSwitch.Signalling.ConnectArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientConnectResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientDisconnectEndArgs">
            <summary>
            Arguments for OnDisconnectEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientDisconnectEndArgs.#ctor(FM.LiveSwitch.Signalling.DisconnectArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientDisconnectEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientDisconnectRequestArgs">
            <summary>
            Arguments for OnDisconnectRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientDisconnectRequestArgs.#ctor(FM.LiveSwitch.Signalling.DisconnectArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientDisconnectRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientDisconnectResponseArgs">
            <summary>
            Arguments for OnDisconnectResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientDisconnectResponseArgs.#ctor(FM.LiveSwitch.Signalling.DisconnectArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientDisconnectResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientEndArgs">
            <summary>
            Base arguments for client events that occur
            after a response has been processed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientEndArgs.Message">
            <summary>
            Gets or sets the message received from the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientEndArgs.Exception">
            <summary>
            Gets or sets the exception generated while completing the request, if any.
            Will be <c>null</c> if no exception was generated.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientEndArgsGeneric`1">
            <summary>
            Generic base arguments for client events that occur
            after a response has been processed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientEndArgsGeneric`1.MethodArgs">
            <summary>
            Gets or sets the original arguments passed into the client method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientEndArgsGeneric`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientEndArgsGeneric`1"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientPublishEndArgs">
            <summary>
            Arguments for OnPublishEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientPublishEndArgs.#ctor(FM.LiveSwitch.Signalling.PublishArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientPublishEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientPublishRequestArgs">
            <summary>
            Arguments for OnPublishRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientPublishRequestArgs.#ctor(FM.LiveSwitch.Signalling.PublishArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientPublishRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientPublishResponseArgs">
            <summary>
            Arguments for Client.OnPublishResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientPublishResponseArgs.#ctor(FM.LiveSwitch.Signalling.PublishArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientPublishResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientRequest">
            <summary>
            Internal class used to hold details about a client request queued for
            delivery to the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientRequest.Message">
            <summary>
            Gets or sets the request the client wishes to send to the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientRequest.Callback">
            <summary>
            Gets or sets the callback to invoke after receiving a response from the server.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientRequestArgs">
            <summary>
            Base arguments for client events that occur
            before a request is sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientRequestArgs.Cancel">
            <summary>
            Gets or sets whether or not to cancel the request.
            If set to <c>true</c>, the request will not be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientRequestArgsGeneric`1">
            <summary>
            Generic base arguments for client events that occur
            before a request is sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientRequestArgsGeneric`1.MethodArgs">
            <summary>
            Gets or sets the original arguments passed into the client method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientRequestArgsGeneric`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientRequestArgsGeneric`1"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientResponse">
            <summary>
            The internal representation of data received in response to a client request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponse.Message">
            <summary>
            Gets or sets the first response received from the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponse.Messages">
            <summary>
            Gets or sets the responses received from the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponse.Exception">
            <summary>
            Gets or sets the exception generated by the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponse.ErrorCode">
            <summary>
            Gets the error code value, if the exception was generated by the signalling engine; otherwise -1.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponse.ErrorMessage">
            <summary>
            Gets the error message value, if the exception was generated by the signalling engine; otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponse.FailureSource">
            <summary>
            Gets or sets a value indicating the failure source for response.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientResponseArgs">
            <summary>
            Base arguments for client events that occur
            after a response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponseArgs.Message">
            <summary>
            Gets or sets the message received from the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponseArgs.Exception">
            <summary>
            Gets or sets the exception generated while completing the request, if any.
            Will be <c>null</c> if no exception was generated.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientResponseArgsGeneric`1">
            <summary>
            Generic base arguments for client events that occur
            after a response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponseArgsGeneric`1.MethodArgs">
            <summary>
            Gets or sets the original arguments passed into the client method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientResponseArgsGeneric`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientResponseArgsGeneric`1"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientSendState">
            <summary>
            The internal state of a client request batch sent to the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientSendState.Requests">
            <summary>
            Gets or sets the requests to be sent to the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientSendState.RequestMapping">
            <summary>
            Gets or sets the mapping of request IDs to requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientSendState.IsStream">
            <summary>
            Gets or sets whether this is a streaming request.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientServiceEndArgs">
            <summary>
            Arguments for Client.OnServiceEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientServiceEndArgs.#ctor(FM.LiveSwitch.Signalling.ServiceArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientServiceEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientServiceRequestArgs">
            <summary>
            Arguments for Client.OnServiceRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientServiceRequestArgs.#ctor(FM.LiveSwitch.Signalling.ServiceArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientServiceRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientServiceResponseArgs">
            <summary>
            Arguments for OnServiceResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientServiceResponseArgs.#ctor(FM.LiveSwitch.Signalling.ServiceArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientServiceResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientState">
            <summary>
            The state of a signalling client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ClientState.New">
            <summary>
            Indicates that the client is new and has not yet connected to the server.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ClientState.Connecting">
            <summary>
            Indicates that the client is connecting to the server.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ClientState.Connected">
            <summary>
            Indicates that the client is connected to the server.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ClientState.Disconnecting">
            <summary>
            Indicates that the client is disconnecting from the server.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ClientState.Disconnected">
            <summary>
            Indicates that the client has disconnected from the server.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientSubscribeEndArgs">
            <summary>
            Arguments for OnSubscribeEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientSubscribeEndArgs.#ctor(FM.LiveSwitch.Signalling.SubscribeArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientSubscribeEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientSubscribeRequestArgs">
            <summary>
            Arguments for OnSubscribeRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientSubscribeRequestArgs.#ctor(FM.LiveSwitch.Signalling.SubscribeArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientSubscribeRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientSubscribeResponseArgs">
            <summary>
            Arguments for OnSubscribeResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientSubscribeResponseArgs.#ctor(FM.LiveSwitch.Signalling.SubscribeArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientSubscribeResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientUnbindEndArgs">
            <summary>
            Arguments for OnUnbindEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientUnbindEndArgs.#ctor(FM.LiveSwitch.Signalling.UnbindArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientUnbindEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientUnbindRequestArgs">
            <summary>
            Arguments for OnUnbindRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientUnbindRequestArgs.#ctor(FM.LiveSwitch.Signalling.UnbindArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientUnbindRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientUnbindResponseArgs">
            <summary>
            Arguments for OnUnbindResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientUnbindResponseArgs.#ctor(FM.LiveSwitch.Signalling.UnbindArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientUnbindResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientUnsubscribeEndArgs">
            <summary>
            Arguments for OnUnsubscribeEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientUnsubscribeEndArgs.#ctor(FM.LiveSwitch.Signalling.UnsubscribeArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientUnsubscribeEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientUnsubscribeRequestArgs">
            <summary>
            Arguments for OnUnsubscribeRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientUnsubscribeRequestArgs.#ctor(FM.LiveSwitch.Signalling.UnsubscribeArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientUnsubscribeRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientUnsubscribeResponseArgs">
            <summary>
            Arguments for OnUnsubscribeResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientUnsubscribeResponseArgs.#ctor(FM.LiveSwitch.Signalling.UnsubscribeArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientUnsubscribeResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.CompleteArgs">
            <summary>
            Base arguments for client "OnComplete" callbacks.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ConcurrencyMode">
            <summary>
            Various behaviour modes for the streaming connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConcurrencyMode.Low">
            <summary>
            Indicates that the client will not be competing with
            many other clients within the same process.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConcurrencyMode.High">
            <summary>
            Indicates that the client will have to compete with
            hundreds or thousands of other clients within the same
            process for processor time.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConcurrencyMode.Default">
            <summary>
            Same as <see cref="F:FM.LiveSwitch.Signalling.ConcurrencyMode.Low"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ConnectArgs">
            <summary>
            Arguments for client connect requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ConnectArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the request fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ConnectArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke if the request succeeds.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ConnectFailureArgs">
            <summary>
            Arguments for connect failure callbacks.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ConnectionType">
            <summary>
            Allowed connection type values for <see cref="T:FM.LiveSwitch.Signalling.Message">Messages</see>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConnectionType.WebSocket">
            <summary>
            Indicates that the WebSocket connection type is supported.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConnectionType.LongPolling">
            <summary>
            Indicates that the long-polling connection type is supported.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConnectionType.CallbackPolling">
            <summary>
            Indicates that the callback-polling connection type is supported.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConnectionType.IFrame">
            <summary>
            (Unsupported) Indicates that the iframe connection type is supported.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConnectionType.Flash">
            <summary>
            (Unsupported) Indicates that the flash connection type is supported.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConnectionType.NotSet">
            <summary>
            Indicates that the value was not set.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ConnectSuccessArgs">
            <summary>
            Arguments for connect success callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ConnectSuccessArgs.ConnectionType">
            <summary>
            Gets or sets the connection type of the stream.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Defaults">
            <summary>
            A collection of read-only default values for signalling.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Defaults.DomainKey">
            <summary>
            Gets the default domain key ("11111111-1111-1111-1111-111111111111").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Defaults.DomainName">
            <summary>
            Gets the default domain name ("localhost").
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.DeferredStreamState">
            <summary>
            The state of a deferred stream call.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.DeferredStreamState.ReceivedMessages">
            <summary>
            Gets or sets whether the client received messages.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.DisconnectArgs">
            <summary>
            Arguments for client disconnect requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.DisconnectArgs.OnComplete">
            <summary>
            Gets or sets the callback to invoke after the disconnection is complete.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.DisconnectCompleteArgs">
            <summary>
            Arguments for disconnect complete callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.DisconnectCompleteArgs.Exception">
            <summary>
            Gets or sets the exception that was thrown while disconnecting.
            Will be <c>null</c> if the disconnect was performed gracefully.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Extensible">
            <summary>
            <para>
            Base class that defines the properties and methods shared by any class that
            is considered extensible by the Bayeux specification.
            </para>
            <para>
            The Bayeux specification defines the Ext field, which allows custom data to be
            stored with a message using a namespaced key to access the information. This class
            provides methods that store and retrieve JSON data stored in this manner. For example,
            the <see cref="P:FM.LiveSwitch.Signalling.Extensible.MetaJson" /> property uses the Ext field to store its value
            using "fm.meta" as a key.
            </para>
            <para>
            In addition, classes which inherit from <see cref="T:FM.LiveSwitch.Signalling.Extensible" /> can store
            dynamic property values for local read/write access without the need to serialize
            to JSON. This can aid greatly in the
            development of third-party extensions to signalling. Custom information can be stored
            with method arguments in the "before" event and read out again for further
            processing in the "after" event.
            </para>
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.MetaExtensionName">
            <summary>
            Gets the reserved extension name for message/publication meta-data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.ReturnDataExtensionName">
            <summary>
            Gets the reserved extension name for whether or not data should be included in the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.RemoteClientExtensionName">
            <summary>
            Gets the reserved extension name for details about a remote client.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.SubscribedClientsExtensionName">
            <summary>
            Gets the reserved extension name for details about subscribed clients.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.ServerTimeoutExtensionName">
            <summary>
            Gets the reserved extension name for the server-defined timeout interval.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.UserIdExtensionName">
            <summary>
            Gets the reserved extension name for the user ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.DeviceIdExtensionName">
            <summary>
            Gets the reserved extension name for the device ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.StreamIdExtensionName">
            <summary>
            Gets the reserved extension name for the stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.AuthTokenExtensionName">
            <summary>
            Gets the reserved extension name for the auth token.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.TagExtensionName">
            <summary>
            Gets the reserved extension name for tags.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.PresenceExtensionName">
            <summary>
            Gets the reserved extension name for requesting presence.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.IsPrivateExtensionName">
            <summary>
            Gets the reserved extension name for indicating privacy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.AcknowledgementExtensionName">
            <summary>
            Gets the reserved extension name for acknowledgement of received messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.ServerActionsExtensionName">
            <summary>
            Gets the reserved extension name for passing back server actions to a client.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.DisableBinaryExtensionName">
            <summary>
            Gets the reserved extension name for disabling the transmission of binary data as binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.Extensions">
            <summary>
            Gets or sets the internal extensions collection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.ExtensionCount">
            <summary>
            Gets the number of extensions stored with this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.ExtensionNames">
            <summary>
            Gets the names of the extensions stored with this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.CopyExtensions(FM.LiveSwitch.Signalling.Extensible)">
            <summary>
            Copies extension values from one instance into this instance.
            </summary>
            <param name="extensible">The object with the extensions to copy.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SetExtensionValueJson(System.String,System.String)">
            <summary>
            Stores a serialized value in the extensions.  Must be valid JSON.
            </summary>
            <param name="name">Fully-qualified extension name.</param>
            <param name="valueJson">The extension value in valid JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SetExtensionValueJson(System.String,System.String,System.Boolean)">
            <summary>
            Stores a serialized value in the extensions.  Must be valid JSON.
            </summary>
            <param name="name">Fully-qualified extension name.</param>
            <param name="valueJson">The extension value in valid JSON format.</param>
            <param name="validate">Whether or not to validate the JSON value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.GetExtensionValueJson(System.String)">
            <summary>
            Gets a serialized value stored in the extensions.
            </summary>
            <param name="name">Fully-qualified extension name.</param>
            <returns>The extension value in JSON format.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.MetaJson">
            <summary>
            Gets or sets meta-data associated with the message/publication.  Must be valid JSON. 
            </summary>
            <remarks>
            Use this property to define meta-data about the request itself, such as
            authentication details, etc.
            </remarks>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedGetKey(System.String[])">
            <summary>
            Gets the first key from an array of keys.
            </summary>
            <param name="keys">The keys to scan.</param>
            <returns>The first key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetKey(System.String)">
            <summary>
            Converts a key to a validated key array.
            </summary>
            <param name="key">The key to convert.</param>
            <returns>The validated key array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetKey(System.String,System.Boolean)">
            <summary>
            Converts a key to a validated key array.
            </summary>
            <param name="key">The key to convert.</param>
            <param name="validate">Whether or not to validate the record.</param>
            <returns>The validated key array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedGetKeys(System.String[])">
            <summary>
            Converts an array of keys to itself.
            </summary>
            <param name="keys">The array of keys.</param>
            <returns>The array of keys.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetKeys(System.String[])">
            <summary>
            Converts an array of keys to a validated key array.
            </summary>
            <param name="keys">The array of keys.</param>
            <returns>The array of validated keys.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetKeys(System.String[],System.Boolean)">
            <summary>
            Converts an array of keys to a validated key array.
            </summary>
            <param name="keys">The array of keys.</param>
            <param name="validate">Whether or not to validate the records.</param>
            <returns>The array of validated keys.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedGetRecord(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Gets the first record from an array of records.
            </summary>
            <param name="records">The records to scan.</param>
            <returns>The first record.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetRecord(FM.LiveSwitch.Signalling.Record)">
            <summary>
            Converts a record to a validated record array.
            </summary>
            <param name="record">The record to convert.</param>
            <returns>The validated record array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetRecord(FM.LiveSwitch.Signalling.Record,System.Boolean)">
            <summary>
            Converts a record to a validated record array.
            </summary>
            <param name="record">The record to convert.</param>
            <param name="validate">Whether or not to validate the record.</param>
            <returns>The validated record array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedGetRecords(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Converts an array of records to itself.
            </summary>
            <param name="records">The array of records.</param>
            <returns>The array of records.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetRecords(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Converts an array of records to an array of validated records.
            </summary>
            <param name="records">The array of records.</param>
            <returns>The array of validated records.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetRecords(FM.LiveSwitch.Signalling.Record[],System.Boolean)">
            <summary>
            Converts an array of records to an array of validated records.
            </summary>
            <param name="records">The array of records.</param>
            <param name="validate">Whether or not to validate the records.</param>
            <returns>The array of validated records.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedGetChannel(System.String[])">
            <summary>
            Gets the first channel from an array of channels.
            </summary>
            <param name="channels">The channels to scan.</param>
            <returns>The first channel.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetChannel(System.String)">
            <summary>
            Converts a channel to a validated channel array.
            </summary>
            <param name="channel">The channel to convert.</param>
            <returns>The validated channel array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetChannel(System.String,System.Boolean)">
            <summary>
            Converts a channel to a validated channel array.
            </summary>
            <param name="channel">The channel to convert.</param>
            <param name="validate">Whether or not to validate the channel.</param>
            <returns>The validated channel array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedGetChannels(System.String[])">
            <summary>
            Converts an array of channels to itself.
            </summary>
            <param name="channels">The array of channels.</param>
            <returns>The array of channels.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetChannels(System.String[])">
            <summary>
            Converts an array of channels to an array of validated channels.
            </summary>
            <param name="channels">The array of channels.</param>
            <returns>The array of validated channels.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetChannels(System.String[],System.Boolean)">
            <summary>
            Converts an array of channels to an array of validated channels.
            </summary>
            <param name="channels">The array of channels.</param>
            <param name="validate">Whether or not to validate the channels.</param>
            <returns>The array of validated channels.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.ValidateChannel(System.String,System.String@)">
            <summary>
            Validates a channel.
            </summary>
            <param name="channel">The channel to validate.</param>
            <param name="error">The error, if validation failed.</param>
            <returns><c>true</c> if validation succeeded; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.ValidateRecord(FM.LiveSwitch.Signalling.Record,System.String@)">
            <summary>
            Validates a record.
            </summary>
            <param name="record">The record to validate.</param>
            <param name="error">The error, if validation failed.</param>
            <returns><c>true</c> if validation succeeded; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.ValidateKey(System.String,System.String@)">
            <summary>
            Validates a key.
            </summary>
            <param name="key">The key to validate.</param>
            <param name="error">The error, if validation failed.</param>
            <returns><c>true</c> if validation succeeded; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Extensions">
            <summary>
            The extensions library that wraps the Bayeux Ext field, used with instances of classes
            that derive from <see cref="T:FM.LiveSwitch.Signalling.Extensible" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensions.Count">
            <summary>
            Gets the number of extensions in the library.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensions.Names">
            <summary>
            Gets the names of the extensions in the library.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Extensions"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensions.GetValueJson(System.String)">
            <summary>
            Gets a serialized value stored in the extensions.
            </summary>
            <param name="name">Fully-qualified extension name.</param>
            <returns>The extension value (in JSON format).</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensions.SetValueJson(System.String,System.String)">
            <summary>
            Stores a serialized value in the extensions.  Must be valid JSON.
            </summary>
            <param name="name">Fully-qualified extension name.</param>
            <param name="valueJson">The extension value in valid JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensions.SetValueJson(System.String,System.String,System.Boolean)">
            <summary>
            Stores a serialized value in the extensions.  Must be valid JSON.
            </summary>
            <param name="name">Fully-qualified extension name.</param>
            <param name="valueJson">The extension value in valid JSON format.</param>
            <param name="validate">Whether or not to validate the JSON.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensions.ToJson">
            <summary>
            Serializes the extensions library to JSON.
            </summary>
            <returns>The serialized extensions library.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensions.ToJson(FM.LiveSwitch.Signalling.Extensions)">
            <summary>
            Serializes a single extensions library to JSON.
            </summary>
            <param name="extensions">The extensions library to serialize.</param>
            <returns>The serialized extensions library.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensions.FromJson(System.String)">
            <summary>
            Deserializes a single extensions library from JSON.
            </summary>
            <param name="extensionsJson">The JSON extensions library to deserialize.</param>
            <returns>The deserialized extensions library.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.FailureArgs">
            <summary>
            Base arguments for client "OnFailure" callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.FailureArgs.Exception">
            <summary>
            Gets or sets the exception generated while completing the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.FailureArgs.ErrorCode">
            <summary>
            Gets the error code value, if the exception was generated by the signalling engine; otherwise -1.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.FailureArgs.ErrorMessage">
            <summary>
            Gets the error message value, if the exception was generated by the signalling engine; otherwise <c>null</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.HttpMessageTransfer">
            <summary>
            Defines methods for transferring messages using an instance of <see cref="T:FM.LiveSwitch.HttpWebRequestTransfer"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.HttpMessageTransfer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.HttpMessageTransfer"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.HttpMessageTransfer.SendMessages(FM.LiveSwitch.Signalling.MessageRequestArgs)">
            <summary>
            Sends a request synchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <returns>The response parameters.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.HttpMessageTransfer.SendMessagesAsync(FM.LiveSwitch.Signalling.MessageRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.MessageResponseArgs})">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <param name="callback">The callback to execute with the resulting response.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.HttpMessageTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.InputArgs">
            <summary>
            Base input arguments for signalling client methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.InputArgs.RequestUrl">
            <summary>
            Gets or sets the absolute URL of the signalling request handler, typically
            ending with sync.ashx, to use for this request. Overrides the
            client-level setting. This request will be sent using the
            StreamRequestTransfer class (especially relevant if
            WebSockets are in use).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.InputArgs.RequestTimeout">
            <summary>
            Gets or sets the request timeout to use for this request. This will
            override any client-level request timeout settings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.InputArgs.RequestMaxRetries">
            <summary>
            Gets or sets the maximum number of retries allowed for this request.
            This will override any client-level maximum retry settings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.InputArgs.Synchronous">
            <summary>
            Gets or sets whether the request should be executed asynchronously.
            If <c>true</c>, the request will be executed synchronously.
            If <c>false</c>, the request will be executed asynchronously.
            If <c>null</c>, the request will be executed synchronously or asynchronously,
            depending on the value of Synchronous.
            Defaults to <c>null</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Message">
            <summary>
            The signalling message used for all client requests/responses.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="bayeuxChannel">The Bayeux channel with which to initialize the message.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Id">
            <summary>
            Gets or sets the message ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.ClientId">
            <summary>
            Gets or sets the client ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.StreamId">
            <summary>
            Gets or sets the stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.AuthToken">
            <summary>
            Gets or sets the auth token.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.UserId">
            <summary>
            Gets or sets the user ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.DeviceId">
            <summary>
            Gets or sets the device ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Channel">
            <summary>
            Gets or sets the channel to which the current client is publishing, subscribing, or unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Message.Channels"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Channels">
            <summary>
            Gets or sets the channels to which the current client is subscribing or unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Message.Channel"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Tag">
            <summary>
            Gets or sets the tag associated with the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Presence">
            <summary>
            Gets or sets whether this message includes presence-related data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Record">
            <summary>
            Gets or sets the record to which the current client is binding or unbinding.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Message.Records"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Records">
            <summary>
            Gets or sets the records to which the current client is binding or unbinding.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Message.Record"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.IsPrivate">
            <summary>
            Gets or sets whether the records associated with the request are private.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Key">
            <summary>
            Gets or sets the record key to which the current client is binding or unbinding.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Message.Keys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Keys">
            <summary>
            Gets or sets the record keys to which the current client is binding or unbinding.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Message.Key"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.DisableBinary">
            <summary>
            Gets or sets whether binary is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Acknowledgement">
            <summary>
            Gets or sets the acknowledgement flag, used internally for stream requests following message delivery.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.ServerActions">
            <summary>
            Gets or sets the server actions, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.ReturnData">
            <summary>
            Gets or sets whether data should be included in the server response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Type">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.BayeuxChannel">
            <summary>
            Gets or sets the Bayeux message channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Advice">
            <summary>
            Gets or sets details on how the client should reconnect, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.ConnectionType">
            <summary>
            Gets or sets the type of connection the client is using, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.SupportedConnectionTypes">
            <summary>
            Gets or sets the connection types supported by an endpoint, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.MinimumVersion">
            <summary>
            Gets or sets the minimum supported server version, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Version">
            <summary>
            Gets or sets the current server version, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.ServerTimeout">
            <summary>
            Gets or sets the server timeout, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.RemoteClient">
            <summary>
            Gets or sets the publishing client details, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.SubscribedClients">
            <summary>
            Gets or sets the subscribed client details, used internally.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsBindingTo(System.String)">
            <summary>
            Determines whether or not the current message represents a bind
            request/response for a particular key.
            </summary>
            <param name="key">The key to test.</param>
            <returns><c>true</c> if the message represents a bind request/response
            for the specified key; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsUnbindingFrom(System.String)">
            <summary>
            Determines whether or not the current message represents an unbind
            request/response for a particular key.
            </summary>
            <param name="key">The key to test.</param>
            <returns><c>true</c> if the message represents an unbind request/response
            for the specified key; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsSubscribingTo(System.String)">
            <summary>
            Determines whether or not the current message represents a subscribe
            request/response for a particular channel.
            </summary>
            <param name="channel">The channel to test.</param>
            <returns><c>true</c> if the message represents a subscribe request/response
            for the specified channel; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsUnsubscribingFrom(System.String)">
            <summary>
            Determines whether or not the current message represents an unsubscribe
            request/response for a particular channel.
            </summary>
            <param name="channel">The channel to test.</param>
            <returns><c>true</c> if the message represents an unsubscribe request/response
            for the specified channel; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsConnect">
            <summary>
            Detects whether this is a connect request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsDisconnect">
            <summary>
            Detects whether this is a disconnect request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsBind">
            <summary>
            Detects whether this is a bind request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsUnbind">
            <summary>
            Detects whether this is a bind request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsSubscribe">
            <summary>
            Detects whether this is a subscribe request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsUnsubscribe">
            <summary>
            Detects whether this is an unsubscribe request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsService">
            <summary>
            Detects whether this is a service request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsPublish">
            <summary>
            Detects whether this is a publish request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsStream">
            <summary>
            Detects whether this is a stream request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.ToJsonNoData(System.Byte[]@,System.String@)">
            <summary>
            Serializes the message to JSON (skipping the data field).
            </summary>
            <param name="dataBytes">The data bytes.</param>
            <param name="dataJson">The data JSON.</param>
            <returns>
            The message in JSON-serialized format.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.ToJson">
            <summary>
            Serializes the message to JSON.
            </summary>
            <returns>The message in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.ToJson(FM.LiveSwitch.Signalling.Message)">
            <summary>
            Serializes a message to JSON.
            </summary>
            <param name="message">A message to serialize.</param>
            <returns>A JSON-serialized message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.FromJson(System.String)">
            <summary>
            Deserializes a message from JSON.
            </summary>
            <param name="messageJson">A JSON string to deserialize.</param>
            <returns>A deserialized message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.ToJsonArray(FM.LiveSwitch.Signalling.Message[])">
            <summary>
            Serializes a list of messages to JSON.
            </summary>
            <param name="messages">A list of messages to serialize.</param>
            <returns>A JSON-serialized array of messages.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.FromJsonArray(System.String)">
            <summary>
            Deserializes a list of messages from JSON.
            </summary>
            <param name="messagesJson">A JSON string to deserialize.</param>
            <returns>A deserialized list of messages.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.ToBinary">
            <summary>
            Serializes the message to binary.
            </summary>
            <returns>The message in binary-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.ToBinary(FM.LiveSwitch.Signalling.Message)">
            <summary>
            Serializes a message to binary.
            </summary>
            <param name="message">A message to serialize.</param>
            <returns>A binary-serialized message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.FromBinary(System.Byte[])">
            <summary>
            Deserializes a message from binary.
            </summary>
            <param name="bytes">A byte array to deserialize.</param>
            <returns>A deserialized message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.FromBinary(System.Byte[],System.Int32)">
            <summary>
            Deserializes a message from binary.
            </summary>
            <param name="bytes">A byte array to deserialize.</param>
            <param name="offset">The offset into the array.</param>
            <returns>A deserialized message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.ToBinaryMultiple(FM.LiveSwitch.Signalling.Message[])">
            <summary>
            Serializes a list of messages to binary.
            </summary>
            <param name="messages">A list of messages to serialize.</param>
            <returns>A binary-serialized array of messages.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.FromBinaryMultiple(System.Byte[])">
            <summary>
            Deserializes a list of messages from binary.
            </summary>
            <param name="bytes">A byte array to deserialize.</param>
            <returns>A deserialized list of messages.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageBase">
            <summary>
            Base class for signalling client/publisher messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageBase.Validate">
            <summary>
            Gets or sets whether to skip validation while deserializing, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageBase.Successful">
            <summary>
            Gets or sets the flag that indicates whether the request should be
            processed. If the message represents a response, this indicates whether the
            processing was successful. If set to <c>false</c>, the <see cref="P:FM.LiveSwitch.Signalling.MessageBase.Error" />
            property should be set to a friendly error message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageBase.Error">
            <summary>
            Gets or sets the friendly error message if <see cref="P:FM.LiveSwitch.Signalling.MessageBase.Successful" /> is
            <c>false</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageBase.Timestamp">
            <summary>
            Gets or sets the date/time the message was processed on the server (in UTC/GMT).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageBase.DataJson">
            <summary>
            Gets or sets the data payload
            in JSON format. (Overrides <see cref="P:FM.LiveSwitch.Signalling.MessageBase.DataBytes"/>.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageBase.DataBytes">
            <summary>
            Gets or sets the data payload
            in binary format. (Overrides <see cref="P:FM.LiveSwitch.Signalling.MessageBase.DataJson"/>.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageBase.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.MessageBase"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageBase.SerializeTimestamp(System.Nullable{System.DateTime})">
            <summary>
            Serializes a timestamp (yyyy-MM-ddTHH:mm:ss.ff).
            </summary>
            <param name="timestamp">The timestamp.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageBase.DeserializeTimestamp(System.String)">
            <summary>
            Deserializes a timestamp (yyyy-MM-ddTHH:mm:ss.ff).
            </summary>
            <param name="timestampJson">The timestamp json.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageRequestArgs">
            <summary>
            Arguments for sending a message request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.Sender">
            <summary>
            Gets or sets the sender of the content, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.Messages">
            <summary>
            Gets or sets the messages to transfer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.Url">
            <summary>
            Gets or sets the target URL for the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.Headers">
            <summary>
            Gets or sets the headers for the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.Timeout">
            <summary>
            Gets or sets the number of milliseconds to wait before timing out the transfer.
            Defaults to 15000 (15 seconds).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.MaxRetries">
            <summary>
            Gets or sets the maximum number of retries allowed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.OnRequestCreated">
            <summary>
            Gets or sets the callback to invoke whenever a new request is created
            and about to be transferred to the server. This is a good place to read
            or modify outgoing messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.OnResponseReceived">
            <summary>
            Gets or sets the callback to invoke whenever a new response is received
            and about to be processed by the client. This is a good place to read
            or modify incoming messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.OnHttpRequestCreated">
            <summary>
            Gets or sets the callback to invoke whenever an underlying HTTP request
            has been created and is about to be transferred to the server. This is a
            good place to add headers/cookies. For WebSocket streams, this will fire
            only once for the initial HTTP-based handshake.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.OnHttpResponseReceived">
            <summary>
            Gets or sets the callback to invoke whenever an underlying HTTP response
            has been received and is about to be processed by the client. This is a
            good place to read headers/cookies. For WebSocket streams, this will fire
            only once for the initial HTTP-based handshake.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.IsBinary">
            <summary>
            Gets whether or not each message in the batch is in binary format and can
            be tranferred as such.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageRequestArgs.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.MessageRequestArgs"/> class
            with default values.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageRequestCreatedArgs">
            <summary>
            Arguments passed into callbacks when a message request is created.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestCreatedArgs.Sender">
            <summary>
            Gets or sets the sender of the request, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestCreatedArgs.Requests">
            <summary>
            Gets or sets the outgoing messages about to be sent to the server.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageResponseArgs">
            <summary>
            Arguments for receiving a message response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.Messages">
            <summary>
            Gets or sets the messages read from the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.Headers">
            <summary>
            Gets or sets the headers for the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.StatusCode">
            <summary>
            Gets or sets the status code received while completing the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.TextContent">
            <summary>
            Gets or sets the text content received while completing the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.BinaryContent">
            <summary>
            Gets or sets the binary content received while completing the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.Exception">
            <summary>
            Gets or sets the exception generated while completing the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.Retries">
            <summary>
            Gets or sets the number of retries that were required.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.RequestArgs">
            <summary>
            Gets or sets the original <see cref="T:FM.LiveSwitch.Signalling.MessageRequestArgs" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageResponseArgs.#ctor(FM.LiveSwitch.Signalling.MessageRequestArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.MessageResponseArgs"/> class.
            </summary>
            <param name="requestArgs">The request arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageResponseReceivedArgs">
            <summary>
            Arguments passed into callbacks when a message response is created.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseReceivedArgs.Sender">
            <summary>
            Gets or sets the sender of the request, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseReceivedArgs.Responses">
            <summary>
            Gets or sets the incoming messages about to be processed by the client.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageTransfer">
            <summary>
            Base class that defines methods for transferring messages over HTTP.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransfer.Send(FM.LiveSwitch.Signalling.MessageRequestArgs)">
            <summary>
            Sends messages synchronously.
            </summary>
            <param name="requestArgs">The message parameters.</param>
            <returns>The resulting response.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransfer.SendAsync(FM.LiveSwitch.Signalling.MessageRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.MessageResponseArgs})">
            <summary>
            Sends messages asynchronously.
            </summary>
            <param name="requestArgs">The message parameters.</param>
            <param name="callback">The callback to execute with the resulting response.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransfer.SendMessages(FM.LiveSwitch.Signalling.MessageRequestArgs)">
            <summary>
            Sends a request synchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <returns>The response parameters.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransfer.SendMessagesAsync(FM.LiveSwitch.Signalling.MessageRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.MessageResponseArgs})">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <param name="callback">The callback to execute with the response parameters.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransfer.MessageRequestArgsToHttpRequestArgs(FM.LiveSwitch.Signalling.MessageRequestArgs)">
            <summary>
            Converts a <see cref="T:FM.LiveSwitch.Signalling.MessageRequestArgs"/> to an <see cref="T:FM.LiveSwitch.HttpRequestArgs"/>.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransfer.HttpResponseArgsToMessageResponseArgs(FM.LiveSwitch.HttpResponseArgs)">
            <summary>
            Converts an <see cref="T:FM.LiveSwitch.HttpResponseArgs"/> to a <see cref="T:FM.LiveSwitch.Signalling.MessageRequestArgs"/>.
            </summary>
            <param name="httpResponseArgs">The HTTP response arguments.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageTransferFactory">
            <summary>
            Creates implementations of <see cref="T:FM.LiveSwitch.Signalling.MessageTransfer"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageTransferFactory.CreateHttpMessageTransfer">
            <summary>
            Gets or sets the callback that creates an HTTP-based message transfer class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransferFactory.GetHttpMessageTransfer">
            <summary>
            Gets an instance of the HTTP-based message transfer class.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageTransferFactory.CreateWebSocketMessageTransfer">
            <summary>
            Gets or sets the callback that creates a WebSocket-based message transfer class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransferFactory.GetWebSocketMessageTransfer(System.String)">
            <summary>
            Gets an instance of the WebSocket-based message transfer class.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageType">
            <summary>
            Possible message types for messages.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Connect">
            <summary>
            Message is a connect request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Disconnect">
            <summary>
            Message is a disconnect request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Bind">
            <summary>
            Messages is a bind request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Unbind">
            <summary>
            Messages is an unbind request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Subscribe">
            <summary>
            Message is a subscribe request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Unsubscribe">
            <summary>
            Message is an unsubscribe request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Publish">
            <summary>
            Message is a publish request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Service">
            <summary>
            Message is a service request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Stream">
            <summary>
            Message is a stream request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Unknown">
            <summary>
            Message is an unknown request/response.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MetaChannels">
            <summary>
            Contains the reserved Bayeux meta-channels and methods to assist in detecting them.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.MetaPrefix">
            <summary>
            Gets the reserved prefix for Bayeux meta-channels.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.ServicePrefix">
            <summary>
            Gets the reserved prefix for Bayeux service-channels.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.Handshake">
            <summary>
            Gets the reserved channel for handshake requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.Connect">
            <summary>
            Gets the reserved channel for connect requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.Disconnect">
            <summary>
            Gets the reserved channel for disconnect requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.Bind">
            <summary>
            Gets the reserved channel for bind requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.Unbind">
            <summary>
            Gets the reserved channel for unbind requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.Subscribe">
            <summary>
            Gets the reserved channel for subscribe requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.Unsubscribe">
            <summary>
            Gets the reserved channel for unsubscribe requests/responses.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MetaChannels.IsReservedChannel(System.String)">
            <summary>
            Determines whether the specified channel name is a reserved Bayeux channel.
            </summary>
            <param name="channel">The channel name to check.</param>
            <returns>
            	<c>true</c> if the specified channel name is reserved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MetaChannels.IsMetaChannel(System.String)">
            <summary>
            Determines whether the specified channel name is a reserved Bayeux /meta channel.
            </summary>
            <param name="channel">The channel name to check.</param>
            <returns>
            	<c>true</c> if the specified channel name is a reserved Bayeux /meta channel; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MetaChannels.IsServiceChannel(System.String)">
            <summary>
            Determines whether the specified channel name is a reserved Bayeux /service channel.
            </summary>
            <param name="channel">The channel name to check.</param>
            <returns>
            	<c>true</c> if the specified channel name is a reserved Bayeux /service channel; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MetaChannels.ConvertChannelToServiced(System.String)">
            <summary>
            Converts a channel into its serviced equivalent.
            </summary>
            <param name="channel">The channel to convert.</param>
            <returns>The channel with the service prefix.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MetaChannels.ConvertChannelFromServiced(System.String)">
            <summary>
            Converts a serviced channel into its original form.
            </summary>
            <param name="channel">The channel to convert.</param>
            <returns>The channel without the service prefix.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MetaChannels.GetMessageType(System.String)">
            <summary>
            Gets the type of the message.
            </summary>
            <param name="bayeuxChannel">The bayeux channel.</param>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.OutputArgs">
            <summary>
            Base output arguments for signalling <see cref="P:FM.LiveSwitch.Signalling.OutputArgs.Client" /> methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.OutputArgs.Timestamp">
            <summary>
            Gets or sets the date/time the message was processed on the server (in UTC/GMT).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.OutputArgs.Client">
            <summary>
            Gets or sets the active signalling client who made the request.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PresenceNotification">
            <summary>
            A presence notification.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PresenceNotification.Channel">
            <summary>
            Gets or sets the channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PresenceNotification.RemoteClient">
            <summary>
            Gets or sets the channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PresenceNotification.Type">
            <summary>
            Gets or sets the presence type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PresenceNotification.ToJson">
            <summary>
            Serializes to JSON.
            </summary>
            <returns>A JSON value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PresenceNotification.ToJson(FM.LiveSwitch.Signalling.PresenceNotification)">
            <summary>
            Serializes to JSON.
            </summary>
            <param name="presenceNotification">The presence notification.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PresenceNotification.FromJson(System.String)">
            <summary>
            Deserializes from JSON.
            </summary>
            <param name="presenceNotificationJson">The presence notification JSON.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PresenceType">
            <summary>
            Types of presence notifications.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.PresenceType.Subscribe">
            <summary>
            Indicates that a client subscribed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.PresenceType.Unsubscribe">
            <summary>
            Indicates that a client unsubscribed.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Publication">
            <summary>
            The signalling publication used for direct publishing.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.#ctor">
            <summary>
            Creates a new publication.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.#ctor(System.String)">
            <summary>
            Creates a new publication with a channel.
            </summary>
            <param name="channel">The channel to target.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.#ctor(System.String,System.String)">
            <summary>
            Creates a new publication with a channel and JSON data.
            </summary>
            <param name="channel">The channel to target.</param>
            <param name="dataJson">The data to send (in JSON format).</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a new publication with a channel, JSON data, and binary data.
            </summary>
            <param name="channel">The channel to target.</param>
            <param name="dataBytes">The data to send (in binary format).</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new publication with a channel and JSON data.
            </summary>
            <param name="channel">The channel to target.</param>
            <param name="dataJson">The data to send (in JSON format).</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Creates a new publication with a channel, JSON data, and binary data.
            </summary>
            <param name="channel">The channel to target.</param>
            <param name="dataBytes">The data to send (in binary format).</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Publication.Channel">
            <summary>
            Gets or sets the channel the publisher is targeting.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Publication.Tag">
            <summary>
            Gets or sets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Publication.ReturnData">
            <summary>
            Gets or sets whether the data payload should be included in the server response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Publication.Presence">
            <summary>
            Gets or sets whether this message includes presence-related data.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.ToJson">
            <summary>
            Serializes the publication to JSON.
            </summary>
            <returns>The publication in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.ToJson(FM.LiveSwitch.Signalling.Publication)">
            <summary>
            Serializes a publication to JSON.
            </summary>
            <param name="publication">A publication to serialize.</param>
            <returns>A JSON-serialized publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.FromJson(System.String)">
            <summary>
            Deserializes a publication from JSON.
            </summary>
            <param name="publicationJson">A JSON string to deserialize.</param>
            <returns>A deserialized publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.ToJsonArray(FM.LiveSwitch.Signalling.Publication[])">
            <summary>
            Serializes a list of publications to JSON.
            </summary>
            <param name="publications">A list of publications to serialize.</param>
            <returns>A JSON-serialized array of publications.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.FromJsonArray(System.String)">
            <summary>
            Deserializes a list of publications from JSON.
            </summary>
            <param name="publicationsJson">A JSON string to deserialize.</param>
            <returns>A deserialized list of publications.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.ToMessage(FM.LiveSwitch.Signalling.Publication)">
            <summary>
            Converts a Publication to its Message format.
            </summary>
            <param name="publication">The publication.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.FromMessage(FM.LiveSwitch.Signalling.Message)">
            <summary>
            Converts a Publication from its Message format.
            </summary>
            <param name="message">The message.</param>
            <returns>The publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.ToMessages(FM.LiveSwitch.Signalling.Publication[])">
            <summary>
            Converts a set of Publications to their Message formats.
            </summary>
            <param name="publications">The publications.</param>
            <returns>The messages.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.FromMessages(FM.LiveSwitch.Signalling.Message[])">
            <summary>
            Converts a set of Publications from their Message formats.
            </summary>
            <param name="messages">The messages.</param>
            <returns>The publications.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublishArgs">
            <summary>
            Arguments for client publish requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the request fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke if the request succeeds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublishArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublishArgs"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublishArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublishArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublishArgs.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublishArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublishArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublishArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublishArgs.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublishArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.Channel">
            <summary>
            Gets or sets the channel to which the data should be sent.
            Must start with a forward slash (/).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.DataJson">
            <summary>
            Gets or sets the data to send in JSON format.
            (Overrides <see cref="P:FM.LiveSwitch.Signalling.PublishArgs.DataBytes"/>.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.DataBytes">
            <summary>
            Gets or sets the data to send in binary format.
            (Overrides <see cref="P:FM.LiveSwitch.Signalling.PublishArgs.DataJson"/>.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.Tag">
            <summary>
            Gets or sets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.ReturnData">
            <summary>
            Gets or sets whether the data payload should be included in the server response.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Publisher">
            <summary>
            <para>
            The signalling publisher, used for publishing data rapidly and efficiently.
            </para>
            </summary>
            <remarks>
            <para>
            When developing real-time applications, it is often most efficient and secure to
            publish data from a server, a web service, or in general, a source that doesn't
            require the ability to subscribe to channels.  The <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> is 
            designed to do just that.
            </para>
            <para>
            A common use case for the <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> is to send out data as it
            arrives from a real-time feed (e.g. stock data, sports scores, news articles, etc.).
            Wherever the feed is located, the <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> can be used to send
            out the data rapidly to any subscribed clients.
            </para>
            <para>
            For security reasons, signalling Server blocks Publisher requests by default. To
            enable direct publication, make sure "allowPublishers" is enabled in web.config.
            </para>
            <para>
            The publisher always runs synchronously.
            </para>
            <example>
            <para>
            Here's a simple example of how to create a publisher in C# and publish some data.
            </para>
            <code>
            using System;
            using System.Runtime.Serialization;
            using FM;
            using FM.LiveSwitch.Signalling;
            
            namespace Sample
            {
                class Program
                {
                    [DataContract]
                    private class Payload
                    {
                        [DataMember(Name = "message")]
                        public string Message { get; set; }
                        
                        public Payload(string message)
                        {
                            Message = message;
                        }
                    }
            
                    static void Main(string[] args)
                    {
                        var publisher = new Publisher("http://localhost/sync.ashx");
                        
                        // publish
                        var channel = "/test";
                        var payloadJson = Json.Serialize(new Payload("Hello, this is .NET Publisher."));
                        var p = publisher.Publish(channel, payloadJson);
                        if (p.Successful)
                        {
                            Console.WriteLine("Published.");
                        }
                        else
                        {
                            Console.WriteLine("Could not publish.");
                            Console.WriteLine(p.Error);
                        }
                    }
                }
            }
            </code>
            </example>
            <para>
            There are multiple overloads for the "Publish" method. For batch
            publications, use the overloads that take a collection of
            <see cref="T:FM.LiveSwitch.Signalling.Publication">Publications</see>. They will be automatically batched and
            delivered in a single round-trip.
            </para>
            </remarks>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Publisher"/> class.
            </summary>
            <param name="requestUrl">The absolute URL of the signalling server request handler.</param>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Publisher.OnPublishRequest">
            <summary>
            Raised before a <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> publish request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The publisher that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.PublisherPublishRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Publisher.OnPublishResponse">
            <summary>
            Raised after a <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> publish response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The publisher that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.PublisherPublishResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Publisher.OnServiceRequest">
            <summary>
            Raised before a <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> service request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The publisher that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.PublisherServiceRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Publisher.OnServiceResponse">
            <summary>
            Raised after a <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> service response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The publisher that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.PublisherServiceResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Publish(System.String,System.String)">
            <summary>
            Sends a publication synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            <see cref="T:FM.LiveSwitch.Signalling.Publication" /> it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send (in JSON format).</param>
            <returns>The generated publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Publish(System.String,System.Byte[])">
            <summary>
            Sends a publication synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            <see cref="T:FM.LiveSwitch.Signalling.Publication" /> it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send (in binary format).</param>
            <returns>The generated publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Publish(System.String,System.String,System.String)">
            <summary>
            Sends a publication synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            <see cref="T:FM.LiveSwitch.Signalling.Publication" /> it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send (in JSON format).</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            <returns>The generated publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Publish(System.String,System.Byte[],System.String)">
            <summary>
            Sends a publication synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            <see cref="T:FM.LiveSwitch.Signalling.Publication" /> it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send (in binary format).</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            <returns>The generated publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Publish(FM.LiveSwitch.Signalling.Publication)">
            <summary>
            Sends a publication synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            <see cref="T:FM.LiveSwitch.Signalling.Publication" /> it sends.
            </remarks>
            <param name="publication">The publication to send.</param>
            <returns>The completed publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.PublishMany(FM.LiveSwitch.Signalling.Publication[])">
            <summary>
            Sends an array of publications synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            <see cref="T:FM.LiveSwitch.Signalling.Publication">Publications</see> it sends.
            <example>
            <code>
            var publications = new[]
            {
                new Publication
                {
                    Channel = "/channel1",
                    DataJson = "{\"text\":\"Hello, channel #1!\"}"
                },
                new Publication
                {
                    Channel = "/channel2",
                    DataJson = "{\"text\":\"Hello, channel #2!\"}"
                }
            };
            try
            {
                publications = publisher.PublishMany(publications);
            }
            catch (Exception ex) { ... }
            
            foreach (var publication in publications)
            {
                if (publication.Successful)
                {
                    Console.WriteLine("Sent " + publication.DataJson + " to " + publication.Channel + ".");
                }
                else
                {
                    Console.WriteLine("Could not publish. " + publication.Error);
                }
            }
            </code>
            </example>
            </remarks>
            <param name="publications">The publications to send.</param>
            <returns>The completed publications.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Service(System.String,System.String)">
            <summary>
            Services a message synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            message it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be serviced.</param>
            <param name="dataJson">The data to send (in JSON format).</param>
            <returns>The generated message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Service(System.String,System.Byte[])">
            <summary>
            Services a message synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            message it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be serviced.</param>
            <param name="dataBytes">The data to send (in binary format).</param>
            <returns>The generated message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Service(System.String,System.String,System.String)">
            <summary>
            Services a message synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            message it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be serviced.</param>
            <param name="dataJson">The data to send (in JSON format).</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            <returns>The generated message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Service(System.String,System.Byte[],System.String)">
            <summary>
            Services a message synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            message it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be serviced.</param>
            <param name="dataBytes">The data to send (in binary format).</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            <returns>The generated message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Service(FM.LiveSwitch.Signalling.Message)">
            <summary>
            Services a message synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            message it sends.
            </remarks>
            <param name="message">The message to send.</param>
            <returns>The completed message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.ServiceMany(FM.LiveSwitch.Signalling.Message[])">
            <summary>
            Services an array of messages synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            messages it sends.
            <example>
            <code>
            var messages = new[]
            {
                new Message
                {
                    Channel = "/channel1",
                    DataJson = "{\"text\":\"Hello, channel #1!\"}"
                },
                new Message
                {
                    Channel = "/channel2",
                    DataJson = "{\"text\":\"Hello, channel #2!\"}"
                }
            };
            try
            {
                messages = publisher.ServiceMany(messages);
            }
            catch (Exception ex) { ... }
            
            foreach (var message in messages)
            {
                if (message.Successful)
                {
                    Console.WriteLine("Serviced " + message.DataJson + " to " + message.Channel + ".");
                }
                else
                {
                    Console.WriteLine("Could not service. " + message.Error);
                }
            }
            </code>
            </example>
            </remarks>
            <param name="messages">The messages to send.</param>
            <returns>The completed messages.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherArgs">
            <summary>
            Base arguments for <see cref="P:FM.LiveSwitch.Signalling.PublisherArgs.Publisher" />-triggered events.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherArgs.Publisher">
            <summary>
            Gets or sets the <see cref="P:FM.LiveSwitch.Signalling.PublisherArgs.Publisher" /> triggering the event.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherPublishRequestArgs">
            <summary>
            Arguments for <see cref="E:FM.LiveSwitch.Signalling.Publisher.OnPublishRequest" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherPublishRequestArgs.#ctor(FM.LiveSwitch.Signalling.Publication[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublisherPublishRequestArgs"/> class.
            </summary>
            <param name="requests">The requests.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherPublishResponseArgs">
            <summary>
            Arguments for <see cref="E:FM.LiveSwitch.Signalling.Publisher.OnPublishResponse" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherPublishResponseArgs.#ctor(FM.LiveSwitch.Signalling.Publication[],FM.LiveSwitch.Signalling.Publication[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublisherPublishResponseArgs" /> class.
            </summary>
            <param name="requests">The requests.</param>
            <param name="responses">The responses.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherQueue">
            <summary>
            A thread-safe publisher queue that ensures synchronous
            delivery of publications from anywhere in your application
            while optimizing network resource consumption.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherQueue.Publisher">
            <summary>
            Gets the <see cref="P:FM.LiveSwitch.Signalling.PublisherQueue.Publisher"/> used by the queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherQueue.MaxBatchSize">
            <summary>
            Gets or sets the maximum number of publications that
            will be transferred to a server in one HTTP request.
            A MaxBatchSize of 0 or less will remove the maximum
            limit, and all queued publications will be sent every
            time. Defaults to 1000.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.PublisherQueue.Published">
            <summary>
            Raised immediately after a Publish call has been made.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.PublisherQueue.Exception">
            <summary>
            Raised when an exception is thrown while publishing.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherQueue.#ctor(FM.LiveSwitch.Signalling.Publisher)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublisherQueue"/> class.
            </summary>
            <param name="publisher">The publisher to use for sending messages to the signalling server.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherQueue.AddPublication(FM.LiveSwitch.Signalling.Publication)">
            <summary>
            Adds a publication to the queue.
            </summary>
            <param name="publication">The publication to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherQueue.Start">
            <summary>
            Starts the queue's internal thread.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherQueue.Stop">
            <summary>
            Stops the queue's internal thread.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherRequestArgs">
            <summary>
            Base arguments for <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> events that occur
            before a request is sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherRequestArgs.Cancel">
            <summary>
            Gets or sets whether or not to cancel the request.
            If set to <c>true</c>, the request will not be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherRequestArgsGeneric`1">
            <summary>
            Generic base arguments for <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> events that occur
            before a request is sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherRequestArgsGeneric`1.Requests">
            <summary>
            Gets or sets the requests being sent to the server.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherRequestArgsGeneric`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublisherRequestArgsGeneric`1"/> class.
            </summary>
            <param name="requests">The requests.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherResponse">
            <summary>
            The internal representation of data received in response to a publisher request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherResponse.Message">
            <summary>
            Gets or sets the first response received from the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherResponse.Messages">
            <summary>
            Gets or sets the responses received from the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherResponse.Exception">
            <summary>
            Gets or sets the exception generated by the request.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherResponseArgs">
            <summary>
            Base arguments for <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> events that occur
            after a response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherResponseArgs.Exception">
            <summary>
            Gets or sets the exception generated while completing the request, if any.
            Will be <c>null</c> if no exception was generated.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherResponseArgsGeneric`1">
            <summary>
            Generic base arguments for <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> events that occur
            after a response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherResponseArgsGeneric`1.Requests">
            <summary>
            Gets or sets the requests sent to the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherResponseArgsGeneric`1.Responses">
            <summary>
            Gets or sets the responses received from the server.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherResponseArgsGeneric`1.#ctor(`0[],`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublisherResponseArgsGeneric`1" /> class.
            </summary>
            <param name="requests">The requests.</param>
            <param name="responses">The responses.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherServiceRequestArgs">
            <summary>
            Arguments for <see cref="E:FM.LiveSwitch.Signalling.Publisher.OnServiceRequest" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherServiceRequestArgs.#ctor(FM.LiveSwitch.Signalling.Message[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublisherServiceRequestArgs"/> class.
            </summary>
            <param name="requests">The requests.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherServiceResponseArgs">
            <summary>
            Arguments for <see cref="E:FM.LiveSwitch.Signalling.Publisher.OnServiceResponse" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherServiceResponseArgs.#ctor(FM.LiveSwitch.Signalling.Message[],FM.LiveSwitch.Signalling.Message[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublisherServiceResponseArgs" /> class.
            </summary>
            <param name="requests">The requests.</param>
            <param name="responses">The responses.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublishFailureArgs">
            <summary>
            Arguments for publish failure callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishFailureArgs.Channel">
            <summary>
            Gets the channel to which the data failed to be sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishFailureArgs.DataJson">
            <summary>
            Gets the data that failed to be sent in JSON format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishFailureArgs.DataBytes">
            <summary>
            Gets the data that failed to be sent in binary format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishFailureArgs.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishFailureArgs.Tag">
            <summary>
            Gets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublishFailureArgs.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublishFailureArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data failed to be sent.</param>
            <param name="dataJson">The data that failed to be sent in JSON format.</param>
            <param name="dataBytes">The data that failed to be sent in binary format.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublishSuccessArgs">
            <summary>
            Arguments for publish success callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishSuccessArgs.Channel">
            <summary>
            Gets the channel to which the data was sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishSuccessArgs.DataJson">
            <summary>
            Gets the data that was sent in JSON format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishSuccessArgs.DataBytes">
            <summary>
            Gets the data that was sent in binary format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishSuccessArgs.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishSuccessArgs.Tag">
            <summary>
            Gets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublishSuccessArgs.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublishSuccessArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data was sent.</param>
            <param name="dataJson">The data that was sent in JSON format.</param>
            <param name="dataBytes">The data that was sent in binary format.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ReceiveArgs">
            <summary>
            Arguments for <see cref="P:FM.LiveSwitch.Signalling.SubscribeArgs.OnReceive" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ReceiveArgs.#ctor(System.String,System.Byte[],FM.LiveSwitch.Signalling.ConnectionType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ReceiveArgs" /> class.
            </summary>
            <param name="dataJson">The data in JSON format.</param>
            <param name="dataBytes">The data in binary format.</param>
            <param name="connectionType">The current connection type.</param>
            <param name="reconnectAfter">The amount of time in milliseconds to pause before reconnecting to the server.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ReceiveArgs.DataJson">
            <summary>
            Gets the data that was sent in JSON format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ReceiveArgs.DataBytes">
            <summary>
            Gets the data that was sent in binary format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ReceiveArgs.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ReceiveArgs.Tag">
            <summary>
            Gets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ReceiveArgs.ConnectionType">
            <summary>
            Gets the current connection type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ReceiveArgs.ReconnectAfter">
            <summary>
            Gets or sets the amount of time in milliseconds to pause
            before reconnecting to the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ReceiveArgs.RemoteClient">
            <summary>
            Gets or sets details about the remote client.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Reconnect">
            <summary>
            Allowed reconnect advice values for <see cref="T:FM.LiveSwitch.Signalling.Message"> Messages</see>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Reconnect.Retry">
            <summary>
            Indicates that the client should retry its last request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Reconnect.Handshake">
            <summary>
            Indicates that the client should attempt to handshake.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Reconnect.None">
            <summary>
            Indicates that the client should not attempt to reconnect.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Reconnect.NotSet">
            <summary>
            Indicates that the value was not set.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Record">
            <summary>
            A key-value record for binding to a client.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Record.Validate">
            <summary>
            Gets or sets whether to skip validation while deserializing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Record.Key">
            <summary>
            Gets or sets the key used to locate the value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Record.ValueJson">
            <summary>
            Gets or sets the record value. This must be valid JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Record"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Record"/> class.
            </summary>
            <param name="key">The key used to locate the value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Record"/> class.
            </summary>
            <param name="key">The key used to locate the value.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.Duplicate">
            <summary>
            Creates a deep clone of this record.
            </summary>
            <returns>A deep clone of this record.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.ToJson">
            <summary>
            Serializes the record to JSON.
            </summary>
            <returns>The record in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.ToJson(FM.LiveSwitch.Signalling.Record)">
            <summary>
            Serializes a record to JSON.
            </summary>
            <param name="record">A record to serialize.</param>
            <returns>A JSON-serialized record.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.FromJson(System.String)">
            <summary>
            Deserializes a record from JSON.
            </summary>
            <param name="recordJson">A JSON string to deserialize.</param>
            <returns>A deserialized record.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.ToJsonArray(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Serializes a list of records to JSON.
            </summary>
            <param name="records">A list of records to serialize.</param>
            <returns>A JSON-serialized array of records.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.FromJsonArray(System.String)">
            <summary>
            Deserializes a list of records from JSON.
            </summary>
            <param name="recordsJson">A JSON string to deserialize.</param>
            <returns>A deserialized list of records.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Records">
            <summary>
            A dictionary of records.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Records"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.#ctor(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Records"/> class.
            </summary>
            <param name="records">The records.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.Clone">
            <summary>
            Creates a deep clone of this records collection.
            </summary>
            <returns>A deep clone of this records collection.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Records.Count">
            <summary>
            Gets the number of records in the collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.Add(FM.LiveSwitch.Signalling.Record)">
            <summary>
            Adds the specified record.
            </summary>
            <param name="record">The record.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.Remove(System.String)">
            <summary>
            Removes the record associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.Clear">
            <summary>
            Removes all records.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key exists in the collection.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.GetKeys">
            <summary>
            Gets the keys in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.GetRecords">
            <summary>
            Gets the records in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.GetRecord(System.String)">
            <summary>
            Gets the a record from the collection.
            </summary>
            <param name="key">The record key.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.GetValueJson(System.String)">
            <summary>
            Gets a JSON value from the collection.
            </summary>
            <param name="key">The record key.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.ToJson">
            <summary>
            Serializes the bindings to JSON.
            </summary>
            <returns>The bindings in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.ToJson(FM.LiveSwitch.Signalling.Records)">
            <summary>
            Serializes a records collection to JSON.
            </summary>
            <param name="records">The records to serialize.</param>
            <returns>The JSON-serialized records.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.FromJson(System.String)">
            <summary>
            Deserializes a records collection from JSON.
            </summary>
            <param name="recordsJson">The records to deserialize.</param>
            <returns>The deserialized records.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.RemoteClient">
            <summary>
            Details about the remote client.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.RemoteClient"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.#ctor(System.String,System.String,System.String,System.String,FM.LiveSwitch.Signalling.Records)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.RemoteClient" /> class.
            </summary>
            <param name="clientId">The remote client's ID.</param>
            <param name="streamId">The remote client's stream ID.</param>
            <param name="userId">The remote client's user ID.</param>
            <param name="deviceId">The remote client's device ID.</param>
            <param name="boundRecords">The remote client's bound records.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.RemoteClient.ClientId">
            <summary>
            Gets or sets the remote client's ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.RemoteClient.StreamId">
            <summary>
            Gets or sets the remote client's stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.RemoteClient.UserId">
            <summary>
            Gets or sets the remote client's user ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.RemoteClient.DeviceId">
            <summary>
            Gets or sets the remote client's device ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.RemoteClient.BoundRecords">
            <summary>
            Gets or sets the remote client's bound records.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.GetBoundValueJson(System.String)">
            <summary>
            Gets the JSON value of a record bound to the remote client.
            </summary>
            <param name="key">The record key.</param>
            <returns>The JSON value of the record, if it exists, or <c>null</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>The JSON-formatted remote client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.ToJson(FM.LiveSwitch.Signalling.RemoteClient)">
            <summary>
            Serializes a remote client to JSON.
            </summary>
            <param name="remoteClient">The remote client to serialize.</param>
            <returns>The JSON-formatted remote client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.FromJson(System.String)">
            <summary>
            Deserializes a JSON-formatted remote client.
            </summary>
            <param name="remoteClientJson">The JSON-formatted remote client to deserialize.</param>
            <returns>The remote client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.ToJsonArray(FM.LiveSwitch.Signalling.RemoteClient[])">
            <summary>
            Serializes an array of remote clients to JSON.
            </summary>
            <param name="remoteClients">The array of remote clients to serialize.</param>
            <returns>The JSON-formatted array of remote clients.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.FromJsonArray(System.String)">
            <summary>
            Deserializes a JSON-formatted array of remote clients.
            </summary>
            <param name="remoteClientsJson">The JSON-formatted array of remote clients to deserialize.</param>
            <returns>The array of remote clients.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Reserved">
            <summary>
            Channels that are reserved for internal use.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Reserved.GetClientChannel(System.String)">
            <summary>
            Gets the client channel for a given client ID.
            </summary>
            <param name="clientId">The client ID.</param>
            <returns>The client channel.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Reserved.GetDeviceChannel(System.String)">
            <summary>
            Gets the device channel for a given device ID.
            </summary>
            <param name="deviceId">The device ID.</param>
            <returns>The device channel.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Reserved.GetUserChannel(System.String)">
            <summary>
            Gets the user channel for a given user ID.
            </summary>
            <param name="userId">The user ID.</param>
            <returns>The user channel.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Reserved.ClientChannelPrefix">
            <summary>
            Gets the default client channel prefix ("/fm/client").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Reserved.DeviceChannelPrefix">
            <summary>
            Gets the default device channel prefix ("/fm/device").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Reserved.UserChannelPrefix">
            <summary>
            Gets the default user channel prefix ("/fm/user").
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServerArgs">
            <summary>
            Base arguments for <see cref="T:FM.LiveSwitch.Signalling.ConnectArgs" /> "OnServer" callbacks.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServerBindArgs">
            <summary>
            Arguments for OnServerBind.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerBindArgs.Record">
            <summary>
            Gets or sets the record to which the client was bound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerBindArgs.Records"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerBindArgs.Records">
            <summary>
            Gets or sets the records to which the client was bound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerBindArgs.Record"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServerSubscribeArgs">
            <summary>
            Arguments for OnServerSubscribe.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerSubscribeArgs.Channel">
            <summary>
            Gets or sets the channel to which the client was subscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerSubscribeArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerSubscribeArgs.Channels">
            <summary>
            Gets or sets the channels to which the client was subscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerSubscribeArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerSubscribeArgs.Tag">
            <summary>
            Gets or sets the tag associated with the subscribe request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerSubscribeArgs.OnReceive">
            <summary>
            Gets or sets the callback to execute when messages are received on the channel(s).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerSubscribeArgs.OnPresence">
            <summary>
            Gets or sets the callback to execute when presence notifications are received on the channel(s).
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServerUnbindArgs">
            <summary>
            Arguments for OnServerUnbind.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerUnbindArgs.Key">
            <summary>
            Gets or sets the record key from which the client was unbound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerUnbindArgs.Keys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerUnbindArgs.Keys">
            <summary>
            Gets or sets the record keys from which the client was unbound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerUnbindArgs.Key"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServerUnsubscribeArgs">
            <summary>
            Arguments for OnServerUnsubscribe.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerUnsubscribeArgs.Channel">
            <summary>
            Gets or sets the channel from which the client was unsubscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerUnsubscribeArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerUnsubscribeArgs.Channels">
            <summary>
            Gets or sets the channels from which the client was unsubscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerUnsubscribeArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerUnsubscribeArgs.Tag">
            <summary>
            Gets or sets the tag associated with the unsubscribe request.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServiceArgs">
            <summary>
            Arguments for client service requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the request fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke if the request succeeds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ServiceArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ServiceArgs"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ServiceArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ServiceArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ServiceArgs.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ServiceArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ServiceArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ServiceArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ServiceArgs.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ServiceArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.Channel">
            <summary>
            Gets or sets the channel to which the data should be sent.
            Must start with a forward slash (/).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.DataJson">
            <summary>
            Gets or sets the data to send in JSON format.
            (Overrides <see cref="P:FM.LiveSwitch.Signalling.ServiceArgs.DataBytes"/>.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.DataBytes">
            <summary>
            Gets or sets the data to send in binary format.
            (Overrides <see cref="P:FM.LiveSwitch.Signalling.ServiceArgs.DataJson"/>.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.Tag">
            <summary>
            Gets or sets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.ReturnData">
            <summary>
            Gets or sets whether the data payload should be included in the server response.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServiceFailureArgs">
            <summary>
            Arguments for service failure callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceFailureArgs.Channel">
            <summary>
            Gets the channel to which the data failed to be sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceFailureArgs.DataJson">
            <summary>
            Gets the data that failed to be sent in JSON format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceFailureArgs.DataBytes">
            <summary>
            Gets the data that failed to be sent in binary format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceFailureArgs.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceFailureArgs.Tag">
            <summary>
            Gets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ServiceFailureArgs.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ServiceFailureArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data failed to be sent.</param>
            <param name="dataJson">The data that failed to be sent in JSON format.</param>
            <param name="dataBytes">The data that failed to be sent in binary format.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceFailureArgs.Source">
            <summary>
            Gets or sets a value indicating the source of the failure.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServiceSuccessArgs">
            <summary>
            Arguments for service success callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceSuccessArgs.Channel">
            <summary>
            Gets the channel to which the data was sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceSuccessArgs.DataJson">
            <summary>
            Gets the data that was sent in JSON format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceSuccessArgs.DataBytes">
            <summary>
            Gets the data that was sent in binary format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceSuccessArgs.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceSuccessArgs.Tag">
            <summary>
            Gets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ServiceSuccessArgs.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ServiceSuccessArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data was sent.</param>
            <param name="dataJson">The data that was sent in JSON format.</param>
            <param name="dataBytes">The data that was sent in binary format.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.SubscribeArgs">
            <summary>
            Arguments for client subscribe requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the request fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke if the request succeeds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to subscribe.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to subscribe.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String[],FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String,System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String[],System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channel.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String[],FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channels.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String,System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channel.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String[],System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channels.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.OnReceive">
            <summary>
            Gets or sets the callback to invoke when data is received on the channel(s).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.OnPresence">
            <summary>
            Gets or sets the callback to invoke when a presence notification is received on the channel(s).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.Channel">
            <summary>
            Gets or sets the channel to which the client should be subscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.Channels">
            <summary>
            Gets or sets the channels to which the client should be subscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.Tag">
            <summary>
            Gets or sets a tag that will uniquely identify this subscription so it
            can be unsubscribed later without affecting other subscriptions with the same channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.BindRecord">
            <summary>
            Gets or sets the record to bind while subscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeArgs.BindRecords"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.BindRecords">
            <summary>
            Gets or sets the records to bind while subscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeArgs.BindRecord"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.BindIsPrivate">
            <summary>
            Gets or sets whether the record(s) to bind while subscribing
            are private to this client (and the
            server) or visible to other clients. Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.SubscribeFailureArgs">
            <summary>
            Arguments for subscribe failure callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.Channel">
            <summary>
            Gets the channel to which the client failed to be subscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.Channels">
            <summary>
            Gets the channels to which the client failed to be subscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.Tag">
            <summary>
            Gets the tag associated with the subscribe request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.BindRecord">
            <summary>
            Gets the record to which the client failed to be bound while subscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.BindRecords"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.BindRecords">
            <summary>
            Gets the records to which the client failed to be bound while subscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.BindRecord"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.BindIsPrivate">
            <summary>
            Gets whether the records are private.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeFailureArgs.#ctor(System.String[],FM.LiveSwitch.Signalling.Record[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeFailureArgs"/> class.
            </summary>
            <param name="channels">The channels to which the client failed to be subscribed.</param>
            <param name="bindRecords">The records to which the client failed to be found while subscribing.</param>
            <param name="bindIsPrivate">Whether the records are private.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.SubscribePresenceArgs">
            <summary>
            Arguments for the subscriber change callback.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribePresenceArgs.#ctor(System.String,FM.LiveSwitch.Signalling.RemoteClient,FM.LiveSwitch.Signalling.PresenceType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,FM.LiveSwitch.Signalling.ConnectionType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribePresenceArgs" /> class.
            </summary>
            <param name="channel">The channel.</param>
            <param name="remoteClient">The remote client.</param>
            <param name="presenceType">The presence type.</param>
            <param name="firstUserSubscribe">Whether this is the first client to subscribe with a given user ID.</param>
            <param name="lastUserUnsubscribe">Whether this is the last client to unsubscribe with a given user ID.</param>
            <param name="firstDeviceSubscribe">Whether this is the first client to subscribe with a given device ID.</param>
            <param name="lastDeviceUnsubscribe">Whether this is the last client to unsubscribe with a given device ID.</param>
            <param name="connectionType">The current connection type.</param>
            <param name="reconnectAfter">The amount of time in milliseconds to pause before reconnecting to the server.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribePresenceArgs.Channel">
            <summary>
            Gets the channel on which the presence change occurred.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribePresenceArgs.RemoteClient">
            <summary>
            Gets the client who triggered the presence notification.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribePresenceArgs.PresenceType">
            <summary>
            Gets the presence type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribePresenceArgs.FirstUserSubscribe">
            <summary>
            Gets whether this is the first client to subscribe
            with a given user ID (user is transitioning from
            offline to online).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribePresenceArgs.LastUserUnsubscribe">
            <summary>
            Gets whether this is the last client to unsubscribe
            with a given user ID (user is transitioning from
            online to offline).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribePresenceArgs.FirstDeviceSubscribe">
            <summary>
            Gets whether this is the first client to subscribe
            with a given device ID (device is transitioning from
            offline to online).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribePresenceArgs.LastDeviceUnsubscribe">
            <summary>
            Gets whether this is the last client to unsubscribe
            with a given device ID (device is transitioning from
            online to offline).
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.SubscribeReceiveArgs">
            <summary>
            Arguments for <see cref="P:FM.LiveSwitch.Signalling.SubscribeArgs.OnReceive" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeReceiveArgs.#ctor(System.String,System.String,System.Byte[],FM.LiveSwitch.Signalling.ConnectionType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeReceiveArgs"/> class.
            </summary>
            <param name="channel">The channel over which data was received.</param>
            <param name="dataJson">The data in JSON format.</param>
            <param name="dataBytes">The data in binary format.</param>
            <param name="connectionType">The current connection type.</param>
            <param name="reconnectAfter">The amount of time in milliseconds to pause before reconnecting to the server.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeReceiveArgs.Channel">
            <summary>
            Gets the channel over which the data was published.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeReceiveArgs.WasSentByMe">
            <summary>
            Gets whether the data was sent by the current client.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeReceiveArgs.RemoteClient">
            <summary>
            Gets or sets details about the client sending the publication.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.SubscribeSuccessArgs">
            <summary>
            Arguments for subscribe success callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.Channel">
            <summary>
            Gets the channel to which the client was subscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.Channels">
            <summary>
            Gets the channels to which the client was subscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.Tag">
            <summary>
            Gets the tag associated with the subscribe request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.BindRecord">
            <summary>
            Gets the record to which the client was bound while subscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.BindRecords"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.BindRecords">
            <summary>
            Gets the records to which the client was bound while subscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.BindRecord"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.BindIsPrivate">
            <summary>
            Gets whether the records are private.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.SubscribedClients">
            <summary>
            Gets the clients currently subscribed to the channel
            if presence was requested.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.SubscribedClientsByChannel">
            <summary>
            Gets the clients currently subscribed to the channels
            if presence was requested.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.#ctor(System.String[],FM.LiveSwitch.Signalling.Record[],System.Boolean,System.Collections.Generic.Dictionary{System.String,FM.LiveSwitch.Signalling.RemoteClient[]})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeSuccessArgs"/> class.
            </summary>
            <param name="channels">The channels to which the client was subscribed.</param>
            <param name="bindRecords">The records to which the client was bound while subscribing.</param>
            <param name="bindIsPrivate">Whether the records are private.</param>
            <param name="subscribedClients">The the clients currently subscribed to the channels if presence was requested.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Subscription">
            <summary>
            A channel/tag identifier for a client subscription.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Subscription.Channel">
            <summary>
            Gets or sets the subscription channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Subscription.Tag">
            <summary>
            Gets or sets the identifier for the subscription.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Subscription"/> class.
            </summary>
            <param name="channel">The subscription channel.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Subscription"/> class.
            </summary>
            <param name="channel">The subscription channel.</param>
            <param name="tag">The identifier for the subscription.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.Duplicate">
            <summary>
            Creates a deep clone of this subscription.
            </summary>
            <returns>A deep clone of this subscription.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.ToJson">
            <summary>
            Serializes the record to JSON.
            </summary>
            <returns>The record in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.ToJson(FM.LiveSwitch.Signalling.Subscription)">
            <summary>
            Serializes a subscription to JSON.
            </summary>
            <param name="subscription">A subscription to serialize.</param>
            <returns>A JSON-serialized subscription.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.FromJson(System.String)">
            <summary>
            Deserializes a subscription from JSON.
            </summary>
            <param name="subscriptionJson">A JSON string to deserialize.</param>
            <returns>A deserialized subscription.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.ToJsonArray(FM.LiveSwitch.Signalling.Subscription[])">
            <summary>
            Serializes a list of subscriptions to JSON.
            </summary>
            <param name="subscriptions">A list of subscriptions to serialize.</param>
            <returns>A JSON-serialized array of subscriptions.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.FromJsonArray(System.String)">
            <summary>
            Deserializes a list of subscriptions from JSON.
            </summary>
            <param name="subscriptionsJson">A JSON string to deserialize.</param>
            <returns>A deserialized list of subscriptions.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.SuccessArgs">
            <summary>
            Base arguments for client "OnSuccess" callbacks.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.UnbindArgs">
            <summary>
            Arguments for client unbind requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the request fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke if the request succeeds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnbindArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnbindArgs"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnbindArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnbindArgs"/> class.
            </summary>
            <param name="key">The key to unbind.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnbindArgs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnbindArgs"/> class.
            </summary>
            <param name="keys">The keys to unbind.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindArgs.Key">
            <summary>
            Gets or sets the record key to unbind.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnbindArgs.Keys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindArgs.Keys">
            <summary>
            Gets or sets the record keys to unbind.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnbindArgs.Key"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.UnbindFailureArgs">
            <summary>
            Arguments for unbind failure callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindFailureArgs.Key">
            <summary>
            Gets the record key from which the client failed to be unbound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnbindFailureArgs.Keys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindFailureArgs.Keys">
            <summary>
            Gets the record keys from which the client failed to be unbound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnbindFailureArgs.Key"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnbindFailureArgs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnbindFailureArgs"/> class.
            </summary>
            <param name="keys">The record keys from which the client failed to be unbound.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.UnbindSuccessArgs">
            <summary>
            Arguments for unbind success callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindSuccessArgs.Key">
            <summary>
            Gets the record key from which the client was unbound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnbindSuccessArgs.Keys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindSuccessArgs.Keys">
            <summary>
            Gets the record keys from which the client was unbound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnbindSuccessArgs.Key"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindSuccessArgs.Forced">
            <summary>
            Gets whether this unbind was forced due to a disconnect.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnbindSuccessArgs.#ctor(System.String[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnbindSuccessArgs"/> class.
            </summary>
            <param name="keys">The record keys from which the client was unbound.</param>
            <param name="forced">Whether this unbind was forced due to a disconnect.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.UnsubscribeArgs">
            <summary>
            Arguments for client unsubscribe requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the request fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke if the request succeeds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnsubscribeArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnsubscribeArgs"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnsubscribeArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnsubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to unsubscribe.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnsubscribeArgs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnsubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to unsubscribe.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnsubscribeArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnsubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to unsubscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnsubscribeArgs.#ctor(System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnsubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to unsubscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.Channel">
            <summary>
            Gets or sets the channel from which the client should be unsubscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.Channels">
            <summary>
            Gets or sets the channels from which the client should be unsubscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.Tag">
            <summary>
            Gets or sets a tag that uniquely identifies a subscription so
            other subscriptions with the same channel are not affected.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.UnbindKey">
            <summary>
            Gets or sets the record key to unbind while unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.UnbindKeys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.UnbindKeys">
            <summary>
            Gets or sets the record keys to unbind while unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.UnbindKey"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs">
            <summary>
            Arguments for unsubscribe failure callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.Channel">
            <summary>
            Gets the channel from which the client failed to be unsubscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.Channels">
            <summary>
            Gets the channels from which the client failed to be unsubscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.Tag">
            <summary>
            Gets the tag associated with the subscribe request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.UnbindKey">
            <summary>
            Gets the record key from which the client failed to be unbound while unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.UnbindKeys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.UnbindKeys">
            <summary>
            Gets the record keys from which the client failed to be unbound while unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.UnbindKey"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.#ctor(System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs"/> class.
            </summary>
            <param name="channels">The channels from which the client failed to be unsubscribed.</param>
            <param name="unbindKeys">The record keys from which the client failed to be unbound while unsubscribing.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs">
            <summary>
            Arguments for unsubscribe success callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.Channel">
            <summary>
            Gets the channel from which the client was unsubscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.Channels">
            <summary>
            Gets the channels from which the client was unsubscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.Tag">
            <summary>
            Gets the tag associated with the subscribe request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.UnbindKey">
            <summary>
            Gets the record key from which the client was unbound while unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.UnbindKeys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.UnbindKeys">
            <summary>
            Gets the record keys from which the client was unbound while unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.UnbindKey"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.Forced">
            <summary>
            Gets whether this unsubscribe was forced due to a disconnect.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.#ctor(System.String[],System.String[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs"/> class.
            </summary>
            <param name="channels">The channels from which the client was unsubscribed.</param>
            <param name="unbindKeys">The record keys from which the client was unbound while unsubscribing.</param>
            <param name="forced">Whether this unsubscribe was forced due to a disconnect.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.WebSocketMessageTransfer">
            <summary>
            Base class that defines methods for transferring messages over HTTP.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.HandshakeTimeout">
            <summary>
            Gets or sets the timeout for the initial handshake.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.StreamTimeout">
            <summary>
            Gets or sets the timeout for the stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.Sender">
            <summary>
            Gets or sets the sender of the messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.OnRequestCreated">
            <summary>
            Gets or sets the callback to invoke when the handshake request is created.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.OnResponseReceived">
            <summary>
            Gets or sets the callback to invoke when the handshake response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.OnOpenSuccess">
            <summary>
            Gets or sets the callback to invoke if the handshake succeeds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.OnOpenFailure">
            <summary>
            Gets or sets the callback to invoke if the handshake fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.OnStreamFailure">
            <summary>
            Gets or sets the callback to invoke if the stream errors out.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.WebSocketMessageTransfer"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.Open(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Opens the socket.
            </summary>
            <param name="headers">The headers to pass in with the initial handshake.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.SendMessages(FM.LiveSwitch.Signalling.MessageRequestArgs)">
            <summary>
            Sends a request synchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <returns>
            The response parameters.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.SendMessagesAsync(FM.LiveSwitch.Signalling.MessageRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.MessageResponseArgs})">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <param name="callback">The callback to execute with the response parameters.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
    </members>
</doc>
